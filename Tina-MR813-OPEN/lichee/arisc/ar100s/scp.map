Archive member included because of file (symbol)

library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                              driver/obj-in.o (ccu_get_sclk_freq)

Allocating common symbols
Common symbol       size              file

little_endian_used  0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
wakeup_source       0x4               service/obj-in.o
pintc_regs          0x4               driver/obj-in.o
ccu_pll_periph1_reg_addr
                    0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
before_crc          0x4               service/obj-in.o
after_crc           0x4               service/obj-in.o
pwatchdog_regs      0x4               driver/obj-in.o
debugger_buffer     0x80              system/obj-in.o
ccu_pll_ddr0_reg_addr
                    0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
isr_table           0x128             driver/obj-in.o
apbs2_notifier_head
                    0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
delay_timer         0x4               driver/obj-in.o
ccu_pll_periph0_reg_addr
                    0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
ccu_pll_c0_cpux_reg_addr
                    0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
ptimerc_regs        0x4               driver/obj-in.o
ccu_reg_addr        0x4               library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

Memory Configuration

Name             Origin             Length             Attributes
vectors          0x00000000         0x00004000
paras            0x00004000         0x000000f0
ram              0x000040f0         0x0000ff10
dram             0x48100000         0x00040000
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD arch/obj-in.o
LOAD driver/obj-in.o
LOAD library/obj-in.o
LOAD service/obj-in.o
LOAD system/obj-in.o

.vectors        0x00000000      0xe08
 *(.vectors)
 .vectors       0x00000000      0xe08 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

dts_paras       0x00004000       0x88
                0x00004000                paras_start_addr = .
 *(dts_paras)
 dts_paras      0x00004000       0x88 system/obj-in.o
                0x00004000                arisc_para
                0x00004088                paras_end_addr = .

.text           0x000040f0     0xe444
 *arch*(.text)
 *driver*(.text)
 .text          0x000040f0     0x343c driver/obj-in.o
                0x000040f0                intc_init
                0x00004148                intc_exit
                0x00004170                intc_enable_interrupt
                0x00004220                intc_disable_interrupt
                0x000042b8                intc_interrupt_is_enabled
                0x0000432c                intc_get_current_interrupt
                0x00004354                intc_set_mask
                0x00004418                intc_set_group_config
                0x0000451c                isr_default
                0x0000454c                interrupt_init
                0x000045a0                interrupt_exit
                0x000045bc                interrupt_enable
                0x000045d4                interrupt_disable
                0x000045ec                interrupt_set_nmi_trigger
                0x00004614                interrupt_set_mask
                0x0000462c                interrupt_set_group_config
                0x00004644                install_isr
                0x00004674                uninstall_isr
                0x000046dc                interrupt_entry
                0x0000471c                interrupt_query_pending
                0x0000479c                interrupt_clear_pending
                0x00004800                interrupt_get_current_intno
                0x00004818                interrupt_get_enabled
                0x00004830                pin_init
                0x00004838                pin_exit
                0x00004840                pin_set_status
                0x00004848                pin_set_multi_sel
                0x000048c0                pin_set_pull
                0x00004938                pin_set_drive
                0x000049b0                pin_write_data
                0x00004a1c                pin_read_data
                0x00004a5c                is_wanted_gpio_int
                0x00004a90                pin_set_int_trigger_mode
                0x00004b1c                timer_hosc_onoff_cb
                0x00004c6c                timer_isr
                0x00004d28                timer_init
                0x00004e2c                timer_exit
                0x00004e84                timer_request
                0x00004f68                timer_release
                0x00004f90                timer_start
                0x00005064                timer_stop
                0x0000510c                time_mdelay
                0x000051c4                cnt64_udelay
                0x00005244                time_udelay
                0x000052dc                time_cdelay
                0x000052f4                uart_init
                0x000053f8                uart_exit
                0x00005470                uart_putc
                0x000054d4                uart_get
                0x0000553c                uart_puts
                0x000055c0                uart_set_baudrate
                0x000056f4                uart_clkchangecb
                0x00005798                uart_get_baudrate
                0x00005984                twi_clkchangecb
                0x000059f0                twi_init
                0x00005b08                twi_exit
                0x00005b10                twi_byte_rw
                0x000061b8                twi_read
                0x00006248                twi_write
                0x000062d8                is_twi_lock
                0x000062f0                twi_send_clk_9pulse
                0x000063d8                twi_get_status
                0x0000641c                twi_standby_init
                0x00006524                twi_standby_exit
                0x00006608                hwmsgbox_init
                0x000066c8                hwmsgbox_exit
                0x000066f8                hwmsgbox_wait_queue_not_full
                0x00006758                hwmsgbox_wait_queue_not_empty
                0x000067c0                hwmsgbox_send_message
                0x00006a3c                hwmsgbox_feedback_message
                0x00006b5c                hwmsgbox_query_message
                0x00006d28                hwmsgbox_super_standby_init
                0x00006d54                hwmsgbox_super_standby_exit
                0x00006f68                watchdog_reset
                0x00006fd0                pmu_shutdown
                0x00007068                pmu_reset
                0x00007108                pmu_charging_reset
                0x0000718c                pmu_set_voltage
                0x000071b4                pmu_get_voltage
                0x000071dc                pmu_set_voltage_state
                0x0000723c                pmu_get_voltage_state
                0x00007264                pmu_query_event
                0x0000726c                pmu_clear_pendings
                0x00007274                pmu_chip_init
                0x0000727c                pmu_reg_write
                0x00007298                pmu_reg_read
                0x000072b4                pmu_reg_write_para
                0x000072e4                pmu_reg_read_para
                0x00007314                nmi_int_handler
                0x00007354                pmu_init
                0x00007394                pmu_exit
                0x0000739c                is_pmu_exist
                0x000073ac                pmu_standby_init
                0x000073dc                pmu_standby_exit
                0x0000740c                watchdog_init
                0x00007488                watchdog_exit
                0x000074b0                watchdog_enable
                0x000074f0                watchdog_disable
 *library*(.text)
 .text          0x0000752c     0x25c0 library/obj-in.o
                0x0000752c                itoa
                0x0000765c                utoa
                0x0000774c                hexdump
                0x000077f4                hstr2int
                0x0000789c                dstr2int
                0x000078e4                strlen
                0x00007904                strnlen
                0x00007934                strcpy
                0x0000795c                strncat
                0x000079d4                strcmp
                0x00007a1c                strchr
                0x00007a50                memcpy
                0x00007b0c                memmove
                0x00007b98                memcmp
                0x00007bd4                memchr
                0x00007c14                memset
                0x00007c3c                sprintf
                0x00007d58                fdt_check_header
                0x00007e6c                fdt_offset_ptr
                0x00007f38                fdt_next_tag
                0x000080b4                _fdt_check_node_offset
                0x0000810c                _fdt_check_prop_offset
                0x00008164                fdt_next_node
                0x00008274                fdt_first_subnode
                0x000082bc                fdt_next_subnode
                0x0000832c                _fdt_find_string
                0x000083b4                fdt_move
                0x000085e0                fdt_string
                0x00008618                fdt_get_mem_rsv
                0x000086c0                fdt_num_mem_rsv
                0x00008720                fdt_subnode_offset_namelen
                0x00008850                fdt_subnode_offset
                0x000088a0                fdt_get_name
                0x00008948                fdt_first_property_offset
                0x0000898c                fdt_next_property_offset
                0x000089d0                fdt_get_property_by_offset
                0x00008a74                fdt_get_property_namelen
                0x00008ba0                fdt_get_property
                0x00008c00                fdt_getprop_namelen
                0x00008c2c                fdt_getprop_by_offset
                0x00008cb8                fdt_getprop
                0x00008d18                fdt_getprop_u32
                0x00008ddc                fdt_get_phandle
                0x00008e90                fdt_get_alias_namelen
                0x00008f0c                fdt_path_offset
                0x0000904c                fdt_get_alias
                0x0000908c                fdt_get_path
                0x00009258                fdt_supernode_atdepth_offset
                0x00009360                fdt_node_depth
                0x000093a4                fdt_parent_offset
                0x00009400                fdt_node_offset_by_prop_value
                0x000094dc                fdt_node_offset_by_phandle
                0x00009578                fdt_stringlist_contains
                0x00009628                fdt_stringlist_count
                0x000096b4                fdt_stringlist_search
                0x00009790                fdt_stringlist_get
                0x00009880                fdt_node_check_compatible
                0x000098e0                fdt_node_offset_by_compatible
                0x00009978                fdt_strerror
                0x000099e8                fdt_address_cells
                0x00009a6c                fdt_size_cells
 *system*(.text)
 .text          0x00009aec      0xc04 system/obj-in.o
                0x00009aec                notifier_init
                0x00009b30                notifier_exit
                0x00009b38                notifier_insert
                0x00009c04                notifier_delete
                0x00009c9c                notifier_notify
                0x00009cf8                message_valid
                0x00009d08                message_manager_init
                0x00009d10                message_manager_exit
                0x00009d18                message_coming_notify
                0x00009f3c                debugger_init
                0x00009f58                debugger_exit
                0x00009f60                debugger_putc
                0x00009f84                debugger_get
                0x00009f9c                debugger_puts
                0x00009fb8                debugger_printf
                0x0000a304                set_debug_level
                0x0000a358                daemon_register_service
                0x0000a378                startup_entry
                0x0000a6cc                arisc_para_init
                0x0000a6e8                set_paras
 *service*(.text)
 .text          0x0000a6f0     0x15c4 service/obj-in.o
                0x0000a6f0                standby_init
                0x0000a730                standby_exit
                0x0000a738                long_jump
                0x0000a754                standby_set_dram_crc_paras
                0x0000a780                standby_dram_crc_enable
                0x0000a790                standby_dram_crc
                0x0000a8d0                default_wakeup_handler
                0x0000a95c                wakeup_timer_init
                0x0000a9a8                wakeup_timer_start
                0x0000a9e4                wakeup_timer_stop
                0x0000aa00                set_wakeup_src
                0x0000ab3c                clear_wakeup_src
                0x0000ac18                is_suspend_lock
                0x0000ac28                cpu_op
                0x0000bb78                sys_op
 .text          0x0000bcb4     0x6880 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                0x0000bcb4                icache_coherent
                0x0000bd70                cpu_init
                0x0000bda4                cpu_disable_int
                0x0000bdcc                cpu_enable_int
                0x0000bddc                exit
                0x0000bdfc                cpu_enter_doze
                0x0000c208                __udivsi3
                0x0000c304                __divsi3
                0x0000c368                __umodsi3
                0x0000c388                __modsi3
                0x0000c3e4                cpu_exception_handler_entry_c
                0x0000c558                start_softtimer
                0x0000c56c                stop_softtimer
                0x0000c58c                add_softtimer
                0x0000c5f0                current_time_tick
                0x0000c604                msec_to_ticks
                0x0000c638                time_ticks_init
                0x0000c7fc                is_old_cpureg_layout
                0x0000c840                cpucfg_init
                0x0000c87c                cpucfg_exit
                0x0000c8a4                cpucfg_set_little_endian_address
                0x0000c95c                cpucfg_remove_little_endian_address
                0x0000ca5c                cpucfg_set_cpu_reset_state
                0x0000caac                cpucfg_set_cpu_reset_state_ext
                0x0000cb04                cpucfg_counter_clear
                0x0000cb34                cpucfg_counter_read
                0x0000cb88                cpucfg_counter_ctrl
                0x0000cba0                cpucfg_set_cpux_jump_addr
                0x0000cbb8                cpucfg_acinactm_process
                0x0000cc04                cpucfg_wait_l2_enter_wfi
                0x0000cc28                cpucfg_l1l2_reset_by_hardware
                0x0000cc74                cpucfg_l1l2_reset_by_hardware_ext
                0x0000cd10                cpucfg_cluster0_process
                0x0000cd84                cpucfg_cluster0_process_ext
                0x0000ce78                cpucfg_cpu_suspend
                0x0000cfec                cpucfg_cpu_suspend_late
                0x0000d0fc                cpucfg_cpu_resume
                0x0000d17c                set_secondary_entry
                0x0000d1bc                sun50i_set_AA32nAA64
                0x0000d27c                cpucfg_cpu_resume_early
                0x0000d3f0                cpu_power_up
                0x0000d5e0                cpu_power_down
                0x0000e534                mctl_phy_dx0_bit_delay_compensation_standby
                0x00011454                dram_power_save_process
                0x000115cc                dram_power_up_process
                0x00011850                iosc_freq_init
                0x000119c8                ccu_init
                0x00011a84                ccu_exit
                0x00011a8c                save_state_flag
                0x00011aa0                read_state_flag
                0x00011ab4                ccu_set_mclk_onoff
                0x00011bfc                ccu_set_poweroff_gating_state
                0x00011dc0                ccu_set_poweroff_gating_state_ext
                0x00011f10                ccu_24mhosc_reg_cb
                0x00011f30                ccu_24mhosc_disable
                0x00011fd4                ccu_24mhosc_enable
                0x000120ac                is_hosc_lock
                0x000120bc                ccu_set_mclk_reset
                0x00012390                ccu_reset_module
                0x000123c8                ccu_get_sclk_freq
                0x00012488                ccu_set_sclk_onoff
                0x00012534                rodata_vma = ALIGN (0x4)

.rodata         0x00012534      0xdc0
 *arch*(.rodata.*)
 *driver*(.rodata.*)
 .rodata.str1.1
                0x00012534      0x250 driver/obj-in.o
 *library*(.rodata.*)
 .rodata.str1.1
                0x00012784      0x143 library/obj-in.o
                                0x14d (size before relaxing)
 *system*(.rodata.*)
 .rodata.str1.1
                0x000128c7      0x22d system/obj-in.o
                                0x22e (size before relaxing)
 *service*(.rodata.*)
 .rodata.str1.1
                0x00012af4      0x1f2 service/obj-in.o
                                0x1fc (size before relaxing)
 *(.rodata.*)
 .rodata.str1.1
                0x00012ce6      0x3ec library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
 *fill*         0x000130d2        0x2 00
 .rodata        0x000130d4       0x6c library/obj-in.o
 .rodata        0x00013140       0x5c service/obj-in.o
 .rodata        0x0001319c      0x158 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                0x000132f4                shbss_vma = ALIGN (0x4)

.shbss
 *(.shbss)
                0x000132f4                data_vma = ALIGN (0x4)

.data           0x000132f4      0x13c
 *(.data)
 .data          0x000132f4       0xdc driver/obj-in.o
                0x000132f4                timer_lock
                0x00013330                uart_lock
                0x00013334                aw1657_onoff_reg_bitmap
                0x000133bc                pmu_axp806_ops
                0x000133cc                axp_power_max
 .data          0x000133d0        0x0 library/obj-in.o
 .data          0x000133d0        0xc service/obj-in.o
                0x000133d0                dram_crc_src
                0x000133d4                dram_crc_len
 .data          0x000133dc        0x8 system/obj-in.o
                0x000133dc                debug_level
                0x000133e0                print_timeflg
 .data          0x000133e4       0x4c library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                0x000133e4                exception_strings
                0x00013424                soc_version_a
                0x00013428                iosc_freq
                0x0001342c                losc_freq

.bss            0x00013430      0x3ac
                0x00013430                bss_start_addr = ALIGN (0x8)
 *(.bss)
 .bss           0x00013430       0x14 driver/obj-in.o
                0x00013430                uart_pin_not_used
                0x00013438                twi_lock
 .bss           0x00013444        0x0 library/obj-in.o
 .bss           0x00013444       0xa8 service/obj-in.o
                0x00013444                dram_crc_enable
 .bss           0x000134ec       0xe4 system/obj-in.o
 .bss           0x000135d0       0x2c library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                0x000135f0                hosc_notifier_list
 *(COMMON)
 COMMON         0x000135fc      0x138 driver/obj-in.o
                0x000135fc                pintc_regs
                0x00013600                pwatchdog_regs
                0x00013604                isr_table
                0x0001372c                delay_timer
                0x00013730                ptimerc_regs
 COMMON         0x00013734        0xc service/obj-in.o
                0x00013734                wakeup_source
                0x00013738                before_crc
                0x0001373c                after_crc
 COMMON         0x00013740       0x80 system/obj-in.o
                0x00013740                debugger_buffer
 COMMON         0x000137c0       0x1c library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                0x000137c0                little_endian_used
                0x000137c4                ccu_pll_periph1_reg_addr
                0x000137c8                ccu_pll_ddr0_reg_addr
                0x000137cc                apbs2_notifier_head
                0x000137d0                ccu_pll_periph0_reg_addr
                0x000137d4                ccu_pll_c0_cpux_reg_addr
                0x000137d8                ccu_reg_addr
                0x000137e0                bss_end_addr = ALIGN (0x8)

.stack          0x000137dc      0x400
                0x000137e0                stack_limit_addr = ALIGN (0x8)
 *(.stack)
 .stack         0x000137dc      0x400 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                0x00013be0                stack_base_addr = ALIGN (0x8)

.text5          0x48100000        0x4 load address 0x00014000
                0x48100000        0x4 LONG 0x0
LOAD library/liboem/sun50iw10p1/libar100s.a
OUTPUT(scp.elf elf32-or32)

.comment        0x00000000       0x51
 .comment       0x00000000       0x51 driver/obj-in.o
                                0x3d8 (size before relaxing)
 .comment       0x00000000      0x1ec library/obj-in.o
 .comment       0x00000000      0x148 service/obj-in.o
 .comment       0x00000000      0x19a system/obj-in.o
 .comment       0x00000000      0x334 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_aranges  0x00000000      0x4a0
 .debug_aranges
                0x00000000      0x180 driver/obj-in.o
 .debug_aranges
                0x00000180       0xc0 library/obj-in.o
 .debug_aranges
                0x00000240       0x80 service/obj-in.o
 .debug_aranges
                0x000002c0       0xa0 system/obj-in.o
 .debug_aranges
                0x00000360      0x140 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_pubnames
                0x00000000     0x19aa
 .debug_pubnames
                0x00000000      0x95e driver/obj-in.o
 .debug_pubnames
                0x0000095e      0x52a library/obj-in.o
 .debug_pubnames
                0x00000e88      0x1dd service/obj-in.o
 .debug_pubnames
                0x00001065      0x22e system/obj-in.o
 .debug_pubnames
                0x00001293      0x717 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_info     0x00000000     0xef9c
 .debug_info    0x00000000     0x3d48 driver/obj-in.o
 .debug_info    0x00003d48     0x2227 library/obj-in.o
 .debug_info    0x00005f6f     0x1748 service/obj-in.o
 .debug_info    0x000076b7     0x10f6 system/obj-in.o
 .debug_info    0x000087ad     0x67ef library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_abbrev   0x00000000     0x3620
 .debug_abbrev  0x00000000     0x1114 driver/obj-in.o
 .debug_abbrev  0x00001114      0x799 library/obj-in.o
 .debug_abbrev  0x000018ad      0x661 service/obj-in.o
 .debug_abbrev  0x00001f0e      0x792 system/obj-in.o
 .debug_abbrev  0x000026a0      0xf80 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_line     0x00000000     0xe92e
 .debug_line    0x00000000     0x3794 driver/obj-in.o
 .debug_line    0x00003794     0x1e1c library/obj-in.o
 .debug_line    0x000055b0     0x184f service/obj-in.o
 .debug_line    0x00006dff      0xe2f system/obj-in.o
 .debug_line    0x00007c2e     0x6d00 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_frame    0x00000000     0x1ca4
 .debug_frame   0x00000000      0xa80 driver/obj-in.o
 .debug_frame   0x00000a80      0x704 library/obj-in.o
 .debug_frame   0x00001184      0x208 service/obj-in.o
 .debug_frame   0x0000138c      0x240 system/obj-in.o
 .debug_frame   0x000015cc      0x6d8 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_str      0x00000000     0x4314
 .debug_str     0x00000000     0x17a7 driver/obj-in.o
                               0x3dba (size before relaxing)
 .debug_str     0x000017a7      0x6c7 library/obj-in.o
                                0xe66 (size before relaxing)
 .debug_str     0x00001e6e      0x7b5 service/obj-in.o
                                0xfb6 (size before relaxing)
 .debug_str     0x00002623      0x2ea system/obj-in.o
                                0xc4e (size before relaxing)
 .debug_str     0x0000290d     0x1a07 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
                               0x4c5a (size before relaxing)

.debug_loc      0x00000000     0xcc6d
 .debug_loc     0x00000000     0x2381 driver/obj-in.o
 .debug_loc     0x00002381     0x27f6 library/obj-in.o
 .debug_loc     0x00004b77      0xbf2 service/obj-in.o
 .debug_loc     0x00005769      0x92f system/obj-in.o
 .debug_loc     0x00006098     0x6bd5 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_pubtypes
                0x00000000     0x1c34
 .debug_pubtypes
                0x00000000      0x581 driver/obj-in.o
 .debug_pubtypes
                0x00000581      0x19e library/obj-in.o
 .debug_pubtypes
                0x0000071f      0x18e service/obj-in.o
 .debug_pubtypes
                0x000008ad      0x16f system/obj-in.o
 .debug_pubtypes
                0x00000a1c     0x1218 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)

.debug_ranges   0x00000000      0x868
 .debug_ranges  0x00000000       0x60 driver/obj-in.o
 .debug_ranges  0x00000060       0x20 library/obj-in.o
 .debug_ranges  0x00000080      0x330 service/obj-in.o
 .debug_ranges  0x000003b0      0x130 system/obj-in.o
 .debug_ranges  0x000004e0      0x388 library/liboem/sun50iw10p1/libar100s.a(obj-in.o)
00004000 D arisc_para
00004000 D paras_start_addr
00004088 D paras_end_addr
000040f0 T intc_init
00004148 T intc_exit
00004170 T intc_enable_interrupt
00004220 T intc_disable_interrupt
000042b8 T intc_interrupt_is_enabled
0000432c T intc_get_current_interrupt
00004354 T intc_set_mask
00004418 T intc_set_group_config
0000451c T isr_default
0000454c T interrupt_init
000045a0 T interrupt_exit
000045bc T interrupt_enable
000045d4 T interrupt_disable
000045ec T interrupt_set_nmi_trigger
00004614 T interrupt_set_mask
0000462c T interrupt_set_group_config
00004644 T install_isr
00004674 T uninstall_isr
000046dc T interrupt_entry
0000471c T interrupt_query_pending
0000479c T interrupt_clear_pending
00004800 T interrupt_get_current_intno
00004818 T interrupt_get_enabled
00004830 T pin_init
00004838 T pin_exit
00004840 T pin_set_status
00004848 T pin_set_multi_sel
000048c0 T pin_set_pull
00004938 T pin_set_drive
000049b0 T pin_write_data
00004a1c T pin_read_data
00004a5c T is_wanted_gpio_int
00004a90 T pin_set_int_trigger_mode
00004b1c T timer_hosc_onoff_cb
00004c6c T timer_isr
00004d28 T timer_init
00004e2c T timer_exit
00004e84 T timer_request
00004f68 T timer_release
00004f90 T timer_start
00005064 T timer_stop
0000510c T time_mdelay
000051c4 T cnt64_udelay
00005244 T time_udelay
000052dc t delay_loop
000052dc T time_cdelay
000052f4 T uart_init
000053f8 T uart_exit
00005470 T uart_putc
000054d4 T uart_get
0000553c T uart_puts
000055c0 T uart_set_baudrate
000056f4 T uart_clkchangecb
00005798 T uart_get_baudrate
000057ac t twi_clear_irq_flag
000057e0 t twic_reset
00005808 t twi_start
00005838 t twic_send_dummy_clock
000058c0 t twic_set_sclk.clone.0
00005984 T twi_clkchangecb
000059f0 T twi_init
00005b08 T twi_exit
00005b10 T twi_byte_rw
000061b8 T twi_read
00006248 T twi_write
000062d8 T is_twi_lock
000062f0 T twi_send_clk_9pulse
000063d8 T twi_get_status
0000641c T twi_standby_init
00006524 T twi_standby_exit
0000652c t hwmsgbox_set_receiver
00006598 t hwmsgbox_set_transmitter
00006608 T hwmsgbox_init
000066c8 T hwmsgbox_exit
000066f8 T hwmsgbox_wait_queue_not_full
00006758 T hwmsgbox_wait_queue_not_empty
000067c0 T hwmsgbox_send_message
00006a3c T hwmsgbox_feedback_message
00006b5c T hwmsgbox_query_message
00006d28 T hwmsgbox_super_standby_init
00006d54 T hwmsgbox_super_standby_exit
00006d88 t aw1657_pmu_set_voltage_state
00006e5c t aw1657_pmu_reset
00006ee0 t aw1657_pmu_shutdown
00006f68 T watchdog_reset
00006fd0 T pmu_shutdown
00007068 T pmu_reset
00007108 T pmu_charging_reset
0000718c T pmu_set_voltage
000071b4 T pmu_get_voltage
000071dc T pmu_set_voltage_state
0000723c T pmu_get_voltage_state
00007264 T pmu_query_event
0000726c T pmu_clear_pendings
00007274 T pmu_chip_init
0000727c T pmu_reg_write
00007298 T pmu_reg_read
000072b4 T pmu_reg_write_para
000072e4 T pmu_reg_read_para
00007314 T nmi_int_handler
00007354 T pmu_init
00007394 T pmu_exit
0000739c T is_pmu_exist
000073ac T pmu_standby_init
000073dc T pmu_standby_exit
0000740c T watchdog_init
00007488 T watchdog_exit
000074b0 T watchdog_enable
000074f0 T watchdog_disable
0000752c T itoa
0000765c T utoa
0000774c T hexdump
000077f4 T hstr2int
0000789c T dstr2int
000078e4 T strlen
00007904 T strnlen
00007934 T strcpy
0000795c T strncat
000079d4 T strcmp
00007a1c T strchr
00007a50 T memcpy
00007b0c T memmove
00007b98 T memcmp
00007bd4 T memchr
00007c14 T memset
00007c3c T sprintf
00007d58 T fdt_check_header
00007e6c T fdt_offset_ptr
00007f38 T fdt_next_tag
000080b4 T _fdt_check_node_offset
0000810c T _fdt_check_prop_offset
00008164 T fdt_next_node
00008274 T fdt_first_subnode
000082bc T fdt_next_subnode
0000832c T _fdt_find_string
000083b4 T fdt_move
00008480 t fdt64_to_cpu
000084e4 t _fdt_offset_ptr
0000851c t _fdt_mem_rsv
00008558 t _nextprop
000085e0 T fdt_string
00008618 T fdt_get_mem_rsv
000086c0 T fdt_num_mem_rsv
00008720 T fdt_subnode_offset_namelen
00008850 T fdt_subnode_offset
000088a0 T fdt_get_name
00008948 T fdt_first_property_offset
0000898c T fdt_next_property_offset
000089d0 T fdt_get_property_by_offset
00008a74 T fdt_get_property_namelen
00008ba0 T fdt_get_property
00008c00 T fdt_getprop_namelen
00008c2c T fdt_getprop_by_offset
00008cb8 T fdt_getprop
00008d18 T fdt_getprop_u32
00008ddc T fdt_get_phandle
00008e90 T fdt_get_alias_namelen
00008f0c T fdt_path_offset
0000904c T fdt_get_alias
0000908c T fdt_get_path
00009258 T fdt_supernode_atdepth_offset
00009360 T fdt_node_depth
000093a4 T fdt_parent_offset
00009400 T fdt_node_offset_by_prop_value
000094dc T fdt_node_offset_by_phandle
00009578 T fdt_stringlist_contains
00009628 T fdt_stringlist_count
000096b4 T fdt_stringlist_search
00009790 T fdt_stringlist_get
00009880 T fdt_node_check_compatible
000098e0 T fdt_node_offset_by_compatible
00009978 T fdt_strerror
000099e8 T fdt_address_cells
00009a6c T fdt_size_cells
00009aec T notifier_init
00009b30 T notifier_exit
00009b38 T notifier_insert
00009c04 T notifier_delete
00009c9c T notifier_notify
00009cf8 T message_valid
00009d08 T message_manager_init
00009d10 T message_manager_exit
00009d18 T message_coming_notify
00009ebc t print_align
00009f3c T debugger_init
00009f58 T debugger_exit
00009f60 T debugger_putc
00009f84 T debugger_get
00009f9c T debugger_puts
00009fb8 T debugger_printf
0000a304 T set_debug_level
0000a358 T daemon_register_service
0000a378 T startup_entry
0000a6cc T arisc_para_init
0000a6e8 T set_paras
0000a6f0 T standby_init
0000a730 T standby_exit
0000a738 T long_jump
0000a754 T standby_set_dram_crc_paras
0000a780 T standby_dram_crc_enable
0000a790 T standby_dram_crc
0000a7d4 t CPUX_IRQ_MAPTO_CPUS
0000a834 t CPUX_IRQ_MAPTO_CPUS_GRP
0000a84c t wakeup_timer_handler
0000a868 t group_irq_exit
0000a89c t group_irq_init
0000a8d0 T default_wakeup_handler
0000a95c T wakeup_timer_init
0000a9a8 T wakeup_timer_start
0000a9e4 T wakeup_timer_stop
0000aa00 T set_wakeup_src
0000ab3c T clear_wakeup_src
0000ac18 T is_suspend_lock
0000ac28 T cpu_op
0000bb78 T sys_op
0000bcb4 T icache_coherent
0000bcd8 t invalidate_block
0000bd04 t cpu_stack_monitor
0000bd70 T cpu_init
0000bda4 T cpu_disable_int
0000bdcc T cpu_enable_int
0000bddc T exit
0000bdfc T cpu_enter_doze
0000be10 t reset_handler
0000becc t invalid_block
0000bf3c t bus_error_exception_handler
0000bf60 t data_page_fault_exception_handler
0000bf84 t insn_page_fault_exception_handler
0000bfa8 t timer_exception_handler
0000bfcc t aligment_exception_handler
0000bff0 t illegal_exception_handler
0000c014 t irq_exception_handler
0000c038 t dtlb_miss_exception_handler
0000c05c t itlb_miss_exception_handler
0000c080 t range_exception_handler
0000c0a4 t syscall_exception_handler
0000c0c8 t fpu_exception_handler
0000c0ec t trap_exception_handler
0000c110 t cpu_exception_handler_entry
0000c208 T __udivsi3
0000c304 T __divsi3
0000c368 T __umodsi3
0000c388 T __modsi3
0000c3e4 T cpu_exception_handler_entry_c
0000c4a0 t timer_tick_server
0000c558 T start_softtimer
0000c56c T stop_softtimer
0000c58c T add_softtimer
0000c5f0 T current_time_tick
0000c604 T msec_to_ticks
0000c638 T time_ticks_init
0000c6a0 t cpu_power_switch_set
0000c7fc T is_old_cpureg_layout
0000c840 T cpucfg_init
0000c87c T cpucfg_exit
0000c8a4 T cpucfg_set_little_endian_address
0000c95c T cpucfg_remove_little_endian_address
0000ca5c T cpucfg_set_cpu_reset_state
0000caac T cpucfg_set_cpu_reset_state_ext
0000cb04 T cpucfg_counter_clear
0000cb34 T cpucfg_counter_read
0000cb88 T cpucfg_counter_ctrl
0000cba0 T cpucfg_set_cpux_jump_addr
0000cbb8 T cpucfg_acinactm_process
0000cc04 T cpucfg_wait_l2_enter_wfi
0000cc28 T cpucfg_l1l2_reset_by_hardware
0000cc74 T cpucfg_l1l2_reset_by_hardware_ext
0000cd10 T cpucfg_cluster0_process
0000cd84 T cpucfg_cluster0_process_ext
0000ce78 T cpucfg_cpu_suspend
0000cfec T cpucfg_cpu_suspend_late
0000d0fc T cpucfg_cpu_resume
0000d17c T set_secondary_entry
0000d1bc T sun50i_set_AA32nAA64
0000d27c T cpucfg_cpu_resume_early
0000d3f0 T cpu_power_up
0000d5e0 T cpu_power_down
0000d768 t auto_cal_timing_standby
0000d7b8 t phy_write_leveling_standby
0000d9f0 t phy_read_calibration_standby
0000dbec t phy_read_training_standby
0000e090 t phy_write_training_standby
0000e4cc t mctl_com_set_controller_refresh_standby.clone.1
0000e4fc t dramc_data_cal_standby.clone.12
0000e534 T mctl_phy_dx0_bit_delay_compensation_standby
0000e65c t mctl_core_init_standby
00011454 T dram_power_save_process
000115cc T dram_power_up_process
00011850 T iosc_freq_init
000119c8 T ccu_init
00011a84 T ccu_exit
00011a8c T save_state_flag
00011aa0 T read_state_flag
00011ab4 T ccu_set_mclk_onoff
00011bfc T ccu_set_poweroff_gating_state
00011dc0 T ccu_set_poweroff_gating_state_ext
00011f10 T ccu_24mhosc_reg_cb
00011f30 T ccu_24mhosc_disable
00011fd4 T ccu_24mhosc_enable
000120ac T is_hosc_lock
000120bc T ccu_set_mclk_reset
00012390 T ccu_reset_module
000123c8 T ccu_get_sclk_freq
00012488 T ccu_set_sclk_onoff
00012534 A rodata_vma
000130d4 r digit_string
0001310c r fdt_errtable
00013140 r __func__.2388
00013154 r irq_table
0001318c r __func__.2375
0001319c r remap_lpddr4_T509.2522
000131b8 r remap_lpddr4_A100.2521
000131d4 r remap_lpddr3_A100.2520
000131f0 r remap_ddr4_A100.2519
0001320c r remap_ddr3_T509.2518
00013228 r remap_ddr3_A100.2517
00013244 r CSWTCH.15
0001325c r CSWTCH.20
00013274 r CSWTCH.21
000132f4 A data_vma
000132f4 A shbss_vma
000132f4 D timer_lock
000132f8 d timers
00013330 D uart_lock
00013334 D aw1657_onoff_reg_bitmap
000133bc D pmu_axp806_ops
000133cc D axp_power_max
000133d0 D dram_crc_src
000133d4 D dram_crc_len
000133d8 d standby_osc24m_on
000133dc D debug_level
000133e0 D print_timeflg
000133e4 D exception_strings
00013424 D soc_version_a
00013428 D iosc_freq
0001342c D losc_freq
00013430 B bss_start_addr
00013430 B uart_pin_not_used
00013434 b uart_rate
00013438 B twi_lock
0001343c b hwmsg_suspend
00013440 b pmu_exist
00013444 B dram_crc_enable
00013448 b wakeup_timer
0001345c b cpus_src
00013460 b standby_type
00013464 b result
00013468 b standby_vdd_cpu
0001346c b standby_vdd_sys
00013470 b standby_vcc_pll
00013474 b dts_has_parsed.3130
00013478 b suspend_lock
0001347c b smc_region_save
000134dc b pll_periph0
000134e0 b mbus
000134e4 b pll_cpux_ctrl_reg_bak
000134e8 b c0_cpux_axi_cfg_reg_bak
000134ec b notifiers
0001354c b daemon_list
00013550 b msg_paras.2300
000135d0 b htimer
000135d4 b time_ticks
000135d8 b softtimer
000135e0 b softtimer_cnt
000135e4 b data_cal_standby
000135e8 b training_error_flag_standby
000135ec b already_init_osc_freq
000135f0 B hosc_notifier_list
000135f4 b hosc_lock
000135f8 b pll_ldo_suspend
000135fc B pintc_regs
00013600 B pwatchdog_regs
00013604 B isr_table
0001372c B delay_timer
00013730 B ptimerc_regs
00013734 B wakeup_source
00013738 B before_crc
0001373c B after_crc
00013740 B debugger_buffer
000137c0 B little_endian_used
000137c4 B ccu_pll_periph1_reg_addr
000137c8 B ccu_pll_ddr0_reg_addr
000137cc B apbs2_notifier_head
000137d0 B ccu_pll_periph0_reg_addr
000137d4 B ccu_pll_c0_cpux_reg_addr
000137d8 B ccu_reg_addr
000137e0 B bss_end_addr
000137e0 B stack_limit_addr
00013bdc b _stack
00013be0 B stack_base_addr

scp.elf:     file format elf32-or32
scp.elf
architecture: or32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000100

Program Header:
    LOAD off    0x00002000 vaddr 0x00000000 paddr 0x00000000 align 2**13
         filesz 0x00000e08 memsz 0x00000e08 flags r-x
    LOAD off    0x00004000 vaddr 0x00004000 paddr 0x00004000 align 2**13
         filesz 0x00000088 memsz 0x00000088 flags rw-
    LOAD off    0x000040f0 vaddr 0x000040f0 paddr 0x000040f0 align 2**13
         filesz 0x0000f340 memsz 0x0000faec flags rwx
    LOAD off    0x00014000 vaddr 0x48100000 paddr 0x00014000 align 2**13
         filesz 0x00000004 memsz 0x00000004 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vectors      00000e08  00000000  00000000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 dts_paras     00000088  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000e444  000040f0  000040f0  000040f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000dc0  00012534  00012534  00012534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000013c  000132f4  000132f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003ac  00013430  00013430  00013430  2**2
                  ALLOC
  6 .stack        00000400  000137dc  000137dc  00013430  2**0
                  ALLOC
  7 .text5        00000004  48100000  00014000  00014000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .comment      00000051  00000000  00000000  00014004  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000004a0  00000000  00000000  00014055  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 000019aa  00000000  00000000  000144f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000ef9c  00000000  00000000  00015e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003620  00000000  00000000  00024e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e92e  00000000  00000000  0002845b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ca4  00000000  00000000  00036d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004314  00000000  00000000  00038a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000cc6d  00000000  00000000  0003cd44  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_pubtypes 00001c34  00000000  00000000  000499b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000868  00000000  00000000  0004b5e5  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .vectors	00000000 .vectors
00004000 l    d  dts_paras	00000000 dts_paras
000040f0 l    d  .text	00000000 .text
00012534 l    d  .rodata	00000000 .rodata
000132f4 l    d  .data	00000000 .data
00013430 l    d  .bss	00000000 .bss
000137dc l    d  .stack	00000000 .stack
48100000 l    d  .text5	00000000 .text5
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00013bdc l       .stack	00000000 _stack
0000be10 l       .text	00000000 reset_handler
0000bf3c l       .text	00000000 bus_error_exception_handler
0000bf60 l       .text	00000000 data_page_fault_exception_handler
0000bf84 l       .text	00000000 insn_page_fault_exception_handler
0000bfa8 l       .text	00000000 timer_exception_handler
0000bfcc l       .text	00000000 aligment_exception_handler
0000bff0 l       .text	00000000 illegal_exception_handler
0000c014 l       .text	00000000 irq_exception_handler
0000c038 l       .text	00000000 dtlb_miss_exception_handler
0000c05c l       .text	00000000 itlb_miss_exception_handler
0000c080 l       .text	00000000 range_exception_handler
0000c0a4 l       .text	00000000 syscall_exception_handler
0000c0c8 l       .text	00000000 fpu_exception_handler
0000c0ec l       .text	00000000 trap_exception_handler
0000becc l       .text	00000000 invalid_block
0000c110 l       .text	00000000 cpu_exception_handler_entry
0000bcd8 l       .text	00000000 invalidate_block
00000000 l    df *ABS*	00000000 cpu_c.c
0000bd04 l     F .text	0000006c cpu_stack_monitor
00000000 l    df *ABS*	00000000 exception.c
00000000 l    df *ABS*	00000000 time_ticks.c
0000c4a0 l     F .text	000000b8 timer_tick_server
000135d4 l     O .bss	00000004 time_ticks
000135d8 l     O .bss	00000008 softtimer
000135e0 l     O .bss	00000004 softtimer_cnt
000135d0 l     O .bss	00000004 htimer
00000000 l    df *ABS*	00000000 cpucfg.c
0000c6a0 l     F .text	0000015c cpu_power_switch_set
00000000 l    df *ABS*	00000000 mctl_standby-sun50iw10.c
0000d768 l     F .text	00000050 auto_cal_timing_standby
0000d7b8 l     F .text	00000238 phy_write_leveling_standby
0000d9f0 l     F .text	000001fc phy_read_calibration_standby
0000dbec l     F .text	000004a4 phy_read_training_standby
0000e090 l     F .text	0000043c phy_write_training_standby
0000e4cc l     F .text	00000030 mctl_com_set_controller_refresh_standby.clone.1
0000e4fc l     F .text	00000038 dramc_data_cal_standby.clone.12
0000e65c l     F .text	00002df8 mctl_core_init_standby
00013244 l     O .rodata	00000018 CSWTCH.15
0001325c l     O .rodata	00000018 CSWTCH.20
00013274 l     O .rodata	00000018 CSWTCH.21
0001319c l     O .rodata	0000001b remap_lpddr4_T509.2522
0001320c l     O .rodata	0000001b remap_ddr3_T509.2518
00013228 l     O .rodata	0000001b remap_ddr3_A100.2517
000131b8 l     O .rodata	0000001b remap_lpddr4_A100.2521
000131f0 l     O .rodata	0000001b remap_ddr4_A100.2519
000131d4 l     O .rodata	0000001b remap_lpddr3_A100.2520
000135e8 l     O .bss	00000004 training_error_flag_standby
000135e4 l     O .bss	00000004 data_cal_standby
00000000 l    df *ABS*	00000000 ccu.c
000135ec l     O .bss	00000004 already_init_osc_freq
00000000 l    df *ABS*	00000000 mclk.c
00000000 l    df *ABS*	00000000 power.c
000135f4 l     O .bss	00000004 hosc_lock
000135f8 l     O .bss	00000004 pll_ldo_suspend
00000000 l    df *ABS*	00000000 reset.c
00000000 l    df *ABS*	00000000 sclk.c
00000000 l    df *ABS*	00000000 notifier.c
000134ec l     O .bss	00000060 notifiers
00000000 l    df *ABS*	00000000 message_manager.c
00000000 l    df *ABS*	00000000 debugger.c
00009ebc l     F .text	00000080 print_align
00000000 l    df *ABS*	00000000 daemon.c
0001354c l     O .bss	00000004 daemon_list
00013550 l     O .bss	00000080 msg_paras.2300
00000000 l    df *ABS*	00000000 para.c
00000000 l    df *ABS*	00000000 intc.c
00000000 l    df *ABS*	00000000 intc_manager.c
00000000 l    df *ABS*	00000000 pin.c
00000000 l    df *ABS*	00000000 pin_int.c
00000000 l    df *ABS*	00000000 timer.c
000132f8 l     O .data	00000038 timers
00000000 l    df *ABS*	00000000 timer_delay.c
000052dc l       .text	00000000 delay_loop
00000000 l    df *ABS*	00000000 uart.c
00013434 l     O .bss	00000004 uart_rate
00000000 l    df *ABS*	00000000 twi.c
000057ac l     F .text	00000034 twi_clear_irq_flag
000057e0 l     F .text	00000028 twic_reset
00005808 l     F .text	00000030 twi_start
00005838 l     F .text	00000088 twic_send_dummy_clock
000058c0 l     F .text	000000c4 twic_set_sclk.clone.0
00000000 l    df *ABS*	00000000 hwmsgbox.c
0000652c l     F .text	0000006c hwmsgbox_set_receiver
00006598 l     F .text	00000070 hwmsgbox_set_transmitter
0001343c l     O .bss	00000004 hwmsg_suspend
00000000 l    df *ABS*	00000000 pmu_axp806.c
00006d88 l     F .text	000000d4 aw1657_pmu_set_voltage_state
00006e5c l     F .text	00000084 aw1657_pmu_reset
00006ee0 l     F .text	00000088 aw1657_pmu_shutdown
00000000 l    df *ABS*	00000000 pmu.c
00013440 l     O .bss	00000004 pmu_exist
00000000 l    df *ABS*	00000000 watchdog.c
00000000 l    df *ABS*	00000000 library.c
000130d4 l     O .rodata	00000011 digit_string
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 fdt.c
00000000 l    df *ABS*	00000000 fdt_ro.c
00008480 l     F .text	00000064 fdt64_to_cpu
000084e4 l     F .text	00000038 _fdt_offset_ptr
0000851c l     F .text	0000003c _fdt_mem_rsv
00008558 l     F .text	00000088 _nextprop
00000000 l    df *ABS*	00000000 fdt_strerror.c
0001310c l     O .rodata	00000034 fdt_errtable
00000000 l    df *ABS*	00000000 fdt_addresses.c
00000000 l    df *ABS*	00000000 standby.c
00000000 l    df *ABS*	00000000 standby_dram_crc.c
00000000 l    df *ABS*	00000000 wakeup_source.c
0000a7d4 l     F .text	00000060 CPUX_IRQ_MAPTO_CPUS
00013154 l     O .rodata	00000038 irq_table
0000a834 l     F .text	00000018 CPUX_IRQ_MAPTO_CPUS_GRP
0000a84c l     F .text	0000001c wakeup_timer_handler
0000a868 l     F .text	00000034 group_irq_exit
0000a89c l     F .text	00000034 group_irq_init
00013448 l     O .bss	00000014 wakeup_timer
0001318c l     O .rodata	0000000f __func__.2375
00013140 l     O .rodata	00000011 __func__.2388
00000000 l    df *ABS*	00000000 plat_standby.c
00013478 l     O .bss	00000004 suspend_lock
00013474 l     O .bss	00000004 dts_has_parsed.3130
00013468 l     O .bss	00000004 standby_vdd_cpu
0001346c l     O .bss	00000004 standby_vdd_sys
00013470 l     O .bss	00000004 standby_vcc_pll
000133d8 l     O .data	00000004 standby_osc24m_on
0001345c l     O .bss	00000004 cpus_src
00013460 l     O .bss	00000004 standby_type
0001347c l     O .bss	00000060 smc_region_save
000134dc l     O .bss	00000004 pll_periph0
000134e0 l     O .bss	00000004 mbus
000134e4 l     O .bss	00000004 pll_cpux_ctrl_reg_bak
000134e8 l     O .bss	00000004 c0_cpux_axi_cfg_reg_bak
00013464 l     O .bss	00000004 result
0000cba0 g     F .text	00000018 cpucfg_set_cpux_jump_addr
000137c0 g     O .bss	00000004 little_endian_used
000123c8 g     F .text	000000c0 ccu_get_sclk_freq
000099e8 g     F .text	00000084 fdt_address_cells
0000ce78 g     F .text	00000174 cpucfg_cpu_suspend
00007934 g     F .text	00000028 strcpy
00013330 g     O .data	00000004 uart_lock
00007e6c g     F .text	000000cc fdt_offset_ptr
00005984 g     F .text	0000006c twi_clkchangecb
00007298 g     F .text	0000001c pmu_reg_read
00004148 g     F .text	00000028 intc_exit
00007314 g     F .text	00000040 nmi_int_handler
00009d08 g     F .text	00000008 message_manager_init
00013734 g     O .bss	00000004 wakeup_source
00004088 g       dts_paras	00000000 paras_end_addr
0000c604 g     F .text	00000034 msec_to_ticks
0000bcb4 g       .text	00000000 icache_coherent
000054d4 g     F .text	00000068 uart_get
000120ac g     F .text	00000010 is_hosc_lock
00006d28 g     F .text	0000002c hwmsgbox_super_standby_init
0001342c g     O .data	00000004 losc_freq
0000a790 g     F .text	00000044 standby_dram_crc
00013be0 g       .stack	00000000 stack_base_addr
00004830 g     F .text	00000008 pin_init
00008c00 g     F .text	0000002c fdt_getprop_namelen
00011a84 g     F .text	00000008 ccu_exit
00008948 g     F .text	00000044 fdt_first_property_offset
000133dc g     O .data	00000004 debug_level
00009790 g     F .text	000000f0 fdt_stringlist_get
00013428 g     O .data	00000004 iosc_freq
00006f68 g     F .text	00000068 watchdog_reset
00007b0c g     F .text	0000008c memmove
000093a4 g     F .text	0000005c fdt_parent_offset
0000a9a8 g     F .text	0000003c wakeup_timer_start
0000c638 g     F .text	00000068 time_ticks_init
0000bd70 g     F .text	00000034 cpu_init
00008ba0 g     F .text	00000060 fdt_get_property
00009f9c g     F .text	0000001c debugger_puts
00008f0c g     F .text	00000140 fdt_path_offset
00013444 g     O .bss	00000004 dram_crc_enable
000133d4 g     O .data	00000004 dram_crc_len
000067c0 g     F .text	0000027c hwmsgbox_send_message
0000726c g     F .text	00000008 pmu_clear_pendings
0000aa00 g     F .text	0000013c set_wakeup_src
0000727c g     F .text	0000001c pmu_reg_write
00009d18 g     F .text	000001a4 message_coming_notify
00004674 g     F .text	00000068 uninstall_isr
00006608 g     F .text	000000c0 hwmsgbox_init
000048c0 g     F .text	00000078 pin_set_pull
0000bdfc g     F .text	00000014 cpu_enter_doze
0000cfec g     F .text	00000110 cpucfg_cpu_suspend_late
000083b4 g     F .text	000000cc fdt_move
0000774c g     F .text	000000a8 hexdump
00009f58 g     F .text	00000008 debugger_exit
0000c3e4 g     F .text	000000bc cpu_exception_handler_entry_c
000133cc g     O .data	00000004 axp_power_max
000045d4 g     F .text	00000018 interrupt_disable
000135fc g     O .bss	00000004 pintc_regs
000098e0 g     F .text	00000098 fdt_node_offset_by_compatible
0000a358 g     F .text	00000020 daemon_register_service
00005b08 g     F .text	00000008 twi_exit
000137c4 g     O .bss	00000004 ccu_pll_periph1_reg_addr
00007a50 g     F .text	000000bc memcpy
000115cc g     F .text	00000284 dram_power_up_process
000133e4 g     O .data	00000040 exception_strings
00009400 g     F .text	000000dc fdt_node_offset_by_prop_value
00006524 g     F .text	00000008 twi_standby_exit
000066f8 g     F .text	00000060 hwmsgbox_wait_queue_not_full
000132f4 g       *ABS*	00000000 shbss_vma
000049b0 g     F .text	0000006c pin_write_data
00009f60 g     F .text	00000024 debugger_putc
0000c208 g       .text	00000000 __udivsi3
00011fd4 g     F .text	000000d8 ccu_24mhosc_enable
00013738 g     O .bss	00000004 before_crc
0000454c g     F .text	00000054 interrupt_init
0000c58c g     F .text	00000064 add_softtimer
000059f0 g     F .text	00000118 twi_init
0000752c g     F .text	00000130 itoa
00008720 g     F .text	00000130 fdt_subnode_offset_namelen
0000ac18 g     F .text	00000010 is_suspend_lock
00009360 g     F .text	00000044 fdt_node_depth
000072e4 g     F .text	00000030 pmu_reg_read_para
000045a0 g     F .text	0000001c interrupt_exit
00004818 g     F .text	00000018 interrupt_get_enabled
000086c0 g     F .text	00000060 fdt_num_mem_rsv
00007264 g     F .text	00000008 pmu_query_event
000089d0 g     F .text	000000a4 fdt_get_property_by_offset
0001373c g     O .bss	00000004 after_crc
00007394 g     F .text	00000008 pmu_exit
00006b5c g     F .text	000001cc hwmsgbox_query_message
0000d0fc g     F .text	00000080 cpucfg_cpu_resume
00013600 g     O .bss	00000004 pwatchdog_regs
00013740 g     O .bss	00000080 debugger_buffer
0000a754 g     F .text	0000002c standby_set_dram_crc_paras
000137c8 g     O .bss	00000004 ccu_pll_ddr0_reg_addr
0000641c g     F .text	00000108 twi_standby_init
00011454 g     F .text	00000178 dram_power_save_process
000071dc g     F .text	00000060 pmu_set_voltage_state
000119c8 g     F .text	000000bc ccu_init
00009c04 g     F .text	00000098 notifier_delete
0000832c g     F .text	00000088 _fdt_find_string
00004b1c g     F .text	00000150 timer_hosc_onoff_cb
00013430 g     O .bss	00000004 uart_pin_not_used
0000718c g     F .text	00000028 pmu_set_voltage
00004848 g     F .text	00000078 pin_set_multi_sel
0000d3f0 g     F .text	000001f0 cpu_power_up
0000c7fc g     F .text	00000044 is_old_cpureg_layout
0000c95c g     F .text	00000100 cpucfg_remove_little_endian_address
00007904 g     F .text	00000030 strnlen
00004e84 g     F .text	000000e4 timer_request
000045ec g     F .text	00000028 interrupt_set_nmi_trigger
00008cb8 g     F .text	00000060 fdt_getprop
0000432c g     F .text	00000028 intc_get_current_interrupt
000135f0 g     O .bss	00000004 hosc_notifier_list
0000739c g     F .text	00000010 is_pmu_exist
0000c87c g     F .text	00000028 cpucfg_exit
0000553c g     F .text	00000084 uart_puts
00004a5c g     F .text	00000034 is_wanted_gpio_int
0000765c g     F .text	000000f0 utoa
00008d18 g     F .text	000000c4 fdt_getprop_u32
00009978 g     F .text	00000070 fdt_strerror
00004d28 g     F .text	00000104 timer_init
00009578 g     F .text	000000b0 fdt_stringlist_contains
0000c5f0 g     F .text	00000014 current_time_tick
000132f4 g       *ABS*	00000000 data_vma
00004220 g     F .text	00000098 intc_disable_interrupt
00006248 g     F .text	00000090 twi_write
00011850 g     F .text	00000178 iosc_freq_init
00004644 g     F .text	00000030 install_isr
000137e0 g       .stack	00000000 stack_limit_addr
000062f0 g     F .text	000000e8 twi_send_clk_9pulse
0000c368 g       .text	00000000 __umodsi3
0000810c g     F .text	00000058 _fdt_check_prop_offset
00004f90 g     F .text	000000d4 timer_start
00007068 g     F .text	000000a0 pmu_reset
00004840 g     F .text	00000008 pin_set_status
00011aa0 g     F .text	00000014 read_state_flag
00008850 g     F .text	00000050 fdt_subnode_offset
0000cb04 g     F .text	00000030 cpucfg_counter_clear
0000a780 g     F .text	00000010 standby_dram_crc_enable
000052f4 g     F .text	00000104 uart_init
000062d8 g     F .text	00000018 is_twi_lock
00007bd4 g     F .text	00000040 memchr
0000cd84 g     F .text	000000f4 cpucfg_cluster0_process_ext
00009a6c g     F .text	00000080 fdt_size_cells
0000451c g     F .text	00000030 isr_default
000055c0 g     F .text	00000134 uart_set_baudrate
0000a6f0 g     F .text	00000040 standby_init
00011f30 g     F .text	000000a4 ccu_24mhosc_disable
00009258 g     F .text	00000108 fdt_supernode_atdepth_offset
00013438 g     O .bss	00000001 twi_lock
00004354 g     F .text	000000c4 intc_set_mask
0000d1bc g     F .text	000000c0 sun50i_set_AA32nAA64
00009d10 g     F .text	00000008 message_manager_exit
000082bc g     F .text	00000070 fdt_next_subnode
000046dc g     F .text	00000040 interrupt_entry
0000c558 g     F .text	00000014 start_softtimer
0000c8a4 g     F .text	000000b8 cpucfg_set_little_endian_address
0000ac28 g     F .text	00000f50 cpu_op
00009fb8 g     F .text	0000034c debugger_printf
0000cd10 g     F .text	00000074 cpucfg_cluster0_process
0000c56c g     F .text	00000020 stop_softtimer
00007274 g     F .text	00000008 pmu_chip_init
00004a1c g     F .text	00000040 pin_read_data
00006a3c g     F .text	00000120 hwmsgbox_feedback_message
000072b4 g     F .text	00000030 pmu_reg_write_para
0000bdcc g     F .text	00000010 cpu_enable_int
00006fd0 g     F .text	00000098 pmu_shutdown
00007b98 g     F .text	0000003c memcmp
0000898c g     F .text	00000044 fdt_next_property_offset
000133e0 g     O .data	00000004 print_timeflg
0000795c g     F .text	00000078 strncat
000073ac g     F .text	00000030 pmu_standby_init
00008a74 g     F .text	0000012c fdt_get_property_namelen
0000c840 g     F .text	0000003c cpucfg_init
000094dc g     F .text	0000009c fdt_node_offset_by_phandle
00013334 g     O .data	00000088 aw1657_onoff_reg_bitmap
000063d8 g     F .text	00000044 twi_get_status
00011f10 g     F .text	00000020 ccu_24mhosc_reg_cb
000073dc g     F .text	00000030 pmu_standby_exit
00007488 g     F .text	00000028 watchdog_exit
00012534 g       *ABS*	00000000 rodata_vma
00012390 g     F .text	00000038 ccu_reset_module
000120bc g     F .text	000002d4 ccu_set_mclk_reset
00013430 g       .bss	00000000 bss_start_addr
0000ab3c g     F .text	000000dc clear_wakeup_src
00004170 g     F .text	000000b0 intc_enable_interrupt
00007c14 g     F .text	00000028 memset
00004e2c g     F .text	00000058 timer_exit
0000cbb8 g     F .text	0000004c cpucfg_acinactm_process
0000cb88 g     F .text	00000018 cpucfg_counter_ctrl
00007108 g     F .text	00000084 pmu_charging_reset
0000789c g     F .text	00000048 dstr2int
000080b4 g     F .text	00000058 _fdt_check_node_offset
00005470 g     F .text	00000064 uart_putc
0000bda4 g     F .text	00000028 cpu_disable_int
000051c4 g     F .text	00000080 cnt64_udelay
0000a6e8 g     F .text	00000008 set_paras
00013604 g     O .bss	00000128 isr_table
000137cc g     O .bss	00000004 apbs2_notifier_head
0000904c g     F .text	00000040 fdt_get_alias
0000a304 g     F .text	00000054 set_debug_level
00013424 g     O .data	00000004 soc_version_a
000066c8 g     F .text	00000030 hwmsgbox_exit
0000c304 g       .text	00000000 __divsi3
0000d5e0 g     F .text	00000188 cpu_power_down
00008ddc g     F .text	000000b4 fdt_get_phandle
000079d4 g     F .text	00000048 strcmp
000056f4 g     F .text	000000a4 uart_clkchangecb
00009aec g     F .text	00000044 notifier_init
00012488 g     F .text	000000ac ccu_set_sclk_onoff
00004000 g       dts_paras	00000000 paras_start_addr
0000510c g     F .text	000000b8 time_mdelay
00007c3c g     F .text	0000011c sprintf
000061b8 g     F .text	00000090 twi_read
000077f4 g     F .text	000000a8 hstr2int
00004418 g     F .text	00000104 intc_set_group_config
0000cc28 g     F .text	0000004c cpucfg_l1l2_reset_by_hardware
00007d58 g     F .text	00000114 fdt_check_header
00011ab4 g     F .text	00000148 ccu_set_mclk_onoff
00005064 g     F .text	000000a8 timer_stop
000088a0 g     F .text	000000a8 fdt_get_name
00004614 g     F .text	00000018 interrupt_set_mask
00009c9c g     F .text	0000005c notifier_notify
00008274 g     F .text	00000048 fdt_first_subnode
000040f0 g     F .text	00000058 intc_init
0000d27c g     F .text	00000174 cpucfg_cpu_resume_early
0000723c g     F .text	00000028 pmu_get_voltage_state
0000471c g     F .text	00000080 interrupt_query_pending
00005798 g     F .text	00000014 uart_get_baudrate
00005244 g     F .text	00000098 time_udelay
00004f68 g     F .text	00000028 timer_release
00006758 g     F .text	00000068 hwmsgbox_wait_queue_not_empty
00008164 g     F .text	00000110 fdt_next_node
0000a738 g     F .text	0000001c long_jump
000137e0 g       .bss	00000000 bss_end_addr
0001372c g     O .bss	00000004 delay_timer
00006d54 g     F .text	00000034 hwmsgbox_super_standby_exit
000137d0 g     O .bss	00000004 ccu_pll_periph0_reg_addr
00004838 g     F .text	00000008 pin_exit
000071b4 g     F .text	00000028 pmu_get_voltage
00011bfc g     F .text	000001c4 ccu_set_poweroff_gating_state
0000cc74 g     F .text	0000009c cpucfg_l1l2_reset_by_hardware_ext
000074b0 g     F .text	00000040 watchdog_enable
00007354 g     F .text	00000040 pmu_init
0000e534 g     F .text	00000128 mctl_phy_dx0_bit_delay_compensation_standby
000132f4 g     O .data	00000004 timer_lock
0000479c g     F .text	00000064 interrupt_clear_pending
0000bddc g     F .text	00000020 exit
0000a6cc g     F .text	0000001c arisc_para_init
000085e0 g     F .text	00000038 fdt_string
0000cc04 g     F .text	00000024 cpucfg_wait_l2_enter_wfi
0000c388 g       .text	00000000 __modsi3
000137d4 g     O .bss	00000004 ccu_pll_c0_cpux_reg_addr
00011dc0 g     F .text	00000150 ccu_set_poweroff_gating_state_ext
00007f38 g     F .text	0000017c fdt_next_tag
00004000 g     O dts_paras	00000088 arisc_para
000133d0 g     O .data	00000004 dram_crc_src
00004938 g     F .text	00000078 pin_set_drive
00009f3c g     F .text	0000001c debugger_init
000074f0 g     F .text	0000003c watchdog_disable
0000a378 g     F .text	00000354 startup_entry
00008e90 g     F .text	0000007c fdt_get_alias_namelen
00004800 g     F .text	00000018 interrupt_get_current_intno
00004c6c g     F .text	000000bc timer_isr
00009cf8 g     F .text	00000010 message_valid
00005b10 g     F .text	000006a8 twi_byte_rw
00004a90 g     F .text	0000008c pin_set_int_trigger_mode
000052dc g       .text	00000000 time_cdelay
000045bc g     F .text	00000018 interrupt_enable
00009628 g     F .text	0000008c fdt_stringlist_count
000078e4 g     F .text	00000020 strlen
00013730 g     O .bss	00000004 ptimerc_regs
0000caac g     F .text	00000058 cpucfg_set_cpu_reset_state_ext
0000d17c g     F .text	00000040 set_secondary_entry
0000a9e4 g     F .text	0000001c wakeup_timer_stop
00011a8c g     F .text	00000014 save_state_flag
0000a730 g     F .text	00000008 standby_exit
0000ca5c g     F .text	00000050 cpucfg_set_cpu_reset_state
00007a1c g     F .text	00000034 strchr
0000a8d0 g     F .text	0000008c default_wakeup_handler
0000cb34 g     F .text	00000054 cpucfg_counter_read
000042b8 g     F .text	00000074 intc_interrupt_is_enabled
0000740c g     F .text	0000007c watchdog_init
00009f84 g     F .text	00000018 debugger_get
0000a95c g     F .text	0000004c wakeup_timer_init
000096b4 g     F .text	000000dc fdt_stringlist_search
00009880 g     F .text	00000060 fdt_node_check_compatible
0000462c g     F .text	00000018 interrupt_set_group_config
000053f8 g     F .text	00000078 uart_exit
00008c2c g     F .text	0000008c fdt_getprop_by_offset
0000bb78 g     F .text	0000013c sys_op
00009b30 g     F .text	00000008 notifier_exit
00008618 g     F .text	000000a8 fdt_get_mem_rsv
0000908c g     F .text	000001cc fdt_get_path
000137d8 g     O .bss	00000004 ccu_reg_addr
00009b38 g     F .text	000000cc notifier_insert
000133bc g     O .data	00000010 pmu_axp806_ops



Disassembly of section .vectors:

00000000 <.vectors>:
	...
 100:	00 00 2f 44 	l.j be10 <reset_handler>
 104:	15 00 00 00 	l.nop 0x0
	...
 200:	00 00 2f 4f 	l.j bf3c <bus_error_exception_handler>
 204:	15 00 00 00 	l.nop 0x0
	...
 300:	00 00 2f 18 	l.j bf60 <data_page_fault_exception_handler>
 304:	15 00 00 00 	l.nop 0x0
	...
 400:	00 00 2e e1 	l.j bf84 <insn_page_fault_exception_handler>
 404:	15 00 00 00 	l.nop 0x0
	...
 500:	00 00 2e aa 	l.j bfa8 <timer_exception_handler>
 504:	15 00 00 00 	l.nop 0x0
	...
 600:	00 00 2e 73 	l.j bfcc <aligment_exception_handler>
 604:	15 00 00 00 	l.nop 0x0
	...
 700:	00 00 2e 3c 	l.j bff0 <illegal_exception_handler>
 704:	15 00 00 00 	l.nop 0x0
	...
 800:	00 00 2e 05 	l.j c014 <irq_exception_handler>
 804:	15 00 00 00 	l.nop 0x0
	...
 900:	00 00 2d ce 	l.j c038 <dtlb_miss_exception_handler>
 904:	15 00 00 00 	l.nop 0x0
	...
 a00:	00 00 2d 97 	l.j c05c <itlb_miss_exception_handler>
 a04:	15 00 00 00 	l.nop 0x0
	...
 b00:	00 00 2d 60 	l.j c080 <range_exception_handler>
 b04:	15 00 00 00 	l.nop 0x0
	...
 c00:	00 00 2d 29 	l.j c0a4 <syscall_exception_handler>
 c04:	15 00 00 00 	l.nop 0x0
	...
 d00:	00 00 2c f2 	l.j c0c8 <fpu_exception_handler>
 d04:	15 00 00 00 	l.nop 0x0
	...
 e00:	00 00 2c bb 	l.j c0ec <trap_exception_handler>
 e04:	15 00 00 00 	l.nop 0x0

Disassembly of section .text:

000040f0 <intc_init>:
* Note       :
*********************************************************************************************************
*/
s32 intc_init(void)
{
	pintc_regs = (struct intc_regs *)(R_INTC_REG_BASE);
    40f0:	18 60 07 02 	l.movhi r3,0x702
    40f4:	18 80 00 01 	l.movhi r4,0x1
    40f8:	a8 63 10 00 	l.ori r3,r3,0x1000
    40fc:	a8 84 35 fc 	l.ori r4,r4,0x35fc
*
* Note       :
*********************************************************************************************************
*/
s32 intc_init(void)
{
    4100:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	pintc_regs = (struct intc_regs *)(R_INTC_REG_BASE);

	/*initialize interrupt controller */
	pintc_regs->enable = 0x0;
    4104:	9c 40 00 00 	l.addi r2,r0,0x0
* Note       :
*********************************************************************************************************
*/
s32 intc_init(void)
{
	pintc_regs = (struct intc_regs *)(R_INTC_REG_BASE);
    4108:	d4 04 18 00 	l.sw 0x0(r4),r3

	/*initialize interrupt controller */
	pintc_regs->enable = 0x0;
    410c:	d4 03 10 40 	l.sw 0x40(r3),r2
	pintc_regs->mask = 0x0;
	pintc_regs->pending = 0xffffffff;
    4110:	9c 80 ff ff 	l.addi r4,r0,0xffffffff
{
	pintc_regs = (struct intc_regs *)(R_INTC_REG_BASE);

	/*initialize interrupt controller */
	pintc_regs->enable = 0x0;
	pintc_regs->mask = 0x0;
    4114:	d4 03 10 50 	l.sw 0x50(r3),r2
	pintc_regs->pending = 0xffffffff;
    4118:	d4 03 20 10 	l.sw 0x10(r3),r4

	pintc_regs->enable1 = 0x0;
    411c:	d4 03 10 44 	l.sw 0x44(r3),r2
	pintc_regs->mask1 = 0x0;
    4120:	d4 03 10 54 	l.sw 0x54(r3),r2
	pintc_regs->pending1 = 0xffffffff;
    4124:	d4 03 20 14 	l.sw 0x14(r3),r4

	pintc_regs->enable2 = 0x0;
    4128:	d4 03 10 48 	l.sw 0x48(r3),r2
	pintc_regs->mask2 = 0x0;
    412c:	d4 03 10 58 	l.sw 0x58(r3),r2
*
* Note       :
*********************************************************************************************************
*/
s32 intc_init(void)
{
    4130:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	pintc_regs->mask1 = 0x0;
	pintc_regs->pending1 = 0xffffffff;

	pintc_regs->enable2 = 0x0;
	pintc_regs->mask2 = 0x0;
	pintc_regs->pending2 = 0xffffffff;
    4134:	d4 03 20 18 	l.sw 0x18(r3),r4
	return OK;
}
    4138:	9c 21 00 04 	l.addi r1,r1,0x4
    413c:	a9 62 00 00 	l.ori r11,r2,0x0
    4140:	44 00 48 00 	l.jr r9
    4144:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004148 <intc_exit>:
* Note       :
*********************************************************************************************************
*/
s32 intc_exit(void)
{
	pintc_regs = NULL;
    4148:	18 60 00 01 	l.movhi r3,0x1
*
* Note       :
*********************************************************************************************************
*/
s32 intc_exit(void)
{
    414c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	pintc_regs = NULL;
    4150:	a8 63 35 fc 	l.ori r3,r3,0x35fc
    4154:	9c 40 00 00 	l.addi r2,r0,0x0
*
* Note       :
*********************************************************************************************************
*/
s32 intc_exit(void)
{
    4158:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	pintc_regs = NULL;
    415c:	d4 03 10 00 	l.sw 0x0(r3),r2

	return OK;
}
    4160:	9c 21 00 04 	l.addi r1,r1,0x4
    4164:	a9 62 00 00 	l.ori r11,r2,0x0
    4168:	44 00 48 00 	l.jr r9
    416c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004170 <intc_enable_interrupt>:

	/*
	 * NMI interrupt should clear before enable.
	 * by sunny at 2012-6-12 19:30:22.
	 */
	if (intno == INTC_R_NMI_IRQ) {
    4170:	bc 23 00 00 	l.sfnei r3,0x0
    4174:	10 00 00 09 	l.bf 4198 <intc_enable_interrupt+0x28>
    4178:	bc 43 00 1f 	l.sfgtui r3,0x1f
		INF("clean NMI interrupt pending\n");
		pintc_regs->pending = (1 << intno);
    417c:	18 80 00 01 	l.movhi r4,0x1
    4180:	9c a0 00 01 	l.addi r5,r0,0x1
    4184:	a8 84 35 fc 	l.ori r4,r4,0x35fc
    4188:	84 84 00 00 	l.lwz r4,0x0(r4)
    418c:	d4 04 28 10 	l.sw 0x10(r4),r5
	}

	/*enable interrupt which number is intno */
	if (intno <= 31)
		pintc_regs->enable |= (1 << intno);
    4190:	00 00 00 05 	l.j 41a4 <intc_enable_interrupt+0x34>
    4194:	18 80 00 01 	l.movhi r4,0x1
		INF("clean NMI interrupt pending\n");
		pintc_regs->pending = (1 << intno);
	}

	/*enable interrupt which number is intno */
	if (intno <= 31)
    4198:	10 00 00 0c 	l.bf 41c8 <intc_enable_interrupt+0x58>
    419c:	9c a3 ff e0 	l.addi r5,r3,0xffffffe0
		pintc_regs->enable |= (1 << intno);
    41a0:	18 80 00 01 	l.movhi r4,0x1
    41a4:	9c c0 00 01 	l.addi r6,r0,0x1
    41a8:	a8 84 35 fc 	l.ori r4,r4,0x35fc
    41ac:	e0 66 18 08 	l.sll r3,r6,r3
    41b0:	84 84 00 00 	l.lwz r4,0x0(r4)
    41b4:	84 a4 00 40 	l.lwz r5,0x40(r4)
    41b8:	e0 63 28 04 	l.or r3,r3,r5
    41bc:	d4 04 18 40 	l.sw 0x40(r4),r3
		pintc_regs->enable2 |= (1 << (intno - 64));

	INF("intno:%d interrupt enable\n", intno);

	return OK;
}
    41c0:	00 00 00 16 	l.j 4218 <intc_enable_interrupt+0xa8>
    41c4:	9d 60 00 00 	l.addi r11,r0,0x0
    41c8:	18 80 00 01 	l.movhi r4,0x1
	}

	/*enable interrupt which number is intno */
	if (intno <= 31)
		pintc_regs->enable |= (1 << intno);
	else if (intno > 31 && intno <= 63)
    41cc:	bc 45 00 1f 	l.sfgtui r5,0x1f
    41d0:	10 00 00 0a 	l.bf 41f8 <intc_enable_interrupt+0x88>
    41d4:	a8 84 35 fc 	l.ori r4,r4,0x35fc
		pintc_regs->enable1 |= (1 << (intno - 32));
    41d8:	9c c0 00 01 	l.addi r6,r0,0x1
    41dc:	84 64 00 00 	l.lwz r3,0x0(r4)
    41e0:	e0 a6 28 08 	l.sll r5,r6,r5
    41e4:	84 83 00 44 	l.lwz r4,0x44(r3)
    41e8:	e0 a5 20 04 	l.or r5,r5,r4
    41ec:	d4 03 28 44 	l.sw 0x44(r3),r5
		pintc_regs->enable2 |= (1 << (intno - 64));

	INF("intno:%d interrupt enable\n", intno);

	return OK;
}
    41f0:	00 00 00 0a 	l.j 4218 <intc_enable_interrupt+0xa8>
    41f4:	9d 60 00 00 	l.addi r11,r0,0x0
	if (intno <= 31)
		pintc_regs->enable |= (1 << intno);
	else if (intno > 31 && intno <= 63)
		pintc_regs->enable1 |= (1 << (intno - 32));
	else
		pintc_regs->enable2 |= (1 << (intno - 64));
    41f8:	9c 63 ff c0 	l.addi r3,r3,0xffffffc0
    41fc:	9c c0 00 01 	l.addi r6,r0,0x1
    4200:	84 84 00 00 	l.lwz r4,0x0(r4)
    4204:	e0 66 18 08 	l.sll r3,r6,r3
    4208:	84 a4 00 48 	l.lwz r5,0x48(r4)
    420c:	e0 63 28 04 	l.or r3,r3,r5
    4210:	d4 04 18 48 	l.sw 0x48(r4),r3

	INF("intno:%d interrupt enable\n", intno);

	return OK;
}
    4214:	9d 60 00 00 	l.addi r11,r0,0x0
    4218:	44 00 48 00 	l.jr r9
    421c:	15 00 00 00 	l.nop 0x0

00004220 <intc_disable_interrupt>:
{
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	/*enable interrupt which number is intno */
	if (intno <= 31)
    4220:	bc 43 00 1f 	l.sfgtui r3,0x1f
    4224:	10 00 00 0d 	l.bf 4258 <intc_disable_interrupt+0x38>
    4228:	9c a3 ff e0 	l.addi r5,r3,0xffffffe0
		pintc_regs->enable &= ~(1 << intno);
    422c:	18 80 00 01 	l.movhi r4,0x1
    4230:	9c c0 00 01 	l.addi r6,r0,0x1
    4234:	a8 84 35 fc 	l.ori r4,r4,0x35fc
    4238:	e0 66 18 08 	l.sll r3,r6,r3
    423c:	84 84 00 00 	l.lwz r4,0x0(r4)
    4240:	ac 63 ff ff 	l.xori r3,r3,0xffffffff
    4244:	84 a4 00 40 	l.lwz r5,0x40(r4)
    4248:	e0 63 28 03 	l.and r3,r3,r5
    424c:	d4 04 18 40 	l.sw 0x40(r4),r3
		pintc_regs->enable1 &= ~(1 << (intno - 32));
	else
		pintc_regs->enable2 &= ~(1 << (intno - 64));

	return OK;
}
    4250:	00 00 00 18 	l.j 42b0 <intc_disable_interrupt+0x90>
    4254:	9d 60 00 00 	l.addi r11,r0,0x0
    4258:	18 80 00 01 	l.movhi r4,0x1
	ASSERT(intno < IRQ_SOUCE_MAX);

	/*enable interrupt which number is intno */
	if (intno <= 31)
		pintc_regs->enable &= ~(1 << intno);
	else if (intno > 31 && intno <= 63)
    425c:	bc 45 00 1f 	l.sfgtui r5,0x1f
    4260:	10 00 00 0b 	l.bf 428c <intc_disable_interrupt+0x6c>
    4264:	a8 84 35 fc 	l.ori r4,r4,0x35fc
		pintc_regs->enable1 &= ~(1 << (intno - 32));
    4268:	9c c0 00 01 	l.addi r6,r0,0x1
    426c:	84 64 00 00 	l.lwz r3,0x0(r4)
    4270:	e0 a6 28 08 	l.sll r5,r6,r5
    4274:	84 83 00 44 	l.lwz r4,0x44(r3)
    4278:	ac a5 ff ff 	l.xori r5,r5,0xffffffff
    427c:	e0 a5 20 03 	l.and r5,r5,r4
    4280:	d4 03 28 44 	l.sw 0x44(r3),r5
	else
		pintc_regs->enable2 &= ~(1 << (intno - 64));

	return OK;
}
    4284:	00 00 00 0b 	l.j 42b0 <intc_disable_interrupt+0x90>
    4288:	9d 60 00 00 	l.addi r11,r0,0x0
	if (intno <= 31)
		pintc_regs->enable &= ~(1 << intno);
	else if (intno > 31 && intno <= 63)
		pintc_regs->enable1 &= ~(1 << (intno - 32));
	else
		pintc_regs->enable2 &= ~(1 << (intno - 64));
    428c:	9c 63 ff c0 	l.addi r3,r3,0xffffffc0
    4290:	9c c0 00 01 	l.addi r6,r0,0x1
    4294:	84 84 00 00 	l.lwz r4,0x0(r4)
    4298:	e0 66 18 08 	l.sll r3,r6,r3
    429c:	84 a4 00 48 	l.lwz r5,0x48(r4)
    42a0:	ac 63 ff ff 	l.xori r3,r3,0xffffffff
    42a4:	e0 63 28 03 	l.and r3,r3,r5
    42a8:	d4 04 18 48 	l.sw 0x48(r4),r3

	return OK;
}
    42ac:	9d 60 00 00 	l.addi r11,r0,0x0
    42b0:	44 00 48 00 	l.jr r9
    42b4:	15 00 00 00 	l.nop 0x0

000042b8 <intc_interrupt_is_enabled>:

	/* intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	/* get interrupt enabled status which number is intno */
	if (intno <= 31)
    42b8:	bc 43 00 1f 	l.sfgtui r3,0x1f
    42bc:	10 00 00 08 	l.bf 42dc <intc_interrupt_is_enabled+0x24>
    42c0:	15 00 00 00 	l.nop 0x0
		enable_status = pintc_regs->enable & (1 << intno);
    42c4:	18 80 00 01 	l.movhi r4,0x1
    42c8:	a8 84 35 fc 	l.ori r4,r4,0x35fc
    42cc:	84 84 00 00 	l.lwz r4,0x0(r4)
    42d0:	84 84 00 40 	l.lwz r4,0x40(r4)
	else if (intno > 31 && intno <= 63)
		enable_status = pintc_regs->enable1 & (1 << (intno - 32));
	else
		enable_status = pintc_regs->enable2 & (1 << (intno - 64));
    42d4:	00 00 00 10 	l.j 4314 <intc_interrupt_is_enabled+0x5c>
    42d8:	9c a0 00 01 	l.addi r5,r0,0x1
	ASSERT(intno < IRQ_SOUCE_MAX);

	/* get interrupt enabled status which number is intno */
	if (intno <= 31)
		enable_status = pintc_regs->enable & (1 << intno);
	else if (intno > 31 && intno <= 63)
    42dc:	9c a3 ff e0 	l.addi r5,r3,0xffffffe0
    42e0:	18 80 00 01 	l.movhi r4,0x1
    42e4:	bc 45 00 1f 	l.sfgtui r5,0x1f
    42e8:	10 00 00 07 	l.bf 4304 <intc_interrupt_is_enabled+0x4c>
    42ec:	a8 84 35 fc 	l.ori r4,r4,0x35fc
		enable_status = pintc_regs->enable1 & (1 << (intno - 32));
    42f0:	84 64 00 00 	l.lwz r3,0x0(r4)
    42f4:	84 83 00 44 	l.lwz r4,0x44(r3)
    42f8:	9c 60 00 01 	l.addi r3,r0,0x1
    42fc:	00 00 00 07 	l.j 4318 <intc_interrupt_is_enabled+0x60>
    4300:	e0 63 28 08 	l.sll r3,r3,r5
	else
		enable_status = pintc_regs->enable2 & (1 << (intno - 64));
    4304:	84 84 00 00 	l.lwz r4,0x0(r4)
    4308:	9c 63 ff c0 	l.addi r3,r3,0xffffffc0
    430c:	84 84 00 48 	l.lwz r4,0x48(r4)
    4310:	9c a0 00 01 	l.addi r5,r0,0x1
    4314:	e0 65 18 08 	l.sll r3,r5,r3
    4318:	e0 63 20 03 	l.and r3,r3,r4

	return (!!enable_status);
    431c:	e0 80 18 02 	l.sub r4,r0,r3
    4320:	e0 64 18 04 	l.or r3,r4,r3
}
    4324:	44 00 48 00 	l.jr r9
    4328:	b9 63 00 5f 	l.srli r11,r3,0x1f

0000432c <intc_get_current_interrupt>:
*/
u32 intc_get_current_interrupt(void)
{
	volatile u32 interrupt;

	interrupt = (u32) ((pintc_regs->vector) >> 2);
    432c:	18 60 00 01 	l.movhi r3,0x1
*
* Note       :
*********************************************************************************************************
*/
u32 intc_get_current_interrupt(void)
{
    4330:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	volatile u32 interrupt;

	interrupt = (u32) ((pintc_regs->vector) >> 2);
    4334:	a8 63 35 fc 	l.ori r3,r3,0x35fc
    4338:	84 63 00 00 	l.lwz r3,0x0(r3)
    433c:	84 63 00 00 	l.lwz r3,0x0(r3)
    4340:	b8 63 00 42 	l.srli r3,r3,0x2
    4344:	d4 01 18 00 	l.sw 0x0(r1),r3

	return interrupt;
}
    4348:	85 61 00 00 	l.lwz r11,0x0(r1)
    434c:	44 00 48 00 	l.jr r9
    4350:	9c 21 00 04 	l.addi r1,r1,0x4

00004354 <intc_set_mask>:
s32 intc_set_mask(u32 intno, u32 mask)
{
	/* intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);
	/* enable interrupt which number is intno */
	if (intno <= 31) {
    4354:	bc 43 00 1f 	l.sfgtui r3,0x1f
    4358:	10 00 00 11 	l.bf 439c <intc_set_mask+0x48>
    435c:	9c c3 ff e0 	l.addi r6,r3,0xffffffe0
		pintc_regs->mask &= ~(1 << intno);
    4360:	18 a0 00 01 	l.movhi r5,0x1
    4364:	9c c0 00 01 	l.addi r6,r0,0x1
    4368:	a8 a5 35 fc 	l.ori r5,r5,0x35fc
    436c:	e0 c6 18 08 	l.sll r6,r6,r3
    4370:	84 a5 00 00 	l.lwz r5,0x0(r5)
		pintc_regs->mask |= (mask << intno);
    4374:	e0 64 18 08 	l.sll r3,r4,r3
{
	/* intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);
	/* enable interrupt which number is intno */
	if (intno <= 31) {
		pintc_regs->mask &= ~(1 << intno);
    4378:	84 e5 00 50 	l.lwz r7,0x50(r5)
    437c:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4380:	e0 c6 38 03 	l.and r6,r6,r7
    4384:	d4 05 30 50 	l.sw 0x50(r5),r6
		pintc_regs->mask |= (mask << intno);
    4388:	84 c5 00 50 	l.lwz r6,0x50(r5)
    438c:	e0 63 30 04 	l.or r3,r3,r6
    4390:	d4 05 18 50 	l.sw 0x50(r5),r3
		pintc_regs->mask2 &= ~(1 << (intno - 64));
		pintc_regs->mask2 |= (mask << intno);
	}

	return OK;
}
    4394:	00 00 00 1f 	l.j 4410 <intc_set_mask+0xbc>
    4398:	9d 60 00 00 	l.addi r11,r0,0x0
    439c:	18 a0 00 01 	l.movhi r5,0x1
	ASSERT(intno < IRQ_SOUCE_MAX);
	/* enable interrupt which number is intno */
	if (intno <= 31) {
		pintc_regs->mask &= ~(1 << intno);
		pintc_regs->mask |= (mask << intno);
	} else if (intno > 31 && intno <= 63) {
    43a0:	bc 46 00 1f 	l.sfgtui r6,0x1f
    43a4:	a8 a5 35 fc 	l.ori r5,r5,0x35fc
    43a8:	10 00 00 0e 	l.bf 43e0 <intc_set_mask+0x8c>
    43ac:	e0 84 18 08 	l.sll r4,r4,r3
		pintc_regs->mask1 &= ~(1 << (intno - 32));
    43b0:	9c e0 00 01 	l.addi r7,r0,0x1
    43b4:	84 a5 00 00 	l.lwz r5,0x0(r5)
    43b8:	e0 c7 30 08 	l.sll r6,r7,r6
    43bc:	84 65 00 54 	l.lwz r3,0x54(r5)
    43c0:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    43c4:	e0 c6 18 03 	l.and r6,r6,r3
    43c8:	d4 05 30 54 	l.sw 0x54(r5),r6
		pintc_regs->mask1 |= (mask << intno);
    43cc:	84 65 00 54 	l.lwz r3,0x54(r5)
    43d0:	e0 84 18 04 	l.or r4,r4,r3
    43d4:	d4 05 20 54 	l.sw 0x54(r5),r4
		pintc_regs->mask2 &= ~(1 << (intno - 64));
		pintc_regs->mask2 |= (mask << intno);
	}

	return OK;
}
    43d8:	00 00 00 0e 	l.j 4410 <intc_set_mask+0xbc>
    43dc:	9d 60 00 00 	l.addi r11,r0,0x0
		pintc_regs->mask |= (mask << intno);
	} else if (intno > 31 && intno <= 63) {
		pintc_regs->mask1 &= ~(1 << (intno - 32));
		pintc_regs->mask1 |= (mask << intno);
	} else {
		pintc_regs->mask2 &= ~(1 << (intno - 64));
    43e0:	9c 63 ff c0 	l.addi r3,r3,0xffffffc0
    43e4:	9c e0 00 01 	l.addi r7,r0,0x1
    43e8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    43ec:	e0 67 18 08 	l.sll r3,r7,r3
    43f0:	84 c5 00 58 	l.lwz r6,0x58(r5)
    43f4:	ac 63 ff ff 	l.xori r3,r3,0xffffffff
    43f8:	e0 63 30 03 	l.and r3,r3,r6
    43fc:	d4 05 18 58 	l.sw 0x58(r5),r3
		pintc_regs->mask2 |= (mask << intno);
    4400:	84 65 00 58 	l.lwz r3,0x58(r5)
    4404:	e0 84 18 04 	l.or r4,r4,r3
    4408:	d4 05 20 58 	l.sw 0x58(r5),r4
	}

	return OK;
}
    440c:	9d 60 00 00 	l.addi r11,r0,0x0
    4410:	44 00 48 00 	l.jr r9
    4414:	15 00 00 00 	l.nop 0x0

00004418 <intc_set_group_config>:

s32 intc_set_group_config(u32 grp_irq_num, u32 mask)
{
	if (grp_irq_num <= 31) {
    4418:	bc 43 00 1f 	l.sfgtui r3,0x1f
    441c:	10 00 00 11 	l.bf 4460 <intc_set_group_config+0x48>
    4420:	9c c3 ff e0 	l.addi r6,r3,0xffffffe0
		pintc_regs->group_config0 &= ~(1 << grp_irq_num);
    4424:	18 a0 00 01 	l.movhi r5,0x1
    4428:	9c c0 00 01 	l.addi r6,r0,0x1
    442c:	a8 a5 35 fc 	l.ori r5,r5,0x35fc
    4430:	e0 c6 18 08 	l.sll r6,r6,r3
    4434:	84 a5 00 00 	l.lwz r5,0x0(r5)
		pintc_regs->group_config0 |= (mask << grp_irq_num);
    4438:	e0 64 18 08 	l.sll r3,r4,r3
}

s32 intc_set_group_config(u32 grp_irq_num, u32 mask)
{
	if (grp_irq_num <= 31) {
		pintc_regs->group_config0 &= ~(1 << grp_irq_num);
    443c:	84 e5 00 c0 	l.lwz r7,0xc0(r5)
    4440:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4444:	e0 c6 38 03 	l.and r6,r6,r7
    4448:	d4 05 30 c0 	l.sw 0xc0(r5),r6
		pintc_regs->group_config0 |= (mask << grp_irq_num);
    444c:	84 c5 00 c0 	l.lwz r6,0xc0(r5)
    4450:	e0 63 30 04 	l.or r3,r3,r6
    4454:	d4 05 18 c0 	l.sw 0xc0(r5),r3
		pintc_regs->group_config3 &= ~(1 << (grp_irq_num - 64));
		pintc_regs->group_config3 |= (mask << grp_irq_num);
	}

	return OK;
}
    4458:	00 00 00 2f 	l.j 4514 <intc_set_group_config+0xfc>
    445c:	9d 60 00 00 	l.addi r11,r0,0x0
s32 intc_set_group_config(u32 grp_irq_num, u32 mask)
{
	if (grp_irq_num <= 31) {
		pintc_regs->group_config0 &= ~(1 << grp_irq_num);
		pintc_regs->group_config0 |= (mask << grp_irq_num);
	} else if (grp_irq_num > 31 && grp_irq_num <= 63) {
    4460:	bc 46 00 1f 	l.sfgtui r6,0x1f
    4464:	10 00 00 10 	l.bf 44a4 <intc_set_group_config+0x8c>
    4468:	18 a0 00 01 	l.movhi r5,0x1
		pintc_regs->group_config1 &= ~(1 << (grp_irq_num - 32));
    446c:	9d 00 00 01 	l.addi r8,r0,0x1
    4470:	a8 a5 35 fc 	l.ori r5,r5,0x35fc
    4474:	e0 c8 30 08 	l.sll r6,r8,r6
    4478:	84 a5 00 00 	l.lwz r5,0x0(r5)
		pintc_regs->group_config1 |= (mask << grp_irq_num);
    447c:	e0 64 18 08 	l.sll r3,r4,r3
{
	if (grp_irq_num <= 31) {
		pintc_regs->group_config0 &= ~(1 << grp_irq_num);
		pintc_regs->group_config0 |= (mask << grp_irq_num);
	} else if (grp_irq_num > 31 && grp_irq_num <= 63) {
		pintc_regs->group_config1 &= ~(1 << (grp_irq_num - 32));
    4480:	84 e5 00 c4 	l.lwz r7,0xc4(r5)
    4484:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4488:	e0 c6 38 03 	l.and r6,r6,r7
    448c:	d4 05 30 c4 	l.sw 0xc4(r5),r6
		pintc_regs->group_config1 |= (mask << grp_irq_num);
    4490:	84 c5 00 c4 	l.lwz r6,0xc4(r5)
    4494:	e0 63 30 04 	l.or r3,r3,r6
    4498:	d4 05 18 c4 	l.sw 0xc4(r5),r3
		pintc_regs->group_config3 &= ~(1 << (grp_irq_num - 64));
		pintc_regs->group_config3 |= (mask << grp_irq_num);
	}

	return OK;
}
    449c:	00 00 00 1e 	l.j 4514 <intc_set_group_config+0xfc>
    44a0:	9d 60 00 00 	l.addi r11,r0,0x0
		pintc_regs->group_config0 &= ~(1 << grp_irq_num);
		pintc_regs->group_config0 |= (mask << grp_irq_num);
	} else if (grp_irq_num > 31 && grp_irq_num <= 63) {
		pintc_regs->group_config1 &= ~(1 << (grp_irq_num - 32));
		pintc_regs->group_config1 |= (mask << grp_irq_num);
	} else if (grp_irq_num > 63 && grp_irq_num <= 95) {
    44a4:	9c c3 ff c0 	l.addi r6,r3,0xffffffc0
    44a8:	bc 46 00 1f 	l.sfgtui r6,0x1f
    44ac:	a8 a5 35 fc 	l.ori r5,r5,0x35fc
    44b0:	10 00 00 0e 	l.bf 44e8 <intc_set_group_config+0xd0>
    44b4:	e0 64 18 08 	l.sll r3,r4,r3
		pintc_regs->group_config2 &= ~(1 << (grp_irq_num - 64));
    44b8:	9c e0 00 01 	l.addi r7,r0,0x1
    44bc:	84 a5 00 00 	l.lwz r5,0x0(r5)
    44c0:	e0 c7 30 08 	l.sll r6,r7,r6
    44c4:	84 85 00 c8 	l.lwz r4,0xc8(r5)
    44c8:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    44cc:	e0 c6 20 03 	l.and r6,r6,r4
    44d0:	d4 05 30 c8 	l.sw 0xc8(r5),r6
		pintc_regs->group_config2 |= (mask << grp_irq_num);
    44d4:	84 85 00 c8 	l.lwz r4,0xc8(r5)
    44d8:	e0 63 20 04 	l.or r3,r3,r4
    44dc:	d4 05 18 c8 	l.sw 0xc8(r5),r3
		pintc_regs->group_config3 &= ~(1 << (grp_irq_num - 64));
		pintc_regs->group_config3 |= (mask << grp_irq_num);
	}

	return OK;
}
    44e0:	00 00 00 0d 	l.j 4514 <intc_set_group_config+0xfc>
    44e4:	9d 60 00 00 	l.addi r11,r0,0x0
		pintc_regs->group_config1 |= (mask << grp_irq_num);
	} else if (grp_irq_num > 63 && grp_irq_num <= 95) {
		pintc_regs->group_config2 &= ~(1 << (grp_irq_num - 64));
		pintc_regs->group_config2 |= (mask << grp_irq_num);
	} else {
		pintc_regs->group_config3 &= ~(1 << (grp_irq_num - 64));
    44e8:	9c e0 00 01 	l.addi r7,r0,0x1
    44ec:	84 a5 00 00 	l.lwz r5,0x0(r5)
    44f0:	e0 c7 30 08 	l.sll r6,r7,r6
    44f4:	84 85 00 cc 	l.lwz r4,0xcc(r5)
    44f8:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    44fc:	e0 c6 20 03 	l.and r6,r6,r4
    4500:	d4 05 30 cc 	l.sw 0xcc(r5),r6
		pintc_regs->group_config3 |= (mask << grp_irq_num);
    4504:	84 85 00 cc 	l.lwz r4,0xcc(r5)
    4508:	e0 63 20 04 	l.or r3,r3,r4
    450c:	d4 05 18 cc 	l.sw 0xcc(r5),r3
	}

	return OK;
}
    4510:	9d 60 00 00 	l.addi r11,r0,0x0
    4514:	44 00 48 00 	l.jr r9
    4518:	15 00 00 00 	l.nop 0x0

0000451c <isr_default>:
		pintc_regs->pending = (1 << (intno - 64));
	return OK;
}

s32 isr_default(void *arg)
{
    451c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	ERR("irq [%x] enable before ISR install\n",
    4520:	07 ff ff 83 	l.jal 432c <intc_get_current_interrupt>
    4524:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    4528:	18 80 00 01 	l.movhi r4,0x1
    452c:	9c 60 00 08 	l.addi r3,r0,0x8
    4530:	a8 84 25 34 	l.ori r4,r4,0x2534
    4534:	04 00 16 a1 	l.jal 9fb8 <debugger_printf>
    4538:	d4 01 58 00 	l.sw 0x0(r1),r11
	    intc_get_current_interrupt());

	return TRUE;
}
    453c:	9c 21 00 08 	l.addi r1,r1,0x8
    4540:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    4544:	44 00 48 00 	l.jr r9
    4548:	9d 60 00 01 	l.addi r11,r0,0x1

0000454c <interrupt_init>:
*
* Returns    :  OK if initialize interrupt manager succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_init(void)
{
    454c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    4550:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	s32 index;

	/*initialize interrupt controller */
	intc_init();
    4554:	07 ff fe e7 	l.jal 40f0 <intc_init>
    4558:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    455c:	18 60 00 01 	l.movhi r3,0x1

	/*initialize ISR table */
	for (index = 0; index < IRQ_SOUCE_MAX; index++) {
		isr_table[index].pisr = isr_default;
    4560:	18 80 00 00 	l.movhi r4,0x0
s32 interrupt_init(void)
{
	s32 index;

	/*initialize interrupt controller */
	intc_init();
    4564:	a8 63 36 04 	l.ori r3,r3,0x3604

	/*initialize ISR table */
	for (index = 0; index < IRQ_SOUCE_MAX; index++) {
		isr_table[index].pisr = isr_default;
    4568:	a8 84 45 1c 	l.ori r4,r4,0x451c
		isr_table[index].parg = NULL;
    456c:	9c 40 00 00 	l.addi r2,r0,0x0
	/*initialize interrupt controller */
	intc_init();

	/*initialize ISR table */
	for (index = 0; index < IRQ_SOUCE_MAX; index++) {
		isr_table[index].pisr = isr_default;
    4570:	d4 03 20 00 	l.sw 0x0(r3),r4
		isr_table[index].parg = NULL;
    4574:	d4 03 10 04 	l.sw 0x4(r3),r2

	/*initialize interrupt controller */
	intc_init();

	/*initialize ISR table */
	for (index = 0; index < IRQ_SOUCE_MAX; index++) {
    4578:	18 40 00 01 	l.movhi r2,0x1
		isr_table[index].pisr = isr_default;
		isr_table[index].parg = NULL;
    457c:	9c 63 00 08 	l.addi r3,r3,0x8

	/*initialize interrupt controller */
	intc_init();

	/*initialize ISR table */
	for (index = 0; index < IRQ_SOUCE_MAX; index++) {
    4580:	a8 42 37 2c 	l.ori r2,r2,0x372c
    4584:	e4 23 10 00 	l.sfne r3,r2
    4588:	13 ff ff f9 	l.bf 456c <interrupt_init+0x20>
    458c:	9d 60 00 00 	l.addi r11,r0,0x0
		isr_table[index].parg = NULL;
	}

	/*interrupt manager initialize succeeded */
	return OK;
}
    4590:	9c 21 00 08 	l.addi r1,r1,0x8
    4594:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    4598:	44 00 48 00 	l.jr r9
    459c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000045a0 <interrupt_exit>:
*
* Returns    :  OK if exit interrupt manager succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_exit(void)
{
    45a0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	intc_exit();
    45a4:	07 ff fe e9 	l.jal 4148 <intc_exit>
    45a8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc

	return OK;
}
    45ac:	9c 21 00 04 	l.addi r1,r1,0x4
    45b0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    45b4:	44 00 48 00 	l.jr r9
    45b8:	9d 60 00 00 	l.addi r11,r0,0x0

000045bc <interrupt_enable>:
*
* Returns    :  OK if enable interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_enable(u32 intno)
{
    45bc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    45c0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return intc_enable_interrupt(intno);
}
    45c4:	9c 21 00 04 	l.addi r1,r1,0x4
    45c8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
* Returns    :  OK if enable interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_enable(u32 intno)
{
	return intc_enable_interrupt(intno);
    45cc:	03 ff fe e9 	l.j 4170 <intc_enable_interrupt>
    45d0:	15 00 00 00 	l.nop 0x0

000045d4 <interrupt_disable>:
*
* Returns    :  OK if disable interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_disable(u32 intno)
{
    45d4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    45d8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return intc_disable_interrupt(intno);
}
    45dc:	9c 21 00 04 	l.addi r1,r1,0x4
    45e0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
* Returns    :  OK if disable interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_disable(u32 intno)
{
	return intc_disable_interrupt(intno);
    45e4:	03 ff ff 0f 	l.j 4220 <intc_disable_interrupt>
    45e8:	15 00 00 00 	l.nop 0x0

000045ec <interrupt_set_nmi_trigger>:
*/
s32 interrupt_set_nmi_trigger(u32 type)
{
	u32 value;

	pintc_regs->control = type;
    45ec:	18 80 00 01 	l.movhi r4,0x1
	value = pintc_regs->mask;
	value |= 0x1;
	pintc_regs->mask = value;

	return OK;
}
    45f0:	9d 60 00 00 	l.addi r11,r0,0x0
*/
s32 interrupt_set_nmi_trigger(u32 type)
{
	u32 value;

	pintc_regs->control = type;
    45f4:	a8 84 35 fc 	l.ori r4,r4,0x35fc
    45f8:	84 84 00 00 	l.lwz r4,0x0(r4)
    45fc:	d4 04 18 0c 	l.sw 0xc(r4),r3

	/*mask cpus nmi irq */
	value = pintc_regs->mask;
    4600:	84 64 00 50 	l.lwz r3,0x50(r4)
	value |= 0x1;
    4604:	a8 63 00 01 	l.ori r3,r3,0x1
	pintc_regs->mask = value;
    4608:	d4 04 18 50 	l.sw 0x50(r4),r3

	return OK;
}
    460c:	44 00 48 00 	l.jr r9
    4610:	15 00 00 00 	l.nop 0x0

00004614 <interrupt_set_mask>:

s32 interrupt_set_mask(u32 intno, u32 mask)
{
    4614:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    4618:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return intc_set_mask(intno, mask);
}
    461c:	9c 21 00 04 	l.addi r1,r1,0x4
    4620:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	return OK;
}

s32 interrupt_set_mask(u32 intno, u32 mask)
{
	return intc_set_mask(intno, mask);
    4624:	03 ff ff 4c 	l.j 4354 <intc_set_mask>
    4628:	15 00 00 00 	l.nop 0x0

0000462c <interrupt_set_group_config>:
}

s32 interrupt_set_group_config(u32 grp_irq_num, u32 mask)
{
    462c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    4630:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return intc_set_group_config(grp_irq_num, mask);
}
    4634:	9c 21 00 04 	l.addi r1,r1,0x4
    4638:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	return intc_set_mask(intno, mask);
}

s32 interrupt_set_group_config(u32 grp_irq_num, u32 mask)
{
	return intc_set_group_config(grp_irq_num, mask);
    463c:	03 ff ff 77 	l.j 4418 <intc_set_group_config>
    4640:	15 00 00 00 	l.nop 0x0

00004644 <install_isr>:
*
* Note       :  the ISR execute entironment : CPU disable interrupt response.
*********************************************************************************************************
*/
s32 install_isr(u32 intno, __pISR_t pisr, void *parg)
{
    4644:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	/*default isr, install directly */
	INF("install isr %x\n", intno);
	isr_table[intno].pisr = pisr;
    4648:	18 40 00 01 	l.movhi r2,0x1
    464c:	b8 63 00 03 	l.slli r3,r3,0x3
    4650:	a8 42 36 04 	l.ori r2,r2,0x3604
*
* Note       :  the ISR execute entironment : CPU disable interrupt response.
*********************************************************************************************************
*/
s32 install_isr(u32 intno, __pISR_t pisr, void *parg)
{
    4654:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	/*default isr, install directly */
	INF("install isr %x\n", intno);
	isr_table[intno].pisr = pisr;
    4658:	e0 63 10 00 	l.add r3,r3,r2
	isr_table[intno].parg = parg;

	return OK;
}
    465c:	9d 60 00 00 	l.addi r11,r0,0x0
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	/*default isr, install directly */
	INF("install isr %x\n", intno);
	isr_table[intno].pisr = pisr;
    4660:	d4 03 20 00 	l.sw 0x0(r3),r4
	isr_table[intno].parg = parg;
    4664:	d4 03 28 04 	l.sw 0x4(r3),r5

	return OK;
}
    4668:	9c 21 00 04 	l.addi r1,r1,0x4
    466c:	44 00 48 00 	l.jr r9
    4670:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004674 <uninstall_isr>:
*
* Returns    :  OK if uninstall ISR succeeded, others if failed.
*********************************************************************************************************
*/
s32 uninstall_isr(u32 intno, __pISR_t pisr)
{
    4674:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	if (isr_table[intno].pisr == pisr) {
    4678:	18 40 00 01 	l.movhi r2,0x1
    467c:	b8 63 00 03 	l.slli r3,r3,0x3
    4680:	a8 42 36 04 	l.ori r2,r2,0x3604
*
* Returns    :  OK if uninstall ISR succeeded, others if failed.
*********************************************************************************************************
*/
s32 uninstall_isr(u32 intno, __pISR_t pisr)
{
    4684:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	if (isr_table[intno].pisr == pisr) {
    4688:	e0 63 10 00 	l.add r3,r3,r2
    468c:	84 a3 00 00 	l.lwz r5,0x0(r3)
    4690:	e4 25 20 00 	l.sfne r5,r4
    4694:	10 00 00 09 	l.bf 46b8 <uninstall_isr+0x44>
    4698:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
		/*uninstall isr */
		isr_table[intno].pisr = isr_default;
    469c:	18 80 00 00 	l.movhi r4,0x0
		isr_table[intno].parg = NULL;
    46a0:	9c 40 00 00 	l.addi r2,r0,0x0
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	if (isr_table[intno].pisr == pisr) {
		/*uninstall isr */
		isr_table[intno].pisr = isr_default;
    46a4:	a8 84 45 1c 	l.ori r4,r4,0x451c
		isr_table[intno].parg = NULL;
    46a8:	d4 03 10 04 	l.sw 0x4(r3),r2
	/*intno can't beyond then IRQ_SOURCE_MAX */
	ASSERT(intno < IRQ_SOUCE_MAX);

	if (isr_table[intno].pisr == pisr) {
		/*uninstall isr */
		isr_table[intno].pisr = isr_default;
    46ac:	d4 03 20 00 	l.sw 0x0(r3),r4
		 */
		ERR("ISR not installed!\n");
		return -EFAIL;
	}

	return OK;
    46b0:	00 00 00 07 	l.j 46cc <uninstall_isr+0x58>
    46b4:	a9 62 00 00 	l.ori r11,r2,0x0
	} else {
		/*
		 * don't support shared interrupt now,
		 * by sunny at 2012-5-3 11:20:28.
		 */
		ERR("ISR not installed!\n");
    46b8:	18 80 00 01 	l.movhi r4,0x1
    46bc:	9c 60 00 08 	l.addi r3,r0,0x8
    46c0:	04 00 16 3e 	l.jal 9fb8 <debugger_printf>
    46c4:	a8 84 25 5c 	l.ori r4,r4,0x255c
		return -EFAIL;
    46c8:	9d 60 ff dc 	l.addi r11,r0,0xffffffdc
	}

	return OK;
}
    46cc:	9c 21 00 08 	l.addi r1,r1,0x8
    46d0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    46d4:	44 00 48 00 	l.jr r9
    46d8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000046dc <interrupt_entry>:
*
* Returns    :  OK if process CPU IRQ succeeded, others if failed.
*********************************************************************************************************
*/
s32 interrupt_entry(void)
{
    46dc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    46e0:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    46e4:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	u32 intno = intc_get_current_interrupt();
    46e8:	07 ff ff 11 	l.jal 432c <intc_get_current_interrupt>
    46ec:	18 40 00 01 	l.movhi r2,0x1

	/*
	 * process interrupt by call isr,
	 * not support shared intterrupt.
	 */
	(isr_table[intno].pisr) (isr_table[intno].parg);
    46f0:	b8 6b 00 03 	l.slli r3,r11,0x3
    46f4:	a8 42 36 04 	l.ori r2,r2,0x3604
    46f8:	e0 63 10 00 	l.add r3,r3,r2
    46fc:	85 63 00 00 	l.lwz r11,0x0(r3)
    4700:	48 00 58 00 	l.jalr r11
    4704:	84 63 00 04 	l.lwz r3,0x4(r3)

	return OK;
}
    4708:	9c 21 00 08 	l.addi r1,r1,0x8
    470c:	9d 60 00 00 	l.addi r11,r0,0x0
    4710:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    4714:	44 00 48 00 	l.jr r9
    4718:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000471c <interrupt_query_pending>:

s32 interrupt_query_pending(u32 intno)
{
	volatile u32 pending;

	if (intno <= 31)
    471c:	bc 43 00 1f 	l.sfgtui r3,0x1f
    4720:	10 00 00 08 	l.bf 4740 <interrupt_query_pending+0x24>
    4724:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		pending = pintc_regs->pending & (1 << intno);
    4728:	18 80 00 01 	l.movhi r4,0x1
    472c:	a8 84 35 fc 	l.ori r4,r4,0x35fc
    4730:	84 84 00 00 	l.lwz r4,0x0(r4)
    4734:	84 84 00 10 	l.lwz r4,0x10(r4)
	else if (intno > 31 && intno <= 63)
		pending = pintc_regs->pending1 & (1 << (intno - 32));
	else
		pending = pintc_regs->pending2 & (1 << (intno - 64));
    4738:	00 00 00 13 	l.j 4784 <interrupt_query_pending+0x68>
    473c:	9c a0 00 01 	l.addi r5,r0,0x1
{
	volatile u32 pending;

	if (intno <= 31)
		pending = pintc_regs->pending & (1 << intno);
	else if (intno > 31 && intno <= 63)
    4740:	9c a3 ff e0 	l.addi r5,r3,0xffffffe0
    4744:	18 80 00 01 	l.movhi r4,0x1
    4748:	bc 45 00 1f 	l.sfgtui r5,0x1f
    474c:	10 00 00 0a 	l.bf 4774 <interrupt_query_pending+0x58>
    4750:	a8 84 35 fc 	l.ori r4,r4,0x35fc
		pending = pintc_regs->pending1 & (1 << (intno - 32));
    4754:	84 64 00 00 	l.lwz r3,0x0(r4)
    4758:	9c 80 00 01 	l.addi r4,r0,0x1
    475c:	84 63 00 14 	l.lwz r3,0x14(r3)
    4760:	e0 a4 28 08 	l.sll r5,r4,r5
    4764:	e0 a5 18 03 	l.and r5,r5,r3
    4768:	d4 01 28 00 	l.sw 0x0(r1),r5
    476c:	00 00 00 09 	l.j 4790 <interrupt_query_pending+0x74>
    4770:	15 00 00 00 	l.nop 0x0
	else
		pending = pintc_regs->pending2 & (1 << (intno - 64));
    4774:	84 84 00 00 	l.lwz r4,0x0(r4)
    4778:	9c 63 ff c0 	l.addi r3,r3,0xffffffc0
    477c:	84 84 00 18 	l.lwz r4,0x18(r4)
    4780:	9c a0 00 01 	l.addi r5,r0,0x1
    4784:	e0 65 18 08 	l.sll r3,r5,r3
    4788:	e0 63 20 03 	l.and r3,r3,r4
    478c:	d4 01 18 00 	l.sw 0x0(r1),r3
	return pending;
}
    4790:	85 61 00 00 	l.lwz r11,0x0(r1)
    4794:	44 00 48 00 	l.jr r9
    4798:	9c 21 00 04 	l.addi r1,r1,0x4

0000479c <interrupt_clear_pending>:

s32 interrupt_clear_pending(u32 intno)
{
	if (intno <= 31)
    479c:	bc 43 00 1f 	l.sfgtui r3,0x1f
    47a0:	10 00 00 06 	l.bf 47b8 <interrupt_clear_pending+0x1c>
    47a4:	9c a3 ff e0 	l.addi r5,r3,0xffffffe0
		pintc_regs->pending = (1 << intno);
    47a8:	18 80 00 01 	l.movhi r4,0x1
    47ac:	a8 84 35 fc 	l.ori r4,r4,0x35fc
    47b0:	00 00 00 0e 	l.j 47e8 <interrupt_clear_pending+0x4c>
    47b4:	84 84 00 00 	l.lwz r4,0x0(r4)
    47b8:	18 80 00 01 	l.movhi r4,0x1
	else if (intno > 31 && intno <= 63)
    47bc:	bc 45 00 1f 	l.sfgtui r5,0x1f
    47c0:	10 00 00 08 	l.bf 47e0 <interrupt_clear_pending+0x44>
    47c4:	a8 84 35 fc 	l.ori r4,r4,0x35fc
		pintc_regs->pending = (1 << (intno - 32));
    47c8:	84 64 00 00 	l.lwz r3,0x0(r4)
    47cc:	9c 80 00 01 	l.addi r4,r0,0x1
    47d0:	e0 a4 28 08 	l.sll r5,r4,r5
    47d4:	d4 03 28 10 	l.sw 0x10(r3),r5
	else
		pintc_regs->pending = (1 << (intno - 64));
	return OK;
}
    47d8:	00 00 00 08 	l.j 47f8 <interrupt_clear_pending+0x5c>
    47dc:	9d 60 00 00 	l.addi r11,r0,0x0
	if (intno <= 31)
		pintc_regs->pending = (1 << intno);
	else if (intno > 31 && intno <= 63)
		pintc_regs->pending = (1 << (intno - 32));
	else
		pintc_regs->pending = (1 << (intno - 64));
    47e0:	84 84 00 00 	l.lwz r4,0x0(r4)
    47e4:	9c 63 ff c0 	l.addi r3,r3,0xffffffc0
    47e8:	9c a0 00 01 	l.addi r5,r0,0x1
    47ec:	e0 65 18 08 	l.sll r3,r5,r3
    47f0:	d4 04 18 10 	l.sw 0x10(r4),r3
	return OK;
}
    47f4:	9d 60 00 00 	l.addi r11,r0,0x0
    47f8:	44 00 48 00 	l.jr r9
    47fc:	15 00 00 00 	l.nop 0x0

00004800 <interrupt_get_current_intno>:

	return TRUE;
}

u32 interrupt_get_current_intno(void)
{
    4800:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    4804:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return intc_get_current_interrupt();
}
    4808:	9c 21 00 04 	l.addi r1,r1,0x4
    480c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	return TRUE;
}

u32 interrupt_get_current_intno(void)
{
	return intc_get_current_interrupt();
    4810:	03 ff fe c7 	l.j 432c <intc_get_current_interrupt>
    4814:	15 00 00 00 	l.nop 0x0

00004818 <interrupt_get_enabled>:
}

s32 interrupt_get_enabled(u32 intno)
{
    4818:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    481c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return intc_interrupt_is_enabled(intno);
}
    4820:	9c 21 00 04 	l.addi r1,r1,0x4
    4824:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	return intc_get_current_interrupt();
}

s32 interrupt_get_enabled(u32 intno)
{
	return intc_interrupt_is_enabled(intno);
    4828:	03 ff fe a4 	l.j 42b8 <intc_interrupt_is_enabled>
    482c:	15 00 00 00 	l.nop 0x0

00004830 <pin_init>:
*********************************************************************************************************
*/
s32 pin_init(void)
{
	return OK;
}
    4830:	44 00 48 00 	l.jr r9
    4834:	9d 60 00 00 	l.addi r11,r0,0x0

00004838 <pin_exit>:
*********************************************************************************************************
*/
s32 pin_exit(void)
{
	return OK;
}
    4838:	44 00 48 00 	l.jr r9
    483c:	9d 60 00 00 	l.addi r11,r0,0x0

00004840 <pin_set_status>:
*********************************************************************************************************
*/
s32 pin_set_status(u32 pin_grp, u32 pin_num, struct pin_status *pstatus)
{
	return OK;
}
    4840:	44 00 48 00 	l.jr r9
    4844:	9d 60 00 00 	l.addi r11,r0,0x0

00004848 <pin_set_multi_sel>:
{
	volatile u32 *addr;
	volatile u32 value;

	/*set multi-select */
	addr = PIN_REG_CFG(pin_grp, pin_num);
    4848:	b8 c3 00 03 	l.slli r6,r3,0x3
*
* Returns    :  OK if set pin multi-select succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_multi_sel(u32 pin_grp, u32 pin_num, u32 multi_sel)
{
    484c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 *addr;
	volatile u32 value;

	/*set multi-select */
	addr = PIN_REG_CFG(pin_grp, pin_num);
    4850:	18 40 01 c0 	l.movhi r2,0x1c0
    4854:	e0 66 18 00 	l.add r3,r6,r3
    4858:	a8 42 87 f7 	l.ori r2,r2,0x87f7
    485c:	b8 c4 00 43 	l.srli r6,r4,0x3
    4860:	e0 63 10 00 	l.add r3,r3,r2
	value = *addr;
	value &= ~(0x7 << ((pin_num & 0x7) * 4));
    4864:	a4 84 00 07 	l.andi r4,r4,0x7
{
	volatile u32 *addr;
	volatile u32 value;

	/*set multi-select */
	addr = PIN_REG_CFG(pin_grp, pin_num);
    4868:	e0 63 30 00 	l.add r3,r3,r6
*
* Returns    :  OK if set pin multi-select succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_multi_sel(u32 pin_grp, u32 pin_num, u32 multi_sel)
{
    486c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 *addr;
	volatile u32 value;

	/*set multi-select */
	addr = PIN_REG_CFG(pin_grp, pin_num);
    4870:	b8 63 00 02 	l.slli r3,r3,0x2
	value = *addr;
	value &= ~(0x7 << ((pin_num & 0x7) * 4));
    4874:	b8 84 00 02 	l.slli r4,r4,0x2
	value |= (multi_sel << ((pin_num & 0x7) * 4));
	*addr = value;

	return OK;
}
    4878:	9d 60 00 00 	l.addi r11,r0,0x0
	volatile u32 *addr;
	volatile u32 value;

	/*set multi-select */
	addr = PIN_REG_CFG(pin_grp, pin_num);
	value = *addr;
    487c:	84 c3 00 00 	l.lwz r6,0x0(r3)
    4880:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(0x7 << ((pin_num & 0x7) * 4));
    4884:	9c c0 00 07 	l.addi r6,r0,0x7
    4888:	84 e1 00 00 	l.lwz r7,0x0(r1)
    488c:	e0 c6 20 08 	l.sll r6,r6,r4
	value |= (multi_sel << ((pin_num & 0x7) * 4));
    4890:	e0 85 20 08 	l.sll r4,r5,r4
	volatile u32 value;

	/*set multi-select */
	addr = PIN_REG_CFG(pin_grp, pin_num);
	value = *addr;
	value &= ~(0x7 << ((pin_num & 0x7) * 4));
    4894:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4898:	e0 c6 38 03 	l.and r6,r6,r7
    489c:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |= (multi_sel << ((pin_num & 0x7) * 4));
    48a0:	84 c1 00 00 	l.lwz r6,0x0(r1)
    48a4:	e0 84 30 04 	l.or r4,r4,r6
    48a8:	d4 01 20 00 	l.sw 0x0(r1),r4
	*addr = value;
    48ac:	84 81 00 00 	l.lwz r4,0x0(r1)
    48b0:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    48b4:	9c 21 00 08 	l.addi r1,r1,0x8
    48b8:	44 00 48 00 	l.jr r9
    48bc:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

000048c0 <pin_set_pull>:
{
	volatile u32 *addr;
	volatile u32 value;

	/*set pull status */
	addr = PIN_REG_PULL(pin_grp, pin_num);
    48c0:	b8 c3 00 03 	l.slli r6,r3,0x3
*
* Returns    :  OK if set pin pull succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_pull(u32 pin_grp, u32 pin_num, u32 pull)
{
    48c4:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 *addr;
	volatile u32 value;

	/*set pull status */
	addr = PIN_REG_PULL(pin_grp, pin_num);
    48c8:	18 40 01 c0 	l.movhi r2,0x1c0
    48cc:	e0 66 18 00 	l.add r3,r6,r3
    48d0:	a8 42 87 fe 	l.ori r2,r2,0x87fe
    48d4:	b8 c4 00 44 	l.srli r6,r4,0x4
    48d8:	e0 63 10 00 	l.add r3,r3,r2
*
* Returns    :  OK if set pin pull succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_pull(u32 pin_grp, u32 pin_num, u32 pull)
{
    48dc:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 *addr;
	volatile u32 value;

	/*set pull status */
	addr = PIN_REG_PULL(pin_grp, pin_num);
    48e0:	e0 63 30 00 	l.add r3,r3,r6
	value = *addr;
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    48e4:	a4 84 00 0f 	l.andi r4,r4,0xf
{
	volatile u32 *addr;
	volatile u32 value;

	/*set pull status */
	addr = PIN_REG_PULL(pin_grp, pin_num);
    48e8:	b8 63 00 02 	l.slli r3,r3,0x2
	value = *addr;
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    48ec:	e0 84 20 00 	l.add r4,r4,r4
	value |= (pull << ((pin_num & 0xf) * 2));

	*addr = value;

	return OK;
}
    48f0:	9d 60 00 00 	l.addi r11,r0,0x0
	volatile u32 *addr;
	volatile u32 value;

	/*set pull status */
	addr = PIN_REG_PULL(pin_grp, pin_num);
	value = *addr;
    48f4:	84 c3 00 00 	l.lwz r6,0x0(r3)
    48f8:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    48fc:	9c c0 00 03 	l.addi r6,r0,0x3
    4900:	84 e1 00 00 	l.lwz r7,0x0(r1)
    4904:	e0 c6 20 08 	l.sll r6,r6,r4
	value |= (pull << ((pin_num & 0xf) * 2));
    4908:	e0 85 20 08 	l.sll r4,r5,r4
	volatile u32 value;

	/*set pull status */
	addr = PIN_REG_PULL(pin_grp, pin_num);
	value = *addr;
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    490c:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4910:	e0 c6 38 03 	l.and r6,r6,r7
    4914:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |= (pull << ((pin_num & 0xf) * 2));
    4918:	84 c1 00 00 	l.lwz r6,0x0(r1)
    491c:	e0 84 30 04 	l.or r4,r4,r6
    4920:	d4 01 20 00 	l.sw 0x0(r1),r4

	*addr = value;
    4924:	84 81 00 00 	l.lwz r4,0x0(r1)
    4928:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    492c:	9c 21 00 08 	l.addi r1,r1,0x8
    4930:	44 00 48 00 	l.jr r9
    4934:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004938 <pin_set_drive>:
{
	volatile u32 *addr;
	volatile u32 value;

	/*set drive level */
	addr = PIN_REG_DLEVEL(pin_grp, pin_num);
    4938:	b8 c3 00 03 	l.slli r6,r3,0x3
*
* Returns    :  OK if set pin drive succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_drive(u32 pin_grp, u32 pin_num, u32 drive)
{
    493c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 *addr;
	volatile u32 value;

	/*set drive level */
	addr = PIN_REG_DLEVEL(pin_grp, pin_num);
    4940:	18 40 01 c0 	l.movhi r2,0x1c0
    4944:	e0 66 18 00 	l.add r3,r6,r3
    4948:	a8 42 87 fc 	l.ori r2,r2,0x87fc
    494c:	b8 c4 00 44 	l.srli r6,r4,0x4
    4950:	e0 63 10 00 	l.add r3,r3,r2
*
* Returns    :  OK if set pin drive succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_drive(u32 pin_grp, u32 pin_num, u32 drive)
{
    4954:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 *addr;
	volatile u32 value;

	/*set drive level */
	addr = PIN_REG_DLEVEL(pin_grp, pin_num);
    4958:	e0 63 30 00 	l.add r3,r3,r6
	value = *addr;
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    495c:	a4 84 00 0f 	l.andi r4,r4,0xf
{
	volatile u32 *addr;
	volatile u32 value;

	/*set drive level */
	addr = PIN_REG_DLEVEL(pin_grp, pin_num);
    4960:	b8 63 00 02 	l.slli r3,r3,0x2
	value = *addr;
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    4964:	e0 84 20 00 	l.add r4,r4,r4
	value |= (drive << ((pin_num & 0xf) * 2));

	*addr = value;

	return OK;
}
    4968:	9d 60 00 00 	l.addi r11,r0,0x0
	volatile u32 *addr;
	volatile u32 value;

	/*set drive level */
	addr = PIN_REG_DLEVEL(pin_grp, pin_num);
	value = *addr;
    496c:	84 c3 00 00 	l.lwz r6,0x0(r3)
    4970:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    4974:	9c c0 00 03 	l.addi r6,r0,0x3
    4978:	84 e1 00 00 	l.lwz r7,0x0(r1)
    497c:	e0 c6 20 08 	l.sll r6,r6,r4
	value |= (drive << ((pin_num & 0xf) * 2));
    4980:	e0 85 20 08 	l.sll r4,r5,r4
	volatile u32 value;

	/*set drive level */
	addr = PIN_REG_DLEVEL(pin_grp, pin_num);
	value = *addr;
	value &= ~(0x3 << ((pin_num & 0xf) * 2));
    4984:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4988:	e0 c6 38 03 	l.and r6,r6,r7
    498c:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |= (drive << ((pin_num & 0xf) * 2));
    4990:	84 c1 00 00 	l.lwz r6,0x0(r1)
    4994:	e0 84 30 04 	l.or r4,r4,r6
    4998:	d4 01 20 00 	l.sw 0x0(r1),r4

	*addr = value;
    499c:	84 81 00 00 	l.lwz r4,0x0(r1)
    49a0:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    49a4:	9c 21 00 08 	l.addi r1,r1,0x8
    49a8:	44 00 48 00 	l.jr r9
    49ac:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

000049b0 <pin_write_data>:
{
	volatile u32 *addr;
	volatile u32 value;

	/*write data */
	addr = PIN_REG_DATA(pin_grp);
    49b0:	b8 c3 00 02 	l.slli r6,r3,0x2
    49b4:	b8 63 00 05 	l.slli r3,r3,0x5
*
* Returns    :  OK if write pin data succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_write_data(u32 pin_grp, u32 pin_num, u32 data)
{
    49b8:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 *addr;
	volatile u32 value;

	/*write data */
	addr = PIN_REG_DATA(pin_grp);
    49bc:	18 40 07 02 	l.movhi r2,0x702
    49c0:	e0 66 18 00 	l.add r3,r6,r3
    49c4:	a8 42 1f ec 	l.ori r2,r2,0x1fec
*
* Returns    :  OK if write pin data succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_write_data(u32 pin_grp, u32 pin_num, u32 data)
{
    49c8:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 *addr;
	volatile u32 value;

	/*write data */
	addr = PIN_REG_DATA(pin_grp);
    49cc:	e0 63 10 00 	l.add r3,r3,r2
	value = *addr;
	value &= ~(0x1 << pin_num);
	value |= ((data & 0x1) << pin_num);
    49d0:	a4 a5 00 01 	l.andi r5,r5,0x1
	volatile u32 *addr;
	volatile u32 value;

	/*write data */
	addr = PIN_REG_DATA(pin_grp);
	value = *addr;
    49d4:	84 c3 00 00 	l.lwz r6,0x0(r3)
	value |= ((data & 0x1) << pin_num);

	*addr = value;

	return OK;
}
    49d8:	9d 60 00 00 	l.addi r11,r0,0x0
	volatile u32 *addr;
	volatile u32 value;

	/*write data */
	addr = PIN_REG_DATA(pin_grp);
	value = *addr;
    49dc:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(0x1 << pin_num);
    49e0:	9c c0 00 01 	l.addi r6,r0,0x1
    49e4:	84 e1 00 00 	l.lwz r7,0x0(r1)
    49e8:	e0 c6 20 08 	l.sll r6,r6,r4
	value |= ((data & 0x1) << pin_num);
    49ec:	e0 85 20 08 	l.sll r4,r5,r4
	volatile u32 value;

	/*write data */
	addr = PIN_REG_DATA(pin_grp);
	value = *addr;
	value &= ~(0x1 << pin_num);
    49f0:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    49f4:	e0 c6 38 03 	l.and r6,r6,r7
    49f8:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |= ((data & 0x1) << pin_num);
    49fc:	84 c1 00 00 	l.lwz r6,0x0(r1)
    4a00:	e0 84 30 04 	l.or r4,r4,r6
    4a04:	d4 01 20 00 	l.sw 0x0(r1),r4

	*addr = value;
    4a08:	84 81 00 00 	l.lwz r4,0x0(r1)
    4a0c:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    4a10:	9c 21 00 08 	l.addi r1,r1,0x8
    4a14:	44 00 48 00 	l.jr r9
    4a18:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004a1c <pin_read_data>:
u32 pin_read_data(u32 pin_grp, u32 pin_num)
{
	volatile u32 value;

	/*read data */
	value = PIN_REG_DATA_VALUE(pin_grp);
    4a1c:	b8 a3 00 02 	l.slli r5,r3,0x2
    4a20:	b8 63 00 05 	l.slli r3,r3,0x5
*
* Returns    :  the data of the specific pin.
*********************************************************************************************************
*/
u32 pin_read_data(u32 pin_grp, u32 pin_num)
{
    4a24:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 value;

	/*read data */
	value = PIN_REG_DATA_VALUE(pin_grp);
    4a28:	18 40 07 02 	l.movhi r2,0x702
    4a2c:	e0 65 18 00 	l.add r3,r5,r3
    4a30:	a8 42 1f ec 	l.ori r2,r2,0x1fec
*
* Returns    :  the data of the specific pin.
*********************************************************************************************************
*/
u32 pin_read_data(u32 pin_grp, u32 pin_num)
{
    4a34:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 value;

	/*read data */
	value = PIN_REG_DATA_VALUE(pin_grp);
    4a38:	e0 63 10 00 	l.add r3,r3,r2
    4a3c:	84 63 00 00 	l.lwz r3,0x0(r3)
    4a40:	d4 01 18 00 	l.sw 0x0(r1),r3

	return ((value >> pin_num) & 0x1);
    4a44:	84 61 00 00 	l.lwz r3,0x0(r1)
}
    4a48:	9c 21 00 08 	l.addi r1,r1,0x8
	volatile u32 value;

	/*read data */
	value = PIN_REG_DATA_VALUE(pin_grp);

	return ((value >> pin_num) & 0x1);
    4a4c:	e0 83 20 48 	l.srl r4,r3,r4
}
    4a50:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)
    4a54:	44 00 48 00 	l.jr r9
    4a58:	a5 64 00 01 	l.andi r11,r4,0x1

00004a5c <is_wanted_gpio_int>:

/*
 * NOTE:gpio_int_en is from bit0, if used for PM, should right shift 12
 */
u32 is_wanted_gpio_int(u32 pin_grp, u32 gpio_int_en)
{
    4a5c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 value;

	value = readl(PIN_REG_INT_STAT(pin_grp));
    4a60:	18 40 07 02 	l.movhi r2,0x702
    4a64:	b8 63 00 05 	l.slli r3,r3,0x5
    4a68:	a8 42 21 f4 	l.ori r2,r2,0x21f4

/*
 * NOTE:gpio_int_en is from bit0, if used for PM, should right shift 12
 */
u32 is_wanted_gpio_int(u32 pin_grp, u32 gpio_int_en)
{
    4a6c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 value;

	value = readl(PIN_REG_INT_STAT(pin_grp));
    4a70:	e0 63 10 00 	l.add r3,r3,r2
    4a74:	84 63 00 00 	l.lwz r3,0x0(r3)
    4a78:	d4 01 18 00 	l.sw 0x0(r1),r3

	return (value & gpio_int_en);
    4a7c:	85 61 00 00 	l.lwz r11,0x0(r1)
}
    4a80:	9c 21 00 08 	l.addi r1,r1,0x8
    4a84:	e1 64 58 03 	l.and r11,r4,r11
    4a88:	44 00 48 00 	l.jr r9
    4a8c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004a90 <pin_set_int_trigger_mode>:
*
* Returns    :  OK if set trigger mode succeeded, others if failed.
*********************************************************************************************************
*/
s32 pin_set_int_trigger_mode(u32 pin_grp, u32 pin_num, u32 mode)
{
    4a90:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2


static s32 pin_pin2eint(u32 pin_grp, u32 pin_num, u32 *eint_grp,
			u32 *eint_num)
{
	switch (pin_grp) {
    4a94:	9c c3 ff ff 	l.addi r6,r3,0xffffffff
    4a98:	bc 46 00 01 	l.sfgtui r6,0x1
    4a9c:	0c 00 00 04 	l.bnf 4aac <pin_set_int_trigger_mode+0x1c>
    4aa0:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
		*eint_num = pin_num;
		return OK;
	}
	/*invalid pin group number */
	*eint_grp = 0xff;
	*eint_num = 0xff;
    4aa4:	9c 80 00 ff 	l.addi r4,r0,0xff
		*eint_grp = pin_grp;
		*eint_num = pin_num;
		return OK;
	}
	/*invalid pin group number */
	*eint_grp = 0xff;
    4aa8:	a8 64 00 00 	l.ori r3,r4,0x0

	/*convert pin number to eint number */
	pin_pin2eint(pin_grp, pin_num, &eint_grp, &eint_num);

	/*set eint pin trigger mode */
	addr = PIN_REG_INT_CFG(eint_grp, eint_num);
    4aac:	18 40 00 38 	l.movhi r2,0x38
    4ab0:	b8 c4 00 43 	l.srli r6,r4,0x3
    4ab4:	a8 42 10 ff 	l.ori r2,r2,0x10ff
	value = *addr;
	value &= ~(0x7 << ((eint_num & 0x7) * 4));
    4ab8:	a4 84 00 07 	l.andi r4,r4,0x7

	/*convert pin number to eint number */
	pin_pin2eint(pin_grp, pin_num, &eint_grp, &eint_num);

	/*set eint pin trigger mode */
	addr = PIN_REG_INT_CFG(eint_grp, eint_num);
    4abc:	e0 63 10 00 	l.add r3,r3,r2
    4ac0:	9c c6 00 80 	l.addi r6,r6,0x80
    4ac4:	b8 63 00 03 	l.slli r3,r3,0x3
	value = *addr;
	value &= ~(0x7 << ((eint_num & 0x7) * 4));
    4ac8:	b8 84 00 02 	l.slli r4,r4,0x2
	value |= (mode << ((eint_num & 0x7) * 4));
	*addr = value;

	return OK;
}
    4acc:	9d 60 00 00 	l.addi r11,r0,0x0

	/*convert pin number to eint number */
	pin_pin2eint(pin_grp, pin_num, &eint_grp, &eint_num);

	/*set eint pin trigger mode */
	addr = PIN_REG_INT_CFG(eint_grp, eint_num);
    4ad0:	e0 66 18 00 	l.add r3,r6,r3
    4ad4:	b8 63 00 02 	l.slli r3,r3,0x2
	value = *addr;
    4ad8:	84 c3 00 00 	l.lwz r6,0x0(r3)
    4adc:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(0x7 << ((eint_num & 0x7) * 4));
    4ae0:	9c c0 00 07 	l.addi r6,r0,0x7
    4ae4:	84 e1 00 00 	l.lwz r7,0x0(r1)
    4ae8:	e0 c6 20 08 	l.sll r6,r6,r4
	value |= (mode << ((eint_num & 0x7) * 4));
    4aec:	e0 85 20 08 	l.sll r4,r5,r4
	pin_pin2eint(pin_grp, pin_num, &eint_grp, &eint_num);

	/*set eint pin trigger mode */
	addr = PIN_REG_INT_CFG(eint_grp, eint_num);
	value = *addr;
	value &= ~(0x7 << ((eint_num & 0x7) * 4));
    4af0:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    4af4:	e0 c6 38 03 	l.and r6,r6,r7
    4af8:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |= (mode << ((eint_num & 0x7) * 4));
    4afc:	84 c1 00 00 	l.lwz r6,0x0(r1)
    4b00:	e0 84 30 04 	l.or r4,r4,r6
    4b04:	d4 01 20 00 	l.sw 0x0(r1),r4
	*addr = value;
    4b08:	84 81 00 00 	l.lwz r4,0x0(r1)
    4b0c:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    4b10:	9c 21 00 08 	l.addi r1,r1,0x8
    4b14:	44 00 48 00 	l.jr r9
    4b18:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004b1c <timer_hosc_onoff_cb>:
	}
	return FALSE;
}

s32 timer_hosc_onoff_cb(u32 message, u32 aux)
{
    4b1c:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
#ifdef CFG_FPGA_PLATFORM
	return OK;
#else
	u32 index;

	if (timer_lock)
    4b20:	18 40 00 01 	l.movhi r2,0x1
	}
	return FALSE;
}

s32 timer_hosc_onoff_cb(u32 message, u32 aux)
{
    4b24:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
#ifdef CFG_FPGA_PLATFORM
	return OK;
#else
	u32 index;

	if (timer_lock)
    4b28:	a8 42 32 f4 	l.ori r2,r2,0x32f4
	}
	return FALSE;
}

s32 timer_hosc_onoff_cb(u32 message, u32 aux)
{
    4b2c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    4b30:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    4b34:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
#ifdef CFG_FPGA_PLATFORM
	return OK;
#else
	u32 index;

	if (timer_lock)
    4b38:	86 02 00 00 	l.lwz r16,0x0(r2)
	}
	return FALSE;
}

s32 timer_hosc_onoff_cb(u32 message, u32 aux)
{
    4b3c:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
#ifdef CFG_FPGA_PLATFORM
	return OK;
#else
	u32 index;

	if (timer_lock)
    4b40:	bc 30 00 00 	l.sfnei r16,0x0
    4b44:	10 00 00 43 	l.bf 4c50 <timer_hosc_onoff_cb+0x134>
    4b48:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	switch (message) {
    4b4c:	bc 03 00 00 	l.sfeqi r3,0x0
    4b50:	10 00 00 22 	l.bf 4bd8 <timer_hosc_onoff_cb+0xbc>
    4b54:	18 80 00 01 	l.movhi r4,0x1
    4b58:	bc 03 00 01 	l.sfeqi r3,0x1
    4b5c:	0c 00 00 3c 	l.bnf 4c4c <timer_hosc_onoff_cb+0x130>
    4b60:	19 c0 00 01 	l.movhi r14,0x1
			 */
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
				timers[index].ms_ticks = 32;	/* 32 */
    4b64:	9e 40 00 20 	l.addi r18,r0,0x20
			 * 24m hosc will power-off,
			 * timer switch clock source to 32k losc.
			 */
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
    4b68:	a9 ce 32 f8 	l.ori r14,r14,0x32f8
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
				timers[index].ms_ticks = 32;	/* 32 */
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value / (24000 / 32);
    4b6c:	9c 80 02 ee 	l.addi r4,r0,0x2ee
			 * 24m hosc will power-off,
			 * timer switch clock source to 32k losc.
			 */
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
    4b70:	84 4e 00 18 	l.lwz r2,0x18(r14)
    4b74:	84 62 00 00 	l.lwz r3,0x0(r2)
    4b78:	e0 63 58 03 	l.and r3,r3,r11
    4b7c:	d4 02 18 00 	l.sw 0x0(r2),r3
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
    4b80:	84 62 00 00 	l.lwz r3,0x0(r2)
    4b84:	d4 02 18 00 	l.sw 0x0(r2),r3
				timers[index].ms_ticks = 32;	/* 32 */
    4b88:	d4 0e 90 0c 	l.sw 0xc(r14),r18
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value / (24000 / 32);
    4b8c:	84 62 00 04 	l.lwz r3,0x4(r2)
    4b90:	04 00 1d 9e 	l.jal c208 <__udivsi3>
    4b94:	15 00 00 00 	l.nop 0x0
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
				timers[index].ms_ticks = 32;	/* 32 */
				timers[index].pregs->interval_value = \
    4b98:	d4 02 58 04 	l.sw 0x4(r2),r11
			 * 24m hosc will power-off,
			 * timer switch clock source to 32k losc.
			 */
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
    4b9c:	84 4e 00 34 	l.lwz r2,0x34(r14)
    4ba0:	9c e0 ff f3 	l.addi r7,r0,0xfffffff3
    4ba4:	84 62 00 00 	l.lwz r3,0x0(r2)
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
				timers[index].ms_ticks = 32;	/* 32 */
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value / (24000 / 32);
    4ba8:	9c 80 02 ee 	l.addi r4,r0,0x2ee
			 * 24m hosc will power-off,
			 * timer switch clock source to 32k losc.
			 */
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
    4bac:	e0 63 38 03 	l.and r3,r3,r7
    4bb0:	d4 02 18 00 	l.sw 0x0(r2),r3
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
    4bb4:	84 62 00 00 	l.lwz r3,0x0(r2)
    4bb8:	d4 02 18 00 	l.sw 0x0(r2),r3
				timers[index].ms_ticks = 32;	/* 32 */
    4bbc:	d4 0e 90 28 	l.sw 0x28(r14),r18
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value / (24000 / 32);
    4bc0:	84 62 00 04 	l.lwz r3,0x4(r2)
    4bc4:	04 00 1d 91 	l.jal c208 <__udivsi3>
    4bc8:	15 00 00 00 	l.nop 0x0
			INF("24m hosc will power-off notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->control &= ~(0x3 << 2);
				timers[index].pregs->control |= (0x0 << 2);	/* source clock = 32k */
				timers[index].ms_ticks = 32;	/* 32 */
				timers[index].pregs->interval_value = \
    4bcc:	d4 02 58 04 	l.sw 0x4(r2),r11
					timers[index].pregs->interval_value / (24000 / 32);
			}
			return OK;
    4bd0:	00 00 00 20 	l.j 4c50 <timer_hosc_onoff_cb+0x134>
    4bd4:	a9 70 00 00 	l.ori r11,r16,0x0
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value * (24000 / 32);
    4bd8:	9c c0 02 ee 	l.addi r6,r0,0x2ee
    4bdc:	a8 84 32 f8 	l.ori r4,r4,0x32f8
				timers[index].pregs->control &= ~(0x3 << 2);
    4be0:	9c e0 ff f3 	l.addi r7,r0,0xfffffff3
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value * (24000 / 32);
    4be4:	84 44 00 18 	l.lwz r2,0x18(r4)
				timers[index].pregs->control &= ~(0x3 << 2);
				timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
				timers[index].ms_ticks = 24 * 1000;	/* 24k */
			}
			return OK;
    4be8:	a9 63 00 00 	l.ori r11,r3,0x0
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value * (24000 / 32);
    4bec:	84 a2 00 04 	l.lwz r5,0x4(r2)
    4bf0:	e0 a5 33 06 	l.mul r5,r5,r6
			 * 24m hosc power-on already,
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
    4bf4:	d4 02 28 04 	l.sw 0x4(r2),r5
					timers[index].pregs->interval_value * (24000 / 32);
				timers[index].pregs->control &= ~(0x3 << 2);
    4bf8:	84 a2 00 00 	l.lwz r5,0x0(r2)
    4bfc:	e0 a5 38 03 	l.and r5,r5,r7
    4c00:	d4 02 28 00 	l.sw 0x0(r2),r5
				timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
    4c04:	84 a2 00 00 	l.lwz r5,0x0(r2)
    4c08:	a8 a5 00 04 	l.ori r5,r5,0x4
    4c0c:	d4 02 28 00 	l.sw 0x0(r2),r5
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value * (24000 / 32);
    4c10:	84 44 00 34 	l.lwz r2,0x34(r4)
				timers[index].pregs->control &= ~(0x3 << 2);
				timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
				timers[index].ms_ticks = 24 * 1000;	/* 24k */
    4c14:	9c a0 5d c0 	l.addi r5,r0,0x5dc0
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value * (24000 / 32);
    4c18:	84 e2 00 04 	l.lwz r7,0x4(r2)
				timers[index].pregs->control &= ~(0x3 << 2);
				timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
				timers[index].ms_ticks = 24 * 1000;	/* 24k */
    4c1c:	d4 04 28 0c 	l.sw 0xc(r4),r5
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
					timers[index].pregs->interval_value * (24000 / 32);
    4c20:	e0 c7 33 06 	l.mul r6,r7,r6
			 * 24m hosc power-on already,
			 * timer swith source clock to 24m hosc.
			 */
			INF("24m hosc power-on ready notify\n");
			for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
				timers[index].pregs->interval_value = \
    4c24:	d4 02 30 04 	l.sw 0x4(r2),r6
					timers[index].pregs->interval_value * (24000 / 32);
				timers[index].pregs->control &= ~(0x3 << 2);
    4c28:	9c e0 ff f3 	l.addi r7,r0,0xfffffff3
    4c2c:	84 c2 00 00 	l.lwz r6,0x0(r2)
    4c30:	e0 c6 38 03 	l.and r6,r6,r7
    4c34:	d4 02 30 00 	l.sw 0x0(r2),r6
				timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
    4c38:	84 c2 00 00 	l.lwz r6,0x0(r2)
    4c3c:	a8 c6 00 04 	l.ori r6,r6,0x4
    4c40:	d4 02 30 00 	l.sw 0x0(r2),r6
				timers[index].ms_ticks = 24 * 1000;	/* 24k */
    4c44:	00 00 00 03 	l.j 4c50 <timer_hosc_onoff_cb+0x134>
    4c48:	d4 04 28 28 	l.sw 0x28(r4),r5
	default:
		{
			break;
		}
	}
	return -ESRCH;
    4c4c:	9d 60 ff fd 	l.addi r11,r0,0xfffffffd
#endif
}
    4c50:	9c 21 00 14 	l.addi r1,r1,0x14
    4c54:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    4c58:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    4c5c:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    4c60:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    4c64:	44 00 48 00 	l.jr r9
    4c68:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00004c6c <timer_isr>:
*
* Returns    :  TRUE if process timer interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_isr(void *parg)
{
    4c6c:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    4c70:	a8 43 00 00 	l.ori r2,r3,0x0
	struct timer *ptimer = (struct timer *)parg;

	if (timer_lock)
    4c74:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  TRUE if process timer interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_isr(void *parg)
{
    4c78:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	struct timer *ptimer = (struct timer *)parg;

	if (timer_lock)
    4c7c:	a8 63 32 f4 	l.ori r3,r3,0x32f4
*
* Returns    :  TRUE if process timer interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_isr(void *parg)
{
    4c80:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    4c84:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    4c88:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
	struct timer *ptimer = (struct timer *)parg;

	if (timer_lock)
    4c8c:	84 63 00 00 	l.lwz r3,0x0(r3)
*
* Returns    :  TRUE if process timer interrupt succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_isr(void *parg)
{
    4c90:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	struct timer *ptimer = (struct timer *)parg;

	if (timer_lock)
    4c94:	bc 23 00 00 	l.sfnei r3,0x0
    4c98:	10 00 00 1d 	l.bf 4d0c <timer_isr+0xa0>
    4c9c:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	/* check pending status valid or not */
	if (ptimerc_regs->irq_status & (1 << ptimer->timer_no)) {
    4ca0:	1a 40 00 01 	l.movhi r18,0x1
    4ca4:	9d c0 00 01 	l.addi r14,r0,0x1
    4ca8:	aa 52 37 30 	l.ori r18,r18,0x3730
    4cac:	85 62 00 00 	l.lwz r11,0x0(r2)
    4cb0:	84 72 00 00 	l.lwz r3,0x0(r18)
    4cb4:	e1 6e 58 08 	l.sll r11,r14,r11
    4cb8:	84 63 00 04 	l.lwz r3,0x4(r3)
    4cbc:	e1 6b 18 03 	l.and r11,r11,r3
    4cc0:	bc 0b 00 00 	l.sfeqi r11,0x0
    4cc4:	10 00 00 12 	l.bf 4d0c <timer_isr+0xa0>
    4cc8:	15 00 00 00 	l.nop 0x0
		/* process the timer handler */
		if (ptimer->phandler == NULL) {
    4ccc:	86 02 00 10 	l.lwz r16,0x10(r2)
    4cd0:	bc 30 00 00 	l.sfnei r16,0x0
    4cd4:	10 00 00 07 	l.bf 4cf0 <timer_isr+0x84>
    4cd8:	18 80 00 01 	l.movhi r4,0x1
			WRN("timer irq handler not install\n");
    4cdc:	9c 60 00 04 	l.addi r3,r0,0x4
    4ce0:	04 00 14 b6 	l.jal 9fb8 <debugger_printf>
    4ce4:	a8 84 25 74 	l.ori r4,r4,0x2574
			return FALSE;
    4ce8:	00 00 00 09 	l.j 4d0c <timer_isr+0xa0>
    4cec:	a9 70 00 00 	l.ori r11,r16,0x0
		}

		/* handler timer irq */
		ptimer->phandler(ptimer->parg);
    4cf0:	48 00 80 00 	l.jalr r16
    4cf4:	84 62 00 14 	l.lwz r3,0x14(r2)

		/* clear interrupt pending */
		ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    4cf8:	84 42 00 00 	l.lwz r2,0x0(r2)
    4cfc:	84 72 00 00 	l.lwz r3,0x0(r18)
    4d00:	e0 4e 10 08 	l.sll r2,r14,r2

		return TRUE;
    4d04:	a9 6e 00 00 	l.ori r11,r14,0x0

		/* handler timer irq */
		ptimer->phandler(ptimer->parg);

		/* clear interrupt pending */
		ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    4d08:	d4 03 10 04 	l.sw 0x4(r3),r2

		return TRUE;
	}
	return FALSE;
}
    4d0c:	9c 21 00 14 	l.addi r1,r1,0x14
    4d10:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    4d14:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    4d18:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    4d1c:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    4d20:	44 00 48 00 	l.jr r9
    4d24:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00004d28 <timer_init>:
*
* Returns    :  OK if initialize timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_init(void)
{
    4d28:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	u32 index;

	/* initialize the pointer of timer controller registers */
	ptimerc_regs = (struct timerc_regs *)(TIMER_REG_BASE);
    4d2c:	18 40 00 01 	l.movhi r2,0x1
    4d30:	18 60 07 02 	l.movhi r3,0x702
    4d34:	a8 42 37 30 	l.ori r2,r2,0x3730
*
* Returns    :  OK if initialize timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_init(void)
{
    4d38:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 index;

	/* initialize the pointer of timer controller registers */
	ptimerc_regs = (struct timerc_regs *)(TIMER_REG_BASE);
    4d3c:	d4 02 18 00 	l.sw 0x0(r2),r3
*
* Returns    :  OK if initialize timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_init(void)
{
    4d40:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8

	/* initialize the pointer of timer controller registers */
	ptimerc_regs = (struct timerc_regs *)(TIMER_REG_BASE);

	/* enbale timer clock gating. */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_ON);
    4d44:	9c 60 00 1f 	l.addi r3,r0,0x1f
    4d48:	04 00 33 5b 	l.jal 11ab4 <ccu_set_mclk_onoff>
    4d4c:	9c 80 00 01 	l.addi r4,r0,0x1

	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_NRESET);
    4d50:	9c 60 00 1f 	l.addi r3,r0,0x1f
    4d54:	04 00 34 da 	l.jal 120bc <ccu_set_mclk_reset>
    4d58:	9c 80 00 01 	l.addi r4,r0,0x1

	/* initialize timers */
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
		timers[index].pregs = &(ptimerc_regs->timer[index]);
    4d5c:	18 80 00 01 	l.movhi r4,0x1
    4d60:	84 c2 00 00 	l.lwz r6,0x0(r2)
    4d64:	a8 84 33 10 	l.ori r4,r4,0x3310

	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_NRESET);

	/* initialize timers */
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
    4d68:	9c 60 00 00 	l.addi r3,r0,0x0
		timers[index].pregs->control &= ~(0x7 << 4);
		timers[index].pregs->control |= (0x0 << 4);	/* pre-scale = 1 */
#ifdef CFG_FPGA_PLATFORM
		timers[index].ms_ticks = 32;	/* fix to 32k */
#else
		timers[index].ms_ticks = 24 * 1000;	/* 24M */
    4d6c:	9c a0 5d c0 	l.addi r5,r0,0x5dc0
	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_NRESET);

	/* initialize timers */
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
		timers[index].pregs = &(ptimerc_regs->timer[index]);
    4d70:	9c 43 00 01 	l.addi r2,r3,0x1
		timers[index].pregs->control = 0;
    4d74:	9c e0 00 00 	l.addi r7,r0,0x0
	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_NRESET);

	/* initialize timers */
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
		timers[index].pregs = &(ptimerc_regs->timer[index]);
    4d78:	b8 62 00 04 	l.slli r3,r2,0x4

		/*
		 * timer tick time base on ms,
		 * soucre clock = 24M, pre-scale = 1, timer source clock = 24M.
		 */
		timers[index].pregs->control &= ~(0x3 << 2);
    4d7c:	9d 00 ff f3 	l.addi r8,r0,0xfffffff3

	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_NRESET);

	/* initialize timers */
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
    4d80:	bc 22 00 02 	l.sfnei r2,0x2
		timers[index].pregs = &(ptimerc_regs->timer[index]);
    4d84:	e0 66 18 00 	l.add r3,r6,r3
    4d88:	d4 04 18 00 	l.sw 0x0(r4),r3
		timers[index].pregs->control = 0;
    4d8c:	d4 03 38 00 	l.sw 0x0(r3),r7

		/*
		 * timer tick time base on ms,
		 * soucre clock = 24M, pre-scale = 1, timer source clock = 24M.
		 */
		timers[index].pregs->control &= ~(0x3 << 2);
    4d90:	84 e3 00 00 	l.lwz r7,0x0(r3)
    4d94:	e0 e7 40 03 	l.and r7,r7,r8
		timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
		timers[index].pregs->control &= ~(0x7 << 4);
    4d98:	9d 00 ff 8f 	l.addi r8,r0,0xffffff8f

		/*
		 * timer tick time base on ms,
		 * soucre clock = 24M, pre-scale = 1, timer source clock = 24M.
		 */
		timers[index].pregs->control &= ~(0x3 << 2);
    4d9c:	d4 03 38 00 	l.sw 0x0(r3),r7
		timers[index].pregs->control |= (0x1 << 2);	/* source clock = 24M */
    4da0:	84 e3 00 00 	l.lwz r7,0x0(r3)
    4da4:	a8 e7 00 04 	l.ori r7,r7,0x4
    4da8:	d4 03 38 00 	l.sw 0x0(r3),r7
		timers[index].pregs->control &= ~(0x7 << 4);
    4dac:	84 e3 00 00 	l.lwz r7,0x0(r3)
    4db0:	e0 e7 40 03 	l.and r7,r7,r8
    4db4:	d4 03 38 00 	l.sw 0x0(r3),r7
		timers[index].pregs->control |= (0x0 << 4);	/* pre-scale = 1 */
    4db8:	84 e3 00 00 	l.lwz r7,0x0(r3)
    4dbc:	d4 03 38 00 	l.sw 0x0(r3),r7
#ifdef CFG_FPGA_PLATFORM
		timers[index].ms_ticks = 32;	/* fix to 32k */
#else
		timers[index].ms_ticks = 24 * 1000;	/* 24M */
    4dc0:	d7 e4 2f f4 	l.sw 0xfffffff4(r4),r5

	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_NRESET);

	/* initialize timers */
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
    4dc4:	a8 62 00 00 	l.ori r3,r2,0x0
    4dc8:	13 ff ff ea 	l.bf 4d70 <timer_init+0x48>
    4dcc:	9c 84 00 1c 	l.addi r4,r4,0x1c
	/*
	 * use timer[0] for system accurate delay service, tick base ms.
	 * single shot mode.
	 * by sunny at 2012-11-21 17:39:25.
	 */
	timers[0].status = TIMER_USED;
    4dd0:	18 60 00 01 	l.movhi r3,0x1
    4dd4:	9c 40 00 01 	l.addi r2,r0,0x1
    4dd8:	a8 63 32 f8 	l.ori r3,r3,0x32f8
    4ddc:	d4 03 10 04 	l.sw 0x4(r3),r2
	delay_timer = &(timers[0]);
    4de0:	18 40 00 01 	l.movhi r2,0x1
    4de4:	a8 42 37 2c 	l.ori r2,r2,0x372c
    4de8:	d4 02 18 00 	l.sw 0x0(r2),r3
	delay_timer->pregs->control |= (0x1 << 7);
    4dec:	84 63 00 18 	l.lwz r3,0x18(r3)
    4df0:	84 43 00 00 	l.lwz r2,0x0(r3)
    4df4:	a8 42 00 80 	l.ori r2,r2,0x80
    4df8:	d4 03 10 00 	l.sw 0x0(r3),r2

	/* register 24mhosc notifier call-back */
	ccu_24mhosc_reg_cb(timer_hosc_onoff_cb);
    4dfc:	18 60 00 00 	l.movhi r3,0x0
	timer_lock = 0;
    4e00:	18 40 00 01 	l.movhi r2,0x1
	timers[0].status = TIMER_USED;
	delay_timer = &(timers[0]);
	delay_timer->pregs->control |= (0x1 << 7);

	/* register 24mhosc notifier call-back */
	ccu_24mhosc_reg_cb(timer_hosc_onoff_cb);
    4e04:	a8 63 4b 1c 	l.ori r3,r3,0x4b1c
    4e08:	04 00 34 42 	l.jal 11f10 <ccu_24mhosc_reg_cb>
    4e0c:	a8 42 32 f4 	l.ori r2,r2,0x32f4
	timer_lock = 0;
    4e10:	9c 60 00 00 	l.addi r3,r0,0x0
    4e14:	d4 02 18 00 	l.sw 0x0(r2),r3

	return OK;
}
    4e18:	9c 21 00 08 	l.addi r1,r1,0x8
    4e1c:	a9 63 00 00 	l.ori r11,r3,0x0
    4e20:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    4e24:	44 00 48 00 	l.jr r9
    4e28:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00004e2c <timer_exit>:
*
* Returns    :  OK if exit timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_exit(void)
{
    4e2c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    4e30:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_RESET);
    4e34:	9c 60 00 1f 	l.addi r3,r0,0x1f
*
* Returns    :  OK if exit timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_exit(void)
{
    4e38:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	/* set reset as de-assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_RESET);
    4e3c:	9c 80 00 00 	l.addi r4,r0,0x0
    4e40:	04 00 34 9f 	l.jal 120bc <ccu_set_mclk_reset>
    4e44:	9c 40 00 00 	l.addi r2,r0,0x0

	/* enbale timer clock gating. */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_OFF);
    4e48:	9c 60 00 1f 	l.addi r3,r0,0x1f
    4e4c:	04 00 33 1a 	l.jal 11ab4 <ccu_set_mclk_onoff>
    4e50:	9c 80 00 00 	l.addi r4,r0,0x0

	ptimerc_regs = NULL;
    4e54:	18 60 00 01 	l.movhi r3,0x1

	timer_lock = 1;
    4e58:	9c 80 00 01 	l.addi r4,r0,0x1
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_RESET);

	/* enbale timer clock gating. */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_OFF);

	ptimerc_regs = NULL;
    4e5c:	a8 63 37 30 	l.ori r3,r3,0x3730

	timer_lock = 1;

	return OK;
}
    4e60:	a9 62 00 00 	l.ori r11,r2,0x0
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_RESET);

	/* enbale timer clock gating. */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TIMER0_1, CCU_CLK_OFF);

	ptimerc_regs = NULL;
    4e64:	d4 03 10 00 	l.sw 0x0(r3),r2

	timer_lock = 1;
    4e68:	18 60 00 01 	l.movhi r3,0x1
    4e6c:	a8 63 32 f4 	l.ori r3,r3,0x32f4
    4e70:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    4e74:	9c 21 00 08 	l.addi r1,r1,0x8
    4e78:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    4e7c:	44 00 48 00 	l.jr r9
    4e80:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00004e84 <timer_request>:
*
* Note       :  the callback execute entironment : CPU disable interrupt response.
*********************************************************************************************************
*/
HANDLE timer_request(__pCBK_t phdle, void *parg)
{
    4e84:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
	u32 cpsr;
	u32 index;
	struct timer *ptimer = NULL;

	if (timer_lock)
    4e88:	18 40 00 01 	l.movhi r2,0x1
*
* Note       :  the callback execute entironment : CPU disable interrupt response.
*********************************************************************************************************
*/
HANDLE timer_request(__pCBK_t phdle, void *parg)
{
    4e8c:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
	u32 cpsr;
	u32 index;
	struct timer *ptimer = NULL;

	if (timer_lock)
    4e90:	a8 42 32 f4 	l.ori r2,r2,0x32f4
*
* Note       :  the callback execute entironment : CPU disable interrupt response.
*********************************************************************************************************
*/
HANDLE timer_request(__pCBK_t phdle, void *parg)
{
    4e94:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    4e98:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 cpsr;
	u32 index;
	struct timer *ptimer = NULL;

	if (timer_lock)
    4e9c:	84 42 00 00 	l.lwz r2,0x0(r2)
		return NULL;
    4ea0:	9d 60 00 00 	l.addi r11,r0,0x0
*
* Note       :  the callback execute entironment : CPU disable interrupt response.
*********************************************************************************************************
*/
HANDLE timer_request(__pCBK_t phdle, void *parg)
{
    4ea4:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    4ea8:	aa 03 00 00 	l.ori r16,r3,0x0
	u32 cpsr;
	u32 index;
	struct timer *ptimer = NULL;

	if (timer_lock)
    4eac:	e4 22 58 00 	l.sfne r2,r11
    4eb0:	10 00 00 28 	l.bf 4f50 <timer_request+0xcc>
    4eb4:	a9 c4 00 00 	l.ori r14,r4,0x0
		return NULL;

	cpsr = cpu_disable_int();
    4eb8:	04 00 1b bb 	l.jal bda4 <cpu_disable_int>
    4ebc:	15 00 00 00 	l.nop 0x0
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
		if (timers[index].status == TIMER_FREE) {
    4ec0:	18 c0 00 01 	l.movhi r6,0x1
    4ec4:	a8 c6 32 f8 	l.ori r6,r6,0x32f8
    4ec8:	84 a6 00 04 	l.lwz r5,0x4(r6)
    4ecc:	bc 05 00 00 	l.sfeqi r5,0x0
    4ed0:	10 00 00 07 	l.bf 4eec <timer_request+0x68>
    4ed4:	b8 65 00 02 	l.slli r3,r5,0x2
    4ed8:	84 66 00 20 	l.lwz r3,0x20(r6)
    4edc:	bc 23 00 00 	l.sfnei r3,0x0
    4ee0:	10 00 00 0c 	l.bf 4f10 <timer_request+0x8c>
    4ee4:	9c a0 00 01 	l.addi r5,r0,0x1
			/* allocate this timer */
			ptimer = &(timers[index]);
    4ee8:	b8 65 00 02 	l.slli r3,r5,0x2
    4eec:	b8 45 00 05 	l.slli r2,r5,0x5
    4ef0:	e0 42 18 02 	l.sub r2,r2,r3
    4ef4:	18 60 00 01 	l.movhi r3,0x1
    4ef8:	a8 63 32 f8 	l.ori r3,r3,0x32f8
    4efc:	e0 42 18 00 	l.add r2,r2,r3
			ptimer->status = TIMER_USED;
    4f00:	9c 60 00 01 	l.addi r3,r0,0x1
			ptimer->phandler = phdle;
    4f04:	d4 02 80 10 	l.sw 0x10(r2),r16
	cpsr = cpu_disable_int();
	for (index = 0; index < TIMERC_TIMERS_NUMBER; index++) {
		if (timers[index].status == TIMER_FREE) {
			/* allocate this timer */
			ptimer = &(timers[index]);
			ptimer->status = TIMER_USED;
    4f08:	d4 02 18 04 	l.sw 0x4(r2),r3
			ptimer->phandler = phdle;
			ptimer->parg = parg;
    4f0c:	d4 02 70 14 	l.sw 0x14(r2),r14
			break;
		}
	}
	cpu_enable_int(cpsr);
    4f10:	04 00 1b af 	l.jal bdcc <cpu_enable_int>
    4f14:	a8 6b 00 00 	l.ori r3,r11,0x0

	if (ptimer == NULL) {
    4f18:	bc 22 00 00 	l.sfnei r2,0x0
    4f1c:	10 00 00 07 	l.bf 4f38 <timer_request+0xb4>
    4f20:	18 80 00 01 	l.movhi r4,0x1
		/* no freed timer now */
		WRN("no free timer now\n");
    4f24:	9c 60 00 04 	l.addi r3,r0,0x4
    4f28:	04 00 14 24 	l.jal 9fb8 <debugger_printf>
    4f2c:	a8 84 25 97 	l.ori r4,r4,0x2597
	}

	/* install timer isr */
	install_isr(ptimer->irq_no, timer_isr, (void *)ptimer);

	return (HANDLE) ptimer;
    4f30:	00 00 00 08 	l.j 4f50 <timer_request+0xcc>
    4f34:	a9 62 00 00 	l.ori r11,r2,0x0
		WRN("no free timer now\n");
		return NULL;
	}

	/* install timer isr */
	install_isr(ptimer->irq_no, timer_isr, (void *)ptimer);
    4f38:	18 80 00 00 	l.movhi r4,0x0
    4f3c:	84 62 00 08 	l.lwz r3,0x8(r2)
    4f40:	a8 84 4c 6c 	l.ori r4,r4,0x4c6c
    4f44:	07 ff fd c0 	l.jal 4644 <install_isr>
    4f48:	a8 a2 00 00 	l.ori r5,r2,0x0

	return (HANDLE) ptimer;
    4f4c:	a9 62 00 00 	l.ori r11,r2,0x0
}
    4f50:	9c 21 00 10 	l.addi r1,r1,0x10
    4f54:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    4f58:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    4f5c:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    4f60:	44 00 48 00 	l.jr r9
    4f64:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00004f68 <timer_release>:
*
* Returns    :  OK if release hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_release(HANDLE htimer)
{
    4f68:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    4f6c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	/* set timer status as free */
	ptimer->status = TIMER_FREE;
    4f70:	9c 40 00 00 	l.addi r2,r0,0x0
	ptimer->phandler = NULL;
	ptimer->parg = NULL;

	return OK;
}
    4f74:	9c 21 00 04 	l.addi r1,r1,0x4
    4f78:	a9 62 00 00 	l.ori r11,r2,0x0
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	/* set timer status as free */
	ptimer->status = TIMER_FREE;
    4f7c:	d4 03 10 04 	l.sw 0x4(r3),r2
	ptimer->phandler = NULL;
    4f80:	d4 03 10 10 	l.sw 0x10(r3),r2
	ptimer->parg = NULL;
    4f84:	d4 03 10 14 	l.sw 0x14(r3),r2

	return OK;
}
    4f88:	44 00 48 00 	l.jr r9
    4f8c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00004f90 <timer_start>:
*
* Returns    :  OK if start hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_start(HANDLE htimer, u32 period, u32 mode)
{
    4f90:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    4f94:	a8 43 00 00 	l.ori r2,r3,0x0
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    4f98:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if start hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_start(HANDLE htimer, u32 period, u32 mode)
{
    4f9c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    4fa0:	a8 63 32 f4 	l.ori r3,r3,0x32f4
*
* Returns    :  OK if start hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_start(HANDLE htimer, u32 period, u32 mode)
{
    4fa4:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    4fa8:	84 63 00 00 	l.lwz r3,0x0(r3)
*
* Returns    :  OK if start hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_start(HANDLE htimer, u32 period, u32 mode)
{
    4fac:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    4fb0:	bc 23 00 00 	l.sfnei r3,0x0
    4fb4:	10 00 00 27 	l.bf 5050 <timer_start+0xc0>
    4fb8:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	/* set timer period */
	ptimer->pregs->interval_value = ptimer->ms_ticks * period;
    4fbc:	84 62 00 0c 	l.lwz r3,0xc(r2)
    4fc0:	84 c2 00 18 	l.lwz r6,0x18(r2)
    4fc4:	e0 84 1b 06 	l.mul r4,r4,r3
    4fc8:	d4 06 20 04 	l.sw 0x4(r6),r4
	ptimer->pregs->control |= (1 << 1);	/* reload interval value to current value */
    4fcc:	84 66 00 00 	l.lwz r3,0x0(r6)
    4fd0:	a8 63 00 02 	l.ori r3,r3,0x2
    4fd4:	d4 06 18 00 	l.sw 0x0(r6),r3
	while ((ptimer->pregs->control) & (1 << 1))
    4fd8:	85 c6 00 00 	l.lwz r14,0x0(r6)
    4fdc:	a5 ce 00 02 	l.andi r14,r14,0x2
    4fe0:	bc 2e 00 00 	l.sfnei r14,0x0
    4fe4:	13 ff ff fd 	l.bf 4fd8 <timer_start+0x48>
    4fe8:	15 00 00 00 	l.nop 0x0
		;

	/* set timer mode */
	ptimer->pregs->control &= ~(1 << 7);
    4fec:	84 66 00 00 	l.lwz r3,0x0(r6)
    4ff0:	9c 80 ff 7f 	l.addi r4,r0,0xffffff7f
	ptimer->pregs->control |= (mode << 7);
    4ff4:	b8 a5 00 07 	l.slli r5,r5,0x7
	ptimer->pregs->control |= (1 << 1);	/* reload interval value to current value */
	while ((ptimer->pregs->control) & (1 << 1))
		;

	/* set timer mode */
	ptimer->pregs->control &= ~(1 << 7);
    4ff8:	e0 63 20 03 	l.and r3,r3,r4
	ptimer->pregs->control |= (mode << 7);

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    4ffc:	9c 80 00 01 	l.addi r4,r0,0x1
	ptimer->pregs->control |= (1 << 1);	/* reload interval value to current value */
	while ((ptimer->pregs->control) & (1 << 1))
		;

	/* set timer mode */
	ptimer->pregs->control &= ~(1 << 7);
    5000:	d4 06 18 00 	l.sw 0x0(r6),r3
	ptimer->pregs->control |= (mode << 7);
    5004:	84 66 00 00 	l.lwz r3,0x0(r6)
    5008:	e0 a5 18 04 	l.or r5,r5,r3

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    500c:	18 60 00 01 	l.movhi r3,0x1
	while ((ptimer->pregs->control) & (1 << 1))
		;

	/* set timer mode */
	ptimer->pregs->control &= ~(1 << 7);
	ptimer->pregs->control |= (mode << 7);
    5010:	d4 06 28 00 	l.sw 0x0(r6),r5

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    5014:	84 a2 00 00 	l.lwz r5,0x0(r2)
    5018:	a8 63 37 30 	l.ori r3,r3,0x3730
    501c:	e0 84 28 08 	l.sll r4,r4,r5
    5020:	84 63 00 00 	l.lwz r3,0x0(r3)
    5024:	d4 03 20 04 	l.sw 0x4(r3),r4

	/* enable timer interrupt */
	ptimerc_regs->irq_enbale |= (1 << ptimer->timer_no);
    5028:	84 a3 00 00 	l.lwz r5,0x0(r3)
    502c:	e0 84 28 04 	l.or r4,r4,r5
    5030:	d4 03 20 00 	l.sw 0x0(r3),r4
	interrupt_enable(ptimer->irq_no);
    5034:	07 ff fd 62 	l.jal 45bc <interrupt_enable>
    5038:	84 62 00 08 	l.lwz r3,0x8(r2)

	/* enable timer */
	ptimer->pregs->control |= 0x1;
    503c:	84 42 00 18 	l.lwz r2,0x18(r2)

	return OK;
    5040:	a9 6e 00 00 	l.ori r11,r14,0x0
	/* enable timer interrupt */
	ptimerc_regs->irq_enbale |= (1 << ptimer->timer_no);
	interrupt_enable(ptimer->irq_no);

	/* enable timer */
	ptimer->pregs->control |= 0x1;
    5044:	84 62 00 00 	l.lwz r3,0x0(r2)
    5048:	a8 63 00 01 	l.ori r3,r3,0x1
    504c:	d4 02 18 00 	l.sw 0x0(r2),r3

	return OK;
}
    5050:	9c 21 00 0c 	l.addi r1,r1,0xc
    5054:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5058:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    505c:	44 00 48 00 	l.jr r9
    5060:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

00005064 <timer_stop>:
*
* Returns    :  OK if stop hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_stop(HANDLE htimer)
{
    5064:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    5068:	a8 43 00 00 	l.ori r2,r3,0x0
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    506c:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if stop hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_stop(HANDLE htimer)
{
    5070:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    5074:	a8 63 32 f4 	l.ori r3,r3,0x32f4
*
* Returns    :  OK if stop hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_stop(HANDLE htimer)
{
    5078:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    507c:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    5080:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    5084:	86 03 00 00 	l.lwz r16,0x0(r3)
*
* Returns    :  OK if stop hardware timer succeeded, others if failed.
*********************************************************************************************************
*/
s32 timer_stop(HANDLE htimer)
{
    5088:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	struct timer *ptimer = (struct timer *)htimer;

	ASSERT(ptimer != NULL);

	if (timer_lock)
    508c:	bc 30 00 00 	l.sfnei r16,0x0
    5090:	10 00 00 18 	l.bf 50f0 <timer_stop+0x8c>
    5094:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	/* disable timer */
	ptimer->pregs->control &= ~(0x1);
    5098:	84 62 00 18 	l.lwz r3,0x18(r2)
    509c:	9c a0 ff fe 	l.addi r5,r0,0xfffffffe
    50a0:	84 83 00 00 	l.lwz r4,0x0(r3)

	/* disable timer irq */
	ptimerc_regs->irq_enbale &= ~(1 << ptimer->timer_no);
    50a4:	19 c0 00 01 	l.movhi r14,0x1

	if (timer_lock)
		return -EACCES;

	/* disable timer */
	ptimer->pregs->control &= ~(0x1);
    50a8:	e0 84 28 03 	l.and r4,r4,r5

	/* disable timer irq */
	ptimerc_regs->irq_enbale &= ~(1 << ptimer->timer_no);
    50ac:	9e 40 00 01 	l.addi r18,r0,0x1

	if (timer_lock)
		return -EACCES;

	/* disable timer */
	ptimer->pregs->control &= ~(0x1);
    50b0:	d4 03 20 00 	l.sw 0x0(r3),r4

	/* disable timer irq */
	ptimerc_regs->irq_enbale &= ~(1 << ptimer->timer_no);
    50b4:	84 82 00 00 	l.lwz r4,0x0(r2)
    50b8:	a9 ce 37 30 	l.ori r14,r14,0x3730
    50bc:	e0 92 20 08 	l.sll r4,r18,r4
    50c0:	84 6e 00 00 	l.lwz r3,0x0(r14)
    50c4:	ac 84 ff ff 	l.xori r4,r4,0xffffffff
    50c8:	84 a3 00 00 	l.lwz r5,0x0(r3)
    50cc:	e0 84 28 03 	l.and r4,r4,r5
    50d0:	d4 03 20 00 	l.sw 0x0(r3),r4
	interrupt_disable(ptimer->irq_no);
    50d4:	07 ff fd 40 	l.jal 45d4 <interrupt_disable>
    50d8:	84 62 00 08 	l.lwz r3,0x8(r2)

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    50dc:	84 42 00 00 	l.lwz r2,0x0(r2)
    50e0:	84 6e 00 00 	l.lwz r3,0x0(r14)
    50e4:	e2 52 10 08 	l.sll r18,r18,r2

	return OK;
    50e8:	a9 70 00 00 	l.ori r11,r16,0x0
	/* disable timer irq */
	ptimerc_regs->irq_enbale &= ~(1 << ptimer->timer_no);
	interrupt_disable(ptimer->irq_no);

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << ptimer->timer_no);
    50ec:	d4 03 90 04 	l.sw 0x4(r3),r18

	return OK;
}
    50f0:	9c 21 00 14 	l.addi r1,r1,0x14
    50f4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    50f8:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    50fc:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    5100:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    5104:	44 00 48 00 	l.jr r9
    5108:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

0000510c <time_mdelay>:

extern volatile u32 timer_lock;

void time_mdelay(u32 ms)
{
	if (timer_lock)
    510c:	18 80 00 01 	l.movhi r4,0x1
#include "timer_i.h"

extern volatile u32 timer_lock;

void time_mdelay(u32 ms)
{
    5110:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	if (timer_lock)
    5114:	a8 84 32 f4 	l.ori r4,r4,0x32f4
#include "timer_i.h"

extern volatile u32 timer_lock;

void time_mdelay(u32 ms)
{
    5118:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	if (timer_lock)
    511c:	84 84 00 00 	l.lwz r4,0x0(r4)
    5120:	bc 24 00 00 	l.sfnei r4,0x0
    5124:	10 00 00 25 	l.bf 51b8 <time_mdelay+0xac>
    5128:	bc 03 00 00 	l.sfeqi r3,0x0

	/*
	 * check delay time too long
	 * ...
	 */
	if ((ms == 0) || (delay_timer->ms_ticks * ms >= 4294967296)) {
    512c:	10 00 00 23 	l.bf 51b8 <time_mdelay+0xac>
    5130:	18 80 00 01 	l.movhi r4,0x1
		/* no delay */
		return;
	}

	/* config timer internal value */
	delay_timer->pregs->interval_value = delay_timer->ms_ticks * ms;
    5134:	a8 84 37 2c 	l.ori r4,r4,0x372c
    5138:	84 a4 00 00 	l.lwz r5,0x0(r4)
    513c:	84 c5 00 0c 	l.lwz r6,0xc(r5)
    5140:	84 85 00 18 	l.lwz r4,0x18(r5)
    5144:	e0 63 33 06 	l.mul r3,r3,r6
    5148:	d4 04 18 04 	l.sw 0x4(r4),r3
	delay_timer->pregs->control |= (1 << 1);	/* reload interval value to current value */
    514c:	84 64 00 00 	l.lwz r3,0x0(r4)
    5150:	a8 63 00 02 	l.ori r3,r3,0x2
    5154:	d4 04 18 00 	l.sw 0x0(r4),r3
	while ((delay_timer->pregs->control) & (1 << 1))
    5158:	84 64 00 00 	l.lwz r3,0x0(r4)
    515c:	a4 63 00 02 	l.andi r3,r3,0x2
    5160:	bc 23 00 00 	l.sfnei r3,0x0
    5164:	13 ff ff fd 	l.bf 5158 <time_mdelay+0x4c>
    5168:	18 60 00 01 	l.movhi r3,0x1
		;

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << delay_timer->timer_no);
    516c:	84 a5 00 00 	l.lwz r5,0x0(r5)
    5170:	9c c0 00 01 	l.addi r6,r0,0x1
    5174:	a8 63 37 30 	l.ori r3,r3,0x3730
    5178:	e0 a6 28 08 	l.sll r5,r6,r5
    517c:	84 63 00 00 	l.lwz r3,0x0(r3)
    5180:	d4 03 28 04 	l.sw 0x4(r3),r5

	/* start timer */
	delay_timer->pregs->control |= 0x1;
    5184:	84 c4 00 00 	l.lwz r6,0x0(r4)
    5188:	a8 c6 00 01 	l.ori r6,r6,0x1
    518c:	d4 04 30 00 	l.sw 0x0(r4),r6

	/* check timer pending valid or not */
	while ((ptimerc_regs->irq_status & (1 << delay_timer->timer_no)) == 0) {
    5190:	84 c3 00 04 	l.lwz r6,0x4(r3)
    5194:	e0 c5 30 03 	l.and r6,r5,r6
    5198:	bc 06 00 00 	l.sfeqi r6,0x0
    519c:	13 ff ff fd 	l.bf 5190 <time_mdelay+0x84>
    51a0:	15 00 00 00 	l.nop 0x0
		;
	}

	/* stop timer */
	delay_timer->pregs->control &= ~(0x1);
    51a4:	84 c4 00 00 	l.lwz r6,0x0(r4)
    51a8:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    51ac:	e0 c6 10 03 	l.and r6,r6,r2
    51b0:	d4 04 30 00 	l.sw 0x0(r4),r6

	/* clear timer pending */
	ptimerc_regs->irq_status = (1 << delay_timer->timer_no);
    51b4:	d4 03 28 04 	l.sw 0x4(r3),r5
}
    51b8:	9c 21 00 04 	l.addi r1,r1,0x4
    51bc:	44 00 48 00 	l.jr r9
    51c0:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

000051c4 <cnt64_udelay>:

void cnt64_udelay(u32 us)
{
    51c4:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    51c8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    51cc:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    51d0:	a8 43 00 00 	l.ori r2,r3,0x0
	u64 expire = 0;

	if (us == 0) {
    51d4:	bc 03 00 00 	l.sfeqi r3,0x0
    51d8:	10 00 00 16 	l.bf 5230 <cnt64_udelay+0x6c>
    51dc:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
		/* no delay */
		return;
	}

	/* calc expire time */
	expire = (us * 24) + cpucfg_counter_read();
    51e0:	04 00 1e 55 	l.jal cb34 <cpucfg_counter_read>
    51e4:	9d c0 00 01 	l.addi r14,r0,0x1
    51e8:	e0 62 10 00 	l.add r3,r2,r2
    51ec:	e0 43 10 00 	l.add r2,r3,r2
    51f0:	b8 42 00 03 	l.slli r2,r2,0x3
    51f4:	e0 4c 10 00 	l.add r2,r12,r2
    51f8:	e4 82 60 00 	l.sfltu r2,r12
    51fc:	10 00 00 04 	l.bf 520c <cnt64_udelay+0x48>
    5200:	e1 ce 58 00 	l.add r14,r14,r11
    5204:	9d c0 00 00 	l.addi r14,r0,0x0
    5208:	e1 ce 58 00 	l.add r14,r14,r11
	while (expire > cpucfg_counter_read()) {
    520c:	04 00 1e 4a 	l.jal cb34 <cpucfg_counter_read>
    5210:	15 00 00 00 	l.nop 0x0
    5214:	e4 4e 58 00 	l.sfgtu r14,r11
    5218:	13 ff ff fd 	l.bf 520c <cnt64_udelay+0x48>
    521c:	e4 2e 58 00 	l.sfne r14,r11
    5220:	10 00 00 04 	l.bf 5230 <cnt64_udelay+0x6c>
    5224:	e4 42 60 00 	l.sfgtu r2,r12
    5228:	13 ff ff f9 	l.bf 520c <cnt64_udelay+0x48>
    522c:	15 00 00 00 	l.nop 0x0
		/* wait busy */
		;
	}
}
    5230:	9c 21 00 0c 	l.addi r1,r1,0xc
    5234:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5238:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    523c:	44 00 48 00 	l.jr r9
    5240:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

00005244 <time_udelay>:

void time_udelay(u32 us)
{
    5244:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    5248:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    524c:	a8 43 00 00 	l.ori r2,r3,0x0
	u32 cycles;
	u32 cpus_freq;

	if (us == 0) {
    5250:	bc 03 00 00 	l.sfeqi r3,0x0
    5254:	10 00 00 1e 	l.bf 52cc <time_udelay+0x88>
    5258:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
		/* no delay */
		return;
	}

	if (is_hosc_lock() || is_suspend_lock()) {
    525c:	04 00 33 94 	l.jal 120ac <is_hosc_lock>
    5260:	15 00 00 00 	l.nop 0x0
    5264:	bc 2b 00 00 	l.sfnei r11,0x0
    5268:	10 00 00 07 	l.bf 5284 <time_udelay+0x40>
    526c:	15 00 00 00 	l.nop 0x0
    5270:	04 00 16 6a 	l.jal ac18 <is_suspend_lock>
    5274:	15 00 00 00 	l.nop 0x0
    5278:	bc 0b 00 00 	l.sfeqi r11,0x0
    527c:	10 00 00 10 	l.bf 52bc <time_udelay+0x78>
    5280:	a8 62 00 00 	l.ori r3,r2,0x0
		cpus_freq = ccu_get_sclk_freq(CCU_SYS_CLK_CPUS);
    5284:	04 00 34 51 	l.jal 123c8 <ccu_get_sclk_freq>
    5288:	9c 60 00 11 	l.addi r3,r0,0x11
		cycles = (cpus_freq * us + (1000000 - 1)) / 1000000;
    528c:	e0 4b 13 06 	l.mul r2,r11,r2
    5290:	18 80 00 0f 	l.movhi r4,0xf
    5294:	a8 84 42 3f 	l.ori r4,r4,0x423f
    5298:	e0 62 20 00 	l.add r3,r2,r4
    529c:	18 80 00 0f 	l.movhi r4,0xf
    52a0:	04 00 1b da 	l.jal c208 <__udivsi3>
    52a4:	a8 84 42 40 	l.ori r4,r4,0x4240
		time_cdelay(cycles);
	} else {
		cnt64_udelay(us);
	}

}
    52a8:	9c 21 00 08 	l.addi r1,r1,0x8
	}

	if (is_hosc_lock() || is_suspend_lock()) {
		cpus_freq = ccu_get_sclk_freq(CCU_SYS_CLK_CPUS);
		cycles = (cpus_freq * us + (1000000 - 1)) / 1000000;
		time_cdelay(cycles);
    52ac:	a8 6b 00 00 	l.ori r3,r11,0x0
	} else {
		cnt64_udelay(us);
	}

}
    52b0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	}

	if (is_hosc_lock() || is_suspend_lock()) {
		cpus_freq = ccu_get_sclk_freq(CCU_SYS_CLK_CPUS);
		cycles = (cpus_freq * us + (1000000 - 1)) / 1000000;
		time_cdelay(cycles);
    52b4:	00 00 00 0a 	l.j 52dc <time_cdelay>
    52b8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)
	} else {
		cnt64_udelay(us);
	}

}
    52bc:	9c 21 00 08 	l.addi r1,r1,0x8
    52c0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	if (is_hosc_lock() || is_suspend_lock()) {
		cpus_freq = ccu_get_sclk_freq(CCU_SYS_CLK_CPUS);
		cycles = (cpus_freq * us + (1000000 - 1)) / 1000000;
		time_cdelay(cycles);
	} else {
		cnt64_udelay(us);
    52c4:	03 ff ff c0 	l.j 51c4 <cnt64_udelay>
    52c8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)
	}

}
    52cc:	9c 21 00 08 	l.addi r1,r1,0x8
    52d0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    52d4:	44 00 48 00 	l.jr r9
    52d8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000052dc <time_cdelay>:
    52dc:	bc 23 00 00 	l.sfnei r3,0x0
    52e0:	13 ff ff ff 	l.bf 52dc <time_cdelay>
    52e4:	9c 63 ff ff 	l.addi r3,r3,0xffffffff
    52e8:	9c 63 00 01 	l.addi r3,r3,0x1
    52ec:	44 00 48 00 	l.jr r9
    52f0:	15 00 00 00 	l.nop 0x0

000052f4 <uart_init>:
 *
 * @return: OK if initialize uart succeeded, others if failed.
 * @note: initialize uart.
 */
s32 uart_init(void)
{
    52f4:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
	u32 div;
	u32 lcr;
	u32 apb0_clk;

	/* uart_pin_not_used may parse from dts */
	uart_pin_not_used = 0;
    52f8:	18 40 00 01 	l.movhi r2,0x1
    52fc:	9c 60 00 00 	l.addi r3,r0,0x0
    5300:	a8 42 34 30 	l.ori r2,r2,0x3430
 *
 * @return: OK if initialize uart succeeded, others if failed.
 * @note: initialize uart.
 */
s32 uart_init(void)
{
    5304:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    5308:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	u32 div;
	u32 lcr;
	u32 apb0_clk;

	/* uart_pin_not_used may parse from dts */
	uart_pin_not_used = 0;
    530c:	d4 02 18 00 	l.sw 0x0(r2),r3
 *
 * @return: OK if initialize uart succeeded, others if failed.
 * @note: initialize uart.
 */
s32 uart_init(void)
{
    5310:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	u32 lcr;
	u32 apb0_clk;

	/* uart_pin_not_used may parse from dts */
	uart_pin_not_used = 0;
	if (uart_pin_not_used)
    5314:	84 42 00 00 	l.lwz r2,0x0(r2)
    5318:	e4 22 18 00 	l.sfne r2,r3
    531c:	10 00 00 32 	l.bf 53e4 <uart_init+0xf0>
    5320:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	uart_rate = UART_BAUDRATE;
    5324:	19 c0 00 01 	l.movhi r14,0x1
    5328:	a8 60 e1 00 	l.ori r3,r0,0xe100
    532c:	a9 ce 34 34 	l.ori r14,r14,0x3434
#ifndef CFG_FPGA_PLATFORM
	pin_set_multi_sel(PIN_GRP_PL, 2, 2);
    5330:	9c 80 00 02 	l.addi r4,r0,0x2
	/* uart_pin_not_used may parse from dts */
	uart_pin_not_used = 0;
	if (uart_pin_not_used)
		return -EACCES;

	uart_rate = UART_BAUDRATE;
    5334:	d4 0e 18 00 	l.sw 0x0(r14),r3
#ifndef CFG_FPGA_PLATFORM
	pin_set_multi_sel(PIN_GRP_PL, 2, 2);
    5338:	a8 a4 00 00 	l.ori r5,r4,0x0
    533c:	07 ff fd 43 	l.jal 4848 <pin_set_multi_sel>
    5340:	9c 60 00 01 	l.addi r3,r0,0x1
	pin_set_multi_sel(PIN_GRP_PL, 3, 2);
    5344:	9c a0 00 02 	l.addi r5,r0,0x2
    5348:	9c 60 00 01 	l.addi r3,r0,0x1
    534c:	07 ff fd 3f 	l.jal 4848 <pin_set_multi_sel>
    5350:	9c 80 00 03 	l.addi r4,r0,0x3
	/* set reset as assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_UART, CCU_CLK_NRESET),
    5354:	9c 60 00 1a 	l.addi r3,r0,0x1a
    5358:	04 00 33 59 	l.jal 120bc <ccu_set_mclk_reset>
    535c:	9c 80 00 01 	l.addi r4,r0,0x1

	/* set uart clock, open apb0 uart gating. */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_UART, CCU_CLK_ON);
    5360:	9c 80 00 01 	l.addi r4,r0,0x1
    5364:	04 00 31 d4 	l.jal 11ab4 <ccu_set_mclk_onoff>
    5368:	9c 60 00 1a 	l.addi r3,r0,0x1a

	/* the baud rate divisor */
	apb0_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
    536c:	04 00 34 17 	l.jal 123c8 <ccu_get_sclk_freq>
    5370:	9c 60 00 24 	l.addi r3,r0,0x24
	div = (apb0_clk + (uart_rate << 3)) / (uart_rate << 4);
    5374:	84 6e 00 00 	l.lwz r3,0x0(r14)
    5378:	84 8e 00 00 	l.lwz r4,0x0(r14)
    537c:	b8 63 00 03 	l.slli r3,r3,0x3
    5380:	b8 84 00 04 	l.slli r4,r4,0x4
    5384:	04 00 1b a1 	l.jal c208 <__udivsi3>
    5388:	e0 6b 18 00 	l.add r3,r11,r3
	pin_set_multi_sel(PIN_GRP_PL, 2, 2);
	pin_set_multi_sel(PIN_GRP_PL, 3, 2);
#endif

	/* initialize uart controller */
	lcr = readl(UART_REG_LCR);
    538c:	18 60 07 08 	l.movhi r3,0x708
    5390:	a8 83 00 0c 	l.ori r4,r3,0xc
    5394:	84 a4 00 00 	l.lwz r5,0x0(r4)
	writel(lcr | 0x80, UART_REG_LCR);  /* select the Divsor Latch Low Register and Divsor Latch High Register */
    5398:	a8 a5 00 80 	l.ori r5,r5,0x80
    539c:	d4 04 28 00 	l.sw 0x0(r4),r5
	writel(div & 0xff, UART_REG_DLL);
    53a0:	a4 ab 00 ff 	l.andi r5,r11,0xff
	writel((div >> 8) & 0xff, UART_REG_DLH);
    53a4:	b9 6b 00 48 	l.srli r11,r11,0x8
#endif

	/* initialize uart controller */
	lcr = readl(UART_REG_LCR);
	writel(lcr | 0x80, UART_REG_LCR);  /* select the Divsor Latch Low Register and Divsor Latch High Register */
	writel(div & 0xff, UART_REG_DLL);
    53a8:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((div >> 8) & 0xff, UART_REG_DLH);
    53ac:	a8 a3 00 04 	l.ori r5,r3,0x4
    53b0:	a5 6b 00 ff 	l.andi r11,r11,0xff
    53b4:	d4 05 58 00 	l.sw 0x0(r5),r11
#ifdef CFG_SHELL_USED
	writel(lcr & (~0x80), UART_REG_LCR);
#endif
	writel(0, UART_REG_HALT);
    53b8:	a8 a3 00 a4 	l.ori r5,r3,0xa4
	writel(3, UART_REG_LCR);           /* set mode, 8bit charset */
	writel(7, UART_REG_FCR);           /* enable and reset transmit/receive fifo */
    53bc:	a8 63 00 08 	l.ori r3,r3,0x8
	writel(div & 0xff, UART_REG_DLL);
	writel((div >> 8) & 0xff, UART_REG_DLH);
#ifdef CFG_SHELL_USED
	writel(lcr & (~0x80), UART_REG_LCR);
#endif
	writel(0, UART_REG_HALT);
    53c0:	d4 05 10 00 	l.sw 0x0(r5),r2
	writel(3, UART_REG_LCR);           /* set mode, 8bit charset */
    53c4:	9c a0 00 03 	l.addi r5,r0,0x3
#endif
	/* ensure uart is unlock */
	uart_lock = 0;

	/* uart initialize succeeded */
	return OK;
    53c8:	a9 62 00 00 	l.ori r11,r2,0x0
	writel((div >> 8) & 0xff, UART_REG_DLH);
#ifdef CFG_SHELL_USED
	writel(lcr & (~0x80), UART_REG_LCR);
#endif
	writel(0, UART_REG_HALT);
	writel(3, UART_REG_LCR);           /* set mode, 8bit charset */
    53cc:	d4 04 28 00 	l.sw 0x0(r4),r5
	writel(7, UART_REG_FCR);           /* enable and reset transmit/receive fifo */
    53d0:	9c 80 00 07 	l.addi r4,r0,0x7
    53d4:	d4 03 20 00 	l.sw 0x0(r3),r4
#ifdef CFG_SHELL_USED
	writel(1, UART_REG_IER);       /* enable receiver interrupt */
#endif
	/* ensure uart is unlock */
	uart_lock = 0;
    53d8:	18 60 00 01 	l.movhi r3,0x1
    53dc:	a8 63 33 30 	l.ori r3,r3,0x3330
    53e0:	d4 03 10 00 	l.sw 0x0(r3),r2

	/* uart initialize succeeded */
	return OK;
}
    53e4:	9c 21 00 0c 	l.addi r1,r1,0xc
    53e8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    53ec:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    53f0:	44 00 48 00 	l.jr r9
    53f4:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

000053f8 <uart_exit>:
 * @return: OK if exit uart succeeded, others if failed.
 * @note: exit uart.
 */
s32 uart_exit(void)
{
	uart_lock = 1;
    53f8:	18 60 00 01 	l.movhi r3,0x1
 *
 * @return: OK if exit uart succeeded, others if failed.
 * @note: exit uart.
 */
s32 uart_exit(void)
{
    53fc:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	uart_lock = 1;
    5400:	a8 63 33 30 	l.ori r3,r3,0x3330
    5404:	9c 40 00 01 	l.addi r2,r0,0x1
 *
 * @return: OK if exit uart succeeded, others if failed.
 * @note: exit uart.
 */
s32 uart_exit(void)
{
    5408:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	uart_lock = 1;
    540c:	d4 03 10 00 	l.sw 0x0(r3),r2
	uart_pin_not_used = 0;
    5410:	18 60 00 01 	l.movhi r3,0x1
    5414:	9c 80 00 00 	l.addi r4,r0,0x0
    5418:	a8 63 34 30 	l.ori r3,r3,0x3430
 *
 * @return: OK if exit uart succeeded, others if failed.
 * @note: exit uart.
 */
s32 uart_exit(void)
{
    541c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	uart_lock = 1;
	uart_pin_not_used = 0;
    5420:	d4 03 20 00 	l.sw 0x0(r3),r4

	pin_set_multi_sel(PIN_GRP_PL, 2, 7);
    5424:	9c a0 00 07 	l.addi r5,r0,0x7
    5428:	a8 62 00 00 	l.ori r3,r2,0x0
    542c:	07 ff fd 07 	l.jal 4848 <pin_set_multi_sel>
    5430:	9c 80 00 02 	l.addi r4,r0,0x2
	pin_set_multi_sel(PIN_GRP_PL, 3, 7);
    5434:	a8 62 00 00 	l.ori r3,r2,0x0
    5438:	9c a0 00 07 	l.addi r5,r0,0x7
    543c:	07 ff fd 03 	l.jal 4848 <pin_set_multi_sel>
    5440:	9c 80 00 03 	l.addi r4,r0,0x3

	/* set uart clock, open apb0 uart gating. */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_UART, CCU_CLK_OFF);
    5444:	9c 60 00 1a 	l.addi r3,r0,0x1a
    5448:	04 00 31 9b 	l.jal 11ab4 <ccu_set_mclk_onoff>
    544c:	9c 80 00 00 	l.addi r4,r0,0x0

	/* set reset as assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_R_UART, CCU_CLK_RESET);
    5450:	9c 60 00 1a 	l.addi r3,r0,0x1a
    5454:	04 00 33 1a 	l.jal 120bc <ccu_set_mclk_reset>
    5458:	9c 80 00 00 	l.addi r4,r0,0x0

	return OK;
}
    545c:	9c 21 00 08 	l.addi r1,r1,0x8
    5460:	9d 60 00 00 	l.addi r11,r0,0x0
    5464:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5468:	44 00 48 00 	l.jr r9
    546c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00005470 <uart_putc>:
 * @return: OK if put out charset succeeded, others if failed.
 * @note: put out a charset.
 */
s32 uart_putc(char ch)
{
	if (uart_lock || uart_pin_not_used)
    5470:	18 80 00 01 	l.movhi r4,0x1
 * @ch: the charset which we want to put out.
 * @return: OK if put out charset succeeded, others if failed.
 * @note: put out a charset.
 */
s32 uart_putc(char ch)
{
    5474:	b8 63 00 18 	l.slli r3,r3,0x18
	if (uart_lock || uart_pin_not_used)
    5478:	a8 84 33 30 	l.ori r4,r4,0x3330
		return -EACCES;
    547c:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
 * @return: OK if put out charset succeeded, others if failed.
 * @note: put out a charset.
 */
s32 uart_putc(char ch)
{
	if (uart_lock || uart_pin_not_used)
    5480:	84 84 00 00 	l.lwz r4,0x0(r4)
    5484:	bc 24 00 00 	l.sfnei r4,0x0
    5488:	10 00 00 11 	l.bf 54cc <uart_putc+0x5c>
    548c:	b8 63 00 98 	l.srai r3,r3,0x18
    5490:	18 80 00 01 	l.movhi r4,0x1
    5494:	a8 84 34 30 	l.ori r4,r4,0x3430
    5498:	84 84 00 00 	l.lwz r4,0x0(r4)
    549c:	bc 24 00 00 	l.sfnei r4,0x0
    54a0:	10 00 00 0b 	l.bf 54cc <uart_putc+0x5c>
    54a4:	18 80 07 08 	l.movhi r4,0x708
		return -EACCES;

	while (!(readl(UART_REG_USR) & 2)) /* fifo is full, check again */
    54a8:	a8 84 00 7c 	l.ori r4,r4,0x7c
    54ac:	84 a4 00 00 	l.lwz r5,0x0(r4)
    54b0:	a4 a5 00 02 	l.andi r5,r5,0x2
    54b4:	bc 05 00 00 	l.sfeqi r5,0x0
    54b8:	13 ff ff fd 	l.bf 54ac <uart_putc+0x3c>
    54bc:	15 00 00 00 	l.nop 0x0
		;

	/* write out charset to transmit fifo */
	writel(ch, UART_REG_THR);
    54c0:	18 80 07 08 	l.movhi r4,0x708

	return OK;
    54c4:	9d 60 00 00 	l.addi r11,r0,0x0

	while (!(readl(UART_REG_USR) & 2)) /* fifo is full, check again */
		;

	/* write out charset to transmit fifo */
	writel(ch, UART_REG_THR);
    54c8:	d4 04 18 00 	l.sw 0x0(r4),r3

	return OK;
}
    54cc:	44 00 48 00 	l.jr r9
    54d0:	15 00 00 00 	l.nop 0x0

000054d4 <uart_get>:
 */
u32 uart_get(char *buf)
{
	u32 count = 0;

	if (uart_lock || uart_pin_not_used)
    54d4:	18 80 00 01 	l.movhi r4,0x1
		return -EACCES;
    54d8:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
 */
u32 uart_get(char *buf)
{
	u32 count = 0;

	if (uart_lock || uart_pin_not_used)
    54dc:	a8 84 33 30 	l.ori r4,r4,0x3330
    54e0:	84 84 00 00 	l.lwz r4,0x0(r4)
    54e4:	bc 24 00 00 	l.sfnei r4,0x0
    54e8:	10 00 00 13 	l.bf 5534 <uart_get+0x60>
    54ec:	15 00 00 00 	l.nop 0x0
    54f0:	18 80 00 01 	l.movhi r4,0x1
    54f4:	a8 84 34 30 	l.ori r4,r4,0x3430
    54f8:	84 84 00 00 	l.lwz r4,0x0(r4)
    54fc:	bc 24 00 00 	l.sfnei r4,0x0
    5500:	10 00 00 0d 	l.bf 5534 <uart_get+0x60>
    5504:	15 00 00 00 	l.nop 0x0
    5508:	a9 64 00 00 	l.ori r11,r4,0x0
		return -EACCES;

	while (readl(UART_REG_RFL)) {
    550c:	18 80 07 08 	l.movhi r4,0x708
    5510:	00 00 00 05 	l.j 5524 <uart_get+0x50>
    5514:	a8 a4 00 84 	l.ori r5,r4,0x84
		*buf++ = (char)(readl(UART_REG_RBR) & 0xff);
    5518:	84 e4 00 00 	l.lwz r7,0x0(r4)
		count++;
    551c:	9d 6b 00 01 	l.addi r11,r11,0x1

	if (uart_lock || uart_pin_not_used)
		return -EACCES;

	while (readl(UART_REG_RFL)) {
		*buf++ = (char)(readl(UART_REG_RBR) & 0xff);
    5520:	d8 06 38 00 	l.sb 0x0(r6),r7
	u32 count = 0;

	if (uart_lock || uart_pin_not_used)
		return -EACCES;

	while (readl(UART_REG_RFL)) {
    5524:	84 c5 00 00 	l.lwz r6,0x0(r5)
    5528:	bc 26 00 00 	l.sfnei r6,0x0
    552c:	13 ff ff fb 	l.bf 5518 <uart_get+0x44>
    5530:	e0 c3 58 00 	l.add r6,r3,r11
		*buf++ = (char)(readl(UART_REG_RBR) & 0xff);
		count++;
	}

	return count;
}
    5534:	44 00 48 00 	l.jr r9
    5538:	15 00 00 00 	l.nop 0x0

0000553c <uart_puts>:
 * @string: the string which we want to put out.
 * @return: OK if put out string succeeded, others if failed.
 * @note: put out a string.
 */
s32 uart_puts(const char *string)
{
    553c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    5540:	a8 43 00 00 	l.ori r2,r3,0x0
	if (uart_lock || uart_pin_not_used)
    5544:	18 60 00 01 	l.movhi r3,0x1
 * @string: the string which we want to put out.
 * @return: OK if put out string succeeded, others if failed.
 * @note: put out a string.
 */
s32 uart_puts(const char *string)
{
    5548:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	if (uart_lock || uart_pin_not_used)
    554c:	a8 63 33 30 	l.ori r3,r3,0x3330
 * @string: the string which we want to put out.
 * @return: OK if put out string succeeded, others if failed.
 * @note: put out a string.
 */
s32 uart_puts(const char *string)
{
    5550:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	if (uart_lock || uart_pin_not_used)
    5554:	84 63 00 00 	l.lwz r3,0x0(r3)
    5558:	bc 23 00 00 	l.sfnei r3,0x0
    555c:	10 00 00 15 	l.bf 55b0 <uart_puts+0x74>
    5560:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
    5564:	18 60 00 01 	l.movhi r3,0x1
    5568:	a8 63 34 30 	l.ori r3,r3,0x3430
    556c:	84 63 00 00 	l.lwz r3,0x0(r3)
    5570:	bc 23 00 00 	l.sfnei r3,0x0
    5574:	0c 00 00 0b 	l.bnf 55a0 <uart_puts+0x64>
    5578:	15 00 00 00 	l.nop 0x0
			uart_putc('\r');
		uart_putc(*string++);
	}

	return OK;
}
    557c:	00 00 00 0e 	l.j 55b4 <uart_puts+0x78>
    5580:	9c 21 00 08 	l.addi r1,r1,0x8
		return -EACCES;

	ASSERT(string != NULL);

	while (*string != '\0') {
		if (*string == '\n') /* if current character is '\n', insert output with '\r' */
    5584:	10 00 00 04 	l.bf 5594 <uart_puts+0x58>
    5588:	15 00 00 00 	l.nop 0x0
			uart_putc('\r');
    558c:	07 ff ff b9 	l.jal 5470 <uart_putc>
    5590:	9c 60 00 0d 	l.addi r3,r0,0xd
		uart_putc(*string++);
    5594:	90 62 00 00 	l.lbs r3,0x0(r2)
    5598:	07 ff ff b6 	l.jal 5470 <uart_putc>
    559c:	9c 42 00 01 	l.addi r2,r2,0x1
	if (uart_lock || uart_pin_not_used)
		return -EACCES;

	ASSERT(string != NULL);

	while (*string != '\0') {
    55a0:	91 62 00 00 	l.lbs r11,0x0(r2)
    55a4:	bc 2b 00 00 	l.sfnei r11,0x0
    55a8:	13 ff ff f7 	l.bf 5584 <uart_puts+0x48>
    55ac:	bc 2b 00 0a 	l.sfnei r11,0xa
			uart_putc('\r');
		uart_putc(*string++);
	}

	return OK;
}
    55b0:	9c 21 00 08 	l.addi r1,r1,0x8
    55b4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    55b8:	44 00 48 00 	l.jr r9
    55bc:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000055c0 <uart_set_baudrate>:

s32 uart_set_baudrate(u32 rate)
{
    55c0:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
	u32 freq;
	u32 div;
	u32 lcr;
	u32 halt;

	if (uart_pin_not_used)
    55c4:	18 40 00 01 	l.movhi r2,0x1

	return OK;
}

s32 uart_set_baudrate(u32 rate)
{
    55c8:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	u32 freq;
	u32 div;
	u32 lcr;
	u32 halt;

	if (uart_pin_not_used)
    55cc:	a8 42 34 30 	l.ori r2,r2,0x3430

	return OK;
}

s32 uart_set_baudrate(u32 rate)
{
    55d0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 freq;
	u32 div;
	u32 lcr;
	u32 halt;

	if (uart_pin_not_used)
    55d4:	84 42 00 00 	l.lwz r2,0x0(r2)

	return OK;
}

s32 uart_set_baudrate(u32 rate)
{
    55d8:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
    55dc:	a9 c3 00 00 	l.ori r14,r3,0x0
	u32 freq;
	u32 div;
	u32 lcr;
	u32 halt;

	if (uart_pin_not_used)
    55e0:	bc 22 00 00 	l.sfnei r2,0x0
    55e4:	10 00 00 3f 	l.bf 56e0 <uart_set_baudrate+0x120>
    55e8:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	/* update current uart baudrate */
	LOG("uart buadrate change from [%d] to [%d]\n", uart_rate, rate);
    55ec:	18 40 00 01 	l.movhi r2,0x1
    55f0:	18 80 00 01 	l.movhi r4,0x1
    55f4:	a8 42 34 34 	l.ori r2,r2,0x3434
    55f8:	a8 84 25 ae 	l.ori r4,r4,0x25ae
    55fc:	84 62 00 00 	l.lwz r3,0x0(r2)
    5600:	d4 01 70 04 	l.sw 0x4(r1),r14
    5604:	d4 01 18 00 	l.sw 0x0(r1),r3
    5608:	04 00 12 6c 	l.jal 9fb8 <debugger_printf>
    560c:	9c 60 00 02 	l.addi r3,r0,0x2
	uart_rate = rate;
    5610:	d4 02 70 00 	l.sw 0x0(r2),r14

	/* wait uart transmit fifo empty */
	while (readl(UART_REG_TFL))
    5614:	18 40 07 08 	l.movhi r2,0x708
    5618:	a8 42 00 80 	l.ori r2,r2,0x80
    561c:	84 62 00 00 	l.lwz r3,0x0(r2)
    5620:	bc 23 00 00 	l.sfnei r3,0x0
    5624:	13 ff ff fe 	l.bf 561c <uart_set_baudrate+0x5c>
    5628:	9c 60 00 24 	l.addi r3,r0,0x24
#ifdef CFG_FPGA_PLATFORM
	freq = 24000000;
#else
	freq = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
#endif
	div  = (freq + (uart_rate << 3)) / (uart_rate << 4);
    562c:	18 40 00 01 	l.movhi r2,0x1

	/* reconfig uart baudrate */
#ifdef CFG_FPGA_PLATFORM
	freq = 24000000;
#else
	freq = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
    5630:	04 00 33 66 	l.jal 123c8 <ccu_get_sclk_freq>
    5634:	a8 42 34 34 	l.ori r2,r2,0x3434
#endif
	div  = (freq + (uart_rate << 3)) / (uart_rate << 4);
    5638:	84 62 00 00 	l.lwz r3,0x0(r2)
    563c:	84 82 00 00 	l.lwz r4,0x0(r2)
    5640:	b8 63 00 03 	l.slli r3,r3,0x3
    5644:	b8 84 00 04 	l.slli r4,r4,0x4
	lcr  = readl(UART_REG_LCR);
    5648:	18 40 07 08 	l.movhi r2,0x708
#ifdef CFG_FPGA_PLATFORM
	freq = 24000000;
#else
	freq = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
#endif
	div  = (freq + (uart_rate << 3)) / (uart_rate << 4);
    564c:	e0 6b 18 00 	l.add r3,r11,r3
    5650:	04 00 1a ee 	l.jal c208 <__udivsi3>
    5654:	a8 42 00 0c 	l.ori r2,r2,0xc
	lcr  = readl(UART_REG_LCR);
    5658:	84 a2 00 00 	l.lwz r5,0x0(r2)

	if (div == 0) /* avoid config invalid value */
    565c:	bc 0b 00 00 	l.sfeqi r11,0x0
    5660:	0c 00 00 03 	l.bnf 566c <uart_set_baudrate+0xac>
    5664:	18 80 07 08 	l.movhi r4,0x708
		div = 1;
    5668:	9d 60 00 01 	l.addi r11,r0,0x1
	/* enable change when busy */
	halt = readl(UART_REG_HALT) | 0x2;
	writel(halt, UART_REG_HALT);

	/* select the divsor latch low register and divsor latch high register */
	writel(lcr | 0x80, UART_REG_LCR);
    566c:	a8 c5 00 80 	l.ori r6,r5,0x80

	if (div == 0) /* avoid config invalid value */
		div = 1;

	/* enable change when busy */
	halt = readl(UART_REG_HALT) | 0x2;
    5670:	a8 64 00 a4 	l.ori r3,r4,0xa4
    5674:	84 43 00 00 	l.lwz r2,0x0(r3)
    5678:	a8 42 00 02 	l.ori r2,r2,0x2
	writel(halt, UART_REG_HALT);
    567c:	d4 03 10 00 	l.sw 0x0(r3),r2

	/* select the divsor latch low register and divsor latch high register */
	writel(lcr | 0x80, UART_REG_LCR);
    5680:	a8 44 00 0c 	l.ori r2,r4,0xc
    5684:	d4 02 30 00 	l.sw 0x0(r2),r6

	/* set divsor of uart */
	writel(div & 0xff, UART_REG_DLL);
    5688:	a4 cb 00 ff 	l.andi r6,r11,0xff
	writel((div >> 8) & 0xff, UART_REG_DLH);
    568c:	b9 6b 00 48 	l.srli r11,r11,0x8

	/* select the divsor latch low register and divsor latch high register */
	writel(lcr | 0x80, UART_REG_LCR);

	/* set divsor of uart */
	writel(div & 0xff, UART_REG_DLL);
    5690:	d4 04 30 00 	l.sw 0x0(r4),r6
	writel((div >> 8) & 0xff, UART_REG_DLH);
    5694:	a8 84 00 04 	l.ori r4,r4,0x4
    5698:	a5 6b 00 ff 	l.andi r11,r11,0xff
    569c:	d4 04 58 00 	l.sw 0x0(r4),r11

	/* unselect the divsor latch low register and divsor latch high register */
	writel(lcr & (~0x80), UART_REG_LCR);
    56a0:	9c 80 ff 7f 	l.addi r4,r0,0xffffff7f
    56a4:	e0 a5 20 03 	l.and r5,r5,r4
    56a8:	d4 02 28 00 	l.sw 0x0(r2),r5

	/* update baudrate */
	halt = readl(UART_REG_HALT) | 0x4;
    56ac:	84 43 00 00 	l.lwz r2,0x0(r3)
    56b0:	a8 42 00 04 	l.ori r2,r2,0x4
	writel(halt, UART_REG_HALT);
    56b4:	d4 03 10 00 	l.sw 0x0(r3),r2

	/* waiting update */
	while (readl(UART_REG_HALT) & 0x4)
    56b8:	85 63 00 00 	l.lwz r11,0x0(r3)
    56bc:	a5 6b 00 04 	l.andi r11,r11,0x4
    56c0:	bc 2b 00 00 	l.sfnei r11,0x0
    56c4:	13 ff ff fd 	l.bf 56b8 <uart_set_baudrate+0xf8>
    56c8:	15 00 00 00 	l.nop 0x0
		continue;

	/* disable change when busy */
	halt = readl(UART_REG_HALT) | 0x4;
    56cc:	84 43 00 00 	l.lwz r2,0x0(r3)
	writel(halt & (~0x2), UART_REG_HALT);
    56d0:	9c 80 ff fd 	l.addi r4,r0,0xfffffffd
	/* waiting update */
	while (readl(UART_REG_HALT) & 0x4)
		continue;

	/* disable change when busy */
	halt = readl(UART_REG_HALT) | 0x4;
    56d4:	a8 42 00 04 	l.ori r2,r2,0x4
	writel(halt & (~0x2), UART_REG_HALT);
    56d8:	e0 42 20 03 	l.and r2,r2,r4
    56dc:	d4 03 10 00 	l.sw 0x0(r3),r2

	return OK;
}
    56e0:	9c 21 00 14 	l.addi r1,r1,0x14
    56e4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    56e8:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    56ec:	44 00 48 00 	l.jr r9
    56f0:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

000056f4 <uart_clkchangecb>:
volatile static u32 uart_rate;

#define IS_TX_FIFO_EMPTY  (readl(UART_REG_USR) & (0x1 << 2))

s32 uart_clkchangecb(u32 command, u32 freq)
{
    56f4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	if (uart_pin_not_used)
    56f8:	18 40 00 01 	l.movhi r2,0x1
volatile static u32 uart_rate;

#define IS_TX_FIFO_EMPTY  (readl(UART_REG_USR) & (0x1 << 2))

s32 uart_clkchangecb(u32 command, u32 freq)
{
    56fc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	if (uart_pin_not_used)
    5700:	a8 42 34 30 	l.ori r2,r2,0x3430
volatile static u32 uart_rate;

#define IS_TX_FIFO_EMPTY  (readl(UART_REG_USR) & (0x1 << 2))

s32 uart_clkchangecb(u32 command, u32 freq)
{
    5704:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	if (uart_pin_not_used)
    5708:	84 42 00 00 	l.lwz r2,0x0(r2)
    570c:	bc 22 00 00 	l.sfnei r2,0x0
    5710:	10 00 00 1e 	l.bf 5788 <uart_clkchangecb+0x94>
    5714:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
		return -EACCES;

	switch (command) {
    5718:	bc 03 00 00 	l.sfeqi r3,0x0
    571c:	10 00 00 06 	l.bf 5734 <uart_clkchangecb+0x40>
    5720:	bc 03 00 01 	l.sfeqi r3,0x1
    5724:	0c 00 00 19 	l.bnf 5788 <uart_clkchangecb+0x94>
    5728:	9d 60 ff fd 	l.addi r11,r0,0xfffffffd
			return OK;
		}
	case CCU_CLK_CLKCHG_DONE:
		{
			/* reconfig uart current baudrate */
			uart_set_baudrate(uart_rate);
    572c:	00 00 00 0f 	l.j 5768 <uart_clkchangecb+0x74>
    5730:	18 60 00 01 	l.movhi r3,0x1
	case CCU_CLK_CLKCHG_REQ:
		{
			/* clock will be change */
			INF("uart source clock change request\n");
			/* wait uart transmit fifo empty */
			while (!IS_TX_FIFO_EMPTY)
    5734:	18 40 07 08 	l.movhi r2,0x708
    5738:	a8 42 00 7c 	l.ori r2,r2,0x7c
    573c:	84 62 00 00 	l.lwz r3,0x0(r2)
    5740:	a4 63 00 04 	l.andi r3,r3,0x4
    5744:	bc 03 00 00 	l.sfeqi r3,0x0
    5748:	13 ff ff fd 	l.bf 573c <uart_clkchangecb+0x48>
    574c:	9c 60 00 01 	l.addi r3,r0,0x1
				continue;
			/* lock uart */
			uart_lock = 1;
    5750:	18 40 00 01 	l.movhi r2,0x1
    5754:	a8 42 33 30 	l.ori r2,r2,0x3330
			return OK;
    5758:	9d 60 00 00 	l.addi r11,r0,0x0
			INF("uart source clock change request\n");
			/* wait uart transmit fifo empty */
			while (!IS_TX_FIFO_EMPTY)
				continue;
			/* lock uart */
			uart_lock = 1;
    575c:	d4 02 18 00 	l.sw 0x0(r2),r3
			return OK;
    5760:	00 00 00 0b 	l.j 578c <uart_clkchangecb+0x98>
    5764:	9c 21 00 08 	l.addi r1,r1,0x8
		}
	case CCU_CLK_CLKCHG_DONE:
		{
			/* reconfig uart current baudrate */
			uart_set_baudrate(uart_rate);
    5768:	a8 63 34 34 	l.ori r3,r3,0x3434
    576c:	84 63 00 00 	l.lwz r3,0x0(r3)
    5770:	07 ff ff 94 	l.jal 55c0 <uart_set_baudrate>
    5774:	15 00 00 00 	l.nop 0x0
			uart_lock = 0;
    5778:	18 60 00 01 	l.movhi r3,0x1
			INF("uart buadrate change done\n");
			return OK;
    577c:	a9 62 00 00 	l.ori r11,r2,0x0
		}
	case CCU_CLK_CLKCHG_DONE:
		{
			/* reconfig uart current baudrate */
			uart_set_baudrate(uart_rate);
			uart_lock = 0;
    5780:	a8 63 33 30 	l.ori r3,r3,0x3330
    5784:	d4 03 10 00 	l.sw 0x0(r3),r2
			return OK;
		}
	}

	return -ESRCH;
}
    5788:	9c 21 00 08 	l.addi r1,r1,0x8
    578c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5790:	44 00 48 00 	l.jr r9
    5794:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00005798 <uart_get_baudrate>:
}

u32 uart_get_baudrate(void)
{
	return uart_rate;
}
    5798:	18 60 00 01 	l.movhi r3,0x1
    579c:	a8 63 34 34 	l.ori r3,r3,0x3434
    57a0:	85 63 00 00 	l.lwz r11,0x0(r3)
    57a4:	44 00 48 00 	l.jr r9
    57a8:	15 00 00 00 	l.nop 0x0

000057ac <twi_clear_irq_flag>:
/* clear the interrupt flag */
static inline void twi_clear_irq_flag(void)
{
	unsigned int reg_val;

	reg_val = readl(TWI_CTR);
    57ac:	18 60 07 08 	l.movhi r3,0x708
    57b0:	a8 63 14 0c 	l.ori r3,r3,0x140c
    57b4:	84 83 00 00 	l.lwz r4,0x0(r3)
	reg_val |= TWI_INTFLAG;
    57b8:	a8 84 00 08 	l.ori r4,r4,0x8
	/* start and stop bit should be 0 */
	/*reg_val &= ~(TWI_MSTART | TWI_MSTOP); */
	writel(reg_val, TWI_CTR);
    57bc:	d4 03 20 00 	l.sw 0x0(r3),r4

	/* make sure that interrupt flag does really be cleared */
	readl(TWI_CTR);		/* read twice for delay */
    57c0:	84 83 00 00 	l.lwz r4,0x0(r3)
	while (readl(TWI_CTR) & TWI_INTFLAG)
    57c4:	84 83 00 00 	l.lwz r4,0x0(r3)
    57c8:	a4 84 00 08 	l.andi r4,r4,0x8
    57cc:	bc 24 00 00 	l.sfnei r4,0x0
    57d0:	13 ff ff fd 	l.bf 57c4 <twi_clear_irq_flag+0x18>
    57d4:	15 00 00 00 	l.nop 0x0
		;
}
    57d8:	44 00 48 00 	l.jr r9
    57dc:	15 00 00 00 	l.nop 0x0

000057e0 <twic_reset>:
}

static void twic_reset(void)
{
	/* reset twi comtroller */
	writel(1, TWI_SRR);
    57e0:	18 60 07 08 	l.movhi r3,0x708
    57e4:	9c 80 00 01 	l.addi r4,r0,0x1
    57e8:	a8 63 14 18 	l.ori r3,r3,0x1418
    57ec:	d4 03 20 00 	l.sw 0x0(r3),r4
	INF("reset\n");
	/* wait twi reset completing */
	while (readl(TWI_SRR))
    57f0:	84 83 00 00 	l.lwz r4,0x0(r3)
    57f4:	bc 24 00 00 	l.sfnei r4,0x0
    57f8:	13 ff ff fe 	l.bf 57f0 <twic_reset+0x10>
    57fc:	15 00 00 00 	l.nop 0x0
		;
}
    5800:	44 00 48 00 	l.jr r9
    5804:	15 00 00 00 	l.nop 0x0

00005808 <twi_start>:

static void twi_start(void)
{
	unsigned int value;

	value = readl(TWI_CTR);
    5808:	18 60 07 08 	l.movhi r3,0x708
	while (readl(TWI_SRR))
		;
}

static void twi_start(void)
{
    580c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	unsigned int value;

	value = readl(TWI_CTR);
    5810:	a8 63 14 0c 	l.ori r3,r3,0x140c
	value |= TWI_MSTART;
	value &= ~TWI_INTFLAG;
    5814:	9c 40 ff f7 	l.addi r2,r0,0xfffffff7

static void twi_start(void)
{
	unsigned int value;

	value = readl(TWI_CTR);
    5818:	84 83 00 00 	l.lwz r4,0x0(r3)
	while (readl(TWI_SRR))
		;
}

static void twi_start(void)
{
    581c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	unsigned int value;

	value = readl(TWI_CTR);
	value |= TWI_MSTART;
    5820:	a8 84 00 20 	l.ori r4,r4,0x20
	value &= ~TWI_INTFLAG;
    5824:	e0 84 10 03 	l.and r4,r4,r2
	writel(value, TWI_CTR);
    5828:	d4 03 20 00 	l.sw 0x0(r3),r4
}
    582c:	9c 21 00 04 	l.addi r1,r1,0x4
    5830:	44 00 48 00 	l.jr r9
    5834:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00005838 <twic_send_dummy_clock>:
	writel(reg_val, TWI_CTR);
}

static void twic_send_dummy_clock(void)
{
	unsigned int i = 10, timeout;
    5838:	9c 60 00 0a 	l.addi r3,r0,0xa

	INF("restore bus status to 0x3a\n");
	while (i--) {
		writel(0xa, TWI_LCR);
    583c:	18 a0 07 08 	l.movhi r5,0x708
	reg_val &= ~TWI_INTFLAG;
	writel(reg_val, TWI_CTR);
}

static void twic_send_dummy_clock(void)
{
    5840:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	unsigned int i = 10, timeout;

	INF("restore bus status to 0x3a\n");
	while (i--) {
		writel(0xa, TWI_LCR);
    5844:	a8 a5 14 20 	l.ori r5,r5,0x1420
	reg_val &= ~TWI_INTFLAG;
	writel(reg_val, TWI_CTR);
}

static void twic_send_dummy_clock(void)
{
    5848:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	unsigned int i = 10, timeout;

	INF("restore bus status to 0x3a\n");
	while (i--) {
    584c:	00 00 00 03 	l.j 5858 <twic_send_dummy_clock+0x20>
    5850:	a8 83 00 00 	l.ori r4,r3,0x0
		writel(0xa, TWI_LCR);
    5854:	d4 05 20 00 	l.sw 0x0(r5),r4
static void twic_send_dummy_clock(void)
{
	unsigned int i = 10, timeout;

	INF("restore bus status to 0x3a\n");
	while (i--) {
    5858:	9c 63 ff ff 	l.addi r3,r3,0xffffffff
    585c:	bc 23 ff ff 	l.sfnei r3,0xffffffff
    5860:	13 ff ff fd 	l.bf 5854 <twic_send_dummy_clock+0x1c>
    5864:	15 00 00 00 	l.nop 0x0
		writel(0xa, TWI_LCR);
		for (timeout = 1000; timeout; timeout--)
			;
	}
	writel(0xa, TWI_LCR);
    5868:	18 60 07 08 	l.movhi r3,0x708
    586c:	9c 80 00 0a 	l.addi r4,r0,0xa
    5870:	a8 63 14 20 	l.ori r3,r3,0x1420
    5874:	d4 03 20 00 	l.sw 0x0(r3),r4
	if (readl(TWI_LCR) != 0x3a)
    5878:	84 83 00 00 	l.lwz r4,0x0(r3)
    587c:	bc 04 00 3a 	l.sfeqi r4,0x3a
    5880:	10 00 00 08 	l.bf 58a0 <twic_send_dummy_clock+0x68>
    5884:	15 00 00 00 	l.nop 0x0
		ERR("bus status err: 0x%x\n", readl(TWI_LCR));
    5888:	84 63 00 00 	l.lwz r3,0x0(r3)
    588c:	18 80 00 01 	l.movhi r4,0x1
    5890:	d4 01 18 00 	l.sw 0x0(r1),r3
    5894:	a8 84 25 d6 	l.ori r4,r4,0x25d6
    5898:	04 00 11 c8 	l.jal 9fb8 <debugger_printf>
    589c:	9c 60 00 08 	l.addi r3,r0,0x8

	writel(1, TWI_SRR);
    58a0:	18 60 07 08 	l.movhi r3,0x708
    58a4:	9c 80 00 01 	l.addi r4,r0,0x1
    58a8:	a8 63 14 18 	l.ori r3,r3,0x1418
    58ac:	d4 03 20 00 	l.sw 0x0(r3),r4
}
    58b0:	9c 21 00 08 	l.addi r1,r1,0x8
    58b4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    58b8:	44 00 48 00 	l.jr r9
    58bc:	15 00 00 00 	l.nop 0x0

000058c0 <twic_set_sclk.clone.0>:
/*
 * twic_set_sclk() - set twi clock to clk.
 *
 * @clk: the clock want to set.
 */
static void twic_set_sclk(u32 clk)
    58c0:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    58c4:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
    58c8:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    58cc:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
    58d0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    58d4:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
	u32 sclk_real = 0;
	u32 src_clk = 0;
	u8 pow_clk_n = 1;
	u32 divider = 0;

	src_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
    58d8:	9c 60 00 24 	l.addi r3,r0,0x24
/*
 * twic_set_sclk() - set twi clock to clk.
 *
 * @clk: the clock want to set.
 */
static void twic_set_sclk(u32 clk)
    58dc:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
	u32 sclk_real = 0;
	u32 src_clk = 0;
	u8 pow_clk_n = 1;
	u32 divider = 0;

	src_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
    58e0:	04 00 32 ba 	l.jal 123c8 <ccu_get_sclk_freq>
    58e4:	9c 40 00 00 	l.addi r2,r0,0x0
	clk_n = 0;
	goto out;
#else
	u32 sclk_real = 0;
	u32 src_clk = 0;
	u8 pow_clk_n = 1;
    58e8:	9e 00 00 01 	l.addi r16,r0,0x1
	u32 divider = 0;

	src_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);
    58ec:	aa 8b 00 00 	l.ori r20,r11,0x0
 * @clk: the clock want to set.
 */
static void twic_set_sclk(u32 clk)
{
	u8 clk_m = 0;
	u8 clk_n = 0;
    58f0:	a9 c2 00 00 	l.ori r14,r2,0x0
	src_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);

	divider = src_clk / clk;
	clk_m = 0;
	while (clk_n < 8) {
		clk_n++;
    58f4:	9d ce 00 01 	l.addi r14,r14,0x1
		pow_clk_n *= 2;
    58f8:	e2 10 80 00 	l.add r16,r16,r16
	src_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);

	divider = src_clk / clk;
	clk_m = 0;
	while (clk_n < 8) {
		clk_n++;
    58fc:	a5 ce 00 ff 	l.andi r14,r14,0xff
		pow_clk_n *= 2;
    5900:	00 00 00 0e 	l.j 5938 <twic_set_sclk.clone.0+0x78>
    5904:	a6 10 00 ff 	l.andi r16,r16,0xff
		while (clk_m < 16) {
			sclk_real = src_clk / (clk_m + 1) / pow_clk_n / 10;
    5908:	a8 74 00 00 	l.ori r3,r20,0x0
    590c:	04 00 1a 3f 	l.jal c208 <__udivsi3>
    5910:	a8 92 00 00 	l.ori r4,r18,0x0
    5914:	a8 90 00 00 	l.ori r4,r16,0x0
    5918:	04 00 1a 3c 	l.jal c208 <__udivsi3>
    591c:	a8 6b 00 00 	l.ori r3,r11,0x0
			if (sclk_real <= clk)
    5920:	18 60 00 1e 	l.movhi r3,0x1e
    5924:	a8 63 84 89 	l.ori r3,r3,0x8489
    5928:	e4 ab 18 00 	l.sfleu r11,r3
    592c:	10 00 00 0a 	l.bf 5954 <twic_set_sclk.clone.0+0x94>
    5930:	b8 42 00 03 	l.slli r2,r2,0x3
				goto out;
			else
				clk_m++;
    5934:	a4 52 00 ff 	l.andi r2,r18,0xff
	divider = src_clk / clk;
	clk_m = 0;
	while (clk_n < 8) {
		clk_n++;
		pow_clk_n *= 2;
		while (clk_m < 16) {
    5938:	bc a2 00 0f 	l.sfleui r2,0xf
    593c:	13 ff ff f3 	l.bf 5908 <twic_set_sclk.clone.0+0x48>
    5940:	9e 42 00 01 	l.addi r18,r2,0x1

	src_clk = ccu_get_sclk_freq(CCU_SYS_CLK_APBS2);

	divider = src_clk / clk;
	clk_m = 0;
	while (clk_n < 8) {
    5944:	bc 2e 00 08 	l.sfnei r14,0x8
    5948:	13 ff ff eb 	l.bf 58f4 <twic_set_sclk.clone.0+0x34>
    594c:	15 00 00 00 	l.nop 0x0
	}
#endif

      out:
	/* set clock control register */
	writel((clk_m << 3) | clk_n, TWI_CKR);
    5950:	b8 42 00 03 	l.slli r2,r2,0x3
    5954:	18 60 07 08 	l.movhi r3,0x708
    5958:	e1 c2 70 04 	l.or r14,r2,r14
    595c:	a8 63 14 14 	l.ori r3,r3,0x1414
    5960:	d4 03 70 00 	l.sw 0x0(r3),r14
	INF("m = %x, n = %x, req_sclk = %d, real_clk = %d\n", clk_m, clk_n, clk, sclk_real);
}
    5964:	9c 21 00 18 	l.addi r1,r1,0x18
    5968:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    596c:	84 41 ff e8 	l.lwz r2,0xffffffe8(r1)
    5970:	85 c1 ff ec 	l.lwz r14,0xffffffec(r1)
    5974:	86 01 ff f0 	l.lwz r16,0xfffffff0(r1)
    5978:	86 41 ff f4 	l.lwz r18,0xfffffff4(r1)
    597c:	44 00 48 00 	l.jr r9
    5980:	86 81 ff f8 	l.lwz r20,0xfffffff8(r1)

00005984 <twi_clkchangecb>:

s32 twi_clkchangecb(u32 command, u32 freq)
{
    5984:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    5988:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	switch (command) {
    598c:	bc 03 00 00 	l.sfeqi r3,0x0
    5990:	10 00 00 07 	l.bf 59ac <twi_clkchangecb+0x28>
    5994:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    5998:	bc 03 00 01 	l.sfeqi r3,0x1
    599c:	0c 00 00 11 	l.bnf 59e0 <twi_clkchangecb+0x5c>
    59a0:	9d 60 ff dc 	l.addi r11,r0,0xffffffdc
    59a4:	00 00 00 09 	l.j 59c8 <twi_clkchangecb+0x44>
    59a8:	15 00 00 00 	l.nop 0x0
		{
			/* check twi is busy now
			 * ...
			 * clock will be change, lock twi interface
			 */
			twi_lock = 1;
    59ac:	18 80 00 01 	l.movhi r4,0x1
    59b0:	9c 40 00 01 	l.addi r2,r0,0x1
    59b4:	a8 84 34 38 	l.ori r4,r4,0x3438
			INF("twi clk change request\n");
			return OK;
    59b8:	a9 63 00 00 	l.ori r11,r3,0x0
		{
			/* check twi is busy now
			 * ...
			 * clock will be change, lock twi interface
			 */
			twi_lock = 1;
    59bc:	d8 04 10 00 	l.sb 0x0(r4),r2
			INF("twi clk change request\n");
			return OK;
    59c0:	00 00 00 09 	l.j 59e4 <twi_clkchangecb+0x60>
    59c4:	9c 21 00 08 	l.addi r1,r1,0x8
		{
			/*
			 * clock change finish, re-config twi clock,
			 * maybe re-config rsb clock should do somethings?
			 */
			twic_set_sclk(TWI_CLOCK_FREQ);
    59c8:	07 ff ff be 	l.jal 58c0 <twic_set_sclk.clone.0>
    59cc:	9c 40 00 00 	l.addi r2,r0,0x0

			/* unlock twi interface */
			twi_lock = 0;
    59d0:	18 60 00 01 	l.movhi r3,0x1
    59d4:	a8 63 34 38 	l.ori r3,r3,0x3438
			INF("twi clk change done\n");
			return OK;
    59d8:	9d 60 00 00 	l.addi r11,r0,0x0
			 * maybe re-config rsb clock should do somethings?
			 */
			twic_set_sclk(TWI_CLOCK_FREQ);

			/* unlock twi interface */
			twi_lock = 0;
    59dc:	d8 03 10 00 	l.sb 0x0(r3),r2
			break;
		}
	}

	return -EFAIL;
}
    59e0:	9c 21 00 08 	l.addi r1,r1,0x8
    59e4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    59e8:	44 00 48 00 	l.jr r9
    59ec:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000059f0 <twi_init>:

s32 twi_init(void)
{
    59f0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    59f4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	//if (arisc_para.power_mode != POWER_MODE_AXP) {
	//	twi_lock = TRUE;
	//	return OK;
	//}

	pin_set_multi_sel(PIN_GRP_PL, 0, 2);	/* PL0 config as TWI_SCK */
    59f8:	9c 60 00 01 	l.addi r3,r0,0x1

	return -EFAIL;
}

s32 twi_init(void)
{
    59fc:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	//if (arisc_para.power_mode != POWER_MODE_AXP) {
	//	twi_lock = TRUE;
	//	return OK;
	//}

	pin_set_multi_sel(PIN_GRP_PL, 0, 2);	/* PL0 config as TWI_SCK */
    5a00:	9c 80 00 00 	l.addi r4,r0,0x0
    5a04:	9c a0 00 02 	l.addi r5,r0,0x2
    5a08:	07 ff fb 90 	l.jal 4848 <pin_set_multi_sel>
    5a0c:	18 40 07 08 	l.movhi r2,0x708
	pin_set_pull(PIN_GRP_PL, 0, PIN_PULL_UP);	/* TWI_SCK pull-up */
    5a10:	9c 60 00 01 	l.addi r3,r0,0x1
    5a14:	9c 80 00 00 	l.addi r4,r0,0x0
    5a18:	07 ff fb aa 	l.jal 48c0 <pin_set_pull>
    5a1c:	a8 a3 00 00 	l.ori r5,r3,0x0
	pin_set_drive(PIN_GRP_PL, 0, PIN_MULTI_DRIVE_0);	/* TWI_SCK drive level 2 */
    5a20:	9c 80 00 00 	l.addi r4,r0,0x0
    5a24:	9c 60 00 01 	l.addi r3,r0,0x1
    5a28:	07 ff fb c4 	l.jal 4938 <pin_set_drive>
    5a2c:	a8 a4 00 00 	l.ori r5,r4,0x0

	pin_set_multi_sel(PIN_GRP_PL, 1, 2);	/* PL1 config as TWI_SDA */
    5a30:	9c 60 00 01 	l.addi r3,r0,0x1
    5a34:	9c a0 00 02 	l.addi r5,r0,0x2
    5a38:	07 ff fb 84 	l.jal 4848 <pin_set_multi_sel>
    5a3c:	a8 83 00 00 	l.ori r4,r3,0x0
	pin_set_pull(PIN_GRP_PL, 1, PIN_PULL_UP);	/* TWI_SDA pull-up */
    5a40:	9c 60 00 01 	l.addi r3,r0,0x1
    5a44:	a8 83 00 00 	l.ori r4,r3,0x0
    5a48:	07 ff fb 9e 	l.jal 48c0 <pin_set_pull>
    5a4c:	a8 a3 00 00 	l.ori r5,r3,0x0
	pin_set_drive(PIN_GRP_PL, 1, PIN_MULTI_DRIVE_0);	/* TWI_SDA drive level 2 */
    5a50:	9c 60 00 01 	l.addi r3,r0,0x1
    5a54:	9c a0 00 00 	l.addi r5,r0,0x0
    5a58:	07 ff fb b8 	l.jal 4938 <pin_set_drive>
    5a5c:	a8 83 00 00 	l.ori r4,r3,0x0

	/* initialize twi clock */
	/* ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI_1, CCU_CLK_RESET); */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TWI, CCU_CLK_ON);
    5a60:	9c 60 00 22 	l.addi r3,r0,0x22
    5a64:	04 00 30 14 	l.jal 11ab4 <ccu_set_mclk_onoff>
    5a68:	9c 80 00 01 	l.addi r4,r0,0x1
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI, CCU_CLK_NRESET);
    5a6c:	9c 60 00 22 	l.addi r3,r0,0x22
    5a70:	04 00 31 93 	l.jal 120bc <ccu_set_mclk_reset>
    5a74:	9c 80 00 01 	l.addi r4,r0,0x1
	twic_set_sclk(TWI_CLOCK_FREQ);
    5a78:	07 ff ff 92 	l.jal 58c0 <twic_set_sclk.clone.0>
    5a7c:	15 00 00 00 	l.nop 0x0
	writel(TWI_BUS_ENB | TWI_AACK, TWI_CTR);
    5a80:	a8 62 14 0c 	l.ori r3,r2,0x140c
    5a84:	9c 80 00 44 	l.addi r4,r0,0x44
	twic_reset();

	/* twi bus state is not reset value, try to restore it */
	if (readl(TWI_LCR) != 0x3a)
    5a88:	a8 42 14 20 	l.ori r2,r2,0x1420
	/* initialize twi clock */
	/* ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI_1, CCU_CLK_RESET); */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TWI, CCU_CLK_ON);
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI, CCU_CLK_NRESET);
	twic_set_sclk(TWI_CLOCK_FREQ);
	writel(TWI_BUS_ENB | TWI_AACK, TWI_CTR);
    5a8c:	d4 03 20 00 	l.sw 0x0(r3),r4
	twic_reset();
    5a90:	07 ff ff 54 	l.jal 57e0 <twic_reset>
    5a94:	15 00 00 00 	l.nop 0x0

	/* twi bus state is not reset value, try to restore it */
	if (readl(TWI_LCR) != 0x3a)
    5a98:	84 42 00 00 	l.lwz r2,0x0(r2)
    5a9c:	bc 02 00 3a 	l.sfeqi r2,0x3a
    5aa0:	10 00 00 04 	l.bf 5ab0 <twi_init+0xc0>
    5aa4:	18 40 00 01 	l.movhi r2,0x1
		twic_send_dummy_clock();
    5aa8:	07 ff ff 64 	l.jal 5838 <twic_send_dummy_clock>
    5aac:	15 00 00 00 	l.nop 0x0

	twi_lock = 0;
    5ab0:	9c 60 00 00 	l.addi r3,r0,0x0
    5ab4:	a8 42 34 38 	l.ori r2,r2,0x3438
    5ab8:	d8 02 18 00 	l.sb 0x0(r2),r3

#ifdef TWI_DEBUG
	printreg();
#endif
	if (readl(TWI_LCR) == 0x3a)
    5abc:	18 40 07 08 	l.movhi r2,0x708
    5ac0:	a8 42 14 20 	l.ori r2,r2,0x1420
    5ac4:	84 42 00 00 	l.lwz r2,0x0(r2)
    5ac8:	bc 22 00 3a 	l.sfnei r2,0x3a
    5acc:	10 00 00 05 	l.bf 5ae0 <twi_init+0xf0>
    5ad0:	18 80 00 01 	l.movhi r4,0x1
		LOG("init twi succeeded\n");
    5ad4:	9c 60 00 02 	l.addi r3,r0,0x2
    5ad8:	00 00 00 05 	l.j 5aec <twi_init+0xfc>
    5adc:	a8 84 25 f0 	l.ori r4,r4,0x25f0
	else
		ERR("init twi failed!\n");
    5ae0:	18 80 00 01 	l.movhi r4,0x1
    5ae4:	9c 60 00 08 	l.addi r3,r0,0x8
    5ae8:	a8 84 26 04 	l.ori r4,r4,0x2604
    5aec:	04 00 11 33 	l.jal 9fb8 <debugger_printf>
    5af0:	15 00 00 00 	l.nop 0x0

	return OK;
}
    5af4:	9c 21 00 08 	l.addi r1,r1,0x8
    5af8:	9d 60 00 00 	l.addi r11,r0,0x0
    5afc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    5b00:	44 00 48 00 	l.jr r9
    5b04:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00005b08 <twi_exit>:
s32 twi_exit(void)
{
	/* softreset twi module  */

	return OK;
}
    5b08:	44 00 48 00 	l.jr r9
    5b0c:	9d 60 00 00 	l.addi r11,r0,0x0

00005b10 <twi_byte_rw>:
 * @data: pointer to the data to be read or write
 * @return: EPDK_OK,      byte read or write successed;
 *          EPDK_FAIL,    btye read or write failed!
 */
s32 twi_byte_rw(twi_rw_type_e op, u8 saddr, u8 baddr, u8 *data, u32 len)
{
    5b10:	d7 e1 17 d8 	l.sw 0xffffffd8(r1),r2
	volatile unsigned int state;
	unsigned int timeout;
	int ret = -1;
	s32 cpsr;

	if (twi_lock)
    5b14:	18 40 00 01 	l.movhi r2,0x1
 * @data: pointer to the data to be read or write
 * @return: EPDK_OK,      byte read or write successed;
 *          EPDK_FAIL,    btye read or write failed!
 */
s32 twi_byte_rw(twi_rw_type_e op, u8 saddr, u8 baddr, u8 *data, u32 len)
{
    5b18:	d7 e1 77 dc 	l.sw 0xffffffdc(r1),r14
    5b1c:	d7 e1 87 e0 	l.sw 0xffffffe0(r1),r16
    5b20:	d7 e1 b7 ec 	l.sw 0xffffffec(r1),r22
    5b24:	d7 e1 d7 f4 	l.sw 0xfffffff4(r1),r26
    5b28:	d7 e1 e7 f8 	l.sw 0xfffffff8(r1),r28
    5b2c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    5b30:	d7 e1 97 e4 	l.sw 0xffffffe4(r1),r18
    5b34:	d7 e1 a7 e8 	l.sw 0xffffffe8(r1),r20
    5b38:	d7 e1 c7 f0 	l.sw 0xfffffff0(r1),r24
	volatile unsigned int state;
	unsigned int timeout;
	int ret = -1;
	s32 cpsr;

	if (twi_lock)
    5b3c:	a8 42 34 38 	l.ori r2,r2,0x3438
 * @data: pointer to the data to be read or write
 * @return: EPDK_OK,      byte read or write successed;
 *          EPDK_FAIL,    btye read or write failed!
 */
s32 twi_byte_rw(twi_rw_type_e op, u8 saddr, u8 baddr, u8 *data, u32 len)
{
    5b40:	9c 21 ff d0 	l.addi r1,r1,0xffffffd0
	volatile unsigned int state;
	unsigned int timeout;
	int ret = -1;
	s32 cpsr;

	if (twi_lock)
    5b44:	8e 82 00 00 	l.lbz r20,0x0(r2)
    5b48:	ba 94 00 18 	l.slli r20,r20,0x18
 * @data: pointer to the data to be read or write
 * @return: EPDK_OK,      byte read or write successed;
 *          EPDK_FAIL,    btye read or write failed!
 */
s32 twi_byte_rw(twi_rw_type_e op, u8 saddr, u8 baddr, u8 *data, u32 len)
{
    5b4c:	ab 43 00 00 	l.ori r26,r3,0x0
    5b50:	aa 06 00 00 	l.ori r16,r6,0x0
	volatile unsigned int state;
	unsigned int timeout;
	int ret = -1;
	s32 cpsr;

	if (twi_lock)
    5b54:	ba 94 00 98 	l.srai r20,r20,0x18
 * @data: pointer to the data to be read or write
 * @return: EPDK_OK,      byte read or write successed;
 *          EPDK_FAIL,    btye read or write failed!
 */
s32 twi_byte_rw(twi_rw_type_e op, u8 saddr, u8 baddr, u8 *data, u32 len)
{
    5b58:	a9 c7 00 00 	l.ori r14,r7,0x0
    5b5c:	a6 c4 00 ff 	l.andi r22,r4,0xff
    5b60:	a7 85 00 ff 	l.andi r28,r5,0xff
	volatile unsigned int state;
	unsigned int timeout;
	int ret = -1;
	s32 cpsr;

	if (twi_lock)
    5b64:	bc 34 00 00 	l.sfnei r20,0x0
    5b68:	10 00 01 87 	l.bf 6184 <twi_byte_rw+0x674>
    5b6c:	9c 40 ff f3 	l.addi r2,r0,0xfffffff3
		return -EACCES;

	if (len > 4)
    5b70:	bc 47 00 04 	l.sfgtui r7,0x4
    5b74:	10 00 01 84 	l.bf 6184 <twi_byte_rw+0x674>
    5b78:	9c 40 ff ea 	l.addi r2,r0,0xffffffea

static inline void twi_enable_ack(void)
{
	unsigned int reg_val;

	reg_val = readl(TWI_CTR);
    5b7c:	1a 40 07 08 	l.movhi r18,0x708
	reg_val |= TWI_AACK;
	reg_val &= ~TWI_INTFLAG;
    5b80:	9c 80 ff f7 	l.addi r4,r0,0xfffffff7

static inline void twi_enable_ack(void)
{
	unsigned int reg_val;

	reg_val = readl(TWI_CTR);
    5b84:	a8 52 14 0c 	l.ori r2,r18,0x140c
    5b88:	84 62 00 00 	l.lwz r3,0x0(r2)
	reg_val |= TWI_AACK;
    5b8c:	a8 63 00 04 	l.ori r3,r3,0x4
	reg_val &= ~TWI_INTFLAG;
    5b90:	e0 63 20 03 	l.and r3,r3,r4
	writel(reg_val, TWI_CTR);
    5b94:	d4 02 18 00 	l.sw 0x0(r2),r3
	readl(TWI_CTR);
    5b98:	84 62 00 00 	l.lwz r3,0x0(r2)
	readl(TWI_CTR);
    5b9c:	84 62 00 00 	l.lwz r3,0x0(r2)
	if (len > 4)
		return -EINVAL;

	twi_enable_ack();	/* enable ACK first */

	cpsr = cpu_disable_int();
    5ba0:	04 00 18 81 	l.jal bda4 <cpu_disable_int>
    5ba4:	15 00 00 00 	l.nop 0x0
	writel(0, TWI_EFR);
    5ba8:	a8 72 14 1c 	l.ori r3,r18,0x141c
	state = (readl(TWI_STR) & 0x0ff);
    5bac:	aa 52 14 10 	l.ori r18,r18,0x1410
		return -EINVAL;

	twi_enable_ack();	/* enable ACK first */

	cpsr = cpu_disable_int();
	writel(0, TWI_EFR);
    5bb0:	d4 03 a0 00 	l.sw 0x0(r3),r20
	if (len > 4)
		return -EINVAL;

	twi_enable_ack();	/* enable ACK first */

	cpsr = cpu_disable_int();
    5bb4:	ab 0b 00 00 	l.ori r24,r11,0x0
	writel(0, TWI_EFR);
	state = (readl(TWI_STR) & 0x0ff);
    5bb8:	84 72 00 00 	l.lwz r3,0x0(r18)
    5bbc:	a4 63 00 ff 	l.andi r3,r3,0xff
    5bc0:	d4 01 18 04 	l.sw 0x4(r1),r3
	if (state != 0xf8) {
    5bc4:	84 61 00 04 	l.lwz r3,0x4(r1)
    5bc8:	bc 03 00 f8 	l.sfeqi r3,0xf8
    5bcc:	10 00 00 08 	l.bf 5bec <twi_byte_rw+0xdc>
    5bd0:	15 00 00 00 	l.nop 0x0
		ERR("e1:%x\n", state);
    5bd4:	84 41 00 04 	l.lwz r2,0x4(r1)
    5bd8:	18 80 00 01 	l.movhi r4,0x1
    5bdc:	d4 01 10 00 	l.sw 0x0(r1),r2
    5be0:	9c 60 00 08 	l.addi r3,r0,0x8
    5be4:	00 00 01 0c 	l.j 6014 <twi_byte_rw+0x504>
    5be8:	a8 84 26 1a 	l.ori r4,r4,0x261a
	 *   7      6       5     4       3       2    1    0
	 * INT_EN  BUS_EN  START  STOP  INT_FLAG  ACK  NOT  NOT
	 */

	/* step1. Send Start */
	twi_start();
    5bec:	07 ff ff 07 	l.jal 5808 <twi_start>
    5bf0:	15 00 00 00 	l.nop 0x0

	timeout = TWI_CHECK_TIMEOUT;
    5bf4:	9c c0 07 ff 	l.addi r6,r0,0x7ff
	while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))	/* wait for flg set */
    5bf8:	84 62 00 00 	l.lwz r3,0x0(r2)
    5bfc:	a4 63 00 08 	l.andi r3,r3,0x8
    5c00:	bc 23 00 00 	l.sfnei r3,0x0
    5c04:	10 00 00 08 	l.bf 5c24 <twi_byte_rw+0x114>
    5c08:	1a 40 07 08 	l.movhi r18,0x708
    5c0c:	9c c6 ff ff 	l.addi r6,r6,0xffffffff
    5c10:	bc 26 00 00 	l.sfnei r6,0x0
    5c14:	13 ff ff f9 	l.bf 5bf8 <twi_byte_rw+0xe8>
    5c18:	18 80 00 01 	l.movhi r4,0x1
		;
	if (timeout == 0) {
		ERR("to0\n");
    5c1c:	00 00 00 06 	l.j 5c34 <twi_byte_rw+0x124>
    5c20:	9c 60 00 08 	l.addi r3,r0,0x8
	twi_start();

	timeout = TWI_CHECK_TIMEOUT;
	while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))	/* wait for flg set */
		;
	if (timeout == 0) {
    5c24:	bc 26 00 00 	l.sfnei r6,0x0
    5c28:	10 00 00 08 	l.bf 5c48 <twi_byte_rw+0x138>
    5c2c:	18 80 00 01 	l.movhi r4,0x1
		ERR("to0\n");
    5c30:	9c 60 00 08 	l.addi r3,r0,0x8
    5c34:	a8 84 26 25 	l.ori r4,r4,0x2625
    5c38:	04 00 10 e0 	l.jal 9fb8 <debugger_printf>
    5c3c:	9c 40 ff ff 	l.addi r2,r0,0xffffffff
		goto stop_out;
    5c40:	00 00 01 0e 	l.j 6078 <twi_byte_rw+0x568>
    5c44:	19 c0 07 08 	l.movhi r14,0x708
	}

	state = readl(TWI_STR);
    5c48:	a8 52 14 10 	l.ori r2,r18,0x1410
    5c4c:	84 42 00 00 	l.lwz r2,0x0(r2)
    5c50:	d4 01 10 04 	l.sw 0x4(r1),r2
	if (state != 0x08) {
    5c54:	84 41 00 04 	l.lwz r2,0x4(r1)
    5c58:	bc 02 00 08 	l.sfeqi r2,0x8
    5c5c:	10 00 00 08 	l.bf 5c7c <twi_byte_rw+0x16c>
    5c60:	15 00 00 00 	l.nop 0x0
		ERR("e3:%x\n", state);
    5c64:	84 41 00 04 	l.lwz r2,0x4(r1)
    5c68:	18 80 00 01 	l.movhi r4,0x1
    5c6c:	d4 01 10 00 	l.sw 0x0(r1),r2
    5c70:	9c 60 00 08 	l.addi r3,r0,0x8
    5c74:	00 00 00 e8 	l.j 6014 <twi_byte_rw+0x504>
    5c78:	a8 84 26 2e 	l.ori r4,r4,0x262e
		goto stop_out;
	}
	/* step2. Send Slave Address */
	writel(((saddr << 1) & 0x0fe), TWI_DTR);	/* slave address + write */
    5c7c:	e2 d6 b0 00 	l.add r22,r22,r22
    5c80:	a8 52 14 08 	l.ori r2,r18,0x1408
    5c84:	a4 76 00 ff 	l.andi r3,r22,0xff
    5c88:	d4 02 18 00 	l.sw 0x0(r2),r3
	twi_clear_irq_flag();	/* clear int flag to send saddr */
    5c8c:	07 ff fe c8 	l.jal 57ac <twi_clear_irq_flag>
    5c90:	9c 40 07 ff 	l.addi r2,r0,0x7ff

	timeout = TWI_CHECK_TIMEOUT;
	while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
    5c94:	a8 72 14 0c 	l.ori r3,r18,0x140c
    5c98:	84 83 00 00 	l.lwz r4,0x0(r3)
    5c9c:	a4 84 00 08 	l.andi r4,r4,0x8
    5ca0:	bc 24 00 00 	l.sfnei r4,0x0
    5ca4:	10 00 00 08 	l.bf 5cc4 <twi_byte_rw+0x1b4>
    5ca8:	1a 40 07 08 	l.movhi r18,0x708
    5cac:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    5cb0:	bc 22 00 00 	l.sfnei r2,0x0
    5cb4:	13 ff ff f9 	l.bf 5c98 <twi_byte_rw+0x188>
    5cb8:	18 80 00 01 	l.movhi r4,0x1
		;
	if (timeout == 0) {
		ERR("to1\n");
    5cbc:	00 00 00 06 	l.j 5cd4 <twi_byte_rw+0x1c4>
    5cc0:	9c 60 00 08 	l.addi r3,r0,0x8
	twi_clear_irq_flag();	/* clear int flag to send saddr */

	timeout = TWI_CHECK_TIMEOUT;
	while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
		;
	if (timeout == 0) {
    5cc4:	bc 22 00 00 	l.sfnei r2,0x0
    5cc8:	10 00 00 05 	l.bf 5cdc <twi_byte_rw+0x1cc>
    5ccc:	18 80 00 01 	l.movhi r4,0x1
		ERR("to1\n");
    5cd0:	9c 60 00 08 	l.addi r3,r0,0x8
    5cd4:	03 ff ff d9 	l.j 5c38 <twi_byte_rw+0x128>
    5cd8:	a8 84 26 39 	l.ori r4,r4,0x2639
		goto stop_out;
	}

	state = readl(TWI_STR);
    5cdc:	a8 52 14 10 	l.ori r2,r18,0x1410
    5ce0:	84 42 00 00 	l.lwz r2,0x0(r2)
    5ce4:	d4 01 10 04 	l.sw 0x4(r1),r2
	while (state != 0x18) {
    5ce8:	84 41 00 04 	l.lwz r2,0x4(r1)
    5cec:	bc 02 00 18 	l.sfeqi r2,0x18
    5cf0:	10 00 00 08 	l.bf 5d10 <twi_byte_rw+0x200>
    5cf4:	15 00 00 00 	l.nop 0x0
		ERR("e5:%x\n", state);
    5cf8:	84 41 00 04 	l.lwz r2,0x4(r1)
    5cfc:	18 80 00 01 	l.movhi r4,0x1
    5d00:	d4 01 10 00 	l.sw 0x0(r1),r2
    5d04:	9c 60 00 08 	l.addi r3,r0,0x8
    5d08:	00 00 00 c3 	l.j 6014 <twi_byte_rw+0x504>
    5d0c:	a8 84 26 42 	l.ori r4,r4,0x2642
		goto stop_out;
	}

	/* step3. Send Byte Address */
	writel(baddr, TWI_DTR);	/* slave address + write */
    5d10:	a8 52 14 08 	l.ori r2,r18,0x1408
    5d14:	d4 02 e0 00 	l.sw 0x0(r2),r28
	twi_clear_irq_flag();	/* clear int flag to send regaddr */
    5d18:	07 ff fe a5 	l.jal 57ac <twi_clear_irq_flag>
    5d1c:	9c 40 07 ff 	l.addi r2,r0,0x7ff

	timeout = TWI_CHECK_TIMEOUT;
	while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
    5d20:	a8 72 14 0c 	l.ori r3,r18,0x140c
    5d24:	84 83 00 00 	l.lwz r4,0x0(r3)
    5d28:	a4 84 00 08 	l.andi r4,r4,0x8
    5d2c:	bc 24 00 00 	l.sfnei r4,0x0
    5d30:	10 00 00 08 	l.bf 5d50 <twi_byte_rw+0x240>
    5d34:	1a 40 07 08 	l.movhi r18,0x708
    5d38:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    5d3c:	bc 22 00 00 	l.sfnei r2,0x0
    5d40:	13 ff ff f9 	l.bf 5d24 <twi_byte_rw+0x214>
    5d44:	18 80 00 01 	l.movhi r4,0x1
		;
	if (timeout == 0) {
		ERR("to2\n");
    5d48:	00 00 00 06 	l.j 5d60 <twi_byte_rw+0x250>
    5d4c:	9c 60 00 08 	l.addi r3,r0,0x8
	twi_clear_irq_flag();	/* clear int flag to send regaddr */

	timeout = TWI_CHECK_TIMEOUT;
	while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
		;
	if (timeout == 0) {
    5d50:	bc 22 00 00 	l.sfnei r2,0x0
    5d54:	10 00 00 05 	l.bf 5d68 <twi_byte_rw+0x258>
    5d58:	18 80 00 01 	l.movhi r4,0x1
		ERR("to2\n");
    5d5c:	9c 60 00 08 	l.addi r3,r0,0x8
    5d60:	03 ff ff b6 	l.j 5c38 <twi_byte_rw+0x128>
    5d64:	a8 84 26 4d 	l.ori r4,r4,0x264d
		goto stop_out;
	}

	state = readl(TWI_STR);
    5d68:	a8 52 14 10 	l.ori r2,r18,0x1410
    5d6c:	84 62 00 00 	l.lwz r3,0x0(r2)
    5d70:	d4 01 18 04 	l.sw 0x4(r1),r3
	if (state != 0x28) {
    5d74:	84 61 00 04 	l.lwz r3,0x4(r1)
    5d78:	bc 03 00 28 	l.sfeqi r3,0x28
    5d7c:	10 00 00 08 	l.bf 5d9c <twi_byte_rw+0x28c>
    5d80:	bc 3a 00 00 	l.sfnei r26,0x0
		ERR("e7:%x\n", state);
    5d84:	84 41 00 04 	l.lwz r2,0x4(r1)
    5d88:	18 80 00 01 	l.movhi r4,0x1
    5d8c:	d4 01 10 00 	l.sw 0x0(r1),r2
    5d90:	9c 60 00 08 	l.addi r3,r0,0x8
    5d94:	00 00 00 a0 	l.j 6014 <twi_byte_rw+0x504>
    5d98:	a8 84 26 56 	l.ori r4,r4,0x2656
		goto stop_out;
	}

	if (op == TWI_WRITE) {
    5d9c:	0c 00 00 28 	l.bnf 5e3c <twi_byte_rw+0x32c>
    5da0:	aa 82 00 00 	l.ori r20,r2,0x0
	} else {
		/* step4. Send restart for read */
		twi_start();
		twi_clear_irq_flag();	/* clear int flag to send saddr */

		timeout = TWI_CHECK_TIMEOUT;
    5da4:	00 00 00 2d 	l.j 5e58 <twi_byte_rw+0x348>
    5da8:	9c 40 07 ff 	l.addi r2,r0,0x7ff
	}

	if (op == TWI_WRITE) {
		/* step4. Send Data to be write */
		while (len--) {
			writel(*data++, TWI_DTR);	/* slave address + write */
    5dac:	8c 50 00 00 	l.lbz r2,0x0(r16)
    5db0:	d4 16 10 00 	l.sw 0x0(r22),r2
			twi_clear_irq_flag();	/* clear int flag */
    5db4:	07 ff fe 7e 	l.jal 57ac <twi_clear_irq_flag>
    5db8:	9c 40 07 ff 	l.addi r2,r0,0x7ff

			timeout = TWI_CHECK_TIMEOUT;
			while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (timeout--))
    5dbc:	84 72 00 00 	l.lwz r3,0x0(r18)
    5dc0:	a4 63 00 08 	l.andi r3,r3,0x8
    5dc4:	bc 03 00 00 	l.sfeqi r3,0x0
    5dc8:	10 00 00 08 	l.bf 5de8 <twi_byte_rw+0x2d8>
    5dcc:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    5dd0:	9c 42 00 01 	l.addi r2,r2,0x1
				;
			if (timeout == -1) {
    5dd4:	bc 02 ff ff 	l.sfeqi r2,0xffffffff
    5dd8:	0c 00 00 0a 	l.bnf 5e00 <twi_byte_rw+0x2f0>
    5ddc:	18 80 00 01 	l.movhi r4,0x1
				ERR("to3\n");
    5de0:	00 00 00 06 	l.j 5df8 <twi_byte_rw+0x2e8>
    5de4:	9c 60 00 08 	l.addi r3,r0,0x8
		while (len--) {
			writel(*data++, TWI_DTR);	/* slave address + write */
			twi_clear_irq_flag();	/* clear int flag */

			timeout = TWI_CHECK_TIMEOUT;
			while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (timeout--))
    5de8:	bc 22 ff ff 	l.sfnei r2,0xffffffff
    5dec:	13 ff ff f4 	l.bf 5dbc <twi_byte_rw+0x2ac>
    5df0:	18 80 00 01 	l.movhi r4,0x1
				;
			if (timeout == -1) {
				ERR("to3\n");
    5df4:	9c 60 00 08 	l.addi r3,r0,0x8
    5df8:	03 ff ff 90 	l.j 5c38 <twi_byte_rw+0x128>
    5dfc:	a8 84 26 61 	l.ori r4,r4,0x2661
				goto stop_out;
			}

			state = readl(TWI_STR);
    5e00:	84 54 00 00 	l.lwz r2,0x0(r20)
			if (state != 0x28) {
    5e04:	9d ce ff ff 	l.addi r14,r14,0xffffffff
			if (timeout == -1) {
				ERR("to3\n");
				goto stop_out;
			}

			state = readl(TWI_STR);
    5e08:	d4 01 10 04 	l.sw 0x4(r1),r2
			if (state != 0x28) {
    5e0c:	84 41 00 04 	l.lwz r2,0x4(r1)
    5e10:	bc 22 00 28 	l.sfnei r2,0x28
    5e14:	10 00 00 04 	l.bf 5e24 <twi_byte_rw+0x314>
    5e18:	15 00 00 00 	l.nop 0x0
	}

	if (op == TWI_WRITE) {
		/* step4. Send Data to be write */
		while (len--) {
			writel(*data++, TWI_DTR);	/* slave address + write */
    5e1c:	00 00 00 0a 	l.j 5e44 <twi_byte_rw+0x334>
    5e20:	9e 10 00 01 	l.addi r16,r16,0x1
				goto stop_out;
			}

			state = readl(TWI_STR);
			if (state != 0x28) {
				ERR("e9:%x\n", state);
    5e24:	84 41 00 04 	l.lwz r2,0x4(r1)
    5e28:	18 80 00 01 	l.movhi r4,0x1
    5e2c:	d4 01 10 00 	l.sw 0x0(r1),r2
    5e30:	9c 60 00 08 	l.addi r3,r0,0x8
    5e34:	00 00 00 78 	l.j 6014 <twi_byte_rw+0x504>
    5e38:	a8 84 26 6a 	l.ori r4,r4,0x266a
	}

	if (op == TWI_WRITE) {
		/* step4. Send Data to be write */
		while (len--) {
			writel(*data++, TWI_DTR);	/* slave address + write */
    5e3c:	aa d2 14 08 	l.ori r22,r18,0x1408
			twi_clear_irq_flag();	/* clear int flag */

			timeout = TWI_CHECK_TIMEOUT;
			while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (timeout--))
    5e40:	aa 52 14 0c 	l.ori r18,r18,0x140c
		goto stop_out;
	}

	if (op == TWI_WRITE) {
		/* step4. Send Data to be write */
		while (len--) {
    5e44:	bc 2e 00 00 	l.sfnei r14,0x0
    5e48:	13 ff ff d9 	l.bf 5dac <twi_byte_rw+0x29c>
    5e4c:	15 00 00 00 	l.nop 0x0
					goto stop_out;
				}
			}
		}
	}
	ret = 0;
    5e50:	00 00 00 89 	l.j 6074 <twi_byte_rw+0x564>
    5e54:	a8 4e 00 00 	l.ori r2,r14,0x0
				goto stop_out;
			}
		}
	} else {
		/* step4. Send restart for read */
		twi_start();
    5e58:	07 ff fe 6c 	l.jal 5808 <twi_start>
    5e5c:	aa 52 14 0c 	l.ori r18,r18,0x140c
		twi_clear_irq_flag();	/* clear int flag to send saddr */
    5e60:	07 ff fe 53 	l.jal 57ac <twi_clear_irq_flag>
    5e64:	15 00 00 00 	l.nop 0x0

		timeout = TWI_CHECK_TIMEOUT;
		while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
    5e68:	84 72 00 00 	l.lwz r3,0x0(r18)
    5e6c:	a4 63 00 08 	l.andi r3,r3,0x8
    5e70:	bc 23 00 00 	l.sfnei r3,0x0
    5e74:	10 00 00 08 	l.bf 5e94 <twi_byte_rw+0x384>
    5e78:	1a 80 07 08 	l.movhi r20,0x708
    5e7c:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    5e80:	bc 22 00 00 	l.sfnei r2,0x0
    5e84:	13 ff ff f9 	l.bf 5e68 <twi_byte_rw+0x358>
    5e88:	18 80 00 01 	l.movhi r4,0x1
			;
		if (timeout == 0) {
			ERR("to4\n");
    5e8c:	00 00 00 06 	l.j 5ea4 <twi_byte_rw+0x394>
    5e90:	9c 60 00 08 	l.addi r3,r0,0x8
		twi_clear_irq_flag();	/* clear int flag to send saddr */

		timeout = TWI_CHECK_TIMEOUT;
		while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
			;
		if (timeout == 0) {
    5e94:	bc 22 00 00 	l.sfnei r2,0x0
    5e98:	10 00 00 05 	l.bf 5eac <twi_byte_rw+0x39c>
    5e9c:	18 80 00 01 	l.movhi r4,0x1
			ERR("to4\n");
    5ea0:	9c 60 00 08 	l.addi r3,r0,0x8
    5ea4:	03 ff ff 65 	l.j 5c38 <twi_byte_rw+0x128>
    5ea8:	a8 84 26 75 	l.ori r4,r4,0x2675
			goto stop_out;
		}

		state = readl(TWI_STR);
    5eac:	a8 54 14 10 	l.ori r2,r20,0x1410
    5eb0:	84 42 00 00 	l.lwz r2,0x0(r2)
    5eb4:	d4 01 10 04 	l.sw 0x4(r1),r2
		if (state != 0x10) {
    5eb8:	84 41 00 04 	l.lwz r2,0x4(r1)
    5ebc:	bc 02 00 10 	l.sfeqi r2,0x10
    5ec0:	10 00 00 08 	l.bf 5ee0 <twi_byte_rw+0x3d0>
    5ec4:	15 00 00 00 	l.nop 0x0
			ERR("e11:%x\n", state);
    5ec8:	84 41 00 04 	l.lwz r2,0x4(r1)
    5ecc:	18 80 00 01 	l.movhi r4,0x1
    5ed0:	d4 01 10 00 	l.sw 0x0(r1),r2
    5ed4:	9c 60 00 08 	l.addi r3,r0,0x8
    5ed8:	00 00 00 4f 	l.j 6014 <twi_byte_rw+0x504>
    5edc:	a8 84 26 7e 	l.ori r4,r4,0x267e
			goto stop_out;
		}

		/* step5. Send Slave Address */
		writel(((saddr << 1) | 1), TWI_DTR);	/* slave address + write */
    5ee0:	a8 54 14 08 	l.ori r2,r20,0x1408
    5ee4:	aa d6 00 01 	l.ori r22,r22,0x1
		twi_clear_irq_flag();	/* clear int flag to send saddr */

		timeout = TWI_CHECK_TIMEOUT;
		while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
    5ee8:	aa 94 14 0c 	l.ori r20,r20,0x140c
			ERR("e11:%x\n", state);
			goto stop_out;
		}

		/* step5. Send Slave Address */
		writel(((saddr << 1) | 1), TWI_DTR);	/* slave address + write */
    5eec:	d4 02 b0 00 	l.sw 0x0(r2),r22
		twi_clear_irq_flag();	/* clear int flag to send saddr */
    5ef0:	07 ff fe 2f 	l.jal 57ac <twi_clear_irq_flag>
    5ef4:	9c 40 07 ff 	l.addi r2,r0,0x7ff

		timeout = TWI_CHECK_TIMEOUT;
		while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
    5ef8:	84 74 00 00 	l.lwz r3,0x0(r20)
    5efc:	a4 63 00 08 	l.andi r3,r3,0x8
    5f00:	bc 23 00 00 	l.sfnei r3,0x0
    5f04:	10 00 00 08 	l.bf 5f24 <twi_byte_rw+0x414>
    5f08:	18 80 07 08 	l.movhi r4,0x708
    5f0c:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    5f10:	bc 22 00 00 	l.sfnei r2,0x0
    5f14:	13 ff ff f9 	l.bf 5ef8 <twi_byte_rw+0x3e8>
    5f18:	18 80 00 01 	l.movhi r4,0x1
			;
		if (timeout == 0) {
			ERR("to5\n");
    5f1c:	00 00 00 06 	l.j 5f34 <twi_byte_rw+0x424>
    5f20:	9c 60 00 08 	l.addi r3,r0,0x8
		twi_clear_irq_flag();	/* clear int flag to send saddr */

		timeout = TWI_CHECK_TIMEOUT;
		while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (--timeout))
			;
		if (timeout == 0) {
    5f24:	bc 22 00 00 	l.sfnei r2,0x0
    5f28:	10 00 00 05 	l.bf 5f3c <twi_byte_rw+0x42c>
    5f2c:	9c 60 00 08 	l.addi r3,r0,0x8
			ERR("to5\n");
    5f30:	18 80 00 01 	l.movhi r4,0x1
    5f34:	03 ff ff 41 	l.j 5c38 <twi_byte_rw+0x128>
    5f38:	a8 84 26 8a 	l.ori r4,r4,0x268a
			goto stop_out;
		}

		state = readl(TWI_STR);
    5f3c:	a8 44 14 10 	l.ori r2,r4,0x1410
    5f40:	84 62 00 00 	l.lwz r3,0x0(r2)
    5f44:	d4 01 18 04 	l.sw 0x4(r1),r3
		if (state != 0x40) {
    5f48:	84 61 00 04 	l.lwz r3,0x4(r1)
    5f4c:	bc 23 00 40 	l.sfnei r3,0x40
    5f50:	0c 00 00 41 	l.bnf 6054 <twi_byte_rw+0x544>
    5f54:	15 00 00 00 	l.nop 0x0
			ERR("e13:%x\n", state);
    5f58:	84 41 00 04 	l.lwz r2,0x4(r1)
    5f5c:	18 80 00 01 	l.movhi r4,0x1
    5f60:	d4 01 10 00 	l.sw 0x0(r1),r2
    5f64:	9c 60 00 08 	l.addi r3,r0,0x8
    5f68:	00 00 00 2b 	l.j 6014 <twi_byte_rw+0x504>
    5f6c:	a8 84 26 93 	l.ori r4,r4,0x2693
			goto stop_out;
		}

		/* step6. Get data */
		while (len--) {
			if (len == 0)
    5f70:	bc 2e 00 00 	l.sfnei r14,0x0
    5f74:	10 00 00 05 	l.bf 5f88 <twi_byte_rw+0x478>
    5f78:	15 00 00 00 	l.nop 0x0

static inline void twi_disable_ack(void)
{
	unsigned int reg_val;

	reg_val = readl(TWI_CTR) & 0x0ff;
    5f7c:	84 52 00 00 	l.lwz r2,0x0(r18)
	reg_val &= ~TWI_AACK;
	reg_val &= ~TWI_INTFLAG;
    5f80:	a4 42 00 f3 	l.andi r2,r2,0xf3
	writel(reg_val, TWI_CTR);
    5f84:	d4 12 10 00 	l.sw 0x0(r18),r2
		/* step6. Get data */
		while (len--) {
			if (len == 0)
				twi_disable_ack();

			twi_clear_irq_flag();	/* clear int flag then data come in */
    5f88:	07 ff fe 09 	l.jal 57ac <twi_clear_irq_flag>
    5f8c:	9c 40 07 ff 	l.addi r2,r0,0x7ff

			timeout = TWI_CHECK_TIMEOUT;
			while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (timeout--))
    5f90:	84 72 00 00 	l.lwz r3,0x0(r18)
    5f94:	a4 63 00 08 	l.andi r3,r3,0x8
    5f98:	bc 03 00 00 	l.sfeqi r3,0x0
    5f9c:	10 00 00 08 	l.bf 5fbc <twi_byte_rw+0x4ac>
    5fa0:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    5fa4:	9c 42 00 01 	l.addi r2,r2,0x1
				;
			if (timeout == -1) {
    5fa8:	bc 02 ff ff 	l.sfeqi r2,0xffffffff
    5fac:	0c 00 00 0a 	l.bnf 5fd4 <twi_byte_rw+0x4c4>
    5fb0:	18 80 00 01 	l.movhi r4,0x1
				ERR("to6\n");
    5fb4:	00 00 00 06 	l.j 5fcc <twi_byte_rw+0x4bc>
    5fb8:	9c 60 00 08 	l.addi r3,r0,0x8
				twi_disable_ack();

			twi_clear_irq_flag();	/* clear int flag then data come in */

			timeout = TWI_CHECK_TIMEOUT;
			while ((!(readl(TWI_CTR) & TWI_INTFLAG)) && (timeout--))
    5fbc:	bc 22 ff ff 	l.sfnei r2,0xffffffff
    5fc0:	13 ff ff f4 	l.bf 5f90 <twi_byte_rw+0x480>
    5fc4:	18 80 00 01 	l.movhi r4,0x1
				;
			if (timeout == -1) {
				ERR("to6\n");
    5fc8:	9c 60 00 08 	l.addi r3,r0,0x8
    5fcc:	03 ff ff 1b 	l.j 5c38 <twi_byte_rw+0x128>
    5fd0:	a8 84 26 9f 	l.ori r4,r4,0x269f
				goto stop_out;
			}

			*data++ = readl(TWI_DTR);
    5fd4:	84 56 00 00 	l.lwz r2,0x0(r22)
			state = readl(TWI_STR);
			if (len > 0) {
    5fd8:	bc 0e 00 00 	l.sfeqi r14,0x0
			if (timeout == -1) {
				ERR("to6\n");
				goto stop_out;
			}

			*data++ = readl(TWI_DTR);
    5fdc:	d8 10 10 00 	l.sb 0x0(r16),r2
			state = readl(TWI_STR);
    5fe0:	84 54 00 00 	l.lwz r2,0x0(r20)
    5fe4:	d4 01 10 04 	l.sw 0x4(r1),r2
			if (len > 0) {
    5fe8:	10 00 00 0f 	l.bf 6024 <twi_byte_rw+0x514>
    5fec:	15 00 00 00 	l.nop 0x0
				if (state != 0x50) {
    5ff0:	84 41 00 04 	l.lwz r2,0x4(r1)
    5ff4:	bc 02 00 50 	l.sfeqi r2,0x50
    5ff8:	10 00 00 15 	l.bf 604c <twi_byte_rw+0x53c>
    5ffc:	15 00 00 00 	l.nop 0x0
					ERR("e14:%x\n", state);
    6000:	84 41 00 04 	l.lwz r2,0x4(r1)
    6004:	18 80 00 01 	l.movhi r4,0x1
    6008:	d4 01 10 00 	l.sw 0x0(r1),r2
    600c:	9c 60 00 08 	l.addi r3,r0,0x8
    6010:	a8 84 26 a8 	l.ori r4,r4,0x26a8
    6014:	04 00 0f e9 	l.jal 9fb8 <debugger_printf>
    6018:	9c 40 ff ff 	l.addi r2,r0,0xffffffff
    601c:	00 00 00 17 	l.j 6078 <twi_byte_rw+0x568>
    6020:	19 c0 07 08 	l.movhi r14,0x708
					goto stop_out;
				}
			} else {
				if (state != 0x58) {
    6024:	84 41 00 04 	l.lwz r2,0x4(r1)
    6028:	bc 02 00 58 	l.sfeqi r2,0x58
    602c:	10 00 00 08 	l.bf 604c <twi_byte_rw+0x53c>
    6030:	15 00 00 00 	l.nop 0x0
					ERR("e15:%x\n", state);
    6034:	84 41 00 04 	l.lwz r2,0x4(r1)
    6038:	18 80 00 01 	l.movhi r4,0x1
    603c:	d4 01 10 00 	l.sw 0x0(r1),r2
    6040:	9c 60 00 08 	l.addi r3,r0,0x8
    6044:	03 ff ff f4 	l.j 6014 <twi_byte_rw+0x504>
    6048:	a8 84 26 b4 	l.ori r4,r4,0x26b4
			if (timeout == -1) {
				ERR("to6\n");
				goto stop_out;
			}

			*data++ = readl(TWI_DTR);
    604c:	00 00 00 05 	l.j 6060 <twi_byte_rw+0x550>
    6050:	9e 10 00 01 	l.addi r16,r16,0x1

static inline void twi_disable_ack(void)
{
	unsigned int reg_val;

	reg_val = readl(TWI_CTR) & 0x0ff;
    6054:	aa 44 14 0c 	l.ori r18,r4,0x140c
			if (timeout == -1) {
				ERR("to6\n");
				goto stop_out;
			}

			*data++ = readl(TWI_DTR);
    6058:	aa c4 14 08 	l.ori r22,r4,0x1408
			state = readl(TWI_STR);
    605c:	aa 82 00 00 	l.ori r20,r2,0x0
			ERR("e13:%x\n", state);
			goto stop_out;
		}

		/* step6. Get data */
		while (len--) {
    6060:	bc 2e 00 00 	l.sfnei r14,0x0
    6064:	13 ff ff c3 	l.bf 5f70 <twi_byte_rw+0x460>
    6068:	9d ce ff ff 	l.addi r14,r14,0xffffffff
    606c:	9d ce 00 01 	l.addi r14,r14,0x1
					goto stop_out;
				}
			}
		}
	}
	ret = 0;
    6070:	a8 4e 00 00 	l.ori r2,r14,0x0
{
	unsigned int timeout;
	unsigned int value;

	/* step1. set stop signal */
	value = readl(TWI_CTR);
    6074:	19 c0 07 08 	l.movhi r14,0x708
	value |= TWI_MSTOP;
	value &= ~TWI_INTFLAG;
    6078:	9c 80 ff f7 	l.addi r4,r0,0xfffffff7
{
	unsigned int timeout;
	unsigned int value;

	/* step1. set stop signal */
	value = readl(TWI_CTR);
    607c:	a9 ce 14 0c 	l.ori r14,r14,0x140c
    6080:	84 6e 00 00 	l.lwz r3,0x0(r14)
	value |= TWI_MSTOP;
    6084:	a8 63 00 10 	l.ori r3,r3,0x10
	value &= ~TWI_INTFLAG;
    6088:	e0 63 20 03 	l.and r3,r3,r4
	writel(value, TWI_CTR);
    608c:	d4 0e 18 00 	l.sw 0x0(r14),r3
	timeout = TWI_CHECK_TIMEOUT;

	/* step2. clear the interrupt flag */
	twi_clear_irq_flag();
    6090:	07 ff fd c7 	l.jal 57ac <twi_clear_irq_flag>
    6094:	15 00 00 00 	l.nop 0x0
    6098:	9c 80 07 ff 	l.addi r4,r0,0x7ff

	/* wait send finished */
	timeout = TWI_CHECK_TIMEOUT;
	while ((readl(TWI_CTR) & TWI_MSTOP) && (--timeout))
    609c:	84 6e 00 00 	l.lwz r3,0x0(r14)
    60a0:	a4 63 00 10 	l.andi r3,r3,0x10
    60a4:	bc 03 00 00 	l.sfeqi r3,0x0
    60a8:	10 00 00 05 	l.bf 60bc <twi_byte_rw+0x5ac>
    60ac:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    60b0:	bc 24 00 00 	l.sfnei r4,0x0
    60b4:	13 ff ff fa 	l.bf 609c <twi_byte_rw+0x58c>
    60b8:	15 00 00 00 	l.nop 0x0
		;

	/* step3. check twi fsm is idle(0xf8) */
	timeout = TWI_CHECK_TIMEOUT;
	while ((0xf8 != readl(TWI_STR)) && (--timeout))
    60bc:	18 60 07 08 	l.movhi r3,0x708
	/* step2. clear the interrupt flag */
	twi_clear_irq_flag();

	/* wait send finished */
	timeout = TWI_CHECK_TIMEOUT;
	while ((readl(TWI_CTR) & TWI_MSTOP) && (--timeout))
    60c0:	9c 80 07 ff 	l.addi r4,r0,0x7ff
		;

	/* step3. check twi fsm is idle(0xf8) */
	timeout = TWI_CHECK_TIMEOUT;
	while ((0xf8 != readl(TWI_STR)) && (--timeout))
    60c4:	a8 63 14 10 	l.ori r3,r3,0x1410
    60c8:	84 a3 00 00 	l.lwz r5,0x0(r3)
    60cc:	bc 05 00 f8 	l.sfeqi r5,0xf8
    60d0:	10 00 00 08 	l.bf 60f0 <twi_byte_rw+0x5e0>
    60d4:	bc 24 00 00 	l.sfnei r4,0x0
    60d8:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    60dc:	bc 24 00 00 	l.sfnei r4,0x0
    60e0:	13 ff ff fa 	l.bf 60c8 <twi_byte_rw+0x5b8>
    60e4:	15 00 00 00 	l.nop 0x0
		;
	if (timeout == 0) {
		ERR("state err:%x\n", readl(TWI_STR));
    60e8:	00 00 00 05 	l.j 60fc <twi_byte_rw+0x5ec>
    60ec:	18 80 07 08 	l.movhi r4,0x708

	/* step3. check twi fsm is idle(0xf8) */
	timeout = TWI_CHECK_TIMEOUT;
	while ((0xf8 != readl(TWI_STR)) && (--timeout))
		;
	if (timeout == 0) {
    60f0:	10 00 00 0e 	l.bf 6128 <twi_byte_rw+0x618>
    60f4:	9c a0 07 ff 	l.addi r5,r0,0x7ff
		ERR("state err:%x\n", readl(TWI_STR));
    60f8:	18 80 07 08 	l.movhi r4,0x708
    60fc:	a8 84 14 10 	l.ori r4,r4,0x1410
    6100:	84 64 00 00 	l.lwz r3,0x0(r4)
    6104:	18 80 00 01 	l.movhi r4,0x1
    6108:	d4 01 18 00 	l.sw 0x0(r1),r3
    610c:	a8 84 26 c0 	l.ori r4,r4,0x26c0
    6110:	04 00 0f aa 	l.jal 9fb8 <debugger_printf>
    6114:	9c 60 00 08 	l.addi r3,r0,0x8
		twic_reset();
    6118:	07 ff fd b2 	l.jal 57e0 <twic_reset>
    611c:	15 00 00 00 	l.nop 0x0
    6120:	00 00 00 17 	l.j 617c <twi_byte_rw+0x66c>
    6124:	15 00 00 00 	l.nop 0x0
		return -EFAIL;
	}

	/* step4. check twi scl & sda must high level */
	timeout = TWI_CHECK_TIMEOUT;
	while ((0x3a != readl(TWI_LCR)) && (--timeout))
    6128:	18 60 07 08 	l.movhi r3,0x708
    612c:	a8 63 14 20 	l.ori r3,r3,0x1420
    6130:	84 83 00 00 	l.lwz r4,0x0(r3)
    6134:	bc 04 00 3a 	l.sfeqi r4,0x3a
    6138:	10 00 00 08 	l.bf 6158 <twi_byte_rw+0x648>
    613c:	bc 25 00 00 	l.sfnei r5,0x0
    6140:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
    6144:	bc 25 00 00 	l.sfnei r5,0x0
    6148:	13 ff ff fa 	l.bf 6130 <twi_byte_rw+0x620>
    614c:	18 80 07 08 	l.movhi r4,0x708
		;
	if (timeout == 0) {
		ERR("lcr err:%x\n", readl(TWI_LCR));
    6150:	00 00 00 05 	l.j 6164 <twi_byte_rw+0x654>
    6154:	a8 84 14 20 	l.ori r4,r4,0x1420

	/* step4. check twi scl & sda must high level */
	timeout = TWI_CHECK_TIMEOUT;
	while ((0x3a != readl(TWI_LCR)) && (--timeout))
		;
	if (timeout == 0) {
    6158:	10 00 00 09 	l.bf 617c <twi_byte_rw+0x66c>
    615c:	18 80 07 08 	l.movhi r4,0x708
		ERR("lcr err:%x\n", readl(TWI_LCR));
    6160:	a8 84 14 20 	l.ori r4,r4,0x1420
    6164:	84 64 00 00 	l.lwz r3,0x0(r4)
    6168:	18 80 00 01 	l.movhi r4,0x1
    616c:	d4 01 18 00 	l.sw 0x0(r1),r3
    6170:	a8 84 26 d2 	l.ori r4,r4,0x26d2
    6174:	04 00 0f 91 	l.jal 9fb8 <debugger_printf>
    6178:	9c 60 00 08 	l.addi r3,r0,0x8
#ifdef TWI_DEBUG
	INF("twi_%x r:%x d:%x\n", op, baddr, *data);
	printreg();		/* only for twi time sequence debuger */
#endif

	cpu_enable_int(cpsr);
    617c:	04 00 17 14 	l.jal bdcc <cpu_enable_int>
    6180:	a8 78 00 00 	l.ori r3,r24,0x0
	INF("%u,%u,%u,%u,%d\n", op, saddr, baddr, *data, ret);

	return ret;
}
    6184:	9c 21 00 30 	l.addi r1,r1,0x30
    6188:	a9 62 00 00 	l.ori r11,r2,0x0
    618c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6190:	84 41 ff d8 	l.lwz r2,0xffffffd8(r1)
    6194:	85 c1 ff dc 	l.lwz r14,0xffffffdc(r1)
    6198:	86 01 ff e0 	l.lwz r16,0xffffffe0(r1)
    619c:	86 41 ff e4 	l.lwz r18,0xffffffe4(r1)
    61a0:	86 81 ff e8 	l.lwz r20,0xffffffe8(r1)
    61a4:	86 c1 ff ec 	l.lwz r22,0xffffffec(r1)
    61a8:	87 01 ff f0 	l.lwz r24,0xfffffff0(r1)
    61ac:	87 41 ff f4 	l.lwz r26,0xfffffff4(r1)
    61b0:	44 00 48 00 	l.jr r9
    61b4:	87 81 ff f8 	l.lwz r28,0xfffffff8(r1)

000061b8 <twi_read>:

s32 twi_read(u32 devaddr, u8 *addr, u8 *data, u32 len)
{
    61b8:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
	u32 i;
	s32 ret = 0;
    61bc:	9d c0 00 00 	l.addi r14,r0,0x0

	return ret;
}

s32 twi_read(u32 devaddr, u8 *addr, u8 *data, u32 len)
{
    61c0:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    61c4:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    61c8:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    61cc:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    61d0:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    61d4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    61d8:	aa c4 00 00 	l.ori r22,r4,0x0
    61dc:	9c 21 ff e4 	l.addi r1,r1,0xffffffe4
    61e0:	aa 85 00 00 	l.ori r20,r5,0x0
    61e4:	aa 46 00 00 	l.ori r18,r6,0x0
	u32 i;
	s32 ret = 0;

	for (i = 0; i < len; i++) {
    61e8:	a8 4e 00 00 	l.ori r2,r14,0x0
    61ec:	00 00 00 0a 	l.j 6214 <twi_read+0x5c>
    61f0:	a6 03 00 ff 	l.andi r16,r3,0xff
	INF("%u,%u,%u,%u,%d\n", op, saddr, baddr, *data, ret);

	return ret;
}

s32 twi_read(u32 devaddr, u8 *addr, u8 *data, u32 len)
    61f4:	e0 b6 10 00 	l.add r5,r22,r2
{
	u32 i;
	s32 ret = 0;

	for (i = 0; i < len; i++) {
		ret |= twi_byte_rw(TWI_READ, devaddr, *addr++, data++, 1);
    61f8:	9c 60 00 01 	l.addi r3,r0,0x1
    61fc:	8c a5 00 00 	l.lbz r5,0x0(r5)
    6200:	a8 90 00 00 	l.ori r4,r16,0x0
    6204:	a8 e3 00 00 	l.ori r7,r3,0x0
    6208:	07 ff fe 42 	l.jal 5b10 <twi_byte_rw>
    620c:	9c 42 00 01 	l.addi r2,r2,0x1
    6210:	e1 ce 58 04 	l.or r14,r14,r11
s32 twi_read(u32 devaddr, u8 *addr, u8 *data, u32 len)
{
	u32 i;
	s32 ret = 0;

	for (i = 0; i < len; i++) {
    6214:	e4 82 90 00 	l.sfltu r2,r18
    6218:	13 ff ff f7 	l.bf 61f4 <twi_read+0x3c>
    621c:	e0 d4 10 00 	l.add r6,r20,r2
		ret |= twi_byte_rw(TWI_READ, devaddr, *addr++, data++, 1);
	}

	return ret;
}
    6220:	9c 21 00 1c 	l.addi r1,r1,0x1c
    6224:	a9 6e 00 00 	l.ori r11,r14,0x0
    6228:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    622c:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    6230:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    6234:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    6238:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    623c:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    6240:	44 00 48 00 	l.jr r9
    6244:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00006248 <twi_write>:

s32 twi_write(u32 devaddr, u8 *addr, u8 *data, u32 len)
{
    6248:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
	u32 i;
	s32 ret = 0;
    624c:	9d c0 00 00 	l.addi r14,r0,0x0

	return ret;
}

s32 twi_write(u32 devaddr, u8 *addr, u8 *data, u32 len)
{
    6250:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    6254:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    6258:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    625c:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    6260:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    6264:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6268:	aa c4 00 00 	l.ori r22,r4,0x0
    626c:	9c 21 ff e4 	l.addi r1,r1,0xffffffe4
    6270:	aa 85 00 00 	l.ori r20,r5,0x0
    6274:	aa 46 00 00 	l.ori r18,r6,0x0
	u32 i;
	s32 ret = 0;

	for (i = 0; i < len; i++) {
    6278:	a8 4e 00 00 	l.ori r2,r14,0x0
    627c:	00 00 00 0a 	l.j 62a4 <twi_write+0x5c>
    6280:	a6 03 00 ff 	l.andi r16,r3,0xff
	}

	return ret;
}

s32 twi_write(u32 devaddr, u8 *addr, u8 *data, u32 len)
    6284:	e0 b6 10 00 	l.add r5,r22,r2
{
	u32 i;
	s32 ret = 0;

	for (i = 0; i < len; i++) {
		ret |= twi_byte_rw(TWI_WRITE, devaddr, *addr++, data++, 1);
    6288:	9c 60 00 00 	l.addi r3,r0,0x0
    628c:	8c a5 00 00 	l.lbz r5,0x0(r5)
    6290:	a8 90 00 00 	l.ori r4,r16,0x0
    6294:	9c e0 00 01 	l.addi r7,r0,0x1
    6298:	07 ff fe 1e 	l.jal 5b10 <twi_byte_rw>
    629c:	9c 42 00 01 	l.addi r2,r2,0x1
    62a0:	e1 ce 58 04 	l.or r14,r14,r11
s32 twi_write(u32 devaddr, u8 *addr, u8 *data, u32 len)
{
	u32 i;
	s32 ret = 0;

	for (i = 0; i < len; i++) {
    62a4:	e4 82 90 00 	l.sfltu r2,r18
    62a8:	13 ff ff f7 	l.bf 6284 <twi_write+0x3c>
    62ac:	e0 d4 10 00 	l.add r6,r20,r2
		ret |= twi_byte_rw(TWI_WRITE, devaddr, *addr++, data++, 1);
	}

	return ret;
}
    62b0:	9c 21 00 1c 	l.addi r1,r1,0x1c
    62b4:	a9 6e 00 00 	l.ori r11,r14,0x0
    62b8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    62bc:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    62c0:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    62c4:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    62c8:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    62cc:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    62d0:	44 00 48 00 	l.jr r9
    62d4:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

000062d8 <is_twi_lock>:

bool is_twi_lock(void)
{
	return twi_lock;
    62d8:	18 60 00 01 	l.movhi r3,0x1
    62dc:	a8 63 34 38 	l.ori r3,r3,0x3438
    62e0:	8d 63 00 00 	l.lbz r11,0x0(r3)
    62e4:	b9 6b 00 18 	l.slli r11,r11,0x18
}
    62e8:	44 00 48 00 	l.jr r9
    62ec:	b9 6b 00 98 	l.srai r11,r11,0x18

000062f0 <twi_send_clk_9pulse>:

int twi_send_clk_9pulse(void)
{
    62f0:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
#define SCL_CTRL_EN    (0x1 << 0x2)
	char cycle = 0;
	unsigned char status = 0;
	volatile unsigned int state;

	state = readl(TWI_LCR);
    62f4:	18 40 07 08 	l.movhi r2,0x708
{
	return twi_lock;
}

int twi_send_clk_9pulse(void)
{
    62f8:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
#define SCL_CTRL_EN    (0x1 << 0x2)
	char cycle = 0;
	unsigned char status = 0;
	volatile unsigned int state;

	state = readl(TWI_LCR);
    62fc:	a8 42 14 20 	l.ori r2,r2,0x1420
{
	return twi_lock;
}

int twi_send_clk_9pulse(void)
{
    6300:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
#define SCL_CTRL_EN    (0x1 << 0x2)
	char cycle = 0;
	unsigned char status = 0;
	volatile unsigned int state;

	state = readl(TWI_LCR);
    6304:	84 62 00 00 	l.lwz r3,0x0(r2)
{
	return twi_lock;
}

int twi_send_clk_9pulse(void)
{
    6308:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
	unsigned char status = 0;
	volatile unsigned int state;

	state = readl(TWI_LCR);
	/* enable scl control */
	writel(state | SCL_CTRL_EN, TWI_LCR);
    630c:	9d c0 00 09 	l.addi r14,r0,0x9
#define SCL_CTRL_EN    (0x1 << 0x2)
	char cycle = 0;
	unsigned char status = 0;
	volatile unsigned int state;

	state = readl(TWI_LCR);
    6310:	d4 01 18 00 	l.sw 0x0(r1),r3
	/* enable scl control */
	writel(state | SCL_CTRL_EN, TWI_LCR);
    6314:	84 61 00 00 	l.lwz r3,0x0(r1)
    6318:	a8 63 00 04 	l.ori r3,r3,0x4
    631c:	d4 02 18 00 	l.sw 0x0(r2),r3
	while (cycle < 9) {
		if ((readl(TWI_LCR) >> 0x4) & 0x1)
    6320:	84 62 00 00 	l.lwz r3,0x0(r2)
    6324:	a4 63 00 10 	l.andi r3,r3,0x10
    6328:	bc 23 00 00 	l.sfnei r3,0x0
    632c:	10 00 00 12 	l.bf 6374 <twi_send_clk_9pulse+0x84>
    6330:	15 00 00 00 	l.nop 0x0
			break;
		/* twi_scl -> low */
		writel(readl(TWI_LCR) & (~SCL_CTRL), TWI_LCR);
    6334:	84 62 00 00 	l.lwz r3,0x0(r2)
    6338:	9c 80 ff f7 	l.addi r4,r0,0xfffffff7
		udelay(1000);

		/* twi_scl -> high */
		writel(readl(TWI_LCR) | SCL_CTRL, TWI_LCR);
		udelay(1000);
    633c:	9d ce ff ff 	l.addi r14,r14,0xffffffff
	writel(state | SCL_CTRL_EN, TWI_LCR);
	while (cycle < 9) {
		if ((readl(TWI_LCR) >> 0x4) & 0x1)
			break;
		/* twi_scl -> low */
		writel(readl(TWI_LCR) & (~SCL_CTRL), TWI_LCR);
    6340:	e0 63 20 03 	l.and r3,r3,r4
		udelay(1000);

		/* twi_scl -> high */
		writel(readl(TWI_LCR) | SCL_CTRL, TWI_LCR);
		udelay(1000);
    6344:	a5 ce 00 ff 	l.andi r14,r14,0xff
	writel(state | SCL_CTRL_EN, TWI_LCR);
	while (cycle < 9) {
		if ((readl(TWI_LCR) >> 0x4) & 0x1)
			break;
		/* twi_scl -> low */
		writel(readl(TWI_LCR) & (~SCL_CTRL), TWI_LCR);
    6348:	d4 02 18 00 	l.sw 0x0(r2),r3
		udelay(1000);
    634c:	07 ff fb be 	l.jal 5244 <time_udelay>
    6350:	9c 60 03 e8 	l.addi r3,r0,0x3e8

		/* twi_scl -> high */
		writel(readl(TWI_LCR) | SCL_CTRL, TWI_LCR);
    6354:	84 62 00 00 	l.lwz r3,0x0(r2)
    6358:	a8 63 00 08 	l.ori r3,r3,0x8
    635c:	d4 02 18 00 	l.sw 0x0(r2),r3
		udelay(1000);
    6360:	07 ff fb b9 	l.jal 5244 <time_udelay>
    6364:	9c 60 03 e8 	l.addi r3,r0,0x3e8
	volatile unsigned int state;

	state = readl(TWI_LCR);
	/* enable scl control */
	writel(state | SCL_CTRL_EN, TWI_LCR);
	while (cycle < 9) {
    6368:	bc 2e 00 00 	l.sfnei r14,0x0
    636c:	13 ff ff ed 	l.bf 6320 <twi_send_clk_9pulse+0x30>
    6370:	15 00 00 00 	l.nop 0x0
		udelay(1000);
		cycle++;
	}

	/* if SDA is still low level. */
	if (!((readl(TWI_LCR) >> 0x4) & 0x1)) {
    6374:	18 40 07 08 	l.movhi r2,0x708
int twi_send_clk_9pulse(void)
{
#define SCL_CTRL       (0x1 << 0x3)
#define SCL_CTRL_EN    (0x1 << 0x2)
	char cycle = 0;
	unsigned char status = 0;
    6378:	9d 60 00 00 	l.addi r11,r0,0x0
		udelay(1000);
		cycle++;
	}

	/* if SDA is still low level. */
	if (!((readl(TWI_LCR) >> 0x4) & 0x1)) {
    637c:	a8 42 14 20 	l.ori r2,r2,0x1420
    6380:	84 42 00 00 	l.lwz r2,0x0(r2)
    6384:	b8 42 00 44 	l.srli r2,r2,0x4
    6388:	a4 42 00 01 	l.andi r2,r2,0x1
    638c:	e4 22 58 00 	l.sfne r2,r11
    6390:	10 00 00 08 	l.bf 63b0 <twi_send_clk_9pulse+0xc0>
    6394:	18 40 07 08 	l.movhi r2,0x708
		status = -1;
		ERR("SDA is still low level!\n");
    6398:	18 80 00 01 	l.movhi r4,0x1
    639c:	9c 60 00 08 	l.addi r3,r0,0x8
    63a0:	04 00 0f 06 	l.jal 9fb8 <debugger_printf>
    63a4:	a8 84 26 e2 	l.ori r4,r4,0x26e2
		cycle++;
	}

	/* if SDA is still low level. */
	if (!((readl(TWI_LCR) >> 0x4) & 0x1)) {
		status = -1;
    63a8:	9d 60 00 ff 	l.addi r11,r0,0xff

	/* if (state & SCL_CTRL_EN) */
	/* 	return status; */
	/* else */
	/* disable scl control */
	writel(readl(TWI_LCR) & (~SCL_CTRL_EN), TWI_LCR);
    63ac:	18 40 07 08 	l.movhi r2,0x708
    63b0:	9c 80 ff fb 	l.addi r4,r0,0xfffffffb
    63b4:	a8 42 14 20 	l.ori r2,r2,0x1420
    63b8:	84 62 00 00 	l.lwz r3,0x0(r2)
    63bc:	e0 63 20 03 	l.and r3,r3,r4
    63c0:	d4 02 18 00 	l.sw 0x0(r2),r3

	return status;
}
    63c4:	9c 21 00 10 	l.addi r1,r1,0x10
    63c8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    63cc:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    63d0:	44 00 48 00 	l.jr r9
    63d4:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

000063d8 <twi_get_status>:

s32 twi_get_status(void)
{
	u32 reg_val;

	reg_val = readl(TWI_STR);
    63d8:	18 60 07 08 	l.movhi r3,0x708
	if ((reg_val & 0xFF) != 0xF8)
		return -1;
    63dc:	9d 60 ff ff 	l.addi r11,r0,0xffffffff

s32 twi_get_status(void)
{
	u32 reg_val;

	reg_val = readl(TWI_STR);
    63e0:	a8 83 14 10 	l.ori r4,r3,0x1410
    63e4:	84 84 00 00 	l.lwz r4,0x0(r4)
	if ((reg_val & 0xFF) != 0xF8)
    63e8:	a4 84 00 ff 	l.andi r4,r4,0xff
    63ec:	bc 24 00 f8 	l.sfnei r4,0xf8
    63f0:	10 00 00 09 	l.bf 6414 <twi_get_status+0x3c>
    63f4:	a8 63 14 20 	l.ori r3,r3,0x1420

	reg_val = readl(TWI_LCR);
	if ((reg_val & 0x30) != 0x30)
		return -1;

	return 0;
    63f8:	9d 60 00 00 	l.addi r11,r0,0x0

	reg_val = readl(TWI_STR);
	if ((reg_val & 0xFF) != 0xF8)
		return -1;

	reg_val = readl(TWI_LCR);
    63fc:	84 63 00 00 	l.lwz r3,0x0(r3)
	if ((reg_val & 0x30) != 0x30)
    6400:	a4 63 00 30 	l.andi r3,r3,0x30
    6404:	bc 03 00 30 	l.sfeqi r3,0x30
    6408:	10 00 00 03 	l.bf 6414 <twi_get_status+0x3c>
    640c:	15 00 00 00 	l.nop 0x0
		return -1;
    6410:	9d 60 ff ff 	l.addi r11,r0,0xffffffff

	return 0;
}
    6414:	44 00 48 00 	l.jr r9
    6418:	15 00 00 00 	l.nop 0x0

0000641c <twi_standby_init>:

s32 twi_standby_init(void)
{
    641c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6420:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	pin_set_multi_sel(PIN_GRP_PL, 0, 2);	/* PL0 config as TWI_SCK */
    6424:	9c 60 00 01 	l.addi r3,r0,0x1

	return 0;
}

s32 twi_standby_init(void)
{
    6428:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	pin_set_multi_sel(PIN_GRP_PL, 0, 2);	/* PL0 config as TWI_SCK */
    642c:	9c 80 00 00 	l.addi r4,r0,0x0
    6430:	9c a0 00 02 	l.addi r5,r0,0x2
    6434:	07 ff f9 05 	l.jal 4848 <pin_set_multi_sel>
    6438:	18 40 07 08 	l.movhi r2,0x708
	pin_set_pull(PIN_GRP_PL, 0, PIN_PULL_UP);	/* TWI_SCK pull-up */
    643c:	9c 60 00 01 	l.addi r3,r0,0x1
    6440:	9c 80 00 00 	l.addi r4,r0,0x0
    6444:	07 ff f9 1f 	l.jal 48c0 <pin_set_pull>
    6448:	a8 a3 00 00 	l.ori r5,r3,0x0
	pin_set_drive(PIN_GRP_PL, 0, PIN_MULTI_DRIVE_0);	/* TWI_SCK drive level 2 */
    644c:	9c 80 00 00 	l.addi r4,r0,0x0
    6450:	9c 60 00 01 	l.addi r3,r0,0x1
    6454:	07 ff f9 39 	l.jal 4938 <pin_set_drive>
    6458:	a8 a4 00 00 	l.ori r5,r4,0x0

	pin_set_multi_sel(PIN_GRP_PL, 1, 2);	/* PL1 config as TWI_SDA */
    645c:	9c 60 00 01 	l.addi r3,r0,0x1
    6460:	9c a0 00 02 	l.addi r5,r0,0x2
    6464:	07 ff f8 f9 	l.jal 4848 <pin_set_multi_sel>
    6468:	a8 83 00 00 	l.ori r4,r3,0x0
	pin_set_pull(PIN_GRP_PL, 1, PIN_PULL_UP);	/* TWI_SDA pull-up */
    646c:	9c 60 00 01 	l.addi r3,r0,0x1
    6470:	a8 83 00 00 	l.ori r4,r3,0x0
    6474:	07 ff f9 13 	l.jal 48c0 <pin_set_pull>
    6478:	a8 a3 00 00 	l.ori r5,r3,0x0
	pin_set_drive(PIN_GRP_PL, 1, PIN_MULTI_DRIVE_0);	/* TWI_SDA drive level 2 */
    647c:	9c 60 00 01 	l.addi r3,r0,0x1
    6480:	9c a0 00 00 	l.addi r5,r0,0x0
    6484:	07 ff f9 2d 	l.jal 4938 <pin_set_drive>
    6488:	a8 83 00 00 	l.ori r4,r3,0x0

	/* initialize twi clock */
	/* ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI_1, CCU_CLK_RESET); */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TWI, CCU_CLK_ON);
    648c:	9c 60 00 22 	l.addi r3,r0,0x22
    6490:	04 00 2d 89 	l.jal 11ab4 <ccu_set_mclk_onoff>
    6494:	9c 80 00 01 	l.addi r4,r0,0x1
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI, CCU_CLK_NRESET);
    6498:	9c 60 00 22 	l.addi r3,r0,0x22
    649c:	04 00 2f 08 	l.jal 120bc <ccu_set_mclk_reset>
    64a0:	9c 80 00 01 	l.addi r4,r0,0x1
	twic_set_sclk(TWI_CLOCK_FREQ);
    64a4:	07 ff fd 07 	l.jal 58c0 <twic_set_sclk.clone.0>
    64a8:	15 00 00 00 	l.nop 0x0
	writel(TWI_BUS_ENB | TWI_AACK, TWI_CTR);
    64ac:	a8 62 14 0c 	l.ori r3,r2,0x140c
    64b0:	9c 80 00 44 	l.addi r4,r0,0x44
	twic_reset();

	/* twi bus state is not reset value, try to restore it */
	if (readl(TWI_LCR) != 0x3a)
    64b4:	a8 42 14 20 	l.ori r2,r2,0x1420
	/* initialize twi clock */
	/* ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI_1, CCU_CLK_RESET); */
	ccu_set_mclk_onoff(CCU_MOD_CLK_R_TWI, CCU_CLK_ON);
	ccu_set_mclk_reset(CCU_MOD_CLK_R_TWI, CCU_CLK_NRESET);
	twic_set_sclk(TWI_CLOCK_FREQ);
	writel(TWI_BUS_ENB | TWI_AACK, TWI_CTR);
    64b8:	d4 03 20 00 	l.sw 0x0(r3),r4
	twic_reset();
    64bc:	07 ff fc c9 	l.jal 57e0 <twic_reset>
    64c0:	15 00 00 00 	l.nop 0x0

	/* twi bus state is not reset value, try to restore it */
	if (readl(TWI_LCR) != 0x3a)
    64c4:	84 42 00 00 	l.lwz r2,0x0(r2)
    64c8:	bc 02 00 3a 	l.sfeqi r2,0x3a
    64cc:	10 00 00 04 	l.bf 64dc <twi_standby_init+0xc0>
    64d0:	18 40 07 08 	l.movhi r2,0x708
		twic_send_dummy_clock();
    64d4:	07 ff fc d9 	l.jal 5838 <twic_send_dummy_clock>
    64d8:	15 00 00 00 	l.nop 0x0

	if (readl(TWI_LCR) == 0x3a)
    64dc:	a8 42 14 20 	l.ori r2,r2,0x1420
    64e0:	84 42 00 00 	l.lwz r2,0x0(r2)
    64e4:	bc 22 00 3a 	l.sfnei r2,0x3a
    64e8:	10 00 00 05 	l.bf 64fc <twi_standby_init+0xe0>
    64ec:	18 80 00 01 	l.movhi r4,0x1
		LOG("init twi succeeded\n");
    64f0:	9c 60 00 02 	l.addi r3,r0,0x2
    64f4:	00 00 00 05 	l.j 6508 <twi_standby_init+0xec>
    64f8:	a8 84 25 f0 	l.ori r4,r4,0x25f0
	else
		ERR("init twi failed!\n");
    64fc:	18 80 00 01 	l.movhi r4,0x1
    6500:	9c 60 00 08 	l.addi r3,r0,0x8
    6504:	a8 84 26 04 	l.ori r4,r4,0x2604
    6508:	04 00 0e ac 	l.jal 9fb8 <debugger_printf>
    650c:	15 00 00 00 	l.nop 0x0

	return OK;
}
    6510:	9c 21 00 08 	l.addi r1,r1,0x8
    6514:	9d 60 00 00 	l.addi r11,r0,0x0
    6518:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    651c:	44 00 48 00 	l.jr r9
    6520:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00006524 <twi_standby_exit>:

s32 twi_standby_exit(void)
{
	return OK;
}
    6524:	44 00 48 00 	l.jr r9
    6528:	9d 60 00 00 	l.addi r11,r0,0x0

0000652c <hwmsgbox_set_receiver>:
*
* Returns    :  OK if set user succeeded, others if failed.
*********************************************************************************************************
*/
static s32 hwmsgbox_set_receiver(u32 queue, u32 user)
{
    652c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    6530:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
*
* Returns    :  OK if set user succeeded, others if failed.
*********************************************************************************************************
*/
static s32 hwmsgbox_set_receiver(u32 queue, u32 user)
{
    6534:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    6538:	e0 a3 10 03 	l.and r5,r3,r2
    653c:	18 40 03 00 	l.movhi r2,0x300
	value &= ~(1    << (0 + ((queue & 0x3)<<3)));
    6540:	a4 63 00 03 	l.andi r3,r3,0x3
*/
static s32 hwmsgbox_set_receiver(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    6544:	a8 42 30 00 	l.ori r2,r2,0x3000
	value &= ~(1    << (0 + ((queue & 0x3)<<3)));
    6548:	b8 63 00 03 	l.slli r3,r3,0x3
*/
static s32 hwmsgbox_set_receiver(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    654c:	e0 a5 10 00 	l.add r5,r5,r2
	value &= ~(1    << (0 + ((queue & 0x3)<<3)));
	value |=  (user << (0 + ((queue & 0x3)<<3)));
	writel(value, MSGBOX_CTRL_REG(queue));

	return OK;
}
    6550:	9d 60 00 00 	l.addi r11,r0,0x0
*/
static s32 hwmsgbox_set_receiver(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    6554:	84 c5 00 00 	l.lwz r6,0x0(r5)
    6558:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(1    << (0 + ((queue & 0x3)<<3)));
    655c:	9c c0 00 01 	l.addi r6,r0,0x1
    6560:	84 e1 00 00 	l.lwz r7,0x0(r1)
    6564:	e0 c6 18 08 	l.sll r6,r6,r3
	value |=  (user << (0 + ((queue & 0x3)<<3)));
    6568:	e0 64 18 08 	l.sll r3,r4,r3
static s32 hwmsgbox_set_receiver(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
	value &= ~(1    << (0 + ((queue & 0x3)<<3)));
    656c:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    6570:	e0 c6 38 03 	l.and r6,r6,r7
    6574:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |=  (user << (0 + ((queue & 0x3)<<3)));
    6578:	84 c1 00 00 	l.lwz r6,0x0(r1)
    657c:	e0 63 30 04 	l.or r3,r3,r6
    6580:	d4 01 18 00 	l.sw 0x0(r1),r3
	writel(value, MSGBOX_CTRL_REG(queue));
    6584:	84 61 00 00 	l.lwz r3,0x0(r1)
    6588:	d4 05 18 00 	l.sw 0x0(r5),r3

	return OK;
}
    658c:	9c 21 00 08 	l.addi r1,r1,0x8
    6590:	44 00 48 00 	l.jr r9
    6594:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00006598 <hwmsgbox_set_transmitter>:
*
* Returns    :  OK if set user succeeded, others if failed.
*********************************************************************************************************
*/
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
    6598:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    659c:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
*
* Returns    :  OK if set user succeeded, others if failed.
*********************************************************************************************************
*/
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
    65a0:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    65a4:	e0 a3 10 03 	l.and r5,r3,r2
    65a8:	18 40 03 00 	l.movhi r2,0x300
	value &= ~(1    << (4 + ((queue & 0x3)<<3)));
    65ac:	a4 63 00 03 	l.andi r3,r3,0x3
*/
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    65b0:	a8 42 30 00 	l.ori r2,r2,0x3000
	value &= ~(1    << (4 + ((queue & 0x3)<<3)));
    65b4:	b8 63 00 03 	l.slli r3,r3,0x3
*/
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    65b8:	e0 a5 10 00 	l.add r5,r5,r2
	value &= ~(1    << (4 + ((queue & 0x3)<<3)));
	value |=  (user << (4 + ((queue & 0x3)<<3)));
	writel(value, MSGBOX_CTRL_REG(queue));

	return OK;
}
    65bc:	9d 60 00 00 	l.addi r11,r0,0x0
*/
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    65c0:	84 c5 00 00 	l.lwz r6,0x0(r5)
	value &= ~(1    << (4 + ((queue & 0x3)<<3)));
    65c4:	9c 63 00 04 	l.addi r3,r3,0x4
*/
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
    65c8:	d4 01 30 00 	l.sw 0x0(r1),r6
	value &= ~(1    << (4 + ((queue & 0x3)<<3)));
    65cc:	9c c0 00 01 	l.addi r6,r0,0x1
    65d0:	84 e1 00 00 	l.lwz r7,0x0(r1)
    65d4:	e0 c6 18 08 	l.sll r6,r6,r3
	value |=  (user << (4 + ((queue & 0x3)<<3)));
    65d8:	e0 64 18 08 	l.sll r3,r4,r3
static s32 hwmsgbox_set_transmitter(u32 queue, u32 user)
{
	volatile u32 value;

	value  =  readl(MSGBOX_CTRL_REG(queue));
	value &= ~(1    << (4 + ((queue & 0x3)<<3)));
    65dc:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    65e0:	e0 c6 38 03 	l.and r6,r6,r7
    65e4:	d4 01 30 00 	l.sw 0x0(r1),r6
	value |=  (user << (4 + ((queue & 0x3)<<3)));
    65e8:	84 c1 00 00 	l.lwz r6,0x0(r1)
    65ec:	e0 63 30 04 	l.or r3,r3,r6
    65f0:	d4 01 18 00 	l.sw 0x0(r1),r3
	writel(value, MSGBOX_CTRL_REG(queue));
    65f4:	84 61 00 00 	l.lwz r3,0x0(r1)
    65f8:	d4 05 18 00 	l.sw 0x0(r5),r3

	return OK;
}
    65fc:	9c 21 00 08 	l.addi r1,r1,0x8
    6600:	44 00 48 00 	l.jr r9
    6604:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00006608 <hwmsgbox_init>:
*
* Returns    :  OK if initialize hwmsgbox succeeded, others if failed.
*********************************************************************************************************
*/
s32 hwmsgbox_init(void)
{
    6608:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	/*enable msgbox clock and set reset as de-assert state.*/
	ccu_set_mclk_onoff(CCU_MOD_CLK_MSGBOX, CCU_CLK_ON);
    660c:	9c 60 00 11 	l.addi r3,r0,0x11
*
* Returns    :  OK if initialize hwmsgbox succeeded, others if failed.
*********************************************************************************************************
*/
s32 hwmsgbox_init(void)
{
    6610:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	/*enable msgbox clock and set reset as de-assert state.*/
	ccu_set_mclk_onoff(CCU_MOD_CLK_MSGBOX, CCU_CLK_ON);
    6614:	04 00 2d 28 	l.jal 11ab4 <ccu_set_mclk_onoff>
    6618:	9c 80 00 01 	l.addi r4,r0,0x1
	ccu_set_mclk_reset(CCU_MOD_CLK_MSGBOX, CCU_CLK_NRESET);
    661c:	9c 60 00 11 	l.addi r3,r0,0x11
    6620:	04 00 2e a7 	l.jal 120bc <ccu_set_mclk_reset>
    6624:	9c 80 00 01 	l.addi r4,r0,0x1
	/*
	 * ar100 asyn tx channel configure
	 * ar100 set as transmitter,
	 * ac327 set as receiver.
	 */
	hwmsgbox_set_transmitter(HWMSGBOX_AR100_ASYN_TX_CH, HWMSG_QUEUE_USER_ARISC);
    6628:	9c 60 00 00 	l.addi r3,r0,0x0
    662c:	07 ff ff db 	l.jal 6598 <hwmsgbox_set_transmitter>
    6630:	a8 83 00 00 	l.ori r4,r3,0x0
	hwmsgbox_set_receiver   (HWMSGBOX_AR100_ASYN_TX_CH, HWMSG_QUEUE_USER_AC327);
    6634:	9c 60 00 00 	l.addi r3,r0,0x0
    6638:	07 ff ff bd 	l.jal 652c <hwmsgbox_set_receiver>
    663c:	9c 80 00 01 	l.addi r4,r0,0x1
	/*
	 * ar100 asyn rx channel configure
	 * ar100 set as receiver,
	 * ac327 set as transmitter.
	 */
	hwmsgbox_set_transmitter(HWMSGBOX_AR100_ASYN_RX_CH, HWMSG_QUEUE_USER_AC327);
    6640:	9c 60 00 01 	l.addi r3,r0,0x1
    6644:	07 ff ff d5 	l.jal 6598 <hwmsgbox_set_transmitter>
    6648:	a8 83 00 00 	l.ori r4,r3,0x0
	hwmsgbox_set_receiver   (HWMSGBOX_AR100_ASYN_RX_CH, HWMSG_QUEUE_USER_ARISC);
    664c:	9c 60 00 01 	l.addi r3,r0,0x1
    6650:	07 ff ff b7 	l.jal 652c <hwmsgbox_set_receiver>
    6654:	9c 80 00 00 	l.addi r4,r0,0x0
	/*
	 * ar100 syn tx channel configure
	 * ar100 set as transmitter,
	 * ac327 set as receiver.
	 */
	hwmsgbox_set_transmitter(HWMSGBOX_AR100_SYN_TX_CH, HWMSG_QUEUE_USER_ARISC);
    6658:	9c 60 00 02 	l.addi r3,r0,0x2
    665c:	07 ff ff cf 	l.jal 6598 <hwmsgbox_set_transmitter>
    6660:	9c 80 00 00 	l.addi r4,r0,0x0
	hwmsgbox_set_receiver   (HWMSGBOX_AR100_SYN_TX_CH, HWMSG_QUEUE_USER_AC327);
    6664:	9c 60 00 02 	l.addi r3,r0,0x2
    6668:	07 ff ff b1 	l.jal 652c <hwmsgbox_set_receiver>
    666c:	9c 80 00 01 	l.addi r4,r0,0x1
	/*
	 * ar100 syn rx channel configure
	 * ar100 set as receiver,
	 * ac327 set as transmitter.
	 */
	hwmsgbox_set_transmitter(HWMSGBOX_AR100_SYN_RX_CH, HWMSG_QUEUE_USER_AC327);
    6670:	9c 60 00 03 	l.addi r3,r0,0x3
    6674:	07 ff ff c9 	l.jal 6598 <hwmsgbox_set_transmitter>
    6678:	9c 80 00 01 	l.addi r4,r0,0x1
	hwmsgbox_set_receiver   (HWMSGBOX_AR100_SYN_RX_CH, HWMSG_QUEUE_USER_ARISC);
    667c:	9c 60 00 03 	l.addi r3,r0,0x3
    6680:	07 ff ff ab 	l.jal 652c <hwmsgbox_set_receiver>
    6684:	9c 80 00 00 	l.addi r4,r0,0x0
	/*
	 * ac327 syn tx channel configure
	 * ar100 set as receiver,
	 * ac327 set as transmitter.
	 */
	hwmsgbox_set_transmitter(HWMSGBOX_AC327_SYN_TX_CH, HWMSG_QUEUE_USER_AC327);
    6688:	9c 60 00 04 	l.addi r3,r0,0x4
    668c:	07 ff ff c3 	l.jal 6598 <hwmsgbox_set_transmitter>
    6690:	9c 80 00 01 	l.addi r4,r0,0x1
	hwmsgbox_set_receiver   (HWMSGBOX_AC327_SYN_TX_CH, HWMSG_QUEUE_USER_ARISC);
    6694:	9c 60 00 04 	l.addi r3,r0,0x4
    6698:	07 ff ff a5 	l.jal 652c <hwmsgbox_set_receiver>
    669c:	9c 80 00 00 	l.addi r4,r0,0x0
	/*
	 * ac327 syn rx channel configure
	 * ar100 set as transmitter,
	 * ac327 set as receiver.
	 */
	hwmsgbox_set_transmitter(HWMSGBOX_AC327_SYN_RX_CH, HWMSG_QUEUE_USER_ARISC);
    66a0:	9c 60 00 05 	l.addi r3,r0,0x5
    66a4:	07 ff ff bd 	l.jal 6598 <hwmsgbox_set_transmitter>
    66a8:	9c 80 00 00 	l.addi r4,r0,0x0
	hwmsgbox_set_receiver   (HWMSGBOX_AC327_SYN_RX_CH, HWMSG_QUEUE_USER_AC327);
    66ac:	9c 60 00 05 	l.addi r3,r0,0x5
    66b0:	07 ff ff 9f 	l.jal 652c <hwmsgbox_set_receiver>
    66b4:	9c 80 00 01 	l.addi r4,r0,0x1
		 * interrupt_enable(INTC_M_BOX_IRQ);
		 */
	}

	return OK;
}
    66b8:	9c 21 00 04 	l.addi r1,r1,0x4
    66bc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    66c0:	44 00 48 00 	l.jr r9
    66c4:	9d 60 00 00 	l.addi r11,r0,0x0

000066c8 <hwmsgbox_exit>:
*
* Returns    :  OK if exit hwmsgbox succeeded, others if failed.
*********************************************************************************************************
*/
s32 hwmsgbox_exit(void)
{
    66c8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	/* disable msgbox clock and set reset as assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_MSGBOX, CCU_CLK_RESET);
    66cc:	9c 60 00 11 	l.addi r3,r0,0x11
*
* Returns    :  OK if exit hwmsgbox succeeded, others if failed.
*********************************************************************************************************
*/
s32 hwmsgbox_exit(void)
{
    66d0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	/* disable msgbox clock and set reset as assert state. */
	ccu_set_mclk_reset(CCU_MOD_CLK_MSGBOX, CCU_CLK_RESET);
    66d4:	04 00 2e 7a 	l.jal 120bc <ccu_set_mclk_reset>
    66d8:	9c 80 00 00 	l.addi r4,r0,0x0
	ccu_set_mclk_onoff(CCU_MOD_CLK_MSGBOX, CCU_CLK_OFF);
    66dc:	9c 60 00 11 	l.addi r3,r0,0x11
    66e0:	04 00 2c f5 	l.jal 11ab4 <ccu_set_mclk_onoff>
    66e4:	9c 80 00 00 	l.addi r4,r0,0x0

	return OK;
}
    66e8:	9c 21 00 04 	l.addi r1,r1,0x4
    66ec:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    66f0:	44 00 48 00 	l.jr r9
    66f4:	9d 60 00 00 	l.addi r11,r0,0x0

000066f8 <hwmsgbox_wait_queue_not_full>:

s32 hwmsgbox_wait_queue_not_full(u32 queue, u32 timeout)
{
    66f8:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    66fc:	a8 44 00 00 	l.ori r2,r4,0x0
	while (readl(MSGBOX_FIFO_STATUS_REG(queue)) == 1) {
    6700:	18 80 00 c0 	l.movhi r4,0xc0

	return OK;
}

s32 hwmsgbox_wait_queue_not_full(u32 queue, u32 timeout)
{
    6704:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	while (readl(MSGBOX_FIFO_STATUS_REG(queue)) == 1) {
    6708:	a8 84 0c 40 	l.ori r4,r4,0xc40

	return OK;
}

s32 hwmsgbox_wait_queue_not_full(u32 queue, u32 timeout)
{
    670c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	while (readl(MSGBOX_FIFO_STATUS_REG(queue)) == 1) {
    6710:	e0 63 20 00 	l.add r3,r3,r4

	return OK;
}

s32 hwmsgbox_wait_queue_not_full(u32 queue, u32 timeout)
{
    6714:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	while (readl(MSGBOX_FIFO_STATUS_REG(queue)) == 1) {
    6718:	00 00 00 06 	l.j 6730 <hwmsgbox_wait_queue_not_full+0x38>
    671c:	b9 c3 00 02 	l.slli r14,r3,0x2
		/*
		 * message-queue fifo is full,
		 * wait 1ms for message-queue process.
		 */
		if (timeout == 0) {
    6720:	10 00 00 09 	l.bf 6744 <hwmsgbox_wait_queue_not_full+0x4c>
    6724:	9d 60 ff dd 	l.addi r11,r0,0xffffffdd
			return -ETIMEOUT;
		}
		time_mdelay(1);
    6728:	07 ff fa 79 	l.jal 510c <time_mdelay>
    672c:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
	return OK;
}

s32 hwmsgbox_wait_queue_not_full(u32 queue, u32 timeout)
{
	while (readl(MSGBOX_FIFO_STATUS_REG(queue)) == 1) {
    6730:	84 6e 00 00 	l.lwz r3,0x0(r14)
    6734:	bc 03 00 01 	l.sfeqi r3,0x1
    6738:	13 ff ff fa 	l.bf 6720 <hwmsgbox_wait_queue_not_full+0x28>
    673c:	bc 02 00 00 	l.sfeqi r2,0x0
    6740:	9d 60 00 00 	l.addi r11,r0,0x0
		}
		time_mdelay(1);
		timeout--;
	}
	return OK;
}
    6744:	9c 21 00 0c 	l.addi r1,r1,0xc
    6748:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    674c:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    6750:	44 00 48 00 	l.jr r9
    6754:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

00006758 <hwmsgbox_wait_queue_not_empty>:

s32 hwmsgbox_wait_queue_not_empty(u32 queue, u32 timeout)
{
    6758:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    675c:	a8 44 00 00 	l.ori r2,r4,0x0
	while (readl(MSGBOX_MSG_STATUS_REG(queue)) == 0) {
    6760:	18 80 00 c0 	l.movhi r4,0xc0
	}
	return OK;
}

s32 hwmsgbox_wait_queue_not_empty(u32 queue, u32 timeout)
{
    6764:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	while (readl(MSGBOX_MSG_STATUS_REG(queue)) == 0) {
    6768:	a8 84 0c 50 	l.ori r4,r4,0xc50
	}
	return OK;
}

s32 hwmsgbox_wait_queue_not_empty(u32 queue, u32 timeout)
{
    676c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	while (readl(MSGBOX_MSG_STATUS_REG(queue)) == 0) {
    6770:	e0 63 20 00 	l.add r3,r3,r4
	}
	return OK;
}

s32 hwmsgbox_wait_queue_not_empty(u32 queue, u32 timeout)
{
    6774:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	while (readl(MSGBOX_MSG_STATUS_REG(queue)) == 0) {
    6778:	00 00 00 06 	l.j 6790 <hwmsgbox_wait_queue_not_empty+0x38>
    677c:	b9 c3 00 02 	l.slli r14,r3,0x2
		/*
		 * message-queue fifo is empty,
		 * wait 1ms for message-queue process.
		 */
		if (timeout == 0) {
    6780:	10 00 00 0a 	l.bf 67a8 <hwmsgbox_wait_queue_not_empty+0x50>
    6784:	9c 60 00 01 	l.addi r3,r0,0x1
			return -ETIMEOUT;
		}
		time_mdelay(1);
    6788:	07 ff fa 61 	l.jal 510c <time_mdelay>
    678c:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
	return OK;
}

s32 hwmsgbox_wait_queue_not_empty(u32 queue, u32 timeout)
{
	while (readl(MSGBOX_MSG_STATUS_REG(queue)) == 0) {
    6790:	84 6e 00 00 	l.lwz r3,0x0(r14)
    6794:	bc 03 00 00 	l.sfeqi r3,0x0
    6798:	13 ff ff fa 	l.bf 6780 <hwmsgbox_wait_queue_not_empty+0x28>
    679c:	bc 02 00 00 	l.sfeqi r2,0x0
			return -ETIMEOUT;
		}
		time_mdelay(1);
		timeout--;
	}
	return OK;
    67a0:	00 00 00 03 	l.j 67ac <hwmsgbox_wait_queue_not_empty+0x54>
    67a4:	9d 60 00 00 	l.addi r11,r0,0x0
		/*
		 * message-queue fifo is empty,
		 * wait 1ms for message-queue process.
		 */
		if (timeout == 0) {
			return -ETIMEOUT;
    67a8:	9d 60 ff dd 	l.addi r11,r0,0xffffffdd
		}
		time_mdelay(1);
		timeout--;
	}
	return OK;
}
    67ac:	9c 21 00 0c 	l.addi r1,r1,0xc
    67b0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    67b4:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    67b8:	44 00 48 00 	l.jr r9
    67bc:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

000067c0 <hwmsgbox_send_message>:
*
* Returns    :  OK if send message succeeded, other if failed.
*********************************************************************************************************
*/
s32 hwmsgbox_send_message(struct message *pmessage, u32 timeout)
{
    67c0:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    67c4:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    67c8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    67cc:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    67d0:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    67d4:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    67d8:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    67dc:	a9 c3 00 00 	l.ori r14,r3,0x0
	u32 i;
	u32 value;

	ASSERT(pmessage != NULL);

	if (pmessage->attr & MESSAGE_ATTR_HARDSYN) {
    67e0:	8c 63 00 01 	l.lbz r3,0x1(r3)
    67e4:	a4 63 00 02 	l.andi r3,r3,0x2
*
* Returns    :  OK if send message succeeded, other if failed.
*********************************************************************************************************
*/
s32 hwmsgbox_send_message(struct message *pmessage, u32 timeout)
{
    67e8:	9c 21 ff e4 	l.addi r1,r1,0xffffffe4
	u32 i;
	u32 value;

	ASSERT(pmessage != NULL);

	if (pmessage->attr & MESSAGE_ATTR_HARDSYN) {
    67ec:	bc 03 00 00 	l.sfeqi r3,0x0
    67f0:	10 00 00 5b 	l.bf 695c <hwmsgbox_send_message+0x19c>
    67f4:	aa 04 00 00 	l.ori r16,r4,0x0
		/* use ar100 hwsyn transmit channel */
		INF("send syn message\n");

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
    67f8:	07 ff ff c0 	l.jal 66f8 <hwmsgbox_wait_queue_not_full>
    67fc:	9c 60 00 02 	l.addi r3,r0,0x2
		if (ret != OK)
    6800:	bc 2b 00 00 	l.sfnei r11,0x0
    6804:	10 00 00 84 	l.bf 6a14 <hwmsgbox_send_message+0x254>
    6808:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    680c:	8c 6e 00 01 	l.lbz r3,0x1(r14)
			(pmessage->type << 16) | (pmessage->result << 24);
    6810:	8c 4e 00 02 	l.lbz r2,0x2(r14)

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6814:	b8 63 00 08 	l.slli r3,r3,0x8
			(pmessage->type << 16) | (pmessage->result << 24);
    6818:	b8 42 00 10 	l.slli r2,r2,0x10
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    681c:	1a 80 03 00 	l.movhi r20,0x300

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
    6820:	a8 90 00 00 	l.ori r4,r16,0x0

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6824:	e0 43 10 04 	l.or r2,r3,r2
    6828:	8c 6e 00 00 	l.lbz r3,0x0(r14)
    682c:	e0 42 18 04 	l.or r2,r2,r3
			(pmessage->type << 16) | (pmessage->result << 24);
    6830:	8c 6e 00 03 	l.lbz r3,0x3(r14)
    6834:	b8 63 00 18 	l.slli r3,r3,0x18
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    6838:	aa 94 31 88 	l.ori r20,r20,0x3188
		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
			(pmessage->type << 16) | (pmessage->result << 24);
    683c:	e0 42 18 04 	l.or r2,r2,r3
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
    6840:	9c 60 00 02 	l.addi r3,r0,0x2
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
			(pmessage->type << 16) | (pmessage->result << 24);
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    6844:	d4 14 10 00 	l.sw 0x0(r20),r2

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
    6848:	07 ff ff ac 	l.jal 66f8 <hwmsgbox_wait_queue_not_full>
    684c:	15 00 00 00 	l.nop 0x0
		if (ret != OK)
    6850:	bc 2b 00 00 	l.sfnei r11,0x0
    6854:	10 00 00 70 	l.bf 6a14 <hwmsgbox_send_message+0x254>
    6858:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = pmessage->count;
    685c:	8c 6e 00 04 	l.lbz r3,0x4(r14)
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6860:	aa 4b 00 00 	l.ori r18,r11,0x0

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    6864:	d4 14 18 00 	l.sw 0x0(r20),r3

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6868:	00 00 00 0d 	l.j 689c <hwmsgbox_send_message+0xdc>
    686c:	aa cb 00 00 	l.ori r22,r11,0x0
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
    6870:	07 ff ff a2 	l.jal 66f8 <hwmsgbox_wait_queue_not_full>
    6874:	a8 90 00 00 	l.ori r4,r16,0x0
			if (ret != OK)
    6878:	bc 2b 00 00 	l.sfnei r11,0x0
    687c:	10 00 00 66 	l.bf 6a14 <hwmsgbox_send_message+0x254>
    6880:	a8 4b 00 00 	l.ori r2,r11,0x0
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    6884:	84 4e 00 1c 	l.lwz r2,0x1c(r14)
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6888:	9e d6 00 01 	l.addi r22,r22,0x1
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
			if (ret != OK)
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    688c:	e0 42 90 00 	l.add r2,r2,r18
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6890:	9e 52 00 04 	l.addi r18,r18,0x4
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_SYN_TX_CH, timeout);
			if (ret != OK)
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));
    6894:	84 42 00 00 	l.lwz r2,0x0(r2)
    6898:	d4 14 10 00 	l.sw 0x0(r20),r2
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    689c:	8c 4e 00 04 	l.lbz r2,0x4(r14)
    68a0:	e4 96 10 00 	l.sfltu r22,r2
    68a4:	13 ff ff f3 	l.bf 6870 <hwmsgbox_send_message+0xb0>
    68a8:	9c 60 00 02 	l.addi r3,r0,0x2
		}

		/* after send, wait feedback, hwsyn messsage must feedback use syn rx channel */

		/* first receive message header and misc */
		ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
    68ac:	9c 60 00 03 	l.addi r3,r0,0x3
    68b0:	07 ff ff aa 	l.jal 6758 <hwmsgbox_wait_queue_not_empty>
    68b4:	a8 90 00 00 	l.ori r4,r16,0x0
		if (ret != OK)
    68b8:	bc 2b 00 00 	l.sfnei r11,0x0
    68bc:	10 00 00 56 	l.bf 6a14 <hwmsgbox_send_message+0x254>
    68c0:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
    68c4:	1a 40 03 00 	l.movhi r18,0x300
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
		pmessage->type = (value >> 16) & 0xff;
		pmessage->result = (value >> 24) & 0xff;

		ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
    68c8:	a8 90 00 00 	l.ori r4,r16,0x0

		/* first receive message header and misc */
		ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
    68cc:	aa 52 31 8c 	l.ori r18,r18,0x318c
    68d0:	84 52 00 00 	l.lwz r2,0x0(r18)
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
    68d4:	b8 62 00 48 	l.srli r3,r2,0x8
		/* first receive message header and misc */
		ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
		pmessage->state = value & 0xff;
    68d8:	d8 0e 10 00 	l.sb 0x0(r14),r2
		pmessage->attr = (value >> 8) & 0xff;
    68dc:	d8 0e 18 01 	l.sb 0x1(r14),r3
		pmessage->type = (value >> 16) & 0xff;
    68e0:	b8 62 00 50 	l.srli r3,r2,0x10
		pmessage->result = (value >> 24) & 0xff;
    68e4:	b8 42 00 58 	l.srli r2,r2,0x18
		if (ret != OK)
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
		pmessage->type = (value >> 16) & 0xff;
    68e8:	d8 0e 18 02 	l.sb 0x2(r14),r3
		pmessage->result = (value >> 24) & 0xff;
    68ec:	d8 0e 10 03 	l.sb 0x3(r14),r2

		ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
    68f0:	07 ff ff 9a 	l.jal 6758 <hwmsgbox_wait_queue_not_empty>
    68f4:	9c 60 00 03 	l.addi r3,r0,0x3
		if (ret != OK)
    68f8:	bc 2b 00 00 	l.sfnei r11,0x0
    68fc:	10 00 00 46 	l.bf 6a14 <hwmsgbox_send_message+0x254>
    6900:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
    6904:	84 72 00 00 	l.lwz r3,0x0(r18)
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6908:	aa cb 00 00 	l.ori r22,r11,0x0

		ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
		pmessage->count = value & 0xff;
    690c:	d8 0e 18 04 	l.sb 0x4(r14),r3

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6910:	00 00 00 0d 	l.j 6944 <hwmsgbox_send_message+0x184>
    6914:	aa 8b 00 00 	l.ori r20,r11,0x0
			ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
    6918:	07 ff ff 90 	l.jal 6758 <hwmsgbox_wait_queue_not_empty>
    691c:	a8 90 00 00 	l.ori r4,r16,0x0
			if (ret != OK)
    6920:	bc 2b 00 00 	l.sfnei r11,0x0
    6924:	10 00 00 3b 	l.bf 6a10 <hwmsgbox_send_message+0x250>
    6928:	15 00 00 00 	l.nop 0x0
				return ret;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
    692c:	84 6e 00 1c 	l.lwz r3,0x1c(r14)
    6930:	84 92 00 00 	l.lwz r4,0x0(r18)
    6934:	e0 63 b0 00 	l.add r3,r3,r22
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6938:	9e 94 00 01 	l.addi r20,r20,0x1
			ret = hwmsgbox_wait_queue_not_empty(HWMSGBOX_AR100_SYN_RX_CH, timeout);
			if (ret != OK)
				return ret;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
    693c:	d4 03 20 00 	l.sw 0x0(r3),r4
			return ret;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_SYN_RX_CH));
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6940:	9e d6 00 04 	l.addi r22,r22,0x4
    6944:	8c 6e 00 04 	l.lbz r3,0x4(r14)
    6948:	e4 94 18 00 	l.sfltu r20,r3
    694c:	13 ff ff f3 	l.bf 6918 <hwmsgbox_send_message+0x158>
    6950:	9c 60 00 03 	l.addi r3,r0,0x3
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
		}
		return OK;
	}
}
    6954:	00 00 00 31 	l.j 6a18 <hwmsgbox_send_message+0x258>
    6958:	9c 21 00 1c 	l.addi r1,r1,0x1c
	} else {
		/* asyn message use asyn tx channel */
		INF("send asyn message\n");

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
    695c:	07 ff ff 67 	l.jal 66f8 <hwmsgbox_wait_queue_not_full>
    6960:	15 00 00 00 	l.nop 0x0
		if (ret != OK)
    6964:	bc 2b 00 00 	l.sfnei r11,0x0
    6968:	10 00 00 2b 	l.bf 6a14 <hwmsgbox_send_message+0x254>
    696c:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6970:	8c 8e 00 01 	l.lbz r4,0x1(r14)
			(pmessage->type << 16) | (pmessage->result << 24);
    6974:	8c 6e 00 02 	l.lbz r3,0x2(r14)

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6978:	b8 84 00 08 	l.slli r4,r4,0x8
			(pmessage->type << 16) | (pmessage->result << 24);
    697c:	b8 63 00 10 	l.slli r3,r3,0x10
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
    6980:	1a 40 03 00 	l.movhi r18,0x300

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6984:	e0 64 18 04 	l.or r3,r4,r3
    6988:	8c 8e 00 00 	l.lbz r4,0x0(r14)
    698c:	e0 63 20 04 	l.or r3,r3,r4
			(pmessage->type << 16) | (pmessage->result << 24);
    6990:	8c 8e 00 03 	l.lbz r4,0x3(r14)
    6994:	b8 84 00 18 	l.slli r4,r4,0x18
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
    6998:	aa 52 31 80 	l.ori r18,r18,0x3180
		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
			(pmessage->type << 16) | (pmessage->result << 24);
    699c:	e0 63 20 04 	l.or r3,r3,r4
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
    69a0:	a8 90 00 00 	l.ori r4,r16,0x0
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
			(pmessage->type << 16) | (pmessage->result << 24);
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
    69a4:	d4 12 18 00 	l.sw 0x0(r18),r3

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
    69a8:	07 ff ff 54 	l.jal 66f8 <hwmsgbox_wait_queue_not_full>
    69ac:	a8 6b 00 00 	l.ori r3,r11,0x0
		if (ret != OK)
    69b0:	bc 2b 00 00 	l.sfnei r11,0x0
    69b4:	10 00 00 18 	l.bf 6a14 <hwmsgbox_send_message+0x254>
    69b8:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = pmessage->count;
    69bc:	8c 6e 00 04 	l.lbz r3,0x4(r14)
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    69c0:	aa cb 00 00 	l.ori r22,r11,0x0

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
    69c4:	d4 12 18 00 	l.sw 0x0(r18),r3

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    69c8:	00 00 00 0c 	l.j 69f8 <hwmsgbox_send_message+0x238>
    69cc:	aa 8b 00 00 	l.ori r20,r11,0x0
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
    69d0:	07 ff ff 4a 	l.jal 66f8 <hwmsgbox_wait_queue_not_full>
    69d4:	a8 90 00 00 	l.ori r4,r16,0x0
			if (ret != OK)
    69d8:	bc 2b 00 00 	l.sfnei r11,0x0
    69dc:	10 00 00 0d 	l.bf 6a10 <hwmsgbox_send_message+0x250>
    69e0:	9e 94 00 01 	l.addi r20,r20,0x1
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
    69e4:	84 6e 00 1c 	l.lwz r3,0x1c(r14)
    69e8:	e0 63 b0 00 	l.add r3,r3,r22
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    69ec:	9e d6 00 04 	l.addi r22,r22,0x4
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
			if (ret != OK)
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
    69f0:	84 63 00 00 	l.lwz r3,0x0(r3)
    69f4:	d4 12 18 00 	l.sw 0x0(r18),r3
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    69f8:	8c 6e 00 04 	l.lbz r3,0x4(r14)
    69fc:	e4 94 18 00 	l.sfltu r20,r3
    6a00:	13 ff ff f4 	l.bf 69d0 <hwmsgbox_send_message+0x210>
    6a04:	9c 60 00 00 	l.addi r3,r0,0x0
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
		}
		return OK;
	}
}
    6a08:	00 00 00 04 	l.j 6a18 <hwmsgbox_send_message+0x258>
    6a0c:	9c 21 00 1c 	l.addi r1,r1,0x1c
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AR100_ASYN_TX_CH, timeout);
    6a10:	a8 4b 00 00 	l.ori r2,r11,0x0
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_TX_CH));
		}
		return OK;
	}
}
    6a14:	9c 21 00 1c 	l.addi r1,r1,0x1c
    6a18:	a9 62 00 00 	l.ori r11,r2,0x0
    6a1c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6a20:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    6a24:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    6a28:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    6a2c:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    6a30:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    6a34:	44 00 48 00 	l.jr r9
    6a38:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00006a3c <hwmsgbox_feedback_message>:

int hwmsgbox_feedback_message(struct message *pmessage, u32 timeout)
{
    6a3c:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    6a40:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    6a44:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    6a48:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6a4c:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    6a50:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    6a54:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    6a58:	a9 c3 00 00 	l.ori r14,r3,0x0
	u32 i;
	u32 value;

	ASSERT(pmessage != NULL);

	if (pmessage->attr & MESSAGE_ATTR_HARDSYN) {
    6a5c:	8c 63 00 01 	l.lbz r3,0x1(r3)
    6a60:	a4 63 00 02 	l.andi r3,r3,0x2
		return OK;
	}
}

int hwmsgbox_feedback_message(struct message *pmessage, u32 timeout)
{
    6a64:	9c 21 ff e4 	l.addi r1,r1,0xffffffe4
    6a68:	aa c4 00 00 	l.ori r22,r4,0x0
	u32 i;
	u32 value;

	ASSERT(pmessage != NULL);

	if (pmessage->attr & MESSAGE_ATTR_HARDSYN) {
    6a6c:	bc 03 00 00 	l.sfeqi r3,0x0
    6a70:	10 00 00 31 	l.bf 6b34 <hwmsgbox_feedback_message+0xf8>
    6a74:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd
		/* use ac327 hard syn receiver channel */
		INF("send feedback message\n");

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
    6a78:	07 ff ff 20 	l.jal 66f8 <hwmsgbox_wait_queue_not_full>
    6a7c:	9c 60 00 05 	l.addi r3,r0,0x5
		if (ret != OK)
    6a80:	bc 2b 00 00 	l.sfnei r11,0x0
    6a84:	10 00 00 2c 	l.bf 6b34 <hwmsgbox_feedback_message+0xf8>
    6a88:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6a8c:	8c 6e 00 01 	l.lbz r3,0x1(r14)
			(pmessage->type << 16) | (pmessage->result << 24);
    6a90:	8c 4e 00 02 	l.lbz r2,0x2(r14)

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6a94:	b8 63 00 08 	l.slli r3,r3,0x8
			(pmessage->type << 16) | (pmessage->result << 24);
    6a98:	b8 42 00 10 	l.slli r2,r2,0x10
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));
    6a9c:	1a 00 03 00 	l.movhi r16,0x300

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
    6aa0:	a8 96 00 00 	l.ori r4,r22,0x0

		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
    6aa4:	e0 43 10 04 	l.or r2,r3,r2
    6aa8:	8c 6e 00 00 	l.lbz r3,0x0(r14)
    6aac:	e0 42 18 04 	l.or r2,r2,r3
			(pmessage->type << 16) | (pmessage->result << 24);
    6ab0:	8c 6e 00 03 	l.lbz r3,0x3(r14)
    6ab4:	b8 63 00 18 	l.slli r3,r3,0x18
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));
    6ab8:	aa 10 31 94 	l.ori r16,r16,0x3194
		/* first send message header and misc */
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
			(pmessage->type << 16) | (pmessage->result << 24);
    6abc:	e0 42 18 04 	l.or r2,r2,r3
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
    6ac0:	9c 60 00 05 	l.addi r3,r0,0x5
		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->state | (pmessage->attr << 8) |
			(pmessage->type << 16) | (pmessage->result << 24);
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));
    6ac4:	d4 10 10 00 	l.sw 0x0(r16),r2

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
    6ac8:	07 ff ff 0c 	l.jal 66f8 <hwmsgbox_wait_queue_not_full>
    6acc:	15 00 00 00 	l.nop 0x0
		if (ret != OK)
    6ad0:	bc 2b 00 00 	l.sfnei r11,0x0
    6ad4:	10 00 00 18 	l.bf 6b34 <hwmsgbox_feedback_message+0xf8>
    6ad8:	a8 4b 00 00 	l.ori r2,r11,0x0
			return ret;
		value = pmessage->count;
    6adc:	8c 6e 00 04 	l.lbz r3,0x4(r14)
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6ae0:	aa 8b 00 00 	l.ori r20,r11,0x0

		ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
		if (ret != OK)
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));
    6ae4:	d4 10 18 00 	l.sw 0x0(r16),r3

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6ae8:	00 00 00 0c 	l.j 6b18 <hwmsgbox_feedback_message+0xdc>
    6aec:	aa 4b 00 00 	l.ori r18,r11,0x0
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
    6af0:	07 ff ff 02 	l.jal 66f8 <hwmsgbox_wait_queue_not_full>
    6af4:	a8 96 00 00 	l.ori r4,r22,0x0
			if (ret != OK)
    6af8:	bc 2b 00 00 	l.sfnei r11,0x0
    6afc:	10 00 00 0d 	l.bf 6b30 <hwmsgbox_feedback_message+0xf4>
    6b00:	9e 52 00 01 	l.addi r18,r18,0x1
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));
    6b04:	84 6e 00 1c 	l.lwz r3,0x1c(r14)
    6b08:	e0 63 a0 00 	l.add r3,r3,r20
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6b0c:	9e 94 00 04 	l.addi r20,r20,0x4
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
			if (ret != OK)
				return ret;
			writel(pmessage->paras[i], MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));
    6b10:	84 63 00 00 	l.lwz r3,0x0(r3)
    6b14:	d4 10 18 00 	l.sw 0x0(r16),r3
			return ret;
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
    6b18:	8c 6e 00 04 	l.lbz r3,0x4(r14)
    6b1c:	e4 92 18 00 	l.sfltu r18,r3
    6b20:	13 ff ff f4 	l.bf 6af0 <hwmsgbox_feedback_message+0xb4>
    6b24:	9c 60 00 05 	l.addi r3,r0,0x5
		return OK;
	}

	/* invalid syn message */
	return -ESRCH;
}
    6b28:	00 00 00 04 	l.j 6b38 <hwmsgbox_feedback_message+0xfc>
    6b2c:	9c 21 00 1c 	l.addi r1,r1,0x1c
		value = pmessage->count;
		writel(value, MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_RX_CH));

		/* then send message paras */
		for (i = 0; i < pmessage->count; i++) {
			ret = hwmsgbox_wait_queue_not_full(HWMSGBOX_AC327_SYN_RX_CH, timeout);
    6b30:	a8 4b 00 00 	l.ori r2,r11,0x0
		return OK;
	}

	/* invalid syn message */
	return -ESRCH;
}
    6b34:	9c 21 00 1c 	l.addi r1,r1,0x1c
    6b38:	a9 62 00 00 	l.ori r11,r2,0x0
    6b3c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6b40:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    6b44:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    6b48:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    6b4c:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    6b50:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    6b54:	44 00 48 00 	l.jr r9
    6b58:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00006b5c <hwmsgbox_query_message>:
*
* Returns    :  the point of message, NULL if timeout.
*********************************************************************************************************
*/
s32 hwmsgbox_query_message(struct message *pmessage, u32 timeout)
{
    6b5c:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
	u32 i;
	u32 value;

	/* query ar100 asyn received channel */
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH))) {
    6b60:	19 c0 03 00 	l.movhi r14,0x300
*
* Returns    :  the point of message, NULL if timeout.
*********************************************************************************************************
*/
s32 hwmsgbox_query_message(struct message *pmessage, u32 timeout)
{
    6b64:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
	u32 i;
	u32 value;

	/* query ar100 asyn received channel */
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH))) {
    6b68:	aa 0e 31 44 	l.ori r16,r14,0x3144
*
* Returns    :  the point of message, NULL if timeout.
*********************************************************************************************************
*/
s32 hwmsgbox_query_message(struct message *pmessage, u32 timeout)
{
    6b6c:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    6b70:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6b74:	a8 43 00 00 	l.ori r2,r3,0x0
	u32 i;
	u32 value;

	/* query ar100 asyn received channel */
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH))) {
    6b78:	84 70 00 00 	l.lwz r3,0x0(r16)
    6b7c:	bc 03 00 00 	l.sfeqi r3,0x0
    6b80:	10 00 00 2f 	l.bf 6c3c <hwmsgbox_query_message+0xe0>
    6b84:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
		LOG("query asyn msg\n");
    6b88:	18 80 00 01 	l.movhi r4,0x1
    6b8c:	9c 60 00 02 	l.addi r3,r0,0x2
    6b90:	04 00 0d 0a 	l.jal 9fb8 <debugger_printf>
    6b94:	a8 84 26 ff 	l.ori r4,r4,0x26ff
		/* first receive message header and misc */
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
    6b98:	84 70 00 00 	l.lwz r3,0x0(r16)
    6b9c:	bc 03 00 00 	l.sfeqi r3,0x0
    6ba0:	13 ff ff fe 	l.bf 6b98 <hwmsgbox_query_message+0x3c>
    6ba4:	18 80 03 00 	l.movhi r4,0x300
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
    6ba8:	a8 64 31 84 	l.ori r3,r4,0x3184
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
		pmessage->type = (value >> 16) & 0xff;
		pmessage->result = (value >> 24) & 0xff;

		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
    6bac:	a8 84 31 44 	l.ori r4,r4,0x3144
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH))) {
		LOG("query asyn msg\n");
		/* first receive message header and misc */
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
    6bb0:	84 63 00 00 	l.lwz r3,0x0(r3)
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
    6bb4:	b8 a3 00 48 	l.srli r5,r3,0x8
		LOG("query asyn msg\n");
		/* first receive message header and misc */
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
		pmessage->state = value & 0xff;
    6bb8:	d8 02 18 00 	l.sb 0x0(r2),r3
		pmessage->attr = (value >> 8) & 0xff;
    6bbc:	d8 02 28 01 	l.sb 0x1(r2),r5
		pmessage->type = (value >> 16) & 0xff;
    6bc0:	b8 a3 00 50 	l.srli r5,r3,0x10
		pmessage->result = (value >> 24) & 0xff;
    6bc4:	b8 63 00 58 	l.srli r3,r3,0x18
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
		pmessage->type = (value >> 16) & 0xff;
    6bc8:	d8 02 28 02 	l.sb 0x2(r2),r5
		pmessage->result = (value >> 24) & 0xff;
    6bcc:	d8 02 18 03 	l.sb 0x3(r2),r3

		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
    6bd0:	84 64 00 00 	l.lwz r3,0x0(r4)
    6bd4:	bc 03 00 00 	l.sfeqi r3,0x0
    6bd8:	13 ff ff fe 	l.bf 6bd0 <hwmsgbox_query_message+0x74>
    6bdc:	18 c0 03 00 	l.movhi r6,0x300
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
    6be0:	a8 a6 31 84 	l.ori r5,r6,0x3184
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
			while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
    6be4:	a8 c6 31 44 	l.ori r6,r6,0x3144
		pmessage->type = (value >> 16) & 0xff;
		pmessage->result = (value >> 24) & 0xff;

		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
    6be8:	84 65 00 00 	l.lwz r3,0x0(r5)
		pmessage->count = value & 0xff;
    6bec:	d8 02 18 04 	l.sb 0x4(r2),r3

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6bf0:	9c 60 00 00 	l.addi r3,r0,0x0
    6bf4:	00 00 00 0c 	l.j 6c24 <hwmsgbox_query_message+0xc8>
    6bf8:	a8 83 00 00 	l.ori r4,r3,0x0
			while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
    6bfc:	84 e6 00 00 	l.lwz r7,0x0(r6)
    6c00:	bc 07 00 00 	l.sfeqi r7,0x0
    6c04:	13 ff ff fe 	l.bf 6bfc <hwmsgbox_query_message+0xa0>
    6c08:	15 00 00 00 	l.nop 0x0
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
    6c0c:	84 e2 00 1c 	l.lwz r7,0x1c(r2)
    6c10:	85 05 00 00 	l.lwz r8,0x0(r5)
    6c14:	e0 e7 18 00 	l.add r7,r7,r3
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6c18:	9c 84 00 01 	l.addi r4,r4,0x1
			while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AR100_ASYN_RX_CH)))
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
    6c1c:	d4 07 40 00 	l.sw 0x0(r7),r8
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6c20:	9c 63 00 04 	l.addi r3,r3,0x4
    6c24:	8c e2 00 04 	l.lbz r7,0x4(r2)
    6c28:	e4 84 38 00 	l.sfltu r4,r7
    6c2c:	13 ff ff f4 	l.bf 6bfc <hwmsgbox_query_message+0xa0>
    6c30:	15 00 00 00 	l.nop 0x0
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AR100_ASYN_RX_CH));
		}

		/* clear pending */
		hwmsgbox_clear_receiver_pending(HWMSGBOX_AR100_ASYN_RX_CH, HWMSG_QUEUE_USER_ARISC);
    6c34:	00 00 00 33 	l.j 6d00 <hwmsgbox_query_message+0x1a4>
    6c38:	9c 60 00 04 	l.addi r3,r0,0x4
		return OK;
	}

	/* query ar100 syn received channel */
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH))) {
    6c3c:	a9 ce 31 50 	l.ori r14,r14,0x3150
		hwmsgbox_clear_receiver_pending(HWMSGBOX_AC327_SYN_TX_CH, HWMSG_QUEUE_USER_ARISC);
		return OK;
	}

	/* no valid message */
	return FAIL;
    6c40:	9d 60 ff ff 	l.addi r11,r0,0xffffffff
		hwmsgbox_clear_receiver_pending(HWMSGBOX_AR100_ASYN_RX_CH, HWMSG_QUEUE_USER_ARISC);
		return OK;
	}

	/* query ar100 syn received channel */
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH))) {
    6c44:	84 6e 00 00 	l.lwz r3,0x0(r14)
    6c48:	bc 03 00 00 	l.sfeqi r3,0x0
    6c4c:	10 00 00 31 	l.bf 6d10 <hwmsgbox_query_message+0x1b4>
    6c50:	9c 60 00 02 	l.addi r3,r0,0x2
		LOG("query syn msg\n");
    6c54:	18 80 00 01 	l.movhi r4,0x1
    6c58:	04 00 0c d8 	l.jal 9fb8 <debugger_printf>
    6c5c:	a8 84 27 0f 	l.ori r4,r4,0x270f
		/* first receive message header and misc */
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
    6c60:	84 6e 00 00 	l.lwz r3,0x0(r14)
    6c64:	bc 03 00 00 	l.sfeqi r3,0x0
    6c68:	13 ff ff fe 	l.bf 6c60 <hwmsgbox_query_message+0x104>
    6c6c:	18 80 03 00 	l.movhi r4,0x300
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
    6c70:	a8 64 31 90 	l.ori r3,r4,0x3190
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
		pmessage->type = (value >> 16) & 0xff;
		pmessage->result = (value >> 24) & 0xff;

		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
    6c74:	a8 84 31 50 	l.ori r4,r4,0x3150
	if (!!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH))) {
		LOG("query syn msg\n");
		/* first receive message header and misc */
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
    6c78:	84 63 00 00 	l.lwz r3,0x0(r3)
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
    6c7c:	b8 a3 00 48 	l.srli r5,r3,0x8
		LOG("query syn msg\n");
		/* first receive message header and misc */
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
		pmessage->state = value & 0xff;
    6c80:	d8 02 18 00 	l.sb 0x0(r2),r3
		pmessage->attr = (value >> 8) & 0xff;
    6c84:	d8 02 28 01 	l.sb 0x1(r2),r5
		pmessage->type = (value >> 16) & 0xff;
    6c88:	b8 a3 00 50 	l.srli r5,r3,0x10
		pmessage->result = (value >> 24) & 0xff;
    6c8c:	b8 63 00 58 	l.srli r3,r3,0x18
		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
		pmessage->state = value & 0xff;
		pmessage->attr = (value >> 8) & 0xff;
		pmessage->type = (value >> 16) & 0xff;
    6c90:	d8 02 28 02 	l.sb 0x2(r2),r5
		pmessage->result = (value >> 24) & 0xff;
    6c94:	d8 02 18 03 	l.sb 0x3(r2),r3

		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
    6c98:	84 64 00 00 	l.lwz r3,0x0(r4)
    6c9c:	bc 03 00 00 	l.sfeqi r3,0x0
    6ca0:	13 ff ff fe 	l.bf 6c98 <hwmsgbox_query_message+0x13c>
    6ca4:	18 c0 03 00 	l.movhi r6,0x300
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
    6ca8:	a8 a6 31 90 	l.ori r5,r6,0x3190
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
			while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
    6cac:	a8 c6 31 50 	l.ori r6,r6,0x3150
		pmessage->type = (value >> 16) & 0xff;
		pmessage->result = (value >> 24) & 0xff;

		while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
    6cb0:	84 65 00 00 	l.lwz r3,0x0(r5)
		pmessage->count = value & 0xff;
    6cb4:	d8 02 18 04 	l.sb 0x4(r2),r3

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6cb8:	9c 60 00 00 	l.addi r3,r0,0x0
    6cbc:	00 00 00 0c 	l.j 6cec <hwmsgbox_query_message+0x190>
    6cc0:	a8 83 00 00 	l.ori r4,r3,0x0
			while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
    6cc4:	84 e6 00 00 	l.lwz r7,0x0(r6)
    6cc8:	bc 07 00 00 	l.sfeqi r7,0x0
    6ccc:	13 ff ff fe 	l.bf 6cc4 <hwmsgbox_query_message+0x168>
    6cd0:	15 00 00 00 	l.nop 0x0
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
    6cd4:	84 e2 00 1c 	l.lwz r7,0x1c(r2)
    6cd8:	85 05 00 00 	l.lwz r8,0x0(r5)
    6cdc:	e0 e7 18 00 	l.add r7,r7,r3
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6ce0:	9c 84 00 01 	l.addi r4,r4,0x1
			while (!readl(MSGBOX_MSG_STATUS_REG(HWMSGBOX_AC327_SYN_TX_CH)))
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
    6ce4:	d4 07 40 00 	l.sw 0x0(r7),r8
			;
		value = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
		pmessage->count = value & 0xff;

		/* then receive message paras */
		for (i = 0; i < pmessage->count; i++) {
    6ce8:	9c 63 00 04 	l.addi r3,r3,0x4
    6cec:	8c e2 00 04 	l.lbz r7,0x4(r2)
    6cf0:	e4 84 38 00 	l.sfltu r4,r7
    6cf4:	13 ff ff f4 	l.bf 6cc4 <hwmsgbox_query_message+0x168>
    6cf8:	15 00 00 00 	l.nop 0x0
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
		}

		/* clear pending */
		hwmsgbox_clear_receiver_pending(HWMSGBOX_AC327_SYN_TX_CH, HWMSG_QUEUE_USER_ARISC);
    6cfc:	9c 60 01 00 	l.addi r3,r0,0x100
    6d00:	18 40 03 00 	l.movhi r2,0x300
		return OK;
    6d04:	9d 60 00 00 	l.addi r11,r0,0x0
				;
			pmessage->paras[i] = readl(MSGBOX_MSG_REG(HWMSGBOX_AC327_SYN_TX_CH));
		}

		/* clear pending */
		hwmsgbox_clear_receiver_pending(HWMSGBOX_AC327_SYN_TX_CH, HWMSG_QUEUE_USER_ARISC);
    6d08:	a8 42 30 50 	l.ori r2,r2,0x3050
    6d0c:	d4 02 18 00 	l.sw 0x0(r2),r3
		return OK;
	}

	/* no valid message */
	return FAIL;
}
    6d10:	9c 21 00 10 	l.addi r1,r1,0x10
    6d14:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6d18:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    6d1c:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    6d20:	44 00 48 00 	l.jr r9
    6d24:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00006d28 <hwmsgbox_super_standby_init>:


s32 hwmsgbox_super_standby_init(void)
{
	hwmsg_suspend = 1;
    6d28:	18 60 00 01 	l.movhi r3,0x1
    6d2c:	9c 80 00 01 	l.addi r4,r0,0x1
    6d30:	a8 63 34 3c 	l.ori r3,r3,0x343c
	return FAIL;
}


s32 hwmsgbox_super_standby_init(void)
{
    6d34:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	hwmsg_suspend = 1;
    6d38:	d4 03 20 00 	l.sw 0x0(r3),r4

	hwmsgbox_exit();
    6d3c:	07 ff fe 63 	l.jal 66c8 <hwmsgbox_exit>
    6d40:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc

	return OK;
}
    6d44:	9c 21 00 04 	l.addi r1,r1,0x4
    6d48:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6d4c:	44 00 48 00 	l.jr r9
    6d50:	9d 60 00 00 	l.addi r11,r0,0x0

00006d54 <hwmsgbox_super_standby_exit>:

s32 hwmsgbox_super_standby_exit(void)
{
    6d54:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6d58:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    6d5c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	hwmsgbox_init();
    6d60:	07 ff fe 2a 	l.jal 6608 <hwmsgbox_init>
    6d64:	9c 40 00 00 	l.addi r2,r0,0x0

	hwmsg_suspend = 0;
    6d68:	18 60 00 01 	l.movhi r3,0x1

	return OK;
}
    6d6c:	a9 62 00 00 	l.ori r11,r2,0x0

s32 hwmsgbox_super_standby_exit(void)
{
	hwmsgbox_init();

	hwmsg_suspend = 0;
    6d70:	a8 63 34 3c 	l.ori r3,r3,0x343c
    6d74:	d4 03 10 00 	l.sw 0x0(r3),r2

	return OK;
}
    6d78:	9c 21 00 08 	l.addi r1,r1,0x8
    6d7c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6d80:	44 00 48 00 	l.jr r9
    6d84:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00006d88 <aw1657_pmu_set_voltage_state>:
	while (1)
		;
}

static s32 aw1657_pmu_set_voltage_state(u32 type, u32 state)
{
    6d88:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    6d8c:	a8 44 00 00 	l.ori r2,r4,0x0
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1657_onoff_reg_bitmap[type].devaddr;
    6d90:	18 80 00 01 	l.movhi r4,0x1
    6d94:	b8 63 00 03 	l.slli r3,r3,0x3
    6d98:	a8 84 33 34 	l.ori r4,r4,0x3334
	while (1)
		;
}

static s32 aw1657_pmu_set_voltage_state(u32 type, u32 state)
{
    6d9c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1657_onoff_reg_bitmap[type].devaddr;
    6da0:	e0 63 20 00 	l.add r3,r3,r4
	while (1)
		;
}

static s32 aw1657_pmu_set_voltage_state(u32 type, u32 state)
{
    6da4:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1657_onoff_reg_bitmap[type].devaddr;
    6da8:	94 83 00 00 	l.lhz r4,0x0(r3)
	while (1)
		;
}

static s32 aw1657_pmu_set_voltage_state(u32 type, u32 state)
{
    6dac:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    6db0:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
    6db4:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
    6db8:	9c 21 ff e4 	l.addi r1,r1,0xffffffe4
	regaddr = aw1657_onoff_reg_bitmap[type].regaddr;
	offset  = aw1657_onoff_reg_bitmap[type].offset;
	aw1657_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    6dbc:	9c c0 00 01 	l.addi r6,r0,0x1
	u8 devaddr;
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1657_onoff_reg_bitmap[type].devaddr;
    6dc0:	d8 01 20 03 	l.sb 0x3(r1),r4
	regaddr = aw1657_onoff_reg_bitmap[type].regaddr;
	offset  = aw1657_onoff_reg_bitmap[type].offset;
	aw1657_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    6dc4:	9e 41 00 03 	l.addi r18,r1,0x3
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1657_onoff_reg_bitmap[type].devaddr;
	regaddr = aw1657_onoff_reg_bitmap[type].regaddr;
    6dc8:	8c 83 00 03 	l.lbz r4,0x3(r3)
	offset  = aw1657_onoff_reg_bitmap[type].offset;
	aw1657_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    6dcc:	9e 01 00 02 	l.addi r16,r1,0x2
	u8 regaddr;
	u8 data;
	u32 offset;

	devaddr = aw1657_onoff_reg_bitmap[type].devaddr;
	regaddr = aw1657_onoff_reg_bitmap[type].regaddr;
    6dd0:	d8 01 20 02 	l.sb 0x2(r1),r4
	offset  = aw1657_onoff_reg_bitmap[type].offset;
    6dd4:	9c 63 00 04 	l.addi r3,r3,0x4
	aw1657_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    6dd8:	9d c1 00 01 	l.addi r14,r1,0x1
	u8 data;
	u32 offset;

	devaddr = aw1657_onoff_reg_bitmap[type].devaddr;
	regaddr = aw1657_onoff_reg_bitmap[type].regaddr;
	offset  = aw1657_onoff_reg_bitmap[type].offset;
    6ddc:	96 83 00 00 	l.lhz r20,0x0(r3)
	aw1657_onoff_reg_bitmap[type].state = state;
    6de0:	d8 03 10 02 	l.sb 0x2(r3),r2

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    6de4:	a8 90 00 00 	l.ori r4,r16,0x0
    6de8:	a8 72 00 00 	l.ori r3,r18,0x0
    6dec:	04 00 01 2b 	l.jal 7298 <pmu_reg_read>
    6df0:	a8 ae 00 00 	l.ori r5,r14,0x0
	data &= (~(1 << offset));
    6df4:	9c c0 00 01 	l.addi r6,r0,0x1
    6df8:	8c 81 00 01 	l.lbz r4,0x1(r1)
    6dfc:	e0 66 a0 08 	l.sll r3,r6,r20
	data |= (state << offset);
    6e00:	e2 82 a0 08 	l.sll r20,r2,r20
	pmu_reg_write(&devaddr, &regaddr, &data, 1);
    6e04:	a8 ae 00 00 	l.ori r5,r14,0x0
	offset  = aw1657_onoff_reg_bitmap[type].offset;
	aw1657_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data &= (~(1 << offset));
    6e08:	ac 63 00 ff 	l.xori r3,r3,0xff
    6e0c:	e0 63 20 03 	l.and r3,r3,r4
	data |= (state << offset);
	pmu_reg_write(&devaddr, &regaddr, &data, 1);
    6e10:	a8 90 00 00 	l.ori r4,r16,0x0
	aw1657_onoff_reg_bitmap[type].state = state;

	//read-modify-write
	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data &= (~(1 << offset));
	data |= (state << offset);
    6e14:	e2 83 a0 04 	l.or r20,r3,r20
	pmu_reg_write(&devaddr, &regaddr, &data, 1);
    6e18:	a8 72 00 00 	l.ori r3,r18,0x0
    6e1c:	04 00 01 18 	l.jal 727c <pmu_reg_write>
    6e20:	d8 01 a0 01 	l.sb 0x1(r1),r20

	if (state == POWER_VOL_ON) {
    6e24:	bc 22 00 01 	l.sfnei r2,0x1
    6e28:	10 00 00 04 	l.bf 6e38 <aw1657_pmu_set_voltage_state+0xb0>
    6e2c:	15 00 00 00 	l.nop 0x0
		//delay 1ms for open PMU output
		time_mdelay(1);
    6e30:	07 ff f8 b7 	l.jal 510c <time_mdelay>
    6e34:	a8 62 00 00 	l.ori r3,r2,0x0
	}

	return OK;
}
    6e38:	9c 21 00 1c 	l.addi r1,r1,0x1c
    6e3c:	9d 60 00 00 	l.addi r11,r0,0x0
    6e40:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    6e44:	84 41 ff e8 	l.lwz r2,0xffffffe8(r1)
    6e48:	85 c1 ff ec 	l.lwz r14,0xffffffec(r1)
    6e4c:	86 01 ff f0 	l.lwz r16,0xfffffff0(r1)
    6e50:	86 41 ff f4 	l.lwz r18,0xfffffff4(r1)
    6e54:	44 00 48 00 	l.jr r9
    6e58:	86 81 ff f8 	l.lwz r20,0xfffffff8(r1)

00006e5c <aw1657_pmu_reset>:
	while (1)
		;
}

static void aw1657_pmu_reset(void)
{
    6e5c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6e60:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    6e64:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    6e68:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
	u8 devaddr = RSB_RTSADDR_AW1657;
    6e6c:	9c 40 00 36 	l.addi r2,r0,0x36
	while (1)
		;
}

static void aw1657_pmu_reset(void)
{
    6e70:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	u8 devaddr = RSB_RTSADDR_AW1657;
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);
    6e74:	a8 60 a2 01 	l.ori r3,r0,0xa201
		;
}

static void aw1657_pmu_reset(void)
{
	u8 devaddr = RSB_RTSADDR_AW1657;
    6e78:	d8 01 10 03 	l.sb 0x3(r1),r2
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
    6e7c:	9c 40 00 32 	l.addi r2,r0,0x32
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    6e80:	9e 01 00 03 	l.addi r16,r1,0x3
}

static void aw1657_pmu_reset(void)
{
	u8 devaddr = RSB_RTSADDR_AW1657;
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
    6e84:	d8 01 10 02 	l.sb 0x2(r1),r2
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    6e88:	9d c1 00 02 	l.addi r14,r1,0x2
{
	u8 devaddr = RSB_RTSADDR_AW1657;
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);
    6e8c:	04 00 2b 00 	l.jal 11a8c <save_state_flag>
    6e90:	9c 41 00 01 	l.addi r2,r1,0x1

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    6e94:	a8 70 00 00 	l.ori r3,r16,0x0
    6e98:	a8 8e 00 00 	l.ori r4,r14,0x0
    6e9c:	a8 a2 00 00 	l.ori r5,r2,0x0
    6ea0:	04 00 00 fe 	l.jal 7298 <pmu_reg_read>
    6ea4:	9c c0 00 01 	l.addi r6,r0,0x1
	data |= 1 << 6;
    6ea8:	8c 61 00 01 	l.lbz r3,0x1(r1)
    6eac:	a8 63 00 40 	l.ori r3,r3,0x40
	pmu_reg_write(&devaddr, &regaddr, &data, 1);
    6eb0:	a8 8e 00 00 	l.ori r4,r14,0x0
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x201);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 6;
    6eb4:	d8 01 18 01 	l.sb 0x1(r1),r3
	pmu_reg_write(&devaddr, &regaddr, &data, 1);
    6eb8:	a8 a2 00 00 	l.ori r5,r2,0x0
    6ebc:	a8 70 00 00 	l.ori r3,r16,0x0
    6ec0:	04 00 00 ef 	l.jal 727c <pmu_reg_write>
    6ec4:	9c c0 00 01 	l.addi r6,r0,0x1

	LOG("reset system\n");
    6ec8:	18 80 00 01 	l.movhi r4,0x1
    6ecc:	9c 60 00 02 	l.addi r3,r0,0x2
    6ed0:	04 00 0c 3a 	l.jal 9fb8 <debugger_printf>
    6ed4:	a8 84 27 1e 	l.ori r4,r4,0x271e
    6ed8:	00 00 00 00 	l.j 6ed8 <aw1657_pmu_reset+0x7c>
    6edc:	15 00 00 00 	l.nop 0x0

00006ee0 <aw1657_pmu_shutdown>:
/**
 * aw1657 specific function,
 * only called by pmu common function.
 */
static void aw1657_pmu_shutdown(void)
{
    6ee0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6ee4:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    6ee8:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    6eec:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
	u8 devaddr = RSB_RTSADDR_AW1657;
    6ef0:	9c 40 00 36 	l.addi r2,r0,0x36
/**
 * aw1657 specific function,
 * only called by pmu common function.
 */
static void aw1657_pmu_shutdown(void)
{
    6ef4:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	u8 devaddr = RSB_RTSADDR_AW1657;
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);
    6ef8:	a8 60 a1 01 	l.ori r3,r0,0xa101
 * only called by pmu common function.
 */
static void aw1657_pmu_shutdown(void)
{
	u8 devaddr = RSB_RTSADDR_AW1657;
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
    6efc:	9c 80 00 32 	l.addi r4,r0,0x32
 * aw1657 specific function,
 * only called by pmu common function.
 */
static void aw1657_pmu_shutdown(void)
{
	u8 devaddr = RSB_RTSADDR_AW1657;
    6f00:	d8 01 10 03 	l.sb 0x3(r1),r2
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    6f04:	9e 01 00 03 	l.addi r16,r1,0x3
    6f08:	9d c1 00 02 	l.addi r14,r1,0x2
    6f0c:	9c 41 00 01 	l.addi r2,r1,0x1
{
	u8 devaddr = RSB_RTSADDR_AW1657;
	u8 regaddr = AW1657_PWR_DOWN_SEQ;
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);
    6f10:	04 00 2a df 	l.jal 11a8c <save_state_flag>
    6f14:	d8 01 20 02 	l.sb 0x2(r1),r4

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
    6f18:	a8 70 00 00 	l.ori r3,r16,0x0
    6f1c:	a8 8e 00 00 	l.ori r4,r14,0x0
    6f20:	a8 a2 00 00 	l.ori r5,r2,0x0
    6f24:	04 00 00 dd 	l.jal 7298 <pmu_reg_read>
    6f28:	9c c0 00 01 	l.addi r6,r0,0x1
	data |= 1 << 7;
    6f2c:	8c 61 00 01 	l.lbz r3,0x1(r1)
    6f30:	9c 80 ff 80 	l.addi r4,r0,0xffffff80
	pmu_reg_write(&devaddr, &regaddr, &data, 1);
    6f34:	a8 a2 00 00 	l.ori r5,r2,0x0
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 7;
    6f38:	e0 63 20 04 	l.or r3,r3,r4
	pmu_reg_write(&devaddr, &regaddr, &data, 1);
    6f3c:	9c c0 00 01 	l.addi r6,r0,0x1
	u8 data;

	save_state_flag(REC_SHUTDOWN | 0x101);

	pmu_reg_read(&devaddr, &regaddr, &data, 1);
	data |= 1 << 7;
    6f40:	d8 01 18 01 	l.sb 0x1(r1),r3
	pmu_reg_write(&devaddr, &regaddr, &data, 1);
    6f44:	a8 8e 00 00 	l.ori r4,r14,0x0
    6f48:	04 00 00 cd 	l.jal 727c <pmu_reg_write>
    6f4c:	a8 70 00 00 	l.ori r3,r16,0x0

	LOG("poweroff system\n");
    6f50:	18 80 00 01 	l.movhi r4,0x1
    6f54:	9c 60 00 02 	l.addi r3,r0,0x2
    6f58:	04 00 0c 18 	l.jal 9fb8 <debugger_printf>
    6f5c:	a8 84 27 2c 	l.ori r4,r4,0x272c
    6f60:	00 00 00 00 	l.j 6f60 <aw1657_pmu_shutdown+0x80>
    6f64:	15 00 00 00 	l.nop 0x0

00006f68 <watchdog_reset>:

static u32 pmu_exist = FALSE;

void watchdog_reset(void)
{
	LOG("watchdog reset\n");
    6f68:	18 80 00 01 	l.movhi r4,0x1
extern struct notifier *wakeup_notify;

static u32 pmu_exist = FALSE;

void watchdog_reset(void)
{
    6f6c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    6f70:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	LOG("watchdog reset\n");
    6f74:	9c 60 00 02 	l.addi r3,r0,0x2
extern struct notifier *wakeup_notify;

static u32 pmu_exist = FALSE;

void watchdog_reset(void)
{
    6f78:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	LOG("watchdog reset\n");
    6f7c:	a8 84 27 3d 	l.ori r4,r4,0x273d
    6f80:	04 00 0c 0e 	l.jal 9fb8 <debugger_printf>
    6f84:	18 40 07 02 	l.movhi r2,0x702

	/* disable watchdog int */
	writel(0x0, R_WDOG_REG_BASE + 0x0);
    6f88:	a8 62 04 00 	l.ori r3,r2,0x400
    6f8c:	9c 80 00 00 	l.addi r4,r0,0x0
    6f90:	d4 03 20 00 	l.sw 0x0(r3),r4

	/* reset whole system */
	writel((0x1 | (0x1 << 8) | WATCHDOG_KEYFIELD), R_WDOG_REG_BASE + 0x14);
    6f94:	18 60 16 aa 	l.movhi r3,0x16aa
    6f98:	a8 82 04 14 	l.ori r4,r2,0x414
    6f9c:	a8 a3 01 01 	l.ori r5,r3,0x101

	/* set reset after 0.5s */
	writel(((0 << 4) | WATCHDOG_KEYFIELD), R_WDOG_REG_BASE + 0x18);
    6fa0:	a8 42 04 18 	l.ori r2,r2,0x418

	/* disable watchdog int */
	writel(0x0, R_WDOG_REG_BASE + 0x0);

	/* reset whole system */
	writel((0x1 | (0x1 << 8) | WATCHDOG_KEYFIELD), R_WDOG_REG_BASE + 0x14);
    6fa4:	d4 04 28 00 	l.sw 0x0(r4),r5

	/* set reset after 0.5s */
	writel(((0 << 4) | WATCHDOG_KEYFIELD), R_WDOG_REG_BASE + 0x18);
    6fa8:	d4 02 18 00 	l.sw 0x0(r2),r3
	mdelay(1);
    6fac:	07 ff f8 58 	l.jal 510c <time_mdelay>
    6fb0:	9c 60 00 01 	l.addi r3,r0,0x1

	/* enable watchdog */
	writel((readl(R_WDOG_REG_BASE + 0x18) | 0x1 | WATCHDOG_KEYFIELD), R_WDOG_REG_BASE + 0x18);
    6fb4:	18 80 16 aa 	l.movhi r4,0x16aa
    6fb8:	84 62 00 00 	l.lwz r3,0x0(r2)
    6fbc:	a8 84 00 01 	l.ori r4,r4,0x1
    6fc0:	e0 63 20 04 	l.or r3,r3,r4
    6fc4:	d4 02 18 00 	l.sw 0x0(r2),r3
    6fc8:	00 00 00 00 	l.j 6fc8 <watchdog_reset+0x60>
    6fcc:	15 00 00 00 	l.nop 0x0

00006fd0 <pmu_shutdown>:
		;
}

void pmu_shutdown(void)
{
	if (is_pmu_exist() == FALSE)
    6fd0:	18 60 00 01 	l.movhi r3,0x1
	while (1)
		;
}

void pmu_shutdown(void)
{
    6fd4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	if (is_pmu_exist() == FALSE)
    6fd8:	a8 63 34 40 	l.ori r3,r3,0x3440
    6fdc:	84 63 00 00 	l.lwz r3,0x0(r3)
    6fe0:	bc 03 00 00 	l.sfeqi r3,0x0
    6fe4:	0c 00 00 0e 	l.bnf 701c <pmu_shutdown+0x4c>
    6fe8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
			break;
	}

	if (pmu_ops_p->pmu_shutdown)
		pmu_ops_p->pmu_shutdown();
}
    6fec:	00 00 00 1c 	l.j 705c <pmu_shutdown+0x8c>
    6ff0:	9c 21 00 04 	l.addi r1,r1,0x4
{
	if (is_pmu_exist() == FALSE)
		return;

	while (!!twi_get_status()) {
		LOG("wait twi bus idle loop\n");
    6ff4:	9c 60 00 02 	l.addi r3,r0,0x2
    6ff8:	04 00 0b f0 	l.jal 9fb8 <debugger_printf>
    6ffc:	a8 84 27 4d 	l.ori r4,r4,0x274d
		time_mdelay(1000 * 2);
    7000:	07 ff f8 43 	l.jal 510c <time_mdelay>
    7004:	9c 60 07 d0 	l.addi r3,r0,0x7d0
		if (!twi_send_clk_9pulse())
    7008:	07 ff fc ba 	l.jal 62f0 <twi_send_clk_9pulse>
    700c:	15 00 00 00 	l.nop 0x0
    7010:	bc 0b 00 00 	l.sfeqi r11,0x0
    7014:	10 00 00 08 	l.bf 7034 <pmu_shutdown+0x64>
    7018:	18 60 00 01 	l.movhi r3,0x1
void pmu_shutdown(void)
{
	if (is_pmu_exist() == FALSE)
		return;

	while (!!twi_get_status()) {
    701c:	07 ff fc ef 	l.jal 63d8 <twi_get_status>
    7020:	15 00 00 00 	l.nop 0x0
    7024:	bc 2b 00 00 	l.sfnei r11,0x0
    7028:	13 ff ff f3 	l.bf 6ff4 <pmu_shutdown+0x24>
    702c:	18 80 00 01 	l.movhi r4,0x1
		time_mdelay(1000 * 2);
		if (!twi_send_clk_9pulse())
			break;
	}

	if (pmu_ops_p->pmu_shutdown)
    7030:	18 60 00 01 	l.movhi r3,0x1
    7034:	a8 63 33 bc 	l.ori r3,r3,0x33bc
    7038:	84 63 00 00 	l.lwz r3,0x0(r3)
    703c:	bc 03 00 00 	l.sfeqi r3,0x0
    7040:	10 00 00 06 	l.bf 7058 <pmu_shutdown+0x88>
    7044:	15 00 00 00 	l.nop 0x0
		pmu_ops_p->pmu_shutdown();
}
    7048:	9c 21 00 04 	l.addi r1,r1,0x4
    704c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		if (!twi_send_clk_9pulse())
			break;
	}

	if (pmu_ops_p->pmu_shutdown)
		pmu_ops_p->pmu_shutdown();
    7050:	44 00 18 00 	l.jr r3
    7054:	15 00 00 00 	l.nop 0x0
}
    7058:	9c 21 00 04 	l.addi r1,r1,0x4
    705c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7060:	44 00 48 00 	l.jr r9
    7064:	15 00 00 00 	l.nop 0x0

00007068 <pmu_reset>:

void pmu_reset(void)
{
	if (is_pmu_exist() == FALSE) {
    7068:	18 60 00 01 	l.movhi r3,0x1
	if (pmu_ops_p->pmu_shutdown)
		pmu_ops_p->pmu_shutdown();
}

void pmu_reset(void)
{
    706c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	if (is_pmu_exist() == FALSE) {
    7070:	a8 63 34 40 	l.ori r3,r3,0x3440
    7074:	84 63 00 00 	l.lwz r3,0x0(r3)
    7078:	bc 23 00 00 	l.sfnei r3,0x0
    707c:	10 00 00 10 	l.bf 70bc <pmu_reset+0x54>
    7080:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		watchdog_reset();
    7084:	07 ff ff b9 	l.jal 6f68 <watchdog_reset>
    7088:	15 00 00 00 	l.nop 0x0
    708c:	00 00 00 0c 	l.j 70bc <pmu_reset+0x54>
    7090:	15 00 00 00 	l.nop 0x0
	}

	while (!!twi_get_status()) {
		LOG("wait twi bus idle loop\n");
    7094:	9c 60 00 02 	l.addi r3,r0,0x2
    7098:	04 00 0b c8 	l.jal 9fb8 <debugger_printf>
    709c:	a8 84 27 4d 	l.ori r4,r4,0x274d
		time_mdelay(1000 * 2);
    70a0:	07 ff f8 1b 	l.jal 510c <time_mdelay>
    70a4:	9c 60 07 d0 	l.addi r3,r0,0x7d0
		if (!twi_send_clk_9pulse())
    70a8:	07 ff fc 92 	l.jal 62f0 <twi_send_clk_9pulse>
    70ac:	15 00 00 00 	l.nop 0x0
    70b0:	bc 0b 00 00 	l.sfeqi r11,0x0
    70b4:	10 00 00 08 	l.bf 70d4 <pmu_reset+0x6c>
    70b8:	18 60 00 01 	l.movhi r3,0x1
{
	if (is_pmu_exist() == FALSE) {
		watchdog_reset();
	}

	while (!!twi_get_status()) {
    70bc:	07 ff fc c7 	l.jal 63d8 <twi_get_status>
    70c0:	15 00 00 00 	l.nop 0x0
    70c4:	bc 2b 00 00 	l.sfnei r11,0x0
    70c8:	13 ff ff f3 	l.bf 7094 <pmu_reset+0x2c>
    70cc:	18 80 00 01 	l.movhi r4,0x1
		time_mdelay(1000 * 2);
		if (!twi_send_clk_9pulse())
			break;
	}

	if (pmu_ops_p->pmu_reset)
    70d0:	18 60 00 01 	l.movhi r3,0x1
    70d4:	a8 63 33 bc 	l.ori r3,r3,0x33bc
    70d8:	84 63 00 04 	l.lwz r3,0x4(r3)
    70dc:	bc 03 00 00 	l.sfeqi r3,0x0
    70e0:	10 00 00 06 	l.bf 70f8 <pmu_reset+0x90>
    70e4:	15 00 00 00 	l.nop 0x0
		pmu_ops_p->pmu_reset();
}
    70e8:	9c 21 00 04 	l.addi r1,r1,0x4
    70ec:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		if (!twi_send_clk_9pulse())
			break;
	}

	if (pmu_ops_p->pmu_reset)
		pmu_ops_p->pmu_reset();
    70f0:	44 00 18 00 	l.jr r3
    70f4:	15 00 00 00 	l.nop 0x0
}
    70f8:	9c 21 00 04 	l.addi r1,r1,0x4
    70fc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7100:	44 00 48 00 	l.jr r9
    7104:	15 00 00 00 	l.nop 0x0

00007108 <pmu_charging_reset>:

void pmu_charging_reset(void)
{
	if (is_pmu_exist() == FALSE)
    7108:	18 60 00 01 	l.movhi r3,0x1
	if (pmu_ops_p->pmu_reset)
		pmu_ops_p->pmu_reset();
}

void pmu_charging_reset(void)
{
    710c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	if (is_pmu_exist() == FALSE)
    7110:	a8 63 34 40 	l.ori r3,r3,0x3440
    7114:	84 63 00 00 	l.lwz r3,0x0(r3)
    7118:	bc 03 00 00 	l.sfeqi r3,0x0
    711c:	0c 00 00 0a 	l.bnf 7144 <pmu_charging_reset+0x3c>
    7120:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		LOG("wait twi bus idle loop\n");
	}

	if (pmu_ops_p->pmu_charging_reset)
		pmu_ops_p->pmu_charging_reset();
}
    7124:	00 00 00 17 	l.j 7180 <pmu_charging_reset+0x78>
    7128:	9c 21 00 04 	l.addi r1,r1,0x4
{
	if (is_pmu_exist() == FALSE)
		return;

	while (!!twi_get_status()) {
		time_mdelay(1000 * 2);
    712c:	07 ff f7 f8 	l.jal 510c <time_mdelay>
    7130:	9c 60 07 d0 	l.addi r3,r0,0x7d0
		LOG("wait twi bus idle loop\n");
    7134:	18 80 00 01 	l.movhi r4,0x1
    7138:	9c 60 00 02 	l.addi r3,r0,0x2
    713c:	04 00 0b 9f 	l.jal 9fb8 <debugger_printf>
    7140:	a8 84 27 4d 	l.ori r4,r4,0x274d
void pmu_charging_reset(void)
{
	if (is_pmu_exist() == FALSE)
		return;

	while (!!twi_get_status()) {
    7144:	07 ff fc a5 	l.jal 63d8 <twi_get_status>
    7148:	15 00 00 00 	l.nop 0x0
    714c:	bc 2b 00 00 	l.sfnei r11,0x0
    7150:	13 ff ff f7 	l.bf 712c <pmu_charging_reset+0x24>
    7154:	18 60 00 01 	l.movhi r3,0x1
		time_mdelay(1000 * 2);
		LOG("wait twi bus idle loop\n");
	}

	if (pmu_ops_p->pmu_charging_reset)
    7158:	a8 63 33 bc 	l.ori r3,r3,0x33bc
    715c:	84 63 00 08 	l.lwz r3,0x8(r3)
    7160:	bc 03 00 00 	l.sfeqi r3,0x0
    7164:	10 00 00 06 	l.bf 717c <pmu_charging_reset+0x74>
    7168:	15 00 00 00 	l.nop 0x0
		pmu_ops_p->pmu_charging_reset();
}
    716c:	9c 21 00 04 	l.addi r1,r1,0x4
    7170:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		time_mdelay(1000 * 2);
		LOG("wait twi bus idle loop\n");
	}

	if (pmu_ops_p->pmu_charging_reset)
		pmu_ops_p->pmu_charging_reset();
    7174:	44 00 18 00 	l.jr r3
    7178:	15 00 00 00 	l.nop 0x0
}
    717c:	9c 21 00 04 	l.addi r1,r1,0x4
    7180:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7184:	44 00 48 00 	l.jr r9
    7188:	15 00 00 00 	l.nop 0x0

0000718c <pmu_set_voltage>:

s32 pmu_set_voltage(u32 type, u32 voltage)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    718c:	18 60 00 01 	l.movhi r3,0x1
		return -ENODEV;

	return ret;
    7190:	9d 60 00 00 	l.addi r11,r0,0x0

s32 pmu_set_voltage(u32 type, u32 voltage)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    7194:	a8 63 34 40 	l.ori r3,r3,0x3440
    7198:	84 63 00 00 	l.lwz r3,0x0(r3)
    719c:	e4 23 58 00 	l.sfne r3,r11
    71a0:	10 00 00 03 	l.bf 71ac <pmu_set_voltage+0x20>
    71a4:	15 00 00 00 	l.nop 0x0
		return -ENODEV;
    71a8:	9d 60 ff ed 	l.addi r11,r0,0xffffffed

	return ret;
}
    71ac:	44 00 48 00 	l.jr r9
    71b0:	15 00 00 00 	l.nop 0x0

000071b4 <pmu_get_voltage>:

s32 pmu_get_voltage(u32 type)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    71b4:	18 60 00 01 	l.movhi r3,0x1
		return -ENODEV;

	return ret;
    71b8:	9d 60 00 00 	l.addi r11,r0,0x0

s32 pmu_get_voltage(u32 type)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    71bc:	a8 63 34 40 	l.ori r3,r3,0x3440
    71c0:	84 63 00 00 	l.lwz r3,0x0(r3)
    71c4:	e4 23 58 00 	l.sfne r3,r11
    71c8:	10 00 00 03 	l.bf 71d4 <pmu_get_voltage+0x20>
    71cc:	15 00 00 00 	l.nop 0x0
		return -ENODEV;
    71d0:	9d 60 ff ed 	l.addi r11,r0,0xffffffed

	return ret;
}
    71d4:	44 00 48 00 	l.jr r9
    71d8:	15 00 00 00 	l.nop 0x0

000071dc <pmu_set_voltage_state>:

s32 pmu_set_voltage_state(u32 type, u32 state)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    71dc:	18 a0 00 01 	l.movhi r5,0x1

	return ret;
}

s32 pmu_set_voltage_state(u32 type, u32 state)
{
    71e0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    71e4:	a8 a5 34 40 	l.ori r5,r5,0x3440
    71e8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    71ec:	bc 05 00 00 	l.sfeqi r5,0x0
    71f0:	10 00 00 0c 	l.bf 7220 <pmu_set_voltage_state+0x44>
    71f4:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		return -ENODEV;

	if (pmu_ops_p->pmu_set_voltage_state)
    71f8:	18 a0 00 01 	l.movhi r5,0x1
    71fc:	a8 a5 33 bc 	l.ori r5,r5,0x33bc
    7200:	84 a5 00 0c 	l.lwz r5,0xc(r5)
    7204:	bc 05 00 00 	l.sfeqi r5,0x0
    7208:	10 00 00 08 	l.bf 7228 <pmu_set_voltage_state+0x4c>
    720c:	15 00 00 00 	l.nop 0x0
		ret = pmu_ops_p->pmu_set_voltage_state(type, state);

	return ret;
}
    7210:	9c 21 00 04 	l.addi r1,r1,0x4
    7214:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)

	if (is_pmu_exist() == FALSE)
		return -ENODEV;

	if (pmu_ops_p->pmu_set_voltage_state)
		ret = pmu_ops_p->pmu_set_voltage_state(type, state);
    7218:	44 00 28 00 	l.jr r5
    721c:	15 00 00 00 	l.nop 0x0
s32 pmu_set_voltage_state(u32 type, u32 state)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
		return -ENODEV;
    7220:	00 00 00 03 	l.j 722c <pmu_set_voltage_state+0x50>
    7224:	9d 60 ff ed 	l.addi r11,r0,0xffffffed
	return ret;
}

s32 pmu_set_voltage_state(u32 type, u32 state)
{
	s32 ret = OK;
    7228:	a9 65 00 00 	l.ori r11,r5,0x0

	if (pmu_ops_p->pmu_set_voltage_state)
		ret = pmu_ops_p->pmu_set_voltage_state(type, state);

	return ret;
}
    722c:	9c 21 00 04 	l.addi r1,r1,0x4
    7230:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7234:	44 00 48 00 	l.jr r9
    7238:	15 00 00 00 	l.nop 0x0

0000723c <pmu_get_voltage_state>:

s32 pmu_get_voltage_state(u32 type)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    723c:	18 60 00 01 	l.movhi r3,0x1
		return -ENODEV;

	return ret;
    7240:	9d 60 00 00 	l.addi r11,r0,0x0

s32 pmu_get_voltage_state(u32 type)
{
	s32 ret = OK;

	if (is_pmu_exist() == FALSE)
    7244:	a8 63 34 40 	l.ori r3,r3,0x3440
    7248:	84 63 00 00 	l.lwz r3,0x0(r3)
    724c:	e4 23 58 00 	l.sfne r3,r11
    7250:	10 00 00 03 	l.bf 725c <pmu_get_voltage_state+0x20>
    7254:	15 00 00 00 	l.nop 0x0
		return -ENODEV;
    7258:	9d 60 ff ed 	l.addi r11,r0,0xffffffed

	return ret;
}
    725c:	44 00 48 00 	l.jr r9
    7260:	15 00 00 00 	l.nop 0x0

00007264 <pmu_query_event>:

	if (is_pmu_exist() == FALSE)
		return OK;

	return ret;
}
    7264:	44 00 48 00 	l.jr r9
    7268:	9d 60 00 00 	l.addi r11,r0,0x0

0000726c <pmu_clear_pendings>:

	if (is_pmu_exist() == FALSE)
		return OK;

	return ret;
}
    726c:	44 00 48 00 	l.jr r9
    7270:	9d 60 00 00 	l.addi r11,r0,0x0

00007274 <pmu_chip_init>:

void pmu_chip_init(void)
{
	if (is_pmu_exist() == FALSE)
		return;
}
    7274:	44 00 48 00 	l.jr r9
    7278:	15 00 00 00 	l.nop 0x0

0000727c <pmu_reg_write>:

s32 pmu_reg_write(u8 *devaddr, u8 *regaddr, u8 *data, u32 len)
{
    727c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    7280:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7284:	8c 63 00 00 	l.lbz r3,0x0(r3)
#endif
}
    7288:	9c 21 00 04 	l.addi r1,r1,0x4
    728c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    7290:	03 ff fb ee 	l.j 6248 <twi_write>
    7294:	15 00 00 00 	l.nop 0x0

00007298 <pmu_reg_read>:
#endif
}

s32 pmu_reg_read(u8 *devaddr, u8 *regaddr, u8 *data, u32 len)
{
    7298:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    729c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    72a0:	8c 63 00 00 	l.lbz r3,0x0(r3)
#endif
}
    72a4:	9c 21 00 04 	l.addi r1,r1,0x4
    72a8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    72ac:	03 ff fb c3 	l.j 61b8 <twi_read>
    72b0:	15 00 00 00 	l.nop 0x0

000072b4 <pmu_reg_write_para>:
#endif
}

s32 pmu_reg_write_para(pmu_paras_t *para)
{
    72b4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    72b8:	a8 c3 00 00 	l.ori r6,r3,0x0
    72bc:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    72c0:	84 63 00 00 	l.lwz r3,0x0(r3)
    72c4:	84 86 00 04 	l.lwz r4,0x4(r6)
    72c8:	84 a6 00 08 	l.lwz r5,0x8(r6)
    72cc:	8c 63 00 00 	l.lbz r3,0x0(r3)
    72d0:	84 c6 00 0c 	l.lwz r6,0xc(r6)
}

s32 pmu_reg_write_para(pmu_paras_t *para)
{
	return pmu_reg_write(para->devaddr, para->regaddr, para->data, para->len);
}
    72d4:	9c 21 00 04 	l.addi r1,r1,0x4
    72d8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		data_temp = *(data + i);
		result |= rsb_write(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
	}
	return result;
#else
	return twi_write(devaddr[0], regaddr, data, len);
    72dc:	03 ff fb db 	l.j 6248 <twi_write>
    72e0:	15 00 00 00 	l.nop 0x0

000072e4 <pmu_reg_read_para>:
{
	return pmu_reg_write(para->devaddr, para->regaddr, para->data, para->len);
}

s32 pmu_reg_read_para(pmu_paras_t *para)
{
    72e4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    72e8:	a8 c3 00 00 	l.ori r6,r3,0x0
    72ec:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    72f0:	84 63 00 00 	l.lwz r3,0x0(r3)
    72f4:	84 86 00 04 	l.lwz r4,0x4(r6)
    72f8:	84 a6 00 08 	l.lwz r5,0x8(r6)
    72fc:	8c 63 00 00 	l.lbz r3,0x0(r3)
    7300:	84 c6 00 0c 	l.lwz r6,0xc(r6)
}

s32 pmu_reg_read_para(pmu_paras_t *para)
{
	return pmu_reg_read(para->devaddr, para->regaddr, para->data, para->len);
}
    7304:	9c 21 00 04 	l.addi r1,r1,0x4
    7308:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		result |= rsb_read(devaddr[i], regaddr[i], &data_temp, RSB_DATA_TYPE_BYTE);
		*(data + i) = (u8)(data_temp & 0xff);
	}
	return result;
#else
	return twi_read(devaddr[0], regaddr, data, len);
    730c:	03 ff fb ab 	l.j 61b8 <twi_read>
    7310:	15 00 00 00 	l.nop 0x0

00007314 <nmi_int_handler>:
	/**
	 * NOTE: if pmu interrupt enabled,
	 * means allow power key to power on system
	 */
	pmu_query_event(&event);
	LOG("pmu event: 0x%x\n", event);
    7314:	18 80 00 01 	l.movhi r4,0x1
{
	return pmu_reg_read(para->devaddr, para->regaddr, para->data, para->len);
}

int nmi_int_handler(void *parg __attribute__ ((__unused__)), u32 intno)
{
    7318:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    731c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	/**
	 * NOTE: if pmu interrupt enabled,
	 * means allow power key to power on system
	 */
	pmu_query_event(&event);
	LOG("pmu event: 0x%x\n", event);
    7320:	9c 60 00 02 	l.addi r3,r0,0x2
{
	return pmu_reg_read(para->devaddr, para->regaddr, para->data, para->len);
}

int nmi_int_handler(void *parg __attribute__ ((__unused__)), u32 intno)
{
    7324:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	/**
	 * NOTE: if pmu interrupt enabled,
	 * means allow power key to power on system
	 */
	pmu_query_event(&event);
	LOG("pmu event: 0x%x\n", event);
    7328:	9c 40 00 00 	l.addi r2,r0,0x0
    732c:	a8 84 27 65 	l.ori r4,r4,0x2765
    7330:	04 00 0b 22 	l.jal 9fb8 <debugger_printf>
    7334:	d4 01 10 00 	l.sw 0x0(r1),r2
	//notifier_notify(&wakeup_notify, CPUS_IRQ_MAPTO_CPUX(intno));

	pmu_clear_pendings();

	/* clear interrupt flag first */
	interrupt_clear_pending(INTC_R_NMI_IRQ);
    7338:	07 ff f5 19 	l.jal 479c <interrupt_clear_pending>
    733c:	a8 62 00 00 	l.ori r3,r2,0x0

	return TRUE;
}
    7340:	9c 21 00 0c 	l.addi r1,r1,0xc
    7344:	9d 60 00 01 	l.addi r11,r0,0x1
    7348:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    734c:	44 00 48 00 	l.jr r9
    7350:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00007354 <pmu_init>:
{
	u32 power_mode = 0;

	/* power_mode may parse from dts */
	if (power_mode == POWER_MODE_AXP) {
		pmu_exist = TRUE;
    7354:	18 60 00 01 	l.movhi r3,0x1
    7358:	9c 80 00 01 	l.addi r4,r0,0x1
    735c:	a8 63 34 40 	l.ori r3,r3,0x3440

	return TRUE;
}

s32 pmu_init(void)
{
    7360:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 power_mode = 0;

	/* power_mode may parse from dts */
	if (power_mode == POWER_MODE_AXP) {
		pmu_exist = TRUE;
    7364:	d4 03 20 00 	l.sw 0x0(r3),r4
		LOG("pmu is exist\n");
    7368:	18 80 00 01 	l.movhi r4,0x1

	return TRUE;
}

s32 pmu_init(void)
{
    736c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	u32 power_mode = 0;

	/* power_mode may parse from dts */
	if (power_mode == POWER_MODE_AXP) {
		pmu_exist = TRUE;
		LOG("pmu is exist\n");
    7370:	9c 60 00 02 	l.addi r3,r0,0x2
    7374:	04 00 0b 11 	l.jal 9fb8 <debugger_printf>
    7378:	a8 84 27 76 	l.ori r4,r4,0x2776
		pmu_exist = FALSE;
		LOG("pmu is not exist\n");
		return OK;
	}

	interrupt_clear_pending(INTC_R_NMI_IRQ);
    737c:	07 ff f5 08 	l.jal 479c <interrupt_clear_pending>
    7380:	9c 60 00 00 	l.addi r3,r0,0x0

	return OK;
}
    7384:	9c 21 00 04 	l.addi r1,r1,0x4
    7388:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    738c:	44 00 48 00 	l.jr r9
    7390:	9d 60 00 00 	l.addi r11,r0,0x0

00007394 <pmu_exit>:

s32 pmu_exit(void)
{
	return OK;
}
    7394:	44 00 48 00 	l.jr r9
    7398:	9d 60 00 00 	l.addi r11,r0,0x0

0000739c <is_pmu_exist>:

u32 is_pmu_exist(void)
{
	return pmu_exist;
}
    739c:	18 60 00 01 	l.movhi r3,0x1
    73a0:	a8 63 34 40 	l.ori r3,r3,0x3440
    73a4:	44 00 48 00 	l.jr r9
    73a8:	85 63 00 00 	l.lwz r11,0x0(r3)

000073ac <pmu_standby_init>:

s32 pmu_standby_init(void)
{
    73ac:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	struct message message_ws;
	u32 paras = GIC_R_EXTERNAL_NMI_IRQ - 32;
    73b0:	9c 60 00 67 	l.addi r3,r0,0x67
{
	return pmu_exist;
}

s32 pmu_standby_init(void)
{
    73b4:	9c 21 ff d8 	l.addi r1,r1,0xffffffd8
	struct message message_ws;
	u32 paras = GIC_R_EXTERNAL_NMI_IRQ - 32;
    73b8:	d4 01 18 20 	l.sw 0x20(r1),r3

	message_ws.paras = &paras;
    73bc:	9c 61 00 20 	l.addi r3,r1,0x20
    73c0:	d4 01 18 1c 	l.sw 0x1c(r1),r3
	set_wakeup_src(&message_ws);
    73c4:	04 00 0d 8f 	l.jal aa00 <set_wakeup_src>
    73c8:	a8 61 00 00 	l.ori r3,r1,0x0

	return OK;
}
    73cc:	9c 21 00 28 	l.addi r1,r1,0x28
    73d0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    73d4:	44 00 48 00 	l.jr r9
    73d8:	9d 60 00 00 	l.addi r11,r0,0x0

000073dc <pmu_standby_exit>:

s32 pmu_standby_exit(void)
{
    73dc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	struct message message_ws;
	u32 paras = GIC_R_EXTERNAL_NMI_IRQ - 32;
    73e0:	9c 60 00 67 	l.addi r3,r0,0x67

	return OK;
}

s32 pmu_standby_exit(void)
{
    73e4:	9c 21 ff d8 	l.addi r1,r1,0xffffffd8
	struct message message_ws;
	u32 paras = GIC_R_EXTERNAL_NMI_IRQ - 32;
    73e8:	d4 01 18 20 	l.sw 0x20(r1),r3

	message_ws.paras = &paras;
    73ec:	9c 61 00 20 	l.addi r3,r1,0x20
    73f0:	d4 01 18 1c 	l.sw 0x1c(r1),r3
	clear_wakeup_src(&message_ws);
    73f4:	04 00 0d d2 	l.jal ab3c <clear_wakeup_src>
    73f8:	a8 61 00 00 	l.ori r3,r1,0x0

	return OK;
}
    73fc:	9c 21 00 28 	l.addi r1,r1,0x28
    7400:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7404:	44 00 48 00 	l.jr r9
    7408:	9d 60 00 00 	l.addi r11,r0,0x0

0000740c <watchdog_init>:
*********************************************************************************************************
*/
s32 watchdog_init(void)
{
	/* initialize the pointer of watchdog registers */
	pwatchdog_regs = (struct watchdog_regs *)(WDOG0_REG_BASE);
    740c:	18 60 07 02 	l.movhi r3,0x702
    7410:	18 80 00 01 	l.movhi r4,0x1
    7414:	a8 63 04 00 	l.ori r3,r3,0x400
    7418:	a8 84 36 00 	l.ori r4,r4,0x3600
*
* Returns    :  OK if initialize watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_init(void)
{
    741c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	/* initialize the pointer of watchdog registers */
	pwatchdog_regs = (struct watchdog_regs *)(WDOG0_REG_BASE);
    7420:	d4 04 18 00 	l.sw 0x0(r4),r3

	/*
	 * set watchdog work mode
	 * set the watchdog0 clock source:24M/750
	 */
	pwatchdog_regs->config &= ~(0x1 << 8);
    7424:	9c 40 fe ff 	l.addi r2,r0,0xfffffeff
    7428:	84 83 00 14 	l.lwz r4,0x14(r3)
*
* Returns    :  OK if initialize watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_init(void)
{
    742c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc

	/*
	 * set watchdog work mode
	 * set the watchdog0 clock source:24M/750
	 */
	pwatchdog_regs->config &= ~(0x1 << 8);
    7430:	e0 84 10 03 	l.and r4,r4,r2
	pwatchdog_regs->config |= WDOG0_CLK_SRC_32K;

	/* watchdog0 generates a reset signal to CPUS */
	pwatchdog_regs->config &= ~(0x3 << 0);
    7434:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc

	/*
	 * set watchdog work mode
	 * set the watchdog0 clock source:24M/750
	 */
	pwatchdog_regs->config &= ~(0x1 << 8);
    7438:	d4 03 20 14 	l.sw 0x14(r3),r4
	 */
	pwatchdog_regs->mode &= ~(0xf << 4);
	pwatchdog_regs->mode |= WDOG0_INTV_VALUE_04S;

	return OK;
}
    743c:	9d 60 00 00 	l.addi r11,r0,0x0
	/*
	 * set watchdog work mode
	 * set the watchdog0 clock source:24M/750
	 */
	pwatchdog_regs->config &= ~(0x1 << 8);
	pwatchdog_regs->config |= WDOG0_CLK_SRC_32K;
    7440:	84 83 00 14 	l.lwz r4,0x14(r3)
    7444:	d4 03 20 14 	l.sw 0x14(r3),r4

	/* watchdog0 generates a reset signal to CPUS */
	pwatchdog_regs->config &= ~(0x3 << 0);
    7448:	84 83 00 14 	l.lwz r4,0x14(r3)
    744c:	e0 84 10 03 	l.and r4,r4,r2
	 * then interval time=0.5s
	 * the interval value maybe greater,
	 * then will decrease cpu performance loss
	 * set watchdog0 Interval Value:16000 cycles
	 */
	pwatchdog_regs->mode &= ~(0xf << 4);
    7450:	9c 40 ff 0f 	l.addi r2,r0,0xffffff0f
	 */
	pwatchdog_regs->config &= ~(0x1 << 8);
	pwatchdog_regs->config |= WDOG0_CLK_SRC_32K;

	/* watchdog0 generates a reset signal to CPUS */
	pwatchdog_regs->config &= ~(0x3 << 0);
    7454:	d4 03 20 14 	l.sw 0x14(r3),r4
	pwatchdog_regs->config |= WDOG0_RST_SYS;
    7458:	84 83 00 14 	l.lwz r4,0x14(r3)
    745c:	a8 84 00 01 	l.ori r4,r4,0x1
    7460:	d4 03 20 14 	l.sw 0x14(r3),r4
	 * then interval time=0.5s
	 * the interval value maybe greater,
	 * then will decrease cpu performance loss
	 * set watchdog0 Interval Value:16000 cycles
	 */
	pwatchdog_regs->mode &= ~(0xf << 4);
    7464:	84 83 00 18 	l.lwz r4,0x18(r3)
    7468:	e0 84 10 03 	l.and r4,r4,r2
    746c:	d4 03 20 18 	l.sw 0x18(r3),r4
	pwatchdog_regs->mode |= WDOG0_INTV_VALUE_04S;
    7470:	84 83 00 18 	l.lwz r4,0x18(r3)
    7474:	a8 84 00 40 	l.ori r4,r4,0x40
    7478:	d4 03 20 18 	l.sw 0x18(r3),r4

	return OK;
}
    747c:	9c 21 00 04 	l.addi r1,r1,0x4
    7480:	44 00 48 00 	l.jr r9
    7484:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00007488 <watchdog_exit>:
*********************************************************************************************************
*/
s32 watchdog_exit(void)
{
	/* release regs addrress */
	pwatchdog_regs = NULL;
    7488:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if exit watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_exit(void)
{
    748c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	/* release regs addrress */
	pwatchdog_regs = NULL;
    7490:	a8 63 36 00 	l.ori r3,r3,0x3600
    7494:	9c 40 00 00 	l.addi r2,r0,0x0
*
* Returns    :  OK if exit watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_exit(void)
{
    7498:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	/* release regs addrress */
	pwatchdog_regs = NULL;
    749c:	d4 03 10 00 	l.sw 0x0(r3),r2

	return OK;
}
    74a0:	9c 21 00 04 	l.addi r1,r1,0x4
    74a4:	a9 62 00 00 	l.ori r11,r2,0x0
    74a8:	44 00 48 00 	l.jr r9
    74ac:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

000074b0 <watchdog_enable>:
*********************************************************************************************************
*/
s32 watchdog_enable(void)
{
	/* enable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    74b0:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if enable watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_enable(void)
{
    74b4:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	/* enable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    74b8:	a8 63 36 00 	l.ori r3,r3,0x3600
    74bc:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    74c0:	84 63 00 00 	l.lwz r3,0x0(r3)
*
* Returns    :  OK if enable watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_enable(void)
{
    74c4:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	/* enable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    74c8:	84 83 00 18 	l.lwz r4,0x18(r3)
	pwatchdog_regs->mode |= WDOG0_EN;

	return OK;
}
    74cc:	9d 60 00 00 	l.addi r11,r0,0x0
*********************************************************************************************************
*/
s32 watchdog_enable(void)
{
	/* enable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    74d0:	e0 84 10 03 	l.and r4,r4,r2
    74d4:	d4 03 20 18 	l.sw 0x18(r3),r4
	pwatchdog_regs->mode |= WDOG0_EN;
    74d8:	84 83 00 18 	l.lwz r4,0x18(r3)
    74dc:	a8 84 00 01 	l.ori r4,r4,0x1
    74e0:	d4 03 20 18 	l.sw 0x18(r3),r4

	return OK;
}
    74e4:	9c 21 00 04 	l.addi r1,r1,0x4
    74e8:	44 00 48 00 	l.jr r9
    74ec:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

000074f0 <watchdog_disable>:
*********************************************************************************************************
*/
s32 watchdog_disable(void)
{
	/* disable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    74f0:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if disable watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_disable(void)
{
    74f4:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	/* disable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    74f8:	a8 63 36 00 	l.ori r3,r3,0x3600
    74fc:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    7500:	84 63 00 00 	l.lwz r3,0x0(r3)
*
* Returns    :  OK if disable watchdog succeeded, others if failed.
*********************************************************************************************************
*/
s32 watchdog_disable(void)
{
    7504:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	/* disable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    7508:	84 83 00 18 	l.lwz r4,0x18(r3)
	pwatchdog_regs->mode |= WDOG0_DIS;

	return OK;
}
    750c:	9d 60 00 00 	l.addi r11,r0,0x0
*********************************************************************************************************
*/
s32 watchdog_disable(void)
{
	/* disable the watchdog0 */
	pwatchdog_regs->mode &= ~(0x1 << 0);
    7510:	e0 84 10 03 	l.and r4,r4,r2
    7514:	d4 03 20 18 	l.sw 0x18(r3),r4
	pwatchdog_regs->mode |= WDOG0_DIS;
    7518:	84 83 00 18 	l.lwz r4,0x18(r3)
    751c:	d4 03 20 18 	l.sw 0x18(r3),r4

	return OK;
}
    7520:	9c 21 00 04 	l.addi r1,r1,0x4
    7524:	44 00 48 00 	l.jr r9
    7528:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000752c <itoa>:
#include "library_i.h"

static const char digit_string[] = "0123456789ABCDEF";

char *itoa(int value, char *string, int radix)
{
    752c:	d7 e1 17 e0 	l.sw 0xffffffe0(r1),r2
    7530:	d7 e1 77 e4 	l.sw 0xffffffe4(r1),r14
    7534:	d7 e1 a7 f0 	l.sw 0xfffffff0(r1),r20
    7538:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    753c:	d7 e1 87 e8 	l.sw 0xffffffe8(r1),r16
    7540:	d7 e1 97 ec 	l.sw 0xffffffec(r1),r18
    7544:	d7 e1 b7 f4 	l.sw 0xfffffff4(r1),r22
    7548:	d7 e1 c7 f8 	l.sw 0xfffffff8(r1),r24
    754c:	a8 43 00 00 	l.ori r2,r3,0x0
    7550:	9c 21 ff d0 	l.addi r1,r1,0xffffffd0
    7554:	a9 c4 00 00 	l.ori r14,r4,0x0
	char stack[16];
	int  negative = 0;          /* defualt is positive value */
	int  i;
	int  j;

	if (value == 0) {
    7558:	bc 23 00 00 	l.sfnei r3,0x0
    755c:	10 00 00 06 	l.bf 7574 <itoa+0x48>
    7560:	aa 85 00 00 	l.ori r20,r5,0x0
		/* zero */
		string[0] = '0';
    7564:	9c 60 00 30 	l.addi r3,r0,0x30
		string[1] = '\0';
    7568:	d8 04 10 01 	l.sb 0x1(r4),r2
		return string;
    756c:	00 00 00 31 	l.j 7630 <itoa+0x104>
    7570:	d8 04 18 00 	l.sb 0x0(r4),r3
static const char digit_string[] = "0123456789ABCDEF";

char *itoa(int value, char *string, int radix)
{
	char stack[16];
	int  negative = 0;          /* defualt is positive value */
    7574:	9e 40 00 00 	l.addi r18,r0,0x0
		string[0] = '0';
		string[1] = '\0';
		return string;
	}

	if (value < 0) {
    7578:	e5 63 90 00 	l.sfges r3,r18
    757c:	10 00 00 04 	l.bf 758c <itoa+0x60>
    7580:	15 00 00 00 	l.nop 0x0
		/* 'value' is negative, convert to postive first */
		negative = 1;
		value = -value ;
    7584:	e0 40 18 02 	l.sub r2,r0,r3
		return string;
	}

	if (value < 0) {
		/* 'value' is negative, convert to postive first */
		negative = 1;
    7588:	9e 40 00 01 	l.addi r18,r0,0x1
		value = -value ;
	}

	for (i = 0; value > 0; ++i) {
    758c:	9e 00 00 00 	l.addi r16,r0,0x0

#include "library_i.h"

static const char digit_string[] = "0123456789ABCDEF";

char *itoa(int value, char *string, int radix)
    7590:	00 00 00 03 	l.j 759c <itoa+0x70>
    7594:	aa c1 00 00 	l.ori r22,r1,0x0
		/* 'value' is negative, convert to postive first */
		negative = 1;
		value = -value ;
	}

	for (i = 0; value > 0; ++i) {
    7598:	aa 03 00 00 	l.ori r16,r3,0x0
		/* characters in reverse order are put in 'stack'. */
		stack[i] = digit_string[value % radix];
    759c:	a8 62 00 00 	l.ori r3,r2,0x0
    75a0:	a8 94 00 00 	l.ori r4,r20,0x0
    75a4:	04 00 13 79 	l.jal c388 <__modsi3>
    75a8:	e3 16 80 00 	l.add r24,r22,r16
    75ac:	18 c0 00 01 	l.movhi r6,0x1
		value /= radix;
    75b0:	a8 62 00 00 	l.ori r3,r2,0x0
		value = -value ;
	}

	for (i = 0; value > 0; ++i) {
		/* characters in reverse order are put in 'stack'. */
		stack[i] = digit_string[value % radix];
    75b4:	a8 c6 30 d4 	l.ori r6,r6,0x30d4
		value /= radix;
    75b8:	a8 94 00 00 	l.ori r4,r20,0x0
		value = -value ;
	}

	for (i = 0; value > 0; ++i) {
		/* characters in reverse order are put in 'stack'. */
		stack[i] = digit_string[value % radix];
    75bc:	e1 6b 30 00 	l.add r11,r11,r6
    75c0:	8d 6b 00 00 	l.lbz r11,0x0(r11)
		value /= radix;
    75c4:	04 00 13 50 	l.jal c304 <__divsi3>
    75c8:	d8 18 58 00 	l.sb 0x0(r24),r11
		/* 'value' is negative, convert to postive first */
		negative = 1;
		value = -value ;
	}

	for (i = 0; value > 0; ++i) {
    75cc:	9c 70 00 01 	l.addi r3,r16,0x1
    75d0:	bd 4b 00 00 	l.sfgtsi r11,0x0
    75d4:	13 ff ff f1 	l.bf 7598 <itoa+0x6c>
    75d8:	a8 4b 00 00 	l.ori r2,r11,0x0
		value /= radix;
	}

	/* restore reversed order result to user string */
	j = 0;
	if (negative) {
    75dc:	bc 12 00 00 	l.sfeqi r18,0x0
    75e0:	10 00 00 05 	l.bf 75f4 <itoa+0xc8>
    75e4:	a8 52 00 00 	l.ori r2,r18,0x0
		/* add sign at first charset. */
		string[j++] = '-';
    75e8:	9c 40 00 2d 	l.addi r2,r0,0x2d
    75ec:	d8 0e 10 00 	l.sb 0x0(r14),r2
    75f0:	9c 40 00 01 	l.addi r2,r0,0x1

#include "library_i.h"

static const char digit_string[] = "0123456789ABCDEF";

char *itoa(int value, char *string, int radix)
    75f4:	e0 61 80 00 	l.add r3,r1,r16
    75f8:	e0 8e 10 00 	l.add r4,r14,r2
	j = 0;
	if (negative) {
		/* add sign at first charset. */
		string[j++] = '-';
	}
	for (--i; i >= 0; --i, ++j) {
    75fc:	00 00 00 06 	l.j 7614 <itoa+0xe8>
    7600:	9c a1 ff ff 	l.addi r5,r1,0xffffffff
		string[j] = stack[i];
    7604:	8c c3 00 00 	l.lbz r6,0x0(r3)
    7608:	9c 63 ff ff 	l.addi r3,r3,0xffffffff
    760c:	d8 04 30 00 	l.sb 0x0(r4),r6
    7610:	9c 84 00 01 	l.addi r4,r4,0x1
	j = 0;
	if (negative) {
		/* add sign at first charset. */
		string[j++] = '-';
	}
	for (--i; i >= 0; --i, ++j) {
    7614:	e4 23 28 00 	l.sfne r3,r5
    7618:	13 ff ff fb 	l.bf 7604 <itoa+0xd8>
    761c:	15 00 00 00 	l.nop 0x0
		string[j] = stack[i];
	}
	/* must end with '\0'. */
	string[j] = '\0';
    7620:	e0 4e 10 00 	l.add r2,r14,r2
    7624:	e2 02 80 00 	l.add r16,r2,r16
    7628:	9c 40 00 00 	l.addi r2,r0,0x0
    762c:	d8 10 10 01 	l.sb 0x1(r16),r2

	return string;
}
    7630:	9c 21 00 30 	l.addi r1,r1,0x30
    7634:	a9 6e 00 00 	l.ori r11,r14,0x0
    7638:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    763c:	84 41 ff e0 	l.lwz r2,0xffffffe0(r1)
    7640:	85 c1 ff e4 	l.lwz r14,0xffffffe4(r1)
    7644:	86 01 ff e8 	l.lwz r16,0xffffffe8(r1)
    7648:	86 41 ff ec 	l.lwz r18,0xffffffec(r1)
    764c:	86 81 ff f0 	l.lwz r20,0xfffffff0(r1)
    7650:	86 c1 ff f4 	l.lwz r22,0xfffffff4(r1)
    7654:	44 00 48 00 	l.jr r9
    7658:	87 01 ff f8 	l.lwz r24,0xfffffff8(r1)

0000765c <utoa>:

char *utoa(unsigned int value, char *string, int radix)
{
    765c:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    7660:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    7664:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    7668:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    766c:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    7670:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    7674:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
	char stack[16];
	int  i;
	int  j;

	if (value == 0) {
    7678:	9e 00 00 00 	l.addi r16,r0,0x0

	return string;
}

char *utoa(unsigned int value, char *string, int radix)
{
    767c:	9c 21 ff d4 	l.addi r1,r1,0xffffffd4
    7680:	a8 43 00 00 	l.ori r2,r3,0x0
    7684:	a9 c4 00 00 	l.ori r14,r4,0x0
    7688:	aa 85 00 00 	l.ori r20,r5,0x0
	char stack[16];
	int  i;
	int  j;

	if (value == 0) {
    768c:	e4 23 80 00 	l.sfne r3,r16
    7690:	10 00 00 07 	l.bf 76ac <utoa+0x50>
    7694:	aa c1 00 00 	l.ori r22,r1,0x0
		/* zero */
		string[0] = '0';
    7698:	9c 60 00 30 	l.addi r3,r0,0x30
		string[1] = '\0';
    769c:	d8 04 10 01 	l.sb 0x1(r4),r2
		return string;
    76a0:	00 00 00 21 	l.j 7724 <utoa+0xc8>
    76a4:	d8 04 18 00 	l.sb 0x0(r4),r3
	}

	for (i = 0; value > 0; ++i) {
    76a8:	aa 03 00 00 	l.ori r16,r3,0x0
		/* characters in reverse order are put in 'stack'. */
		stack[i] = digit_string[value % radix];
    76ac:	a8 62 00 00 	l.ori r3,r2,0x0
    76b0:	a8 94 00 00 	l.ori r4,r20,0x0
    76b4:	04 00 13 2d 	l.jal c368 <__umodsi3>
    76b8:	e2 56 80 00 	l.add r18,r22,r16
    76bc:	18 a0 00 01 	l.movhi r5,0x1
		value /= radix;
    76c0:	a8 62 00 00 	l.ori r3,r2,0x0
		return string;
	}

	for (i = 0; value > 0; ++i) {
		/* characters in reverse order are put in 'stack'. */
		stack[i] = digit_string[value % radix];
    76c4:	a8 a5 30 d4 	l.ori r5,r5,0x30d4
		value /= radix;
    76c8:	a8 94 00 00 	l.ori r4,r20,0x0
		return string;
	}

	for (i = 0; value > 0; ++i) {
		/* characters in reverse order are put in 'stack'. */
		stack[i] = digit_string[value % radix];
    76cc:	e1 6b 28 00 	l.add r11,r11,r5
    76d0:	8d 6b 00 00 	l.lbz r11,0x0(r11)
		value /= radix;
    76d4:	04 00 12 cd 	l.jal c208 <__udivsi3>
    76d8:	d8 12 58 00 	l.sb 0x0(r18),r11
		string[0] = '0';
		string[1] = '\0';
		return string;
	}

	for (i = 0; value > 0; ++i) {
    76dc:	9c 70 00 01 	l.addi r3,r16,0x1
    76e0:	bc 2b 00 00 	l.sfnei r11,0x0
    76e4:	13 ff ff f1 	l.bf 76a8 <utoa+0x4c>
    76e8:	a8 4b 00 00 	l.ori r2,r11,0x0
	string[j] = '\0';

	return string;
}

char *utoa(unsigned int value, char *string, int radix)
    76ec:	a8 52 00 00 	l.ori r2,r18,0x0
		string[0] = '0';
		string[1] = '\0';
		return string;
	}

	for (i = 0; value > 0; ++i) {
    76f0:	a8 6e 00 00 	l.ori r3,r14,0x0
		stack[i] = digit_string[value % radix];
		value /= radix;
	}

	/* restore reversed order result to user string */
	for (--i, j = 0; i >= 0; --i, ++j) {
    76f4:	00 00 00 06 	l.j 770c <utoa+0xb0>
    76f8:	9c 81 ff ff 	l.addi r4,r1,0xffffffff
		string[j] = stack[i];
    76fc:	8c a2 00 00 	l.lbz r5,0x0(r2)
    7700:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    7704:	d8 03 28 00 	l.sb 0x0(r3),r5
    7708:	9c 63 00 01 	l.addi r3,r3,0x1
		stack[i] = digit_string[value % radix];
		value /= radix;
	}

	/* restore reversed order result to user string */
	for (--i, j = 0; i >= 0; --i, ++j) {
    770c:	e4 22 20 00 	l.sfne r2,r4
    7710:	13 ff ff fb 	l.bf 76fc <utoa+0xa0>
    7714:	15 00 00 00 	l.nop 0x0
		string[j] = stack[i];
	}
	/* must end with '\0'. */
	string[j] = '\0';
    7718:	e2 0e 80 00 	l.add r16,r14,r16
    771c:	9c 40 00 00 	l.addi r2,r0,0x0
    7720:	d8 10 10 01 	l.sb 0x1(r16),r2

	return string;
}
    7724:	9c 21 00 2c 	l.addi r1,r1,0x2c
    7728:	a9 6e 00 00 	l.ori r11,r14,0x0
    772c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7730:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    7734:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    7738:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    773c:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    7740:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    7744:	44 00 48 00 	l.jr r9
    7748:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

0000774c <hexdump>:

void hexdump(char *name, char *base, int len)
{
    774c:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    7750:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    7754:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    7758:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    775c:	a8 44 00 00 	l.ori r2,r4,0x0
    7760:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	u32 i;
	printk("%s :\n", name);
    7764:	18 80 00 01 	l.movhi r4,0x1
    7768:	d4 01 18 00 	l.sw 0x0(r1),r3
    776c:	a8 84 27 84 	l.ori r4,r4,0x2784
    7770:	9c 60 00 0f 	l.addi r3,r0,0xf

	return string;
}

void hexdump(char *name, char *base, int len)
{
    7774:	aa 05 00 00 	l.ori r16,r5,0x0
	u32 i;
	printk("%s :\n", name);
    7778:	04 00 0a 10 	l.jal 9fb8 <debugger_printf>
    777c:	9d c0 00 00 	l.addi r14,r0,0x0
	for (i = 0; i < len; i += 4) {
    7780:	00 00 00 12 	l.j 77c8 <hexdump+0x7c>
    7784:	e4 8e 80 00 	l.sfltu r14,r16
		if (!(i&0xf))
    7788:	bc 23 00 00 	l.sfnei r3,0x0
    778c:	10 00 00 06 	l.bf 77a4 <hexdump+0x58>
    7790:	18 80 00 01 	l.movhi r4,0x1
		printk("\n0x%8p : ", base + i);
    7794:	9c 60 00 0f 	l.addi r3,r0,0xf
    7798:	a8 84 27 8a 	l.ori r4,r4,0x278a
    779c:	04 00 0a 07 	l.jal 9fb8 <debugger_printf>
    77a0:	d4 01 10 00 	l.sw 0x0(r1),r2
		printk("%8x ", readl(base + i));
    77a4:	84 62 00 00 	l.lwz r3,0x0(r2)
    77a8:	18 80 00 01 	l.movhi r4,0x1
    77ac:	d4 01 18 00 	l.sw 0x0(r1),r3
    77b0:	a8 84 27 94 	l.ori r4,r4,0x2794
    77b4:	9c 60 00 0f 	l.addi r3,r0,0xf

void hexdump(char *name, char *base, int len)
{
	u32 i;
	printk("%s :\n", name);
	for (i = 0; i < len; i += 4) {
    77b8:	9d ce 00 04 	l.addi r14,r14,0x4
		if (!(i&0xf))
		printk("\n0x%8p : ", base + i);
		printk("%8x ", readl(base + i));
    77bc:	04 00 09 ff 	l.jal 9fb8 <debugger_printf>
    77c0:	9c 42 00 04 	l.addi r2,r2,0x4

void hexdump(char *name, char *base, int len)
{
	u32 i;
	printk("%s :\n", name);
	for (i = 0; i < len; i += 4) {
    77c4:	e4 8e 80 00 	l.sfltu r14,r16
    77c8:	13 ff ff f0 	l.bf 7788 <hexdump+0x3c>
    77cc:	a4 6e 00 0f 	l.andi r3,r14,0xf
		if (!(i&0xf))
		printk("\n0x%8p : ", base + i);
		printk("%8x ", readl(base + i));
	}
	printk("\n");
}
    77d0:	9c 21 00 14 	l.addi r1,r1,0x14
	for (i = 0; i < len; i += 4) {
		if (!(i&0xf))
		printk("\n0x%8p : ", base + i);
		printk("%8x ", readl(base + i));
	}
	printk("\n");
    77d4:	18 80 00 01 	l.movhi r4,0x1
    77d8:	9c 60 00 0f 	l.addi r3,r0,0xf
    77dc:	a8 84 2f a2 	l.ori r4,r4,0x2fa2
}
    77e0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    77e4:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    77e8:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
	for (i = 0; i < len; i += 4) {
		if (!(i&0xf))
		printk("\n0x%8p : ", base + i);
		printk("%8x ", readl(base + i));
	}
	printk("\n");
    77ec:	00 00 09 f3 	l.j 9fb8 <debugger_printf>
    77f0:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

000077f4 <hstr2int>:

unsigned int hstr2int(const char *str, unsigned int len)
{
	unsigned int i = 0, tmp = 0;

	if ((str[0] == '0') && (str[1] == 'x')) {
    77f4:	90 a3 00 00 	l.lbs r5,0x0(r3)
    77f8:	bc 25 00 30 	l.sfnei r5,0x30
    77fc:	10 00 00 23 	l.bf 7888 <hstr2int+0x94>
    7800:	9d 60 00 00 	l.addi r11,r0,0x0
    7804:	90 a3 00 01 	l.lbs r5,0x1(r3)
    7808:	bc 25 00 78 	l.sfnei r5,0x78
    780c:	10 00 00 20 	l.bf 788c <hstr2int+0x98>
    7810:	bc 24 00 00 	l.sfnei r4,0x0
		str += 2;
    7814:	9c 63 00 02 	l.addi r3,r3,0x2
		len -= 2;
    7818:	00 00 00 1c 	l.j 7888 <hstr2int+0x94>
    781c:	9c 84 ff fe 	l.addi r4,r4,0xfffffffe
	}
	while (len--) {
		if (str[i] >= '0' && str[i] <= '9')
    7820:	90 a3 00 00 	l.lbs r5,0x0(r3)
    7824:	a4 c5 00 ff 	l.andi r6,r5,0xff
    7828:	9c e6 ff d0 	l.addi r7,r6,0xffffffd0
    782c:	a4 e7 00 ff 	l.andi r7,r7,0xff
    7830:	bc 47 00 09 	l.sfgtui r7,0x9
    7834:	10 00 00 05 	l.bf 7848 <hstr2int+0x54>
    7838:	9c e6 ff bf 	l.addi r7,r6,0xffffffbf
			tmp = tmp * 16 + (str[i] - '0');
    783c:	b9 6b 00 04 	l.slli r11,r11,0x4
    7840:	00 00 00 0f 	l.j 787c <hstr2int+0x88>
    7844:	9c a5 ff d0 	l.addi r5,r5,0xffffffd0
		else if (str[i] >= 'A' && str[i] <= 'F')
    7848:	a4 e7 00 ff 	l.andi r7,r7,0xff
    784c:	bc 47 00 05 	l.sfgtui r7,0x5
    7850:	10 00 00 05 	l.bf 7864 <hstr2int+0x70>
    7854:	15 00 00 00 	l.nop 0x0
			tmp = tmp * 16 + (str[i] - 'A') + 10;
    7858:	b9 6b 00 04 	l.slli r11,r11,0x4
    785c:	00 00 00 08 	l.j 787c <hstr2int+0x88>
    7860:	9c a5 ff c9 	l.addi r5,r5,0xffffffc9
		else if (str[i] >= 'a' && str[i] <= 'f')
    7864:	9c c6 ff 9f 	l.addi r6,r6,0xffffff9f
    7868:	a4 c6 00 ff 	l.andi r6,r6,0xff
    786c:	bc 46 00 05 	l.sfgtui r6,0x5
    7870:	10 00 00 09 	l.bf 7894 <hstr2int+0xa0>
    7874:	9c a5 ff a9 	l.addi r5,r5,0xffffffa9
			tmp = tmp * 16 + (str[i] - 'a') + 10;
    7878:	b9 6b 00 04 	l.slli r11,r11,0x4
    787c:	e1 65 58 00 	l.add r11,r5,r11
    7880:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    7884:	9c 63 00 01 	l.addi r3,r3,0x1

	if ((str[0] == '0') && (str[1] == 'x')) {
		str += 2;
		len -= 2;
	}
	while (len--) {
    7888:	bc 24 00 00 	l.sfnei r4,0x0
    788c:	13 ff ff e5 	l.bf 7820 <hstr2int+0x2c>
    7890:	15 00 00 00 	l.nop 0x0
			break;
		i++;
	}

	return tmp;
}
    7894:	44 00 48 00 	l.jr r9
    7898:	15 00 00 00 	l.nop 0x0

0000789c <dstr2int>:

unsigned int dstr2int(const char *str, unsigned int len)
{
	unsigned int i = 0, tmp = 0;

	while (len--) {
    789c:	00 00 00 0d 	l.j 78d0 <dstr2int+0x34>
    78a0:	9d 60 00 00 	l.addi r11,r0,0x0
		if (str[i] >= '0' && str[i] <= '9')
    78a4:	90 a3 00 00 	l.lbs r5,0x0(r3)
    78a8:	9c a5 ff d0 	l.addi r5,r5,0xffffffd0
    78ac:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    78b0:	a4 c5 00 ff 	l.andi r6,r5,0xff
    78b4:	bc 46 00 09 	l.sfgtui r6,0x9
    78b8:	10 00 00 09 	l.bf 78dc <dstr2int+0x40>
    78bc:	9c 63 00 01 	l.addi r3,r3,0x1
			tmp = tmp * 10 + (str[i] - '0');
    78c0:	e0 cb 58 00 	l.add r6,r11,r11
    78c4:	b9 6b 00 03 	l.slli r11,r11,0x3
    78c8:	e1 66 58 00 	l.add r11,r6,r11
    78cc:	e1 65 58 00 	l.add r11,r5,r11

unsigned int dstr2int(const char *str, unsigned int len)
{
	unsigned int i = 0, tmp = 0;

	while (len--) {
    78d0:	bc 24 00 00 	l.sfnei r4,0x0
    78d4:	13 ff ff f4 	l.bf 78a4 <dstr2int+0x8>
    78d8:	15 00 00 00 	l.nop 0x0
			break;
		i++;
	}

	return tmp;
}
    78dc:	44 00 48 00 	l.jr r9
    78e0:	15 00 00 00 	l.nop 0x0

000078e4 <strlen>:
/*
 * strlen
 * returns number of characters in s (not including terminating null character)
 */
size_t strlen(const char *s)
{
    78e4:	a8 83 00 00 	l.ori r4,r3,0x0
	const char *sc;

	for (sc = s; *sc != '\0'; ++sc)
    78e8:	90 a4 00 00 	l.lbs r5,0x0(r4)
    78ec:	bc 25 00 00 	l.sfnei r5,0x0
    78f0:	13 ff ff fe 	l.bf 78e8 <strlen+0x4>
    78f4:	9c 84 00 01 	l.addi r4,r4,0x1
    78f8:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
		;/* nothing */

	return sc - s;
}
    78fc:	44 00 48 00 	l.jr r9
    7900:	e1 64 18 02 	l.sub r11,r4,r3

00007904 <strnlen>:

size_t strnlen(const char *s, size_t n)
{
    7904:	a8 a3 00 00 	l.ori r5,r3,0x0
	const char *sc;

	for (sc = s; ((sc - s) < n) && (*sc != '\0'); ++sc)
    7908:	e1 65 18 02 	l.sub r11,r5,r3
    790c:	e4 6b 20 00 	l.sfgeu r11,r4
    7910:	10 00 00 07 	l.bf 792c <strnlen+0x28>
    7914:	15 00 00 00 	l.nop 0x0
    7918:	90 c5 00 00 	l.lbs r6,0x0(r5)
    791c:	bc 26 00 00 	l.sfnei r6,0x0
    7920:	13 ff ff fa 	l.bf 7908 <strnlen+0x4>
    7924:	9c a5 00 01 	l.addi r5,r5,0x1
    7928:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
		;

	return sc - s;
}
    792c:	44 00 48 00 	l.jr r9
    7930:	15 00 00 00 	l.nop 0x0

00007934 <strcpy>:
 */
char *strcpy(char *dest, const char *src)
{
	char *tmp = dest;

	while ((*dest++ = *src++) != '\0')
    7934:	9c a0 00 00 	l.addi r5,r0,0x0
_PTR	 _EXFUN(memset,(_PTR, int, size_t));
char 	*_EXFUN(strcat,(char *, const char *));
char 	*_EXFUN(strchr,(const char *, int));
int	 _EXFUN(strcmp,(const char *, const char *));
int	 _EXFUN(strcoll,(const char *, const char *));
char 	*_EXFUN(strcpy,(char *, const char *));
    7938:	e0 c4 28 00 	l.add r6,r4,r5
    793c:	e0 e3 28 00 	l.add r7,r3,r5
    7940:	90 c6 00 00 	l.lbs r6,0x0(r6)
    7944:	d8 07 30 00 	l.sb 0x0(r7),r6
    7948:	bc 26 00 00 	l.sfnei r6,0x0
    794c:	13 ff ff fb 	l.bf 7938 <strcpy+0x4>
    7950:	9c a5 00 01 	l.addi r5,r5,0x1
		;/* nothing */

	return tmp;
}
    7954:	44 00 48 00 	l.jr r9
    7958:	a9 63 00 00 	l.ori r11,r3,0x0

0000795c <strncat>:
  return tmp;
}
*/

char *strncat(char *dest, const char *src, size_t count)
{
    795c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	char *tmp = dest;

	if (count) {
    7960:	a8 c3 00 00 	l.ori r6,r3,0x0
    7964:	bc 05 00 00 	l.sfeqi r5,0x0
    7968:	0c 00 00 04 	l.bnf 7978 <strncat+0x1c>
    796c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
				break;
			}
		}
	}
	return tmp;
}
    7970:	00 00 00 16 	l.j 79c8 <strncat+0x6c>
    7974:	9c 21 00 04 	l.addi r1,r1,0x4
char *strncat(char *dest, const char *src, size_t count)
{
	char *tmp = dest;

	if (count) {
		while (*dest)
    7978:	90 e6 00 00 	l.lbs r7,0x0(r6)
    797c:	bc 27 00 00 	l.sfnei r7,0x0
    7980:	13 ff ff fe 	l.bf 7978 <strncat+0x1c>
    7984:	9c c6 00 01 	l.addi r6,r6,0x1
    7988:	9c c6 ff ff 	l.addi r6,r6,0xffffffff
size_t	 _EXFUN(strcspn,(const char *, const char *));
char 	*_EXFUN(strerror,(int));
size_t	 _EXFUN(strlen,(const char *));
char 	*_EXFUN(strncat,(char *, const char *, size_t));
    798c:	00 00 00 0a 	l.j 79b4 <strncat+0x58>
    7990:	e1 04 38 00 	l.add r8,r4,r7
			dest++;
		while ((*dest++ = *src++) != 0) {
    7994:	9c e7 00 01 	l.addi r7,r7,0x1
			if (--count == 0) {
    7998:	e4 25 38 00 	l.sfne r5,r7
    799c:	10 00 00 05 	l.bf 79b0 <strncat+0x54>
    79a0:	9c c6 00 01 	l.addi r6,r6,0x1
				*dest = '\0';
    79a4:	9c 40 00 00 	l.addi r2,r0,0x0
				break;
    79a8:	00 00 00 07 	l.j 79c4 <strncat+0x68>
    79ac:	d8 06 10 00 	l.sb 0x0(r6),r2
    79b0:	e1 04 38 00 	l.add r8,r4,r7
	char *tmp = dest;

	if (count) {
		while (*dest)
			dest++;
		while ((*dest++ = *src++) != 0) {
    79b4:	91 08 00 00 	l.lbs r8,0x0(r8)
    79b8:	bc 28 00 00 	l.sfnei r8,0x0
    79bc:	13 ff ff f6 	l.bf 7994 <strncat+0x38>
    79c0:	d8 06 40 00 	l.sb 0x0(r6),r8
				break;
			}
		}
	}
	return tmp;
}
    79c4:	9c 21 00 04 	l.addi r1,r1,0x4
    79c8:	a9 63 00 00 	l.ori r11,r3,0x0
    79cc:	44 00 48 00 	l.jr r9
    79d0:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

000079d4 <strcmp>:

int strcmp(const char *cs, const char *ct)
{
    79d4:	9c c0 00 00 	l.addi r6,r0,0x0
_PTR 	 _EXFUN(memcpy,(_PTR, const _PTR, size_t));
_PTR	 _EXFUN(memmove,(_PTR, const _PTR, size_t));
_PTR	 _EXFUN(memset,(_PTR, int, size_t));
char 	*_EXFUN(strcat,(char *, const char *));
char 	*_EXFUN(strchr,(const char *, int));
int	 _EXFUN(strcmp,(const char *, const char *));
    79d8:	e0 a3 30 00 	l.add r5,r3,r6
    79dc:	e0 e4 30 00 	l.add r7,r4,r6
	unsigned char c1, c2;

	while (1) {
		c1 = *cs++;
    79e0:	8c a5 00 00 	l.lbz r5,0x0(r5)
		c2 = *ct++;
    79e4:	8c e7 00 00 	l.lbz r7,0x0(r7)
		if (c1 != c2)
    79e8:	e4 05 38 00 	l.sfeq r5,r7
    79ec:	10 00 00 07 	l.bf 7a08 <strcmp+0x34>
    79f0:	bc 25 00 00 	l.sfnei r5,0x0
			return c1 < c2 ? -1 : 1;
    79f4:	e4 65 38 00 	l.sfgeu r5,r7
    79f8:	10 00 00 07 	l.bf 7a14 <strcmp+0x40>
    79fc:	9d 60 00 01 	l.addi r11,r0,0x1
    7a00:	00 00 00 05 	l.j 7a14 <strcmp+0x40>
    7a04:	9d 60 ff ff 	l.addi r11,r0,0xffffffff
		if (!c1)
    7a08:	13 ff ff f4 	l.bf 79d8 <strcmp+0x4>
    7a0c:	9c c6 00 01 	l.addi r6,r6,0x1
			break;
	}
	return 0;
    7a10:	a9 65 00 00 	l.ori r11,r5,0x0
}
    7a14:	44 00 48 00 	l.jr r9
    7a18:	15 00 00 00 	l.nop 0x0

00007a1c <strchr>:

char *strchr(const char *s, int c)
{
	const char *p = s;
	while (*p) {
		if (*p == (char)c)
    7a1c:	b8 84 00 18 	l.slli r4,r4,0x18
*/

char *strchr(const char *s, int c)
{
	const char *p = s;
	while (*p) {
    7a20:	00 00 00 05 	l.j 7a34 <strchr+0x18>
    7a24:	b8 84 00 98 	l.srai r4,r4,0x18
		if (*p == (char)c)
    7a28:	10 00 00 08 	l.bf 7a48 <strchr+0x2c>
    7a2c:	15 00 00 00 	l.nop 0x0
			return (char *)p;
		else
			p++;
    7a30:	9c 63 00 01 	l.addi r3,r3,0x1
*/

char *strchr(const char *s, int c)
{
	const char *p = s;
	while (*p) {
    7a34:	90 a3 00 00 	l.lbs r5,0x0(r3)
    7a38:	bc 25 00 00 	l.sfnei r5,0x0
    7a3c:	13 ff ff fb 	l.bf 7a28 <strchr+0xc>
    7a40:	e4 05 20 00 	l.sfeq r5,r4
			return (char *)p;
		else
			p++;
	}

	return 0;
    7a44:	a8 65 00 00 	l.ori r3,r5,0x0

}
    7a48:	44 00 48 00 	l.jr r9
    7a4c:	a9 63 00 00 	l.ori r11,r3,0x0

00007a50 <memcpy>:
{
	char *cs;
	char *cd;

	/* check if 'src' and 'dest' are on LONG boundaries */
	if (0x03 & ((unsigned long)dest | (unsigned long)src)) { /* only for 32 archtecture plarform */
    7a50:	e0 e4 18 04 	l.or r7,r4,r3

}

/* Basic mem functions */
void *memcpy(void *dest, const void *src, size_t n)
{
    7a54:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	char *cs;
	char *cd;

	/* check if 'src' and 'dest' are on LONG boundaries */
	if (0x03 & ((unsigned long)dest | (unsigned long)src)) { /* only for 32 archtecture plarform */
    7a58:	a4 e7 00 03 	l.andi r7,r7,0x3
    7a5c:	9c c0 00 00 	l.addi r6,r0,0x0
    7a60:	e4 27 30 00 	l.sfne r7,r6
    7a64:	10 00 00 09 	l.bf 7a88 <memcpy+0x38>
    7a68:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		/* yes, speed up copy process */
		/* copy as many LONGs as possible */
		long *ls = (long *)src;
		long *ld = (long *)dest;

		size_t cnt = n >> 2;
    7a6c:	00 00 00 0c 	l.j 7a9c <memcpy+0x4c>
    7a70:	b8 c5 00 42 	l.srli r6,r5,0x2

_BEGIN_STD_C

_PTR 	 _EXFUN(memchr,(const _PTR, int, size_t));
int 	 _EXFUN(memcmp,(const _PTR, const _PTR, size_t));
_PTR 	 _EXFUN(memcpy,(_PTR, const _PTR, size_t));
    7a74:	e0 e3 30 00 	l.add r7,r3,r6
		/* no, do a byte-wide copy */
		cs = (char *)src;
		cd = (char *)dest;

		while (n--)
			*cd++ = *cs++;
    7a78:	8d 08 00 00 	l.lbz r8,0x0(r8)
    7a7c:	9c c6 00 01 	l.addi r6,r6,0x1
    7a80:	d8 07 40 00 	l.sb 0x0(r7),r8
    7a84:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
	if (0x03 & ((unsigned long)dest | (unsigned long)src)) { /* only for 32 archtecture plarform */
		/* no, do a byte-wide copy */
		cs = (char *)src;
		cd = (char *)dest;

		while (n--)
    7a88:	bc 25 00 00 	l.sfnei r5,0x0
    7a8c:	13 ff ff fa 	l.bf 7a74 <memcpy+0x24>
    7a90:	e1 04 30 00 	l.add r8,r4,r6
		while (cnt--)
			*cd++ = *cs++;
	}

	return dest;
}
    7a94:	00 00 00 1b 	l.j 7b00 <memcpy+0xb0>
    7a98:	9c 21 00 04 	l.addi r1,r1,0x4
		/* copy as many LONGs as possible */
		long *ls = (long *)src;
		long *ld = (long *)dest;

		size_t cnt = n >> 2;
		while (cnt--)
    7a9c:	00 00 00 08 	l.j 7abc <memcpy+0x6c>
    7aa0:	bc 26 00 00 	l.sfnei r6,0x0
    7aa4:	e1 63 38 00 	l.add r11,r3,r7
			*ld++ = *ls++;
    7aa8:	85 08 00 00 	l.lwz r8,0x0(r8)
    7aac:	9c e7 00 04 	l.addi r7,r7,0x4
    7ab0:	d4 0b 40 00 	l.sw 0x0(r11),r8
    7ab4:	9c c6 ff ff 	l.addi r6,r6,0xffffffff
		/* copy as many LONGs as possible */
		long *ls = (long *)src;
		long *ld = (long *)dest;

		size_t cnt = n >> 2;
		while (cnt--)
    7ab8:	bc 26 00 00 	l.sfnei r6,0x0
    7abc:	13 ff ff fa 	l.bf 7aa4 <memcpy+0x54>
    7ac0:	e1 04 38 00 	l.add r8,r4,r7
			*ld++ = *ls++;

		/* finally copy the remaining bytes */
		cs = (char *)(src + (n & ~0x03));
    7ac4:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
    7ac8:	e0 e5 10 03 	l.and r7,r5,r2
		cd = (char *)(dest + (n & ~0x03));

		cnt = n & 0x03;
    7acc:	a4 a5 00 03 	l.andi r5,r5,0x3
		size_t cnt = n >> 2;
		while (cnt--)
			*ld++ = *ls++;

		/* finally copy the remaining bytes */
		cs = (char *)(src + (n & ~0x03));
    7ad0:	e0 84 38 00 	l.add r4,r4,r7
		cd = (char *)(dest + (n & ~0x03));

		cnt = n & 0x03;
		while (cnt--)
    7ad4:	00 00 00 07 	l.j 7af0 <memcpy+0xa0>
    7ad8:	e0 e3 38 00 	l.add r7,r3,r7
    7adc:	e1 07 30 00 	l.add r8,r7,r6
			*cd++ = *cs++;
    7ae0:	8d 6b 00 00 	l.lbz r11,0x0(r11)
    7ae4:	9c c6 00 01 	l.addi r6,r6,0x1
    7ae8:	d8 08 58 00 	l.sb 0x0(r8),r11
    7aec:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
		/* finally copy the remaining bytes */
		cs = (char *)(src + (n & ~0x03));
		cd = (char *)(dest + (n & ~0x03));

		cnt = n & 0x03;
		while (cnt--)
    7af0:	bc 25 00 00 	l.sfnei r5,0x0
    7af4:	13 ff ff fa 	l.bf 7adc <memcpy+0x8c>
    7af8:	e1 64 30 00 	l.add r11,r4,r6
			*cd++ = *cs++;
	}

	return dest;
}
    7afc:	9c 21 00 04 	l.addi r1,r1,0x4
    7b00:	a9 63 00 00 	l.ori r11,r3,0x0
    7b04:	44 00 48 00 	l.jr r9
    7b08:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00007b0c <memmove>:

void *memmove(void *dest, const void *src, size_t n)
{
	if (dest <= src || (char *)dest >= ((char *)src + n)) {
    7b0c:	e4 a3 20 00 	l.sfleu r3,r4
    7b10:	10 00 00 06 	l.bf 7b28 <memmove+0x1c>
    7b14:	a8 e5 00 00 	l.ori r7,r5,0x0
    7b18:	e0 c4 28 00 	l.add r6,r4,r5
    7b1c:	e4 83 30 00 	l.sfltu r3,r6
    7b20:	10 00 00 0e 	l.bf 7b58 <memmove+0x4c>
    7b24:	15 00 00 00 	l.nop 0x0
    7b28:	00 00 00 07 	l.j 7b44 <memmove+0x38>
    7b2c:	9c c0 00 00 	l.addi r6,r0,0x0
_PTR	 _EXFUN(memmove,(_PTR, const _PTR, size_t));
    7b30:	e1 64 30 00 	l.add r11,r4,r6
		/*
		 * Non-Overlapping Buffers
		 * copy from lower addresses to higher addresses
		 */
		while (n--) {
			*(char *)dest = *(char *)src;
    7b34:	8d 6b 00 00 	l.lbz r11,0x0(r11)
    7b38:	9c c6 00 01 	l.addi r6,r6,0x1
    7b3c:	d8 08 58 00 	l.sb 0x0(r8),r11
    7b40:	9c e7 ff ff 	l.addi r7,r7,0xffffffff

		/*
		 * Non-Overlapping Buffers
		 * copy from lower addresses to higher addresses
		 */
		while (n--) {
    7b44:	bc 27 00 00 	l.sfnei r7,0x0
    7b48:	13 ff ff fa 	l.bf 7b30 <memmove+0x24>
    7b4c:	e1 03 30 00 	l.add r8,r3,r6
    7b50:	00 00 00 10 	l.j 7b90 <memmove+0x84>
    7b54:	e1 63 28 00 	l.add r11,r3,r5
	} else {
		/*
		 * Overlapping Buffers
		 * copy from higher addresses to lower addresses
		 */
		dest = (char *)dest + n - 1;
    7b58:	9c c5 ff ff 	l.addi r6,r5,0xffffffff
    7b5c:	e0 63 30 00 	l.add r3,r3,r6
		src = (char *)src + n - 1;
    7b60:	e0 84 30 00 	l.add r4,r4,r6
		while (n--) {
    7b64:	00 00 00 07 	l.j 7b80 <memmove+0x74>
    7b68:	9c c0 00 00 	l.addi r6,r0,0x0
    7b6c:	e1 03 30 00 	l.add r8,r3,r6
			*(char *)dest = *(char *)src;
    7b70:	8d 6b 00 00 	l.lbz r11,0x0(r11)
    7b74:	9c c6 ff ff 	l.addi r6,r6,0xffffffff
    7b78:	d8 08 58 00 	l.sb 0x0(r8),r11
    7b7c:	9c e7 ff ff 	l.addi r7,r7,0xffffffff
		 * Overlapping Buffers
		 * copy from higher addresses to lower addresses
		 */
		dest = (char *)dest + n - 1;
		src = (char *)src + n - 1;
		while (n--) {
    7b80:	bc 27 00 00 	l.sfnei r7,0x0
    7b84:	13 ff ff fa 	l.bf 7b6c <memmove+0x60>
    7b88:	e1 64 30 00 	l.add r11,r4,r6
    7b8c:	e1 63 28 02 	l.sub r11,r3,r5
			src = (char *)src - 1;
		}
	}

	return dest;
}
    7b90:	44 00 48 00 	l.jr r9
    7b94:	15 00 00 00 	l.nop 0x0

00007b98 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
	char *p1 = (void *)s1;
	char *p2 = (void *)s2;

	while ((*p1 == *p2) && (--n > 0)) {
    7b98:	9c c0 00 00 	l.addi r6,r0,0x0
#endif

_BEGIN_STD_C

_PTR 	 _EXFUN(memchr,(const _PTR, int, size_t));
int 	 _EXFUN(memcmp,(const _PTR, const _PTR, size_t));
    7b9c:	e0 e3 30 00 	l.add r7,r3,r6
    7ba0:	91 67 00 00 	l.lbs r11,0x0(r7)
    7ba4:	e0 e4 30 00 	l.add r7,r4,r6
    7ba8:	90 e7 00 00 	l.lbs r7,0x0(r7)
    7bac:	e4 2b 38 00 	l.sfne r11,r7
    7bb0:	10 00 00 07 	l.bf 7bcc <memcmp+0x34>
    7bb4:	15 00 00 00 	l.nop 0x0
    7bb8:	9c c6 00 01 	l.addi r6,r6,0x1
    7bbc:	e4 25 30 00 	l.sfne r5,r6
    7bc0:	13 ff ff f8 	l.bf 7ba0 <memcmp+0x8>
    7bc4:	e0 e3 30 00 	l.add r7,r3,r6
    7bc8:	a8 eb 00 00 	l.ori r7,r11,0x0
		p1++;
		p2++;
	}

	return *p1 - *p2;
}
    7bcc:	44 00 48 00 	l.jr r9
    7bd0:	e1 6b 38 02 	l.sub r11,r11,r7

00007bd4 <memchr>:
void *memchr(const void *s, int c, size_t n)
{
	char *p =  (char *)s;

	while (n--) {
		if (*p != (char)c)
    7bd4:	b8 84 00 18 	l.slli r4,r4,0x18

void *memchr(const void *s, int c, size_t n)
{
	char *p =  (char *)s;

	while (n--) {
    7bd8:	00 00 00 07 	l.j 7bf4 <memchr+0x20>
    7bdc:	b8 84 00 98 	l.srai r4,r4,0x18
		if (*p != (char)c)
    7be0:	90 c3 00 00 	l.lbs r6,0x0(r3)
    7be4:	e4 06 20 00 	l.sfeq r6,r4
    7be8:	10 00 00 08 	l.bf 7c08 <memchr+0x34>
    7bec:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
			p++;
    7bf0:	9c 63 00 01 	l.addi r3,r3,0x1

void *memchr(const void *s, int c, size_t n)
{
	char *p =  (char *)s;

	while (n--) {
    7bf4:	bc 25 00 00 	l.sfnei r5,0x0
    7bf8:	13 ff ff fa 	l.bf 7be0 <memchr+0xc>
    7bfc:	a9 65 00 00 	l.ori r11,r5,0x0
    7c00:	00 00 00 03 	l.j 7c0c <memchr+0x38>
    7c04:	15 00 00 00 	l.nop 0x0
		if (*p != (char)c)
    7c08:	a9 63 00 00 	l.ori r11,r3,0x0
		else
			return p;
	}

	return 0;
}
    7c0c:	44 00 48 00 	l.jr r9
    7c10:	15 00 00 00 	l.nop 0x0

00007c14 <memset>:

void *memset(void *s, int c, size_t n)
{
	char *p = s;

	while (n--)
    7c14:	00 00 00 05 	l.j 7c28 <memset+0x14>
    7c18:	a8 c3 00 00 	l.ori r6,r3,0x0
		*p++ = c;
    7c1c:	d8 06 20 00 	l.sb 0x0(r6),r4
    7c20:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
    7c24:	9c c6 00 01 	l.addi r6,r6,0x1

void *memset(void *s, int c, size_t n)
{
	char *p = s;

	while (n--)
    7c28:	bc 25 00 00 	l.sfnei r5,0x0
    7c2c:	13 ff ff fc 	l.bf 7c1c <memset+0x8>
    7c30:	15 00 00 00 	l.nop 0x0
		*p++ = c;

	return s;
}
    7c34:	44 00 48 00 	l.jr r9
    7c38:	a9 63 00 00 	l.ori r11,r3,0x0

00007c3c <sprintf>:

#define STRVAL_SIZE     32

int sprintf(char *buf, char *fmt, ...)
{
    7c3c:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    7c40:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    7c44:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    7c48:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    7c4c:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    7c50:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    7c54:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    7c58:	9c 21 ff c4 	l.addi r1,r1,0xffffffc4
    7c5c:	aa 03 00 00 	l.ori r16,r3,0x0
	int nval;
	unsigned int i, index = 0;

	va_start(ap, fmt);

	for (p = fmt; *p; p++) {
    7c60:	a9 c4 00 00 	l.ori r14,r4,0x0
	char strval[STRVAL_SIZE];
	char *p;
	int nval;
	unsigned int i, index = 0;

	va_start(ap, fmt);
    7c64:	9c 61 00 3c 	l.addi r3,r1,0x3c
{
	va_list ap;
	char strval[STRVAL_SIZE];
	char *p;
	int nval;
	unsigned int i, index = 0;
    7c68:	9c 40 00 00 	l.addi r2,r0,0x0

	va_start(ap, fmt);

	for (p = fmt; *p; p++) {
    7c6c:	aa 41 00 00 	l.ori r18,r1,0x0
    7c70:	00 00 00 2a 	l.j 7d18 <sprintf+0xdc>
    7c74:	9e 81 00 20 	l.addi r20,r1,0x20
		for (i = 0; i < STRVAL_SIZE; i++)  /* clear strval[] */
			strval[i] = 0;
    7c78:	9c 80 00 00 	l.addi r4,r0,0x0
    7c7c:	d8 06 20 00 	l.sb 0x0(r6),r4
    7c80:	9c c6 00 01 	l.addi r6,r6,0x1
	unsigned int i, index = 0;

	va_start(ap, fmt);

	for (p = fmt; *p; p++) {
		for (i = 0; i < STRVAL_SIZE; i++)  /* clear strval[] */
    7c84:	e4 26 a0 00 	l.sfne r6,r20
    7c88:	13 ff ff fd 	l.bf 7c7c <sprintf+0x40>
    7c8c:	bc 05 00 25 	l.sfeqi r5,0x25
			strval[i] = 0;

		if (*p != '%') {
    7c90:	10 00 00 05 	l.bf 7ca4 <sprintf+0x68>
    7c94:	e0 90 10 00 	l.add r4,r16,r2
			buf[index++] = *p;
    7c98:	9c 42 00 01 	l.addi r2,r2,0x1
			continue;
    7c9c:	00 00 00 1e 	l.j 7d14 <sprintf+0xd8>
    7ca0:	d8 04 28 00 	l.sb 0x0(r4),r5
		}

		p++;
    7ca4:	9d ce 00 01 	l.addi r14,r14,0x1

		switch (*p) {
    7ca8:	90 8e 00 00 	l.lbs r4,0x0(r14)
    7cac:	bc 04 00 64 	l.sfeqi r4,0x64
    7cb0:	0c 00 00 07 	l.bnf 7ccc <sprintf+0x90>
    7cb4:	9e c3 00 04 	l.addi r22,r3,0x4
		case 'd':
				nval = va_arg(ap, int);
				itoa(nval, strval, 10);
    7cb8:	a8 81 00 00 	l.ori r4,r1,0x0
    7cbc:	84 63 00 00 	l.lwz r3,0x0(r3)
    7cc0:	07 ff fe 1b 	l.jal 752c <itoa>
    7cc4:	9c a0 00 0a 	l.addi r5,r0,0xa

		p++;

		switch (*p) {
		case 'd':
				nval = va_arg(ap, int);
    7cc8:	a8 76 00 00 	l.ori r3,r22,0x0
    7ccc:	00 00 00 05 	l.j 7ce0 <sprintf+0xa4>
    7cd0:	9c a0 00 00 	l.addi r5,r0,0x0
					strval[i] = pgm8(pval[i]);
			break;
*/
		}

		for (i = 0; strval[i] != '\0' && i < STRVAL_SIZE; i++)
    7cd4:	9c a5 00 01 	l.addi r5,r5,0x1
			buf[index++] = strval[i];
    7cd8:	d8 06 20 00 	l.sb 0x0(r6),r4
    7cdc:	9c 42 00 01 	l.addi r2,r2,0x1
	return s;
}

#define STRVAL_SIZE     32

int sprintf(char *buf, char *fmt, ...)
    7ce0:	e0 92 28 00 	l.add r4,r18,r5
					strval[i] = pgm8(pval[i]);
			break;
*/
		}

		for (i = 0; strval[i] != '\0' && i < STRVAL_SIZE; i++)
    7ce4:	9c c0 00 01 	l.addi r6,r0,0x1
    7ce8:	bc a5 00 1f 	l.sfleui r5,0x1f
    7cec:	10 00 00 03 	l.bf 7cf8 <sprintf+0xbc>
    7cf0:	90 84 00 00 	l.lbs r4,0x0(r4)
    7cf4:	9c c0 00 00 	l.addi r6,r0,0x0
    7cf8:	a4 c6 00 ff 	l.andi r6,r6,0xff
    7cfc:	bc 06 00 00 	l.sfeqi r6,0x0
    7d00:	10 00 00 05 	l.bf 7d14 <sprintf+0xd8>
    7d04:	a4 c4 00 ff 	l.andi r6,r4,0xff
    7d08:	bc 26 00 00 	l.sfnei r6,0x0
    7d0c:	13 ff ff f2 	l.bf 7cd4 <sprintf+0x98>
    7d10:	e0 d0 10 00 	l.add r6,r16,r2
	int nval;
	unsigned int i, index = 0;

	va_start(ap, fmt);

	for (p = fmt; *p; p++) {
    7d14:	9d ce 00 01 	l.addi r14,r14,0x1
    7d18:	90 ae 00 00 	l.lbs r5,0x0(r14)
    7d1c:	bc 05 00 00 	l.sfeqi r5,0x0
    7d20:	0f ff ff d6 	l.bnf 7c78 <sprintf+0x3c>
    7d24:	a8 d2 00 00 	l.ori r6,r18,0x0

		for (i = 0; strval[i] != '\0' && i < STRVAL_SIZE; i++)
			buf[index++] = strval[i];
	}

	buf[index] = '\0';
    7d28:	e2 10 10 00 	l.add r16,r16,r2

	va_end(ap);

	return (int)index;
}
    7d2c:	a9 62 00 00 	l.ori r11,r2,0x0

		for (i = 0; strval[i] != '\0' && i < STRVAL_SIZE; i++)
			buf[index++] = strval[i];
	}

	buf[index] = '\0';
    7d30:	d8 10 28 00 	l.sb 0x0(r16),r5

	va_end(ap);

	return (int)index;
}
    7d34:	9c 21 00 3c 	l.addi r1,r1,0x3c
    7d38:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    7d3c:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    7d40:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    7d44:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    7d48:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    7d4c:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    7d50:	44 00 48 00 	l.jr r9
    7d54:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00007d58 <fdt_check_header>:
#include <libfdt.h>

#include "libfdt_internal.h"

int fdt_check_header(const void *fdt)
{
    7d58:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	if (fdt_magic(fdt) == FDT_MAGIC) {
    7d5c:	18 40 d0 0d 	l.movhi r2,0xd00d
    7d60:	8c 83 00 00 	l.lbz r4,0x0(r3)
    7d64:	8c a3 00 03 	l.lbz r5,0x3(r3)
    7d68:	b8 84 00 18 	l.slli r4,r4,0x18
    7d6c:	a8 42 fe ed 	l.ori r2,r2,0xfeed
    7d70:	e0 85 20 04 	l.or r4,r5,r4
    7d74:	8c a3 00 01 	l.lbz r5,0x1(r3)
    7d78:	b8 a5 00 10 	l.slli r5,r5,0x10
    7d7c:	e0 84 28 04 	l.or r4,r4,r5
    7d80:	8c a3 00 02 	l.lbz r5,0x2(r3)
    7d84:	b8 a5 00 08 	l.slli r5,r5,0x8
    7d88:	e0 84 28 04 	l.or r4,r4,r5
    7d8c:	e4 24 10 00 	l.sfne r4,r2
    7d90:	10 00 00 20 	l.bf 7e10 <fdt_check_header+0xb8>
    7d94:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		/* Complete tree */
		if (fdt_version(fdt) < FDT_FIRST_SUPPORTED_VERSION)
    7d98:	9c 83 00 14 	l.addi r4,r3,0x14
    7d9c:	8c c4 00 00 	l.lbz r6,0x0(r4)
    7da0:	8c a4 00 03 	l.lbz r5,0x3(r4)
    7da4:	b8 c6 00 18 	l.slli r6,r6,0x18
    7da8:	e0 c5 30 04 	l.or r6,r5,r6
    7dac:	8c a4 00 01 	l.lbz r5,0x1(r4)
    7db0:	b8 a5 00 10 	l.slli r5,r5,0x10
    7db4:	e0 c6 28 04 	l.or r6,r6,r5
    7db8:	8c a4 00 02 	l.lbz r5,0x2(r4)
    7dbc:	b8 a5 00 08 	l.slli r5,r5,0x8
    7dc0:	e0 86 28 04 	l.or r4,r6,r5
    7dc4:	bc 44 00 0f 	l.sfgtui r4,0xf
    7dc8:	0c 00 00 26 	l.bnf 7e60 <fdt_check_header+0x108>
    7dcc:	9d 60 ff f6 	l.addi r11,r0,0xfffffff6
			return -FDT_ERR_BADVERSION;
		if (fdt_last_comp_version(fdt) > FDT_LAST_SUPPORTED_VERSION)
    7dd0:	9c 63 00 18 	l.addi r3,r3,0x18
    7dd4:	8c a3 00 00 	l.lbz r5,0x0(r3)
    7dd8:	8c 83 00 03 	l.lbz r4,0x3(r3)
    7ddc:	b8 a5 00 18 	l.slli r5,r5,0x18
    7de0:	e0 a4 28 04 	l.or r5,r4,r5
    7de4:	8c 83 00 01 	l.lbz r4,0x1(r3)
    7de8:	b8 84 00 10 	l.slli r4,r4,0x10
    7dec:	e0 a5 20 04 	l.or r5,r5,r4
    7df0:	8c 83 00 02 	l.lbz r4,0x2(r3)
    7df4:	b8 84 00 08 	l.slli r4,r4,0x8
    7df8:	e0 65 20 04 	l.or r3,r5,r4
    7dfc:	bc 43 00 11 	l.sfgtui r3,0x11
    7e00:	0c 00 00 17 	l.bnf 7e5c <fdt_check_header+0x104>
    7e04:	15 00 00 00 	l.nop 0x0
	} else {
		return -FDT_ERR_BADMAGIC;
	}

	return 0;
}
    7e08:	00 00 00 17 	l.j 7e64 <fdt_check_header+0x10c>
    7e0c:	9c 21 00 04 	l.addi r1,r1,0x4
		/* Complete tree */
		if (fdt_version(fdt) < FDT_FIRST_SUPPORTED_VERSION)
			return -FDT_ERR_BADVERSION;
		if (fdt_last_comp_version(fdt) > FDT_LAST_SUPPORTED_VERSION)
			return -FDT_ERR_BADVERSION;
	} else if (fdt_magic(fdt) == FDT_SW_MAGIC) {
    7e10:	18 40 2f f2 	l.movhi r2,0x2ff2
    7e14:	a8 42 01 12 	l.ori r2,r2,0x112
    7e18:	e4 24 10 00 	l.sfne r4,r2
    7e1c:	10 00 00 11 	l.bf 7e60 <fdt_check_header+0x108>
    7e20:	9d 60 ff f7 	l.addi r11,r0,0xfffffff7
		/* Unfinished sequential-write blob */
		if (fdt_size_dt_struct(fdt) == 0)
    7e24:	9c 63 00 24 	l.addi r3,r3,0x24
    7e28:	8c a3 00 00 	l.lbz r5,0x0(r3)
    7e2c:	8c 83 00 03 	l.lbz r4,0x3(r3)
    7e30:	b8 a5 00 18 	l.slli r5,r5,0x18
    7e34:	e0 a4 28 04 	l.or r5,r4,r5
    7e38:	8c 83 00 01 	l.lbz r4,0x1(r3)
    7e3c:	b8 84 00 10 	l.slli r4,r4,0x10
    7e40:	e0 a5 20 04 	l.or r5,r5,r4
    7e44:	8c 83 00 02 	l.lbz r4,0x2(r3)
    7e48:	b8 84 00 08 	l.slli r4,r4,0x8
    7e4c:	e0 65 20 04 	l.or r3,r5,r4
    7e50:	bc 03 00 00 	l.sfeqi r3,0x0
    7e54:	10 00 00 03 	l.bf 7e60 <fdt_check_header+0x108>
    7e58:	9d 60 ff f9 	l.addi r11,r0,0xfffffff9
			return -FDT_ERR_BADSTATE;
	} else {
		return -FDT_ERR_BADMAGIC;
	}

	return 0;
    7e5c:	9d 60 00 00 	l.addi r11,r0,0x0
}
    7e60:	9c 21 00 04 	l.addi r1,r1,0x4
    7e64:	44 00 48 00 	l.jr r9
    7e68:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00007e6c <fdt_offset_ptr>:

const void *fdt_offset_ptr(const void *fdt, int offset, unsigned int len)
{
	const char *p;

	if (fdt_version(fdt) >= 0x11)
    7e6c:	9c c3 00 14 	l.addi r6,r3,0x14
    7e70:	8d 06 00 00 	l.lbz r8,0x0(r6)
    7e74:	8c e6 00 03 	l.lbz r7,0x3(r6)
    7e78:	b9 08 00 18 	l.slli r8,r8,0x18
    7e7c:	e1 07 40 04 	l.or r8,r7,r8
    7e80:	8c e6 00 01 	l.lbz r7,0x1(r6)
    7e84:	b8 e7 00 10 	l.slli r7,r7,0x10
    7e88:	e1 08 38 04 	l.or r8,r8,r7
    7e8c:	8c e6 00 02 	l.lbz r7,0x2(r6)
    7e90:	b8 e7 00 08 	l.slli r7,r7,0x8
    7e94:	e0 c8 38 04 	l.or r6,r8,r7
    7e98:	bc 46 00 10 	l.sfgtui r6,0x10
    7e9c:	0c 00 00 15 	l.bnf 7ef0 <fdt_offset_ptr+0x84>
    7ea0:	e0 e5 20 00 	l.add r7,r5,r4
		if (((offset + len) < offset)
    7ea4:	e4 87 20 00 	l.sfltu r7,r4
    7ea8:	10 00 00 22 	l.bf 7f30 <fdt_offset_ptr+0xc4>
    7eac:	9d 60 00 00 	l.addi r11,r0,0x0
		    || ((offset + len) > fdt_size_dt_struct(fdt)))
    7eb0:	9c c3 00 24 	l.addi r6,r3,0x24
    7eb4:	e4 2b 58 00 	l.sfne r11,r11
    7eb8:	8d 86 00 00 	l.lbz r12,0x0(r6)
    7ebc:	8d 06 00 03 	l.lbz r8,0x3(r6)
    7ec0:	b9 8c 00 18 	l.slli r12,r12,0x18
    7ec4:	e1 88 60 04 	l.or r12,r8,r12
    7ec8:	8d 06 00 01 	l.lbz r8,0x1(r6)
    7ecc:	b9 08 00 10 	l.slli r8,r8,0x10
    7ed0:	e1 8c 40 04 	l.or r12,r12,r8
    7ed4:	8d 06 00 02 	l.lbz r8,0x2(r6)
    7ed8:	b9 08 00 08 	l.slli r8,r8,0x8
    7edc:	10 00 00 05 	l.bf 7ef0 <fdt_offset_ptr+0x84>
    7ee0:	e0 cc 40 04 	l.or r6,r12,r8
    7ee4:	e4 47 30 00 	l.sfgtu r7,r6
    7ee8:	10 00 00 12 	l.bf 7f30 <fdt_offset_ptr+0xc4>
    7eec:	15 00 00 00 	l.nop 0x0
const char *_fdt_find_string(const char *strtab, int tabsize, const char *s);
int _fdt_node_end_offset(void *fdt, int nodeoffset);

static inline const void *_fdt_offset_ptr(const void *fdt, int offset)
{
	return (const char *)fdt + fdt_off_dt_struct(fdt) + offset;
    7ef0:	9c c3 00 08 	l.addi r6,r3,0x8
			return NULL;

	p = _fdt_offset_ptr(fdt, offset);

	if (p + len < p)
		return NULL;
    7ef4:	9d 60 00 00 	l.addi r11,r0,0x0
    7ef8:	8d 86 00 00 	l.lbz r12,0x0(r6)
    7efc:	8d 06 00 01 	l.lbz r8,0x1(r6)
    7f00:	8c e6 00 02 	l.lbz r7,0x2(r6)
		    || ((offset + len) > fdt_size_dt_struct(fdt)))
			return NULL;

	p = _fdt_offset_ptr(fdt, offset);

	if (p + len < p)
    7f04:	e5 85 58 00 	l.sflts r5,r11
    7f08:	10 00 00 0a 	l.bf 7f30 <fdt_offset_ptr+0xc4>
    7f0c:	8c c6 00 03 	l.lbz r6,0x3(r6)
    7f10:	b9 6c 00 18 	l.slli r11,r12,0x18
    7f14:	b8 a8 00 10 	l.slli r5,r8,0x10
    7f18:	e1 66 58 04 	l.or r11,r6,r11
    7f1c:	e1 6b 28 04 	l.or r11,r11,r5
    7f20:	b8 a7 00 08 	l.slli r5,r7,0x8
    7f24:	e1 6b 28 04 	l.or r11,r11,r5
    7f28:	e1 6b 20 00 	l.add r11,r11,r4
    7f2c:	e1 63 58 00 	l.add r11,r3,r11
		return NULL;
	return p;
}
    7f30:	44 00 48 00 	l.jr r9
    7f34:	15 00 00 00 	l.nop 0x0

00007f38 <fdt_next_tag>:

uint32_t fdt_next_tag(const void *fdt, int startoffset, int *nextoffset)
{
    7f38:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
	const fdt32_t *tagp, *lenp;
	uint32_t tag;
	int offset = startoffset;
	const char *p;

	*nextoffset = -FDT_ERR_TRUNCATED;
    7f3c:	9c 40 ff f8 	l.addi r2,r0,0xfffffff8
		return NULL;
	return p;
}

uint32_t fdt_next_tag(const void *fdt, int startoffset, int *nextoffset)
{
    7f40:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    7f44:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    7f48:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    7f4c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    7f50:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    7f54:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
	const fdt32_t *tagp, *lenp;
	uint32_t tag;
	int offset = startoffset;
	const char *p;

	*nextoffset = -FDT_ERR_TRUNCATED;
    7f58:	d4 05 10 00 	l.sw 0x0(r5),r2
		return NULL;
	return p;
}

uint32_t fdt_next_tag(const void *fdt, int startoffset, int *nextoffset)
{
    7f5c:	9c 21 ff e4 	l.addi r1,r1,0xffffffe4
    7f60:	aa 05 00 00 	l.ori r16,r5,0x0
	uint32_t tag;
	int offset = startoffset;
	const char *p;

	*nextoffset = -FDT_ERR_TRUNCATED;
	tagp = fdt_offset_ptr(fdt, offset, FDT_TAGSIZE);
    7f64:	9c a0 00 04 	l.addi r5,r0,0x4
		return NULL;
	return p;
}

uint32_t fdt_next_tag(const void *fdt, int startoffset, int *nextoffset)
{
    7f68:	aa 43 00 00 	l.ori r18,r3,0x0
    7f6c:	aa c4 00 00 	l.ori r22,r4,0x0
	uint32_t tag;
	int offset = startoffset;
	const char *p;

	*nextoffset = -FDT_ERR_TRUNCATED;
	tagp = fdt_offset_ptr(fdt, offset, FDT_TAGSIZE);
    7f70:	07 ff ff bf 	l.jal 7e6c <fdt_offset_ptr>
    7f74:	9c 40 00 09 	l.addi r2,r0,0x9
	if (!tagp)
    7f78:	bc 0b 00 00 	l.sfeqi r11,0x0
    7f7c:	10 00 00 44 	l.bf 808c <fdt_next_tag+0x154>
    7f80:	9e 96 00 04 	l.addi r20,r22,0x4
		return FDT_END; /* premature end */
	tag = fdt32_to_cpu(*tagp);
    7f84:	8c 4b 00 00 	l.lbz r2,0x0(r11)
    7f88:	8c 6b 00 03 	l.lbz r3,0x3(r11)
    7f8c:	b8 42 00 18 	l.slli r2,r2,0x18
    7f90:	e0 43 10 04 	l.or r2,r3,r2
    7f94:	8c 6b 00 01 	l.lbz r3,0x1(r11)
    7f98:	b8 63 00 10 	l.slli r3,r3,0x10
    7f9c:	e0 42 18 04 	l.or r2,r2,r3
    7fa0:	8c 6b 00 02 	l.lbz r3,0x2(r11)
    7fa4:	b8 63 00 08 	l.slli r3,r3,0x8
    7fa8:	e0 42 18 04 	l.or r2,r2,r3
	offset += FDT_TAGSIZE;

	*nextoffset = -FDT_ERR_BADSTRUCTURE;
    7fac:	9c 60 ff f5 	l.addi r3,r0,0xfffffff5
    7fb0:	d4 10 18 00 	l.sw 0x0(r16),r3
	switch (tag) {
    7fb4:	9c 62 ff ff 	l.addi r3,r2,0xffffffff
    7fb8:	bc 43 00 08 	l.sfgtui r3,0x8
    7fbc:	10 00 00 33 	l.bf 8088 <fdt_next_tag+0x150>
    7fc0:	a9 d4 00 00 	l.ori r14,r20,0x0
    7fc4:	18 80 00 01 	l.movhi r4,0x1
    7fc8:	b8 63 00 02 	l.slli r3,r3,0x2
    7fcc:	a8 84 30 e8 	l.ori r4,r4,0x30e8
    7fd0:	e0 63 20 00 	l.add r3,r3,r4
    7fd4:	84 63 00 00 	l.lwz r3,0x0(r3)
    7fd8:	44 00 18 00 	l.jr r3
    7fdc:	15 00 00 00 	l.nop 0x0
	case FDT_BEGIN_NODE:
		/* skip name */
		do {
			p = fdt_offset_ptr(fdt, offset++, 1);
    7fe0:	a8 72 00 00 	l.ori r3,r18,0x0
    7fe4:	a8 8e 00 00 	l.ori r4,r14,0x0
    7fe8:	07 ff ff a1 	l.jal 7e6c <fdt_offset_ptr>
    7fec:	9c a0 00 01 	l.addi r5,r0,0x1
		} while (p && (*p != '\0'));
    7ff0:	bc 0b 00 00 	l.sfeqi r11,0x0
    7ff4:	10 00 00 25 	l.bf 8088 <fdt_next_tag+0x150>
    7ff8:	15 00 00 00 	l.nop 0x0
    7ffc:	90 6b 00 00 	l.lbs r3,0x0(r11)
    8000:	bc 23 00 00 	l.sfnei r3,0x0
    8004:	13 ff ff f7 	l.bf 7fe0 <fdt_next_tag+0xa8>
    8008:	9d ce 00 01 	l.addi r14,r14,0x1

	default:
		return FDT_END;
	}

	if (!fdt_offset_ptr(fdt, startoffset, offset - startoffset))
    800c:	00 00 00 15 	l.j 8060 <fdt_next_tag+0x128>
    8010:	a8 72 00 00 	l.ori r3,r18,0x0
		if (!p)
			return FDT_END; /* premature end */
		break;

	case FDT_PROP:
		lenp = fdt_offset_ptr(fdt, offset, sizeof(*lenp));
    8014:	a8 72 00 00 	l.ori r3,r18,0x0
    8018:	a8 94 00 00 	l.ori r4,r20,0x0
    801c:	07 ff ff 94 	l.jal 7e6c <fdt_offset_ptr>
    8020:	9c a0 00 04 	l.addi r5,r0,0x4
		if (!lenp)
    8024:	bc 0b 00 00 	l.sfeqi r11,0x0
    8028:	10 00 00 18 	l.bf 8088 <fdt_next_tag+0x150>
    802c:	9e 94 00 08 	l.addi r20,r20,0x8
			return FDT_END; /* premature end */
		/* skip-name offset, length and value */
		offset += sizeof(struct fdt_property) - FDT_TAGSIZE
    8030:	8d cb 00 00 	l.lbz r14,0x0(r11)
    8034:	8c 6b 00 03 	l.lbz r3,0x3(r11)
    8038:	b9 ce 00 18 	l.slli r14,r14,0x18
    803c:	e1 c3 70 04 	l.or r14,r3,r14
    8040:	8c 6b 00 01 	l.lbz r3,0x1(r11)
    8044:	b8 63 00 10 	l.slli r3,r3,0x10
    8048:	e1 ce 18 04 	l.or r14,r14,r3
    804c:	8c 6b 00 02 	l.lbz r3,0x2(r11)
    8050:	b8 63 00 08 	l.slli r3,r3,0x8
    8054:	e1 ce 18 04 	l.or r14,r14,r3
    8058:	e1 d4 70 00 	l.add r14,r20,r14

	default:
		return FDT_END;
	}

	if (!fdt_offset_ptr(fdt, startoffset, offset - startoffset))
    805c:	a8 72 00 00 	l.ori r3,r18,0x0
    8060:	a8 96 00 00 	l.ori r4,r22,0x0
    8064:	07 ff ff 82 	l.jal 7e6c <fdt_offset_ptr>
    8068:	e0 ae b0 02 	l.sub r5,r14,r22
    806c:	bc 0b 00 00 	l.sfeqi r11,0x0
    8070:	10 00 00 06 	l.bf 8088 <fdt_next_tag+0x150>
    8074:	9d ce 00 03 	l.addi r14,r14,0x3
		return FDT_END; /* premature end */

	*nextoffset = FDT_TAGALIGN(offset);
    8078:	9c 60 ff fc 	l.addi r3,r0,0xfffffffc
    807c:	e1 ce 18 03 	l.and r14,r14,r3
	return tag;
    8080:	00 00 00 03 	l.j 808c <fdt_next_tag+0x154>
    8084:	d4 10 70 00 	l.sw 0x0(r16),r14
	default:
		return FDT_END;
	}

	if (!fdt_offset_ptr(fdt, startoffset, offset - startoffset))
		return FDT_END; /* premature end */
    8088:	9c 40 00 09 	l.addi r2,r0,0x9

	*nextoffset = FDT_TAGALIGN(offset);
	return tag;
}
    808c:	9c 21 00 1c 	l.addi r1,r1,0x1c
    8090:	a9 62 00 00 	l.ori r11,r2,0x0
    8094:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8098:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    809c:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    80a0:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    80a4:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    80a8:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    80ac:	44 00 48 00 	l.jr r9
    80b0:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

000080b4 <_fdt_check_node_offset>:

int _fdt_check_node_offset(const void *fdt, int offset)
{
    80b4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    80b8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    80bc:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	if ((offset < 0) || (offset % FDT_TAGSIZE)
	    || (fdt_next_tag(fdt, offset, &offset) != FDT_BEGIN_NODE))
		return -FDT_ERR_BADOFFSET;
    80c0:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
	return tag;
}

int _fdt_check_node_offset(const void *fdt, int offset)
{
	if ((offset < 0) || (offset % FDT_TAGSIZE)
    80c4:	bd 84 00 00 	l.sfltsi r4,0x0
    80c8:	10 00 00 0c 	l.bf 80f8 <_fdt_check_node_offset+0x44>
    80cc:	d4 01 20 00 	l.sw 0x0(r1),r4
    80d0:	a4 a4 00 03 	l.andi r5,r4,0x3
    80d4:	bc 25 00 00 	l.sfnei r5,0x0
    80d8:	10 00 00 08 	l.bf 80f8 <_fdt_check_node_offset+0x44>
    80dc:	15 00 00 00 	l.nop 0x0
	    || (fdt_next_tag(fdt, offset, &offset) != FDT_BEGIN_NODE))
    80e0:	07 ff ff 96 	l.jal 7f38 <fdt_next_tag>
    80e4:	a8 a1 00 00 	l.ori r5,r1,0x0
    80e8:	bc 2b 00 01 	l.sfnei r11,0x1
    80ec:	10 00 00 03 	l.bf 80f8 <_fdt_check_node_offset+0x44>
    80f0:	15 00 00 00 	l.nop 0x0
		return -FDT_ERR_BADOFFSET;

	return offset;
    80f4:	84 41 00 00 	l.lwz r2,0x0(r1)
}
    80f8:	9c 21 00 0c 	l.addi r1,r1,0xc
    80fc:	a9 62 00 00 	l.ori r11,r2,0x0
    8100:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8104:	44 00 48 00 	l.jr r9
    8108:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000810c <_fdt_check_prop_offset>:

int _fdt_check_prop_offset(const void *fdt, int offset)
{
    810c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    8110:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8114:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	if ((offset < 0) || (offset % FDT_TAGSIZE)
	    || (fdt_next_tag(fdt, offset, &offset) != FDT_PROP))
		return -FDT_ERR_BADOFFSET;
    8118:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
	return offset;
}

int _fdt_check_prop_offset(const void *fdt, int offset)
{
	if ((offset < 0) || (offset % FDT_TAGSIZE)
    811c:	bd 84 00 00 	l.sfltsi r4,0x0
    8120:	10 00 00 0c 	l.bf 8150 <_fdt_check_prop_offset+0x44>
    8124:	d4 01 20 00 	l.sw 0x0(r1),r4
    8128:	a4 a4 00 03 	l.andi r5,r4,0x3
    812c:	bc 25 00 00 	l.sfnei r5,0x0
    8130:	10 00 00 08 	l.bf 8150 <_fdt_check_prop_offset+0x44>
    8134:	15 00 00 00 	l.nop 0x0
	    || (fdt_next_tag(fdt, offset, &offset) != FDT_PROP))
    8138:	07 ff ff 80 	l.jal 7f38 <fdt_next_tag>
    813c:	a8 a1 00 00 	l.ori r5,r1,0x0
    8140:	bc 2b 00 03 	l.sfnei r11,0x3
    8144:	10 00 00 03 	l.bf 8150 <_fdt_check_prop_offset+0x44>
    8148:	15 00 00 00 	l.nop 0x0
		return -FDT_ERR_BADOFFSET;

	return offset;
    814c:	84 41 00 00 	l.lwz r2,0x0(r1)
}
    8150:	9c 21 00 0c 	l.addi r1,r1,0xc
    8154:	a9 62 00 00 	l.ori r11,r2,0x0
    8158:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    815c:	44 00 48 00 	l.jr r9
    8160:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00008164 <fdt_next_node>:

int fdt_next_node(const void *fdt, int offset, int *depth)
{
    8164:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    8168:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    816c:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
	int nextoffset = 0;
    8170:	9c 40 00 00 	l.addi r2,r0,0x0

	return offset;
}

int fdt_next_node(const void *fdt, int offset, int *depth)
{
    8174:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8178:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    817c:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
    8180:	aa 43 00 00 	l.ori r18,r3,0x0
	int nextoffset = 0;
    8184:	d4 01 10 00 	l.sw 0x0(r1),r2
	uint32_t tag;

	if (offset >= 0)
    8188:	e5 84 10 00 	l.sflts r4,r2
    818c:	10 00 00 08 	l.bf 81ac <fdt_next_node+0x48>
    8190:	a9 c5 00 00 	l.ori r14,r5,0x0
		if ((nextoffset = _fdt_check_node_offset(fdt, offset)) < 0)
    8194:	07 ff ff c8 	l.jal 80b4 <_fdt_check_node_offset>
    8198:	15 00 00 00 	l.nop 0x0
    819c:	d4 01 58 00 	l.sw 0x0(r1),r11
    81a0:	bd 8b 00 00 	l.sfltsi r11,0x0
    81a4:	10 00 00 2c 	l.bf 8254 <fdt_next_node+0xf0>
    81a8:	a8 4b 00 00 	l.ori r2,r11,0x0
			return nextoffset;

	do {
		offset = nextoffset;
    81ac:	84 41 00 00 	l.lwz r2,0x0(r1)
		tag = fdt_next_tag(fdt, offset, &nextoffset);
    81b0:	a8 72 00 00 	l.ori r3,r18,0x0
    81b4:	a8 82 00 00 	l.ori r4,r2,0x0
    81b8:	07 ff ff 60 	l.jal 7f38 <fdt_next_tag>
    81bc:	a8 a1 00 00 	l.ori r5,r1,0x0

		switch (tag) {
    81c0:	bc 0b 00 02 	l.sfeqi r11,0x2
    81c4:	10 00 00 0c 	l.bf 81f4 <fdt_next_node+0x90>
    81c8:	bc 0b 00 09 	l.sfeqi r11,0x9
    81cc:	10 00 00 14 	l.bf 821c <fdt_next_node+0xb8>
    81d0:	bc 0b 00 01 	l.sfeqi r11,0x1
    81d4:	0f ff ff f6 	l.bnf 81ac <fdt_next_node+0x48>
    81d8:	bc 0e 00 00 	l.sfeqi r14,0x0
		case FDT_PROP:
		case FDT_NOP:
			break;

		case FDT_BEGIN_NODE:
			if (depth)
    81dc:	10 00 00 1e 	l.bf 8254 <fdt_next_node+0xf0>
    81e0:	15 00 00 00 	l.nop 0x0
				(*depth)++;
    81e4:	84 6e 00 00 	l.lwz r3,0x0(r14)
    81e8:	9c 63 00 01 	l.addi r3,r3,0x1
    81ec:	00 00 00 1a 	l.j 8254 <fdt_next_node+0xf0>
    81f0:	d4 0e 18 00 	l.sw 0x0(r14),r3
			break;

		case FDT_END_NODE:
			if (depth && ((--(*depth)) < 0))
    81f4:	bc 0e 00 00 	l.sfeqi r14,0x0
    81f8:	13 ff ff ee 	l.bf 81b0 <fdt_next_node+0x4c>
    81fc:	84 41 00 00 	l.lwz r2,0x0(r1)
    8200:	84 4e 00 00 	l.lwz r2,0x0(r14)
    8204:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    8208:	bd 62 00 00 	l.sfgesi r2,0x0
    820c:	13 ff ff e8 	l.bf 81ac <fdt_next_node+0x48>
    8210:	d4 0e 10 00 	l.sw 0x0(r14),r2
				return nextoffset;
    8214:	00 00 00 10 	l.j 8254 <fdt_next_node+0xf0>
    8218:	84 41 00 00 	l.lwz r2,0x0(r1)
			break;

		case FDT_END:
			if ((nextoffset >= 0)
    821c:	84 41 00 00 	l.lwz r2,0x0(r1)
    8220:	bd 62 00 00 	l.sfgesi r2,0x0
    8224:	10 00 00 0b 	l.bf 8250 <fdt_next_node+0xec>
    8228:	e0 60 70 02 	l.sub r3,r0,r14
			    || ((nextoffset == -FDT_ERR_TRUNCATED) && !depth))
    822c:	e1 ce 18 04 	l.or r14,r14,r3
    8230:	bd 8e 00 00 	l.sfltsi r14,0x0
    8234:	10 00 00 08 	l.bf 8254 <fdt_next_node+0xf0>
    8238:	ac 62 ff f8 	l.xori r3,r2,0xfffffff8
    823c:	e0 80 18 02 	l.sub r4,r0,r3
    8240:	e0 64 18 04 	l.or r3,r4,r3
    8244:	bd 83 00 00 	l.sfltsi r3,0x0
    8248:	10 00 00 03 	l.bf 8254 <fdt_next_node+0xf0>
    824c:	15 00 00 00 	l.nop 0x0
				return -FDT_ERR_NOTFOUND;
    8250:	9c 40 ff ff 	l.addi r2,r0,0xffffffff
				return nextoffset;
		}
	} while (tag != FDT_BEGIN_NODE);

	return offset;
}
    8254:	9c 21 00 18 	l.addi r1,r1,0x18
    8258:	a9 62 00 00 	l.ori r11,r2,0x0
    825c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8260:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    8264:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    8268:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    826c:	44 00 48 00 	l.jr r9
    8270:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00008274 <fdt_first_subnode>:

int fdt_first_subnode(const void *fdt, int offset)
{
    8274:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    8278:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    827c:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	int depth = 0;
    8280:	9c 40 00 00 	l.addi r2,r0,0x0

	offset = fdt_next_node(fdt, offset, &depth);
    8284:	a8 a1 00 00 	l.ori r5,r1,0x0
    8288:	07 ff ff b7 	l.jal 8164 <fdt_next_node>
    828c:	d4 01 10 00 	l.sw 0x0(r1),r2
	if (offset < 0 || depth != 1)
    8290:	e5 8b 10 00 	l.sflts r11,r2
    8294:	10 00 00 05 	l.bf 82a8 <fdt_first_subnode+0x34>
    8298:	84 61 00 00 	l.lwz r3,0x0(r1)
    829c:	bc 03 00 01 	l.sfeqi r3,0x1
    82a0:	10 00 00 03 	l.bf 82ac <fdt_first_subnode+0x38>
    82a4:	15 00 00 00 	l.nop 0x0
		return -FDT_ERR_NOTFOUND;
    82a8:	9d 60 ff ff 	l.addi r11,r0,0xffffffff

	return offset;
}
    82ac:	9c 21 00 0c 	l.addi r1,r1,0xc
    82b0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    82b4:	44 00 48 00 	l.jr r9
    82b8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000082bc <fdt_next_subnode>:

int fdt_next_subnode(const void *fdt, int offset)
{
    82bc:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    82c0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    82c4:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    82c8:	a8 43 00 00 	l.ori r2,r3,0x0
    82cc:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
	int depth = 1;
    82d0:	9c 60 00 01 	l.addi r3,r0,0x1
    82d4:	d4 01 18 00 	l.sw 0x0(r1),r3
	/*
	 * With respect to the parent, the depth of the next subnode will be
	 * the same as the last.
	 */
	do {
		offset = fdt_next_node(fdt, offset, &depth);
    82d8:	a8 62 00 00 	l.ori r3,r2,0x0
    82dc:	07 ff ff a2 	l.jal 8164 <fdt_next_node>
    82e0:	a8 a1 00 00 	l.ori r5,r1,0x0
		if (offset < 0 || depth < 1)
    82e4:	bd 8b 00 00 	l.sfltsi r11,0x0
    82e8:	10 00 00 0a 	l.bf 8310 <fdt_next_subnode+0x54>
    82ec:	a8 8b 00 00 	l.ori r4,r11,0x0
    82f0:	84 61 00 00 	l.lwz r3,0x0(r1)
    82f4:	bd a3 00 00 	l.sflesi r3,0x0
    82f8:	10 00 00 06 	l.bf 8310 <fdt_next_subnode+0x54>
    82fc:	bc 23 00 01 	l.sfnei r3,0x1
			return -FDT_ERR_NOTFOUND;
	} while (depth > 1);
    8300:	13 ff ff f6 	l.bf 82d8 <fdt_next_subnode+0x1c>
    8304:	15 00 00 00 	l.nop 0x0

	return offset;
}
    8308:	00 00 00 04 	l.j 8318 <fdt_next_subnode+0x5c>
    830c:	9c 21 00 10 	l.addi r1,r1,0x10
	 * the same as the last.
	 */
	do {
		offset = fdt_next_node(fdt, offset, &depth);
		if (offset < 0 || depth < 1)
			return -FDT_ERR_NOTFOUND;
    8310:	9c 80 ff ff 	l.addi r4,r0,0xffffffff
	} while (depth > 1);

	return offset;
}
    8314:	9c 21 00 10 	l.addi r1,r1,0x10
    8318:	a9 64 00 00 	l.ori r11,r4,0x0
    831c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8320:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    8324:	44 00 48 00 	l.jr r9
    8328:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

0000832c <_fdt_find_string>:

const char *_fdt_find_string(const char *strtab, int tabsize, const char *s)
{
    832c:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    8330:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    8334:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    8338:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    833c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8340:	a8 43 00 00 	l.ori r2,r3,0x0
    8344:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	int len = strlen(s) + 1;
    8348:	a8 65 00 00 	l.ori r3,r5,0x0

	return offset;
}

const char *_fdt_find_string(const char *strtab, int tabsize, const char *s)
{
    834c:	aa 44 00 00 	l.ori r18,r4,0x0
	int len = strlen(s) + 1;
    8350:	07 ff fd 65 	l.jal 78e4 <strlen>
    8354:	aa 05 00 00 	l.ori r16,r5,0x0
    8358:	9d cb 00 01 	l.addi r14,r11,0x1
	const char *last = strtab + tabsize - len;
    835c:	e2 52 70 02 	l.sub r18,r18,r14
	const char *p;

	for (p = strtab; p <= last; p++)
    8360:	00 00 00 09 	l.j 8384 <_fdt_find_string+0x58>
    8364:	e2 42 90 00 	l.add r18,r2,r18
		if (memcmp(p, s, len) == 0)
    8368:	a8 90 00 00 	l.ori r4,r16,0x0
    836c:	07 ff fe 0b 	l.jal 7b98 <memcmp>
    8370:	a8 ae 00 00 	l.ori r5,r14,0x0
    8374:	bc 0b 00 00 	l.sfeqi r11,0x0
    8378:	10 00 00 07 	l.bf 8394 <_fdt_find_string+0x68>
    837c:	15 00 00 00 	l.nop 0x0
{
	int len = strlen(s) + 1;
	const char *last = strtab + tabsize - len;
	const char *p;

	for (p = strtab; p <= last; p++)
    8380:	9c 42 00 01 	l.addi r2,r2,0x1
    8384:	e4 a2 90 00 	l.sfleu r2,r18
    8388:	13 ff ff f8 	l.bf 8368 <_fdt_find_string+0x3c>
    838c:	a8 62 00 00 	l.ori r3,r2,0x0
		if (memcmp(p, s, len) == 0)
			return p;
	return NULL;
    8390:	9c 40 00 00 	l.addi r2,r0,0x0
}
    8394:	9c 21 00 14 	l.addi r1,r1,0x14
    8398:	a9 62 00 00 	l.ori r11,r2,0x0
    839c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    83a0:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    83a4:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    83a8:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    83ac:	44 00 48 00 	l.jr r9
    83b0:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

000083b4 <fdt_move>:

int fdt_move(const void *fdt, void *buf, int bufsize)
{
    83b4:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    83b8:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    83bc:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    83c0:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    83c4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    83c8:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
    83cc:	a9 c3 00 00 	l.ori r14,r3,0x0
    83d0:	aa 44 00 00 	l.ori r18,r4,0x0
	FDT_CHECK_HEADER(fdt);
    83d4:	07 ff fe 61 	l.jal 7d58 <fdt_check_header>
    83d8:	aa 05 00 00 	l.ori r16,r5,0x0
    83dc:	bc 2b 00 00 	l.sfnei r11,0x0
    83e0:	10 00 00 20 	l.bf 8460 <fdt_move+0xac>
    83e4:	a8 4b 00 00 	l.ori r2,r11,0x0

	if (fdt_totalsize(fdt) > bufsize)
    83e8:	9c ce 00 04 	l.addi r6,r14,0x4
    83ec:	9c a0 00 00 	l.addi r5,r0,0x0
    83f0:	8d 66 00 00 	l.lbz r11,0x0(r6)
    83f4:	8d 06 00 01 	l.lbz r8,0x1(r6)
    83f8:	8c e6 00 02 	l.lbz r7,0x2(r6)
    83fc:	b8 6b 00 18 	l.slli r3,r11,0x18
    8400:	8c c6 00 03 	l.lbz r6,0x3(r6)
    8404:	b8 88 00 10 	l.slli r4,r8,0x10
    8408:	e0 66 18 04 	l.or r3,r6,r3
    840c:	e0 63 20 04 	l.or r3,r3,r4
    8410:	b8 87 00 08 	l.slli r4,r7,0x8
    8414:	e0 63 20 04 	l.or r3,r3,r4
    8418:	b8 90 00 9f 	l.srai r4,r16,0x1f
    841c:	e4 25 20 00 	l.sfne r5,r4
    8420:	10 00 00 04 	l.bf 8430 <fdt_move+0x7c>
    8424:	e4 43 80 00 	l.sfgtu r3,r16
    8428:	10 00 00 0d 	l.bf 845c <fdt_move+0xa8>
    842c:	15 00 00 00 	l.nop 0x0
		return -FDT_ERR_NOSPACE;

	memmove(buf, fdt, fdt_totalsize(fdt));
    8430:	b9 6b 00 18 	l.slli r11,r11,0x18
    8434:	b9 08 00 10 	l.slli r8,r8,0x10
    8438:	b8 e7 00 08 	l.slli r7,r7,0x8
    843c:	e0 c6 58 04 	l.or r6,r6,r11
    8440:	a8 72 00 00 	l.ori r3,r18,0x0
    8444:	e0 a6 40 04 	l.or r5,r6,r8
    8448:	a8 8e 00 00 	l.ori r4,r14,0x0
    844c:	07 ff fd b0 	l.jal 7b0c <memmove>
    8450:	e0 a5 38 04 	l.or r5,r5,r7
	return 0;
    8454:	00 00 00 04 	l.j 8464 <fdt_move+0xb0>
    8458:	9c 21 00 14 	l.addi r1,r1,0x14
int fdt_move(const void *fdt, void *buf, int bufsize)
{
	FDT_CHECK_HEADER(fdt);

	if (fdt_totalsize(fdt) > bufsize)
		return -FDT_ERR_NOSPACE;
    845c:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd

	memmove(buf, fdt, fdt_totalsize(fdt));
	return 0;
}
    8460:	9c 21 00 14 	l.addi r1,r1,0x14
    8464:	a9 62 00 00 	l.ori r11,r2,0x0
    8468:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    846c:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    8470:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    8474:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    8478:	44 00 48 00 	l.jr r9
    847c:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00008480 <fdt64_to_cpu>:
{
	return (__force fdt32_t)CPU_TO_FDT32(x);
}

static inline uint64_t fdt64_to_cpu(fdt64_t x)
{
    8480:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    8484:	d4 01 18 00 	l.sw 0x0(r1),r3
    8488:	d4 01 20 04 	l.sw 0x4(r1),r4
	return (__force uint64_t)CPU_TO_FDT64(x);
    848c:	8d 61 00 00 	l.lbz r11,0x0(r1)
    8490:	8c a1 00 01 	l.lbz r5,0x1(r1)
    8494:	b9 6b 00 18 	l.slli r11,r11,0x18
    8498:	b8 a5 00 10 	l.slli r5,r5,0x10
    849c:	8d 81 00 04 	l.lbz r12,0x4(r1)
    84a0:	e1 6b 28 04 	l.or r11,r11,r5
    84a4:	8c a1 00 02 	l.lbz r5,0x2(r1)
    84a8:	8c c1 00 05 	l.lbz r6,0x5(r1)
    84ac:	b9 8c 00 18 	l.slli r12,r12,0x18
    84b0:	b8 a5 00 08 	l.slli r5,r5,0x8
    84b4:	8c 61 00 06 	l.lbz r3,0x6(r1)
    84b8:	a4 84 00 ff 	l.andi r4,r4,0xff
    84bc:	b8 c6 00 10 	l.slli r6,r6,0x10
    84c0:	e0 84 60 04 	l.or r4,r4,r12
    84c4:	e1 6b 28 04 	l.or r11,r11,r5
    84c8:	b8 63 00 08 	l.slli r3,r3,0x8
    84cc:	8c a1 00 03 	l.lbz r5,0x3(r1)
    84d0:	e1 84 30 04 	l.or r12,r4,r6
}
    84d4:	e1 6b 28 04 	l.or r11,r11,r5
    84d8:	e1 8c 18 04 	l.or r12,r12,r3
    84dc:	44 00 48 00 	l.jr r9
    84e0:	9c 21 00 08 	l.addi r1,r1,0x8

000084e4 <_fdt_offset_ptr>:
    84e4:	9c a3 00 08 	l.addi r5,r3,0x8
    84e8:	8c e5 00 00 	l.lbz r7,0x0(r5)
    84ec:	8c c5 00 03 	l.lbz r6,0x3(r5)
    84f0:	b8 e7 00 18 	l.slli r7,r7,0x18
    84f4:	e0 e6 38 04 	l.or r7,r6,r7
    84f8:	8c c5 00 01 	l.lbz r6,0x1(r5)
    84fc:	b8 c6 00 10 	l.slli r6,r6,0x10
    8500:	e0 e7 30 04 	l.or r7,r7,r6
    8504:	8c c5 00 02 	l.lbz r6,0x2(r5)
    8508:	b8 c6 00 08 	l.slli r6,r6,0x8
    850c:	e0 a7 30 04 	l.or r5,r7,r6
    8510:	e0 85 20 00 	l.add r4,r5,r4
}
    8514:	44 00 48 00 	l.jr r9
    8518:	e1 63 20 00 	l.add r11,r3,r4

0000851c <_fdt_mem_rsv>:

static inline const struct fdt_reserve_entry *_fdt_mem_rsv(const void *fdt, int n)
{
	const struct fdt_reserve_entry *rsv_table =
		(const struct fdt_reserve_entry *)
		((const char *)fdt + fdt_off_mem_rsvmap(fdt));
    851c:	9c a3 00 10 	l.addi r5,r3,0x10

	return rsv_table + n;
    8520:	b8 84 00 04 	l.slli r4,r4,0x4
}

static inline const struct fdt_reserve_entry *_fdt_mem_rsv(const void *fdt, int n)
{
	const struct fdt_reserve_entry *rsv_table =
		(const struct fdt_reserve_entry *)
    8524:	8c e5 00 00 	l.lbz r7,0x0(r5)
    8528:	8c c5 00 03 	l.lbz r6,0x3(r5)
    852c:	b8 e7 00 18 	l.slli r7,r7,0x18
    8530:	e0 e6 38 04 	l.or r7,r6,r7
    8534:	8c c5 00 01 	l.lbz r6,0x1(r5)
    8538:	b8 c6 00 10 	l.slli r6,r6,0x10
    853c:	e0 e7 30 04 	l.or r7,r7,r6
    8540:	8c c5 00 02 	l.lbz r6,0x2(r5)
    8544:	b8 c6 00 08 	l.slli r6,r6,0x8
		((const char *)fdt + fdt_off_mem_rsvmap(fdt));
    8548:	e0 a7 30 04 	l.or r5,r7,r6
	return (void *)(uintptr_t)_fdt_offset_ptr(fdt, offset);
}

static inline const struct fdt_reserve_entry *_fdt_mem_rsv(const void *fdt, int n)
{
	const struct fdt_reserve_entry *rsv_table =
    854c:	e0 63 28 00 	l.add r3,r3,r5
		(const struct fdt_reserve_entry *)
		((const char *)fdt + fdt_off_mem_rsvmap(fdt));

	return rsv_table + n;
}
    8550:	44 00 48 00 	l.jr r9
    8554:	e1 63 20 00 	l.add r11,r3,r4

00008558 <_nextprop>:
		i++;
	return i;
}

static int _nextprop(const void *fdt, int offset)
{
    8558:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    855c:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    8560:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8564:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    8568:	a9 c3 00 00 	l.ori r14,r3,0x0
    856c:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
    8570:	a8 44 00 00 	l.ori r2,r4,0x0
	uint32_t tag;
	int nextoffset;

	do {
		tag = fdt_next_tag(fdt, offset, &nextoffset);
    8574:	a8 6e 00 00 	l.ori r3,r14,0x0
    8578:	a8 82 00 00 	l.ori r4,r2,0x0
    857c:	07 ff fe 6f 	l.jal 7f38 <fdt_next_tag>
    8580:	a8 a1 00 00 	l.ori r5,r1,0x0

		switch (tag) {
    8584:	bc 0b 00 03 	l.sfeqi r11,0x3
    8588:	10 00 00 0f 	l.bf 85c4 <_nextprop+0x6c>
    858c:	bc 0b 00 09 	l.sfeqi r11,0x9
    8590:	0c 00 00 07 	l.bnf 85ac <_nextprop+0x54>
    8594:	84 41 00 00 	l.lwz r2,0x0(r1)
		case FDT_END:
			if (nextoffset >= 0)
    8598:	bd 62 00 00 	l.sfgesi r2,0x0
    859c:	10 00 00 09 	l.bf 85c0 <_nextprop+0x68>
    85a0:	15 00 00 00 	l.nop 0x0
		}
		offset = nextoffset;
	} while (tag == FDT_NOP);

	return -FDT_ERR_NOTFOUND;
}
    85a4:	00 00 00 09 	l.j 85c8 <_nextprop+0x70>
    85a8:	9c 21 00 14 	l.addi r1,r1,0x14

		case FDT_PROP:
			return offset;
		}
		offset = nextoffset;
	} while (tag == FDT_NOP);
    85ac:	bc 0b 00 04 	l.sfeqi r11,0x4
    85b0:	13 ff ff f2 	l.bf 8578 <_nextprop+0x20>
    85b4:	a8 6e 00 00 	l.ori r3,r14,0x0

	return -FDT_ERR_NOTFOUND;
    85b8:	00 00 00 03 	l.j 85c4 <_nextprop+0x6c>
    85bc:	9c 40 ff ff 	l.addi r2,r0,0xffffffff
		tag = fdt_next_tag(fdt, offset, &nextoffset);

		switch (tag) {
		case FDT_END:
			if (nextoffset >= 0)
				return -FDT_ERR_BADSTRUCTURE;
    85c0:	9c 40 ff f5 	l.addi r2,r0,0xfffffff5
		}
		offset = nextoffset;
	} while (tag == FDT_NOP);

	return -FDT_ERR_NOTFOUND;
}
    85c4:	9c 21 00 14 	l.addi r1,r1,0x14
    85c8:	a9 62 00 00 	l.ori r11,r2,0x0
    85cc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    85d0:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    85d4:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    85d8:	44 00 48 00 	l.jr r9
    85dc:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

000085e0 <fdt_string>:
		return 0;
}

const char *fdt_string(const void *fdt, int stroffset)
{
	return (const char *)fdt + fdt_off_dt_strings(fdt) + stroffset;
    85e0:	9c a3 00 0c 	l.addi r5,r3,0xc
    85e4:	8c e5 00 00 	l.lbz r7,0x0(r5)
    85e8:	8c c5 00 03 	l.lbz r6,0x3(r5)
    85ec:	b8 e7 00 18 	l.slli r7,r7,0x18
    85f0:	e0 e6 38 04 	l.or r7,r6,r7
    85f4:	8c c5 00 01 	l.lbz r6,0x1(r5)
    85f8:	b8 c6 00 10 	l.slli r6,r6,0x10
    85fc:	e0 e7 30 04 	l.or r7,r7,r6
    8600:	8c c5 00 02 	l.lbz r6,0x2(r5)
    8604:	b8 c6 00 08 	l.slli r6,r6,0x8
    8608:	e0 a7 30 04 	l.or r5,r7,r6
    860c:	e0 85 20 00 	l.add r4,r5,r4
}
    8610:	44 00 48 00 	l.jr r9
    8614:	e1 63 20 00 	l.add r11,r3,r4

00008618 <fdt_get_mem_rsv>:

	return (strlen(p) == len) && (memcmp(p, s, len) == 0);
}

int fdt_get_mem_rsv(const void *fdt, int n, uint64_t *address, uint64_t *size)
{
    8618:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    861c:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
    8620:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    8624:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
    8628:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
    862c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8630:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
    8634:	aa 03 00 00 	l.ori r16,r3,0x0
    8638:	a9 c4 00 00 	l.ori r14,r4,0x0
    863c:	aa 85 00 00 	l.ori r20,r5,0x0
	FDT_CHECK_HEADER(fdt);
    8640:	07 ff fd c6 	l.jal 7d58 <fdt_check_header>
    8644:	aa 46 00 00 	l.ori r18,r6,0x0
    8648:	bc 2b 00 00 	l.sfnei r11,0x0
    864c:	10 00 00 14 	l.bf 869c <fdt_get_mem_rsv+0x84>
    8650:	a8 4b 00 00 	l.ori r2,r11,0x0
	*address = fdt64_to_cpu(_fdt_mem_rsv(fdt, n)->address);
    8654:	a8 70 00 00 	l.ori r3,r16,0x0
    8658:	07 ff ff b1 	l.jal 851c <_fdt_mem_rsv>
    865c:	a8 8e 00 00 	l.ori r4,r14,0x0
    8660:	84 6b 00 00 	l.lwz r3,0x0(r11)
    8664:	84 8b 00 04 	l.lwz r4,0x4(r11)
    8668:	07 ff ff 86 	l.jal 8480 <fdt64_to_cpu>
    866c:	15 00 00 00 	l.nop 0x0
	*size = fdt64_to_cpu(_fdt_mem_rsv(fdt, n)->size);
    8670:	a8 70 00 00 	l.ori r3,r16,0x0
}

int fdt_get_mem_rsv(const void *fdt, int n, uint64_t *address, uint64_t *size)
{
	FDT_CHECK_HEADER(fdt);
	*address = fdt64_to_cpu(_fdt_mem_rsv(fdt, n)->address);
    8674:	d4 14 58 00 	l.sw 0x0(r20),r11
    8678:	d4 14 60 04 	l.sw 0x4(r20),r12
	*size = fdt64_to_cpu(_fdt_mem_rsv(fdt, n)->size);
    867c:	07 ff ff a8 	l.jal 851c <_fdt_mem_rsv>
    8680:	a8 8e 00 00 	l.ori r4,r14,0x0
    8684:	84 6b 00 08 	l.lwz r3,0x8(r11)
    8688:	84 8b 00 0c 	l.lwz r4,0xc(r11)
    868c:	07 ff ff 7d 	l.jal 8480 <fdt64_to_cpu>
    8690:	15 00 00 00 	l.nop 0x0
    8694:	d4 12 58 00 	l.sw 0x0(r18),r11
    8698:	d4 12 60 04 	l.sw 0x4(r18),r12
	return 0;
}
    869c:	9c 21 00 18 	l.addi r1,r1,0x18
    86a0:	a9 62 00 00 	l.ori r11,r2,0x0
    86a4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    86a8:	84 41 ff e8 	l.lwz r2,0xffffffe8(r1)
    86ac:	85 c1 ff ec 	l.lwz r14,0xffffffec(r1)
    86b0:	86 01 ff f0 	l.lwz r16,0xfffffff0(r1)
    86b4:	86 41 ff f4 	l.lwz r18,0xfffffff4(r1)
    86b8:	44 00 48 00 	l.jr r9
    86bc:	86 81 ff f8 	l.lwz r20,0xfffffff8(r1)

000086c0 <fdt_num_mem_rsv>:

int fdt_num_mem_rsv(const void *fdt)
{
    86c0:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    86c4:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    86c8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    86cc:	a9 c3 00 00 	l.ori r14,r3,0x0
    86d0:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    86d4:	9c 40 00 00 	l.addi r2,r0,0x0
	int i = 0;

	while (fdt64_to_cpu(_fdt_mem_rsv(fdt, i)->size) != 0)
    86d8:	a8 6e 00 00 	l.ori r3,r14,0x0
    86dc:	07 ff ff 90 	l.jal 851c <_fdt_mem_rsv>
    86e0:	a8 82 00 00 	l.ori r4,r2,0x0
    86e4:	84 6b 00 08 	l.lwz r3,0x8(r11)
    86e8:	84 8b 00 0c 	l.lwz r4,0xc(r11)
    86ec:	07 ff ff 65 	l.jal 8480 <fdt64_to_cpu>
    86f0:	15 00 00 00 	l.nop 0x0
    86f4:	e1 6b 60 04 	l.or r11,r11,r12
    86f8:	bc 2b 00 00 	l.sfnei r11,0x0
    86fc:	13 ff ff f7 	l.bf 86d8 <fdt_num_mem_rsv+0x18>
    8700:	9c 42 00 01 	l.addi r2,r2,0x1
    8704:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
		i++;
	return i;
}
    8708:	9c 21 00 0c 	l.addi r1,r1,0xc
    870c:	a9 62 00 00 	l.ori r11,r2,0x0
    8710:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8714:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    8718:	44 00 48 00 	l.jr r9
    871c:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

00008720 <fdt_subnode_offset_namelen>:
	return -FDT_ERR_NOTFOUND;
}

int fdt_subnode_offset_namelen(const void *fdt, int offset,
			       const char *name, int namelen)
{
    8720:	d7 e1 17 e0 	l.sw 0xffffffe0(r1),r2
    8724:	d7 e1 77 e4 	l.sw 0xffffffe4(r1),r14
    8728:	d7 e1 97 ec 	l.sw 0xffffffec(r1),r18
    872c:	d7 e1 a7 f0 	l.sw 0xfffffff0(r1),r20
    8730:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8734:	d7 e1 87 e8 	l.sw 0xffffffe8(r1),r16
    8738:	d7 e1 b7 f4 	l.sw 0xfffffff4(r1),r22
    873c:	d7 e1 c7 f8 	l.sw 0xfffffff8(r1),r24
    8740:	9c 21 ff dc 	l.addi r1,r1,0xffffffdc
    8744:	aa 43 00 00 	l.ori r18,r3,0x0
    8748:	a8 44 00 00 	l.ori r2,r4,0x0
    874c:	aa 85 00 00 	l.ori r20,r5,0x0
	int depth;

	FDT_CHECK_HEADER(fdt);
    8750:	07 ff fd 82 	l.jal 7d58 <fdt_check_header>
    8754:	a9 c6 00 00 	l.ori r14,r6,0x0
    8758:	bc 2b 00 00 	l.sfnei r11,0x0
    875c:	10 00 00 33 	l.bf 8828 <fdt_subnode_offset_namelen+0x108>
    8760:	15 00 00 00 	l.nop 0x0

	for (depth = 0;
    8764:	d4 01 58 00 	l.sw 0x0(r1),r11
    8768:	00 00 00 26 	l.j 8800 <fdt_subnode_offset_namelen+0xe0>
    876c:	9f 0e 00 01 	l.addi r24,r14,0x1
	     (offset >= 0) && (depth >= 0);
	     offset = fdt_next_node(fdt, offset, &depth))
		if ((depth == 1)
    8770:	10 00 00 20 	l.bf 87f0 <fdt_subnode_offset_namelen+0xd0>
    8774:	a8 82 00 00 	l.ori r4,r2,0x0
#include "libfdt_internal.h"

static int _fdt_nodename_eq(const void *fdt, int offset,
			    const char *s, int len)
{
	const char *p = fdt_offset_ptr(fdt, offset + FDT_TAGSIZE, len+1);
    8778:	a8 72 00 00 	l.ori r3,r18,0x0
    877c:	9c 82 00 04 	l.addi r4,r2,0x4
    8780:	07 ff fd bb 	l.jal 7e6c <fdt_offset_ptr>
    8784:	a8 b8 00 00 	l.ori r5,r24,0x0

	if (! p)
    8788:	bc 0b 00 00 	l.sfeqi r11,0x0
    878c:	10 00 00 18 	l.bf 87ec <fdt_subnode_offset_namelen+0xcc>
    8790:	aa 0b 00 00 	l.ori r16,r11,0x0
		/* short match */
		return 0;

	if (memcmp(p, s, len) != 0)
    8794:	a8 6b 00 00 	l.ori r3,r11,0x0
    8798:	a8 94 00 00 	l.ori r4,r20,0x0
    879c:	07 ff fc ff 	l.jal 7b98 <memcmp>
    87a0:	a8 ae 00 00 	l.ori r5,r14,0x0
    87a4:	bc 2b 00 00 	l.sfnei r11,0x0
    87a8:	10 00 00 12 	l.bf 87f0 <fdt_subnode_offset_namelen+0xd0>
    87ac:	a8 82 00 00 	l.ori r4,r2,0x0
		return 0;

	if (p[len] == '\0')
    87b0:	e2 10 70 00 	l.add r16,r16,r14
    87b4:	92 10 00 00 	l.lbs r16,0x0(r16)
    87b8:	bc 10 00 00 	l.sfeqi r16,0x0
    87bc:	10 00 00 1b 	l.bf 8828 <fdt_subnode_offset_namelen+0x108>
    87c0:	a9 62 00 00 	l.ori r11,r2,0x0
		return 1;
	else if (!memchr(s, '@', len) && (p[len] == '@'))
    87c4:	a8 74 00 00 	l.ori r3,r20,0x0
    87c8:	9c 80 00 40 	l.addi r4,r0,0x40
    87cc:	07 ff fd 02 	l.jal 7bd4 <memchr>
    87d0:	a8 ae 00 00 	l.ori r5,r14,0x0
    87d4:	bc 2b 00 00 	l.sfnei r11,0x0
    87d8:	10 00 00 06 	l.bf 87f0 <fdt_subnode_offset_namelen+0xd0>
    87dc:	a8 82 00 00 	l.ori r4,r2,0x0
    87e0:	bc 10 00 40 	l.sfeqi r16,0x40
    87e4:	10 00 00 11 	l.bf 8828 <fdt_subnode_offset_namelen+0x108>
    87e8:	a9 62 00 00 	l.ori r11,r2,0x0

	FDT_CHECK_HEADER(fdt);

	for (depth = 0;
	     (offset >= 0) && (depth >= 0);
	     offset = fdt_next_node(fdt, offset, &depth))
    87ec:	a8 82 00 00 	l.ori r4,r2,0x0
    87f0:	a8 72 00 00 	l.ori r3,r18,0x0
    87f4:	07 ff fe 5c 	l.jal 8164 <fdt_next_node>
    87f8:	a8 a1 00 00 	l.ori r5,r1,0x0
    87fc:	a8 4b 00 00 	l.ori r2,r11,0x0
{
	int depth;

	FDT_CHECK_HEADER(fdt);

	for (depth = 0;
    8800:	bd 82 00 00 	l.sfltsi r2,0x0
    8804:	10 00 00 05 	l.bf 8818 <fdt_subnode_offset_namelen+0xf8>
    8808:	84 c1 00 00 	l.lwz r6,0x0(r1)
    880c:	bd 66 00 00 	l.sfgesi r6,0x0
    8810:	13 ff ff d8 	l.bf 8770 <fdt_subnode_offset_namelen+0x50>
    8814:	bc 26 00 01 	l.sfnei r6,0x1
	     offset = fdt_next_node(fdt, offset, &depth))
		if ((depth == 1)
		    && _fdt_nodename_eq(fdt, offset, name, namelen))
			return offset;

	if (depth < 0)
    8818:	bd 66 00 00 	l.sfgesi r6,0x0
    881c:	10 00 00 03 	l.bf 8828 <fdt_subnode_offset_namelen+0x108>
    8820:	a9 62 00 00 	l.ori r11,r2,0x0
    8824:	9d 60 ff ff 	l.addi r11,r0,0xffffffff
		return -FDT_ERR_NOTFOUND;
	return offset; /* error */
}
    8828:	9c 21 00 24 	l.addi r1,r1,0x24
    882c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8830:	84 41 ff e0 	l.lwz r2,0xffffffe0(r1)
    8834:	85 c1 ff e4 	l.lwz r14,0xffffffe4(r1)
    8838:	86 01 ff e8 	l.lwz r16,0xffffffe8(r1)
    883c:	86 41 ff ec 	l.lwz r18,0xffffffec(r1)
    8840:	86 81 ff f0 	l.lwz r20,0xfffffff0(r1)
    8844:	86 c1 ff f4 	l.lwz r22,0xfffffff4(r1)
    8848:	44 00 48 00 	l.jr r9
    884c:	87 01 ff f8 	l.lwz r24,0xfffffff8(r1)

00008850 <fdt_subnode_offset>:

int fdt_subnode_offset(const void *fdt, int parentoffset,
		       const char *name)
{
    8850:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8854:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    8858:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    885c:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    8860:	aa 03 00 00 	l.ori r16,r3,0x0
    8864:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
	return fdt_subnode_offset_namelen(fdt, parentoffset, name, strlen(name));
    8868:	a8 65 00 00 	l.ori r3,r5,0x0
	return offset; /* error */
}

int fdt_subnode_offset(const void *fdt, int parentoffset,
		       const char *name)
{
    886c:	a9 c4 00 00 	l.ori r14,r4,0x0
	return fdt_subnode_offset_namelen(fdt, parentoffset, name, strlen(name));
    8870:	07 ff fc 1d 	l.jal 78e4 <strlen>
    8874:	a8 45 00 00 	l.ori r2,r5,0x0
}
    8878:	9c 21 00 10 	l.addi r1,r1,0x10
}

int fdt_subnode_offset(const void *fdt, int parentoffset,
		       const char *name)
{
	return fdt_subnode_offset_namelen(fdt, parentoffset, name, strlen(name));
    887c:	a8 70 00 00 	l.ori r3,r16,0x0
    8880:	a8 8e 00 00 	l.ori r4,r14,0x0
    8884:	a8 a2 00 00 	l.ori r5,r2,0x0
    8888:	a8 cb 00 00 	l.ori r6,r11,0x0
}
    888c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8890:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    8894:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
}

int fdt_subnode_offset(const void *fdt, int parentoffset,
		       const char *name)
{
	return fdt_subnode_offset_namelen(fdt, parentoffset, name, strlen(name));
    8898:	03 ff ff a2 	l.j 8720 <fdt_subnode_offset_namelen>
    889c:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

000088a0 <fdt_get_name>:

	return offset;
}

const char *fdt_get_name(const void *fdt, int nodeoffset, int *len)
{
    88a0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    88a4:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    88a8:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    88ac:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    88b0:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    88b4:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
    88b8:	aa 43 00 00 	l.ori r18,r3,0x0
    88bc:	aa 04 00 00 	l.ori r16,r4,0x0
	const struct fdt_node_header *nh = _fdt_offset_ptr(fdt, nodeoffset);
    88c0:	07 ff ff 09 	l.jal 84e4 <_fdt_offset_ptr>
    88c4:	a8 45 00 00 	l.ori r2,r5,0x0
	int err;

	if (((err = fdt_check_header(fdt)) != 0)
    88c8:	a8 72 00 00 	l.ori r3,r18,0x0
    88cc:	07 ff fd 23 	l.jal 7d58 <fdt_check_header>
    88d0:	a9 cb 00 00 	l.ori r14,r11,0x0
    88d4:	bc 2b 00 00 	l.sfnei r11,0x0
    88d8:	10 00 00 10 	l.bf 8918 <fdt_get_name+0x78>
    88dc:	a8 cb 00 00 	l.ori r6,r11,0x0
	    || ((err = _fdt_check_node_offset(fdt, nodeoffset)) < 0))
    88e0:	a8 72 00 00 	l.ori r3,r18,0x0
    88e4:	07 ff fd f4 	l.jal 80b4 <_fdt_check_node_offset>
    88e8:	a8 90 00 00 	l.ori r4,r16,0x0
    88ec:	bd 8b 00 00 	l.sfltsi r11,0x0
    88f0:	10 00 00 0a 	l.bf 8918 <fdt_get_name+0x78>
    88f4:	a8 cb 00 00 	l.ori r6,r11,0x0
			goto fail;

	if (len)
    88f8:	bc 02 00 00 	l.sfeqi r2,0x0
    88fc:	10 00 00 05 	l.bf 8910 <fdt_get_name+0x70>
    8900:	15 00 00 00 	l.nop 0x0
		*len = strlen(nh->name);
    8904:	07 ff fb f8 	l.jal 78e4 <strlen>
    8908:	9c 6e 00 04 	l.addi r3,r14,0x4
    890c:	d4 02 58 00 	l.sw 0x0(r2),r11

	return nh->name;
    8910:	00 00 00 07 	l.j 892c <fdt_get_name+0x8c>
    8914:	9d 6e 00 04 	l.addi r11,r14,0x4

 fail:
	if (len)
    8918:	bc 02 00 00 	l.sfeqi r2,0x0
    891c:	10 00 00 04 	l.bf 892c <fdt_get_name+0x8c>
    8920:	a9 62 00 00 	l.ori r11,r2,0x0
		*len = err;
    8924:	d4 02 30 00 	l.sw 0x0(r2),r6
	return NULL;
    8928:	9d 60 00 00 	l.addi r11,r0,0x0
}
    892c:	9c 21 00 14 	l.addi r1,r1,0x14
    8930:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8934:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    8938:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    893c:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    8940:	44 00 48 00 	l.jr r9
    8944:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00008948 <fdt_first_property_offset>:

int fdt_first_property_offset(const void *fdt, int nodeoffset)
{
    8948:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    894c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8950:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	int offset;

	if ((offset = _fdt_check_node_offset(fdt, nodeoffset)) < 0)
    8954:	07 ff fd d8 	l.jal 80b4 <_fdt_check_node_offset>
    8958:	a8 43 00 00 	l.ori r2,r3,0x0
    895c:	bd 8b 00 00 	l.sfltsi r11,0x0
    8960:	10 00 00 07 	l.bf 897c <fdt_first_property_offset+0x34>
    8964:	a8 8b 00 00 	l.ori r4,r11,0x0
		return offset;

	return _nextprop(fdt, offset);
}
    8968:	9c 21 00 08 	l.addi r1,r1,0x8
	int offset;

	if ((offset = _fdt_check_node_offset(fdt, nodeoffset)) < 0)
		return offset;

	return _nextprop(fdt, offset);
    896c:	a8 62 00 00 	l.ori r3,r2,0x0
}
    8970:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
	int offset;

	if ((offset = _fdt_check_node_offset(fdt, nodeoffset)) < 0)
		return offset;

	return _nextprop(fdt, offset);
    8974:	03 ff fe f9 	l.j 8558 <_nextprop>
    8978:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)
}
    897c:	9c 21 00 08 	l.addi r1,r1,0x8
    8980:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8984:	44 00 48 00 	l.jr r9
    8988:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000898c <fdt_next_property_offset>:

int fdt_next_property_offset(const void *fdt, int offset)
{
    898c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    8990:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8994:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	if ((offset = _fdt_check_prop_offset(fdt, offset)) < 0)
    8998:	07 ff fd dd 	l.jal 810c <_fdt_check_prop_offset>
    899c:	a8 43 00 00 	l.ori r2,r3,0x0
    89a0:	bd 8b 00 00 	l.sfltsi r11,0x0
    89a4:	10 00 00 07 	l.bf 89c0 <fdt_next_property_offset+0x34>
    89a8:	a8 8b 00 00 	l.ori r4,r11,0x0
		return offset;

	return _nextprop(fdt, offset);
}
    89ac:	9c 21 00 08 	l.addi r1,r1,0x8
int fdt_next_property_offset(const void *fdt, int offset)
{
	if ((offset = _fdt_check_prop_offset(fdt, offset)) < 0)
		return offset;

	return _nextprop(fdt, offset);
    89b0:	a8 62 00 00 	l.ori r3,r2,0x0
}
    89b4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
int fdt_next_property_offset(const void *fdt, int offset)
{
	if ((offset = _fdt_check_prop_offset(fdt, offset)) < 0)
		return offset;

	return _nextprop(fdt, offset);
    89b8:	03 ff fe e8 	l.j 8558 <_nextprop>
    89bc:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)
}
    89c0:	9c 21 00 08 	l.addi r1,r1,0x8
    89c4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    89c8:	44 00 48 00 	l.jr r9
    89cc:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000089d0 <fdt_get_property_by_offset>:

const struct fdt_property *fdt_get_property_by_offset(const void *fdt,
						      int offset,
						      int *lenp)
{
    89d0:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    89d4:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    89d8:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    89dc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    89e0:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    89e4:	a8 45 00 00 	l.ori r2,r5,0x0
    89e8:	aa 03 00 00 	l.ori r16,r3,0x0
	int err;
	const struct fdt_property *prop;

	if ((err = _fdt_check_prop_offset(fdt, offset)) < 0) {
    89ec:	07 ff fd c8 	l.jal 810c <_fdt_check_prop_offset>
    89f0:	a9 c4 00 00 	l.ori r14,r4,0x0
    89f4:	bd 6b 00 00 	l.sfgesi r11,0x0
    89f8:	10 00 00 08 	l.bf 8a18 <fdt_get_property_by_offset+0x48>
    89fc:	a8 ab 00 00 	l.ori r5,r11,0x0
		if (lenp)
    8a00:	bc 02 00 00 	l.sfeqi r2,0x0
    8a04:	10 00 00 16 	l.bf 8a5c <fdt_get_property_by_offset+0x8c>
    8a08:	a9 62 00 00 	l.ori r11,r2,0x0
			*lenp = err;
    8a0c:	d4 02 28 00 	l.sw 0x0(r2),r5
		return NULL;
    8a10:	00 00 00 13 	l.j 8a5c <fdt_get_property_by_offset+0x8c>
    8a14:	9d 60 00 00 	l.addi r11,r0,0x0
	}

	prop = _fdt_offset_ptr(fdt, offset);
    8a18:	a8 70 00 00 	l.ori r3,r16,0x0
    8a1c:	07 ff fe b2 	l.jal 84e4 <_fdt_offset_ptr>
    8a20:	a8 8e 00 00 	l.ori r4,r14,0x0

	if (lenp)
    8a24:	bc 02 00 00 	l.sfeqi r2,0x0
    8a28:	10 00 00 0d 	l.bf 8a5c <fdt_get_property_by_offset+0x8c>
    8a2c:	9c 6b 00 04 	l.addi r3,r11,0x4
		*lenp = fdt32_to_cpu(prop->len);
    8a30:	8c a3 00 00 	l.lbz r5,0x0(r3)
    8a34:	8c 83 00 03 	l.lbz r4,0x3(r3)
    8a38:	b8 a5 00 18 	l.slli r5,r5,0x18
    8a3c:	e0 a4 28 04 	l.or r5,r4,r5
    8a40:	8c 83 00 01 	l.lbz r4,0x1(r3)
    8a44:	b8 84 00 10 	l.slli r4,r4,0x10
    8a48:	e0 a5 20 04 	l.or r5,r5,r4
    8a4c:	8c 83 00 02 	l.lbz r4,0x2(r3)
    8a50:	b8 84 00 08 	l.slli r4,r4,0x8
    8a54:	e0 65 20 04 	l.or r3,r5,r4
    8a58:	d4 02 18 00 	l.sw 0x0(r2),r3

	return prop;
}
    8a5c:	9c 21 00 10 	l.addi r1,r1,0x10
    8a60:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8a64:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    8a68:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    8a6c:	44 00 48 00 	l.jr r9
    8a70:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00008a74 <fdt_get_property_namelen>:

const struct fdt_property *fdt_get_property_namelen(const void *fdt,
						    int offset,
						    const char *name,
						    int namelen, int *lenp)
{
    8a74:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8a78:	d7 e1 17 e0 	l.sw 0xffffffe0(r1),r2
    8a7c:	d7 e1 77 e4 	l.sw 0xffffffe4(r1),r14
    8a80:	d7 e1 87 e8 	l.sw 0xffffffe8(r1),r16
    8a84:	d7 e1 97 ec 	l.sw 0xffffffec(r1),r18
    8a88:	d7 e1 a7 f0 	l.sw 0xfffffff0(r1),r20
    8a8c:	d7 e1 b7 f4 	l.sw 0xfffffff4(r1),r22
    8a90:	d7 e1 c7 f8 	l.sw 0xfffffff8(r1),r24
    8a94:	9c 21 ff e0 	l.addi r1,r1,0xffffffe0
    8a98:	aa 03 00 00 	l.ori r16,r3,0x0
    8a9c:	ab 05 00 00 	l.ori r24,r5,0x0
    8aa0:	aa c6 00 00 	l.ori r22,r6,0x0
	for (offset = fdt_first_property_offset(fdt, offset);
    8aa4:	07 ff ff a9 	l.jal 8948 <fdt_first_property_offset>
    8aa8:	aa 87 00 00 	l.ori r20,r7,0x0
	     (offset >= 0);
	     (offset = fdt_next_property_offset(fdt, offset))) {
    8aac:	00 00 00 38 	l.j 8b8c <fdt_get_property_namelen+0x118>
    8ab0:	a9 cb 00 00 	l.ori r14,r11,0x0
		const struct fdt_property *prop;

		if (!(prop = fdt_get_property_by_offset(fdt, offset, lenp))) {
    8ab4:	a8 8e 00 00 	l.ori r4,r14,0x0
    8ab8:	07 ff ff c6 	l.jal 89d0 <fdt_get_property_by_offset>
    8abc:	a8 b4 00 00 	l.ori r5,r20,0x0
    8ac0:	bc 0b 00 00 	l.sfeqi r11,0x0
    8ac4:	10 00 00 1e 	l.bf 8b3c <fdt_get_property_namelen+0xc8>
    8ac8:	a8 4b 00 00 	l.ori r2,r11,0x0
			offset = -FDT_ERR_INTERNAL;
			break;
		}
		if (_fdt_string_eq(fdt, fdt32_to_cpu(prop->nameoff),
    8acc:	9d 0b 00 08 	l.addi r8,r11,0x8
    8ad0:	8c e8 00 00 	l.lbz r7,0x0(r8)
    8ad4:	8c 68 00 03 	l.lbz r3,0x3(r8)
    8ad8:	b8 e7 00 18 	l.slli r7,r7,0x18
    8adc:	8c c8 00 02 	l.lbz r6,0x2(r8)
    8ae0:	e0 e3 38 04 	l.or r7,r3,r7
    8ae4:	8c 68 00 01 	l.lbz r3,0x1(r8)
    8ae8:	b8 63 00 10 	l.slli r3,r3,0x10
    8aec:	b8 c6 00 08 	l.slli r6,r6,0x8
    8af0:	e0 e7 18 04 	l.or r7,r7,r3
}

static int _fdt_string_eq(const void *fdt, int stroffset,
			  const char *s, int len)
{
	const char *p = fdt_string(fdt, stroffset);
    8af4:	a8 70 00 00 	l.ori r3,r16,0x0
    8af8:	07 ff fe ba 	l.jal 85e0 <fdt_string>
    8afc:	e0 87 30 04 	l.or r4,r7,r6

	return (strlen(p) == len) && (memcmp(p, s, len) == 0);
    8b00:	a8 6b 00 00 	l.ori r3,r11,0x0
    8b04:	07 ff fb 78 	l.jal 78e4 <strlen>
    8b08:	aa 4b 00 00 	l.ori r18,r11,0x0
    8b0c:	e4 2b b0 00 	l.sfne r11,r22
    8b10:	10 00 00 1c 	l.bf 8b80 <fdt_get_property_namelen+0x10c>
    8b14:	a8 70 00 00 	l.ori r3,r16,0x0
    8b18:	a8 72 00 00 	l.ori r3,r18,0x0
    8b1c:	a8 98 00 00 	l.ori r4,r24,0x0
    8b20:	07 ff fc 1e 	l.jal 7b98 <memcmp>
    8b24:	a8 b6 00 00 	l.ori r5,r22,0x0
    8b28:	bc 0b 00 00 	l.sfeqi r11,0x0
    8b2c:	10 00 00 0a 	l.bf 8b54 <fdt_get_property_namelen+0xe0>
    8b30:	a8 70 00 00 	l.ori r3,r16,0x0
    8b34:	00 00 00 13 	l.j 8b80 <fdt_get_property_namelen+0x10c>
    8b38:	15 00 00 00 	l.nop 0x0
	     (offset >= 0);
	     (offset = fdt_next_property_offset(fdt, offset))) {
		const struct fdt_property *prop;

		if (!(prop = fdt_get_property_by_offset(fdt, offset, lenp))) {
			offset = -FDT_ERR_INTERNAL;
    8b3c:	9d c0 ff f3 	l.addi r14,r0,0xfffffff3
		if (_fdt_string_eq(fdt, fdt32_to_cpu(prop->nameoff),
				   name, namelen))
			return prop;
	}

	if (lenp)
    8b40:	bc 14 00 00 	l.sfeqi r20,0x0
    8b44:	10 00 00 04 	l.bf 8b54 <fdt_get_property_namelen+0xe0>
    8b48:	a8 54 00 00 	l.ori r2,r20,0x0
		*lenp = offset;
    8b4c:	d4 14 70 00 	l.sw 0x0(r20),r14
	return NULL;
    8b50:	9c 40 00 00 	l.addi r2,r0,0x0
}
    8b54:	9c 21 00 20 	l.addi r1,r1,0x20
    8b58:	a9 62 00 00 	l.ori r11,r2,0x0
    8b5c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8b60:	84 41 ff e0 	l.lwz r2,0xffffffe0(r1)
    8b64:	85 c1 ff e4 	l.lwz r14,0xffffffe4(r1)
    8b68:	86 01 ff e8 	l.lwz r16,0xffffffe8(r1)
    8b6c:	86 41 ff ec 	l.lwz r18,0xffffffec(r1)
    8b70:	86 81 ff f0 	l.lwz r20,0xfffffff0(r1)
    8b74:	86 c1 ff f4 	l.lwz r22,0xfffffff4(r1)
    8b78:	44 00 48 00 	l.jr r9
    8b7c:	87 01 ff f8 	l.lwz r24,0xfffffff8(r1)
						    const char *name,
						    int namelen, int *lenp)
{
	for (offset = fdt_first_property_offset(fdt, offset);
	     (offset >= 0);
	     (offset = fdt_next_property_offset(fdt, offset))) {
    8b80:	07 ff ff 83 	l.jal 898c <fdt_next_property_offset>
    8b84:	a8 8e 00 00 	l.ori r4,r14,0x0
    8b88:	a9 cb 00 00 	l.ori r14,r11,0x0
const struct fdt_property *fdt_get_property_namelen(const void *fdt,
						    int offset,
						    const char *name,
						    int namelen, int *lenp)
{
	for (offset = fdt_first_property_offset(fdt, offset);
    8b8c:	bd 6e 00 00 	l.sfgesi r14,0x0
    8b90:	13 ff ff c9 	l.bf 8ab4 <fdt_get_property_namelen+0x40>
    8b94:	a8 70 00 00 	l.ori r3,r16,0x0
		if (_fdt_string_eq(fdt, fdt32_to_cpu(prop->nameoff),
				   name, namelen))
			return prop;
	}

	if (lenp)
    8b98:	03 ff ff eb 	l.j 8b44 <fdt_get_property_namelen+0xd0>
    8b9c:	bc 14 00 00 	l.sfeqi r20,0x0

00008ba0 <fdt_get_property>:
}

const struct fdt_property *fdt_get_property(const void *fdt,
					    int nodeoffset,
					    const char *name, int *lenp)
{
    8ba0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8ba4:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    8ba8:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    8bac:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    8bb0:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    8bb4:	aa 03 00 00 	l.ori r16,r3,0x0
    8bb8:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	return fdt_get_property_namelen(fdt, nodeoffset, name,
					strlen(name), lenp);
    8bbc:	a8 65 00 00 	l.ori r3,r5,0x0
}

const struct fdt_property *fdt_get_property(const void *fdt,
					    int nodeoffset,
					    const char *name, int *lenp)
{
    8bc0:	aa 46 00 00 	l.ori r18,r6,0x0
    8bc4:	a9 c4 00 00 	l.ori r14,r4,0x0
	return fdt_get_property_namelen(fdt, nodeoffset, name,
					strlen(name), lenp);
    8bc8:	07 ff fb 47 	l.jal 78e4 <strlen>
    8bcc:	a8 45 00 00 	l.ori r2,r5,0x0
}
    8bd0:	9c 21 00 14 	l.addi r1,r1,0x14

const struct fdt_property *fdt_get_property(const void *fdt,
					    int nodeoffset,
					    const char *name, int *lenp)
{
	return fdt_get_property_namelen(fdt, nodeoffset, name,
    8bd4:	a8 70 00 00 	l.ori r3,r16,0x0
    8bd8:	a8 8e 00 00 	l.ori r4,r14,0x0
    8bdc:	a8 a2 00 00 	l.ori r5,r2,0x0
    8be0:	a8 f2 00 00 	l.ori r7,r18,0x0
    8be4:	a8 cb 00 00 	l.ori r6,r11,0x0
					strlen(name), lenp);
}
    8be8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8bec:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    8bf0:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    8bf4:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)

const struct fdt_property *fdt_get_property(const void *fdt,
					    int nodeoffset,
					    const char *name, int *lenp)
{
	return fdt_get_property_namelen(fdt, nodeoffset, name,
    8bf8:	03 ff ff 9f 	l.j 8a74 <fdt_get_property_namelen>
    8bfc:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00008c00 <fdt_getprop_namelen>:
					strlen(name), lenp);
}

const void *fdt_getprop_namelen(const void *fdt, int nodeoffset,
				const char *name, int namelen, int *lenp)
{
    8c00:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	const struct fdt_property *prop;

	prop = fdt_get_property_namelen(fdt, nodeoffset, name, namelen, lenp);
    8c04:	07 ff ff 9c 	l.jal 8a74 <fdt_get_property_namelen>
    8c08:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	if (! prop)
    8c0c:	bc 0b 00 00 	l.sfeqi r11,0x0
    8c10:	10 00 00 03 	l.bf 8c1c <fdt_getprop_namelen+0x1c>
    8c14:	15 00 00 00 	l.nop 0x0
		return NULL;

	return prop->data;
    8c18:	9d 6b 00 0c 	l.addi r11,r11,0xc
}
    8c1c:	9c 21 00 04 	l.addi r1,r1,0x4
    8c20:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8c24:	44 00 48 00 	l.jr r9
    8c28:	15 00 00 00 	l.nop 0x0

00008c2c <fdt_getprop_by_offset>:

const void *fdt_getprop_by_offset(const void *fdt, int offset,
				  const char **namep, int *lenp)
{
    8c2c:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    8c30:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    8c34:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    8c38:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8c3c:	a9 c5 00 00 	l.ori r14,r5,0x0
    8c40:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
	const struct fdt_property *prop;

	prop = fdt_get_property_by_offset(fdt, offset, lenp);
    8c44:	a8 a6 00 00 	l.ori r5,r6,0x0
    8c48:	07 ff ff 62 	l.jal 89d0 <fdt_get_property_by_offset>
    8c4c:	aa 03 00 00 	l.ori r16,r3,0x0
    8c50:	a8 4b 00 00 	l.ori r2,r11,0x0
	if (!prop)
    8c54:	bc 02 00 00 	l.sfeqi r2,0x0
    8c58:	10 00 00 12 	l.bf 8ca0 <fdt_getprop_by_offset+0x74>
    8c5c:	bc 0e 00 00 	l.sfeqi r14,0x0
		return NULL;
	if (namep)
    8c60:	10 00 00 0f 	l.bf 8c9c <fdt_getprop_by_offset+0x70>
    8c64:	9c c2 00 08 	l.addi r6,r2,0x8
		*namep = fdt_string(fdt, fdt32_to_cpu(prop->nameoff));
    8c68:	8c a6 00 00 	l.lbz r5,0x0(r6)
    8c6c:	8c 66 00 03 	l.lbz r3,0x3(r6)
    8c70:	b8 a5 00 18 	l.slli r5,r5,0x18
    8c74:	8c 86 00 02 	l.lbz r4,0x2(r6)
    8c78:	e0 a3 28 04 	l.or r5,r3,r5
    8c7c:	8c 66 00 01 	l.lbz r3,0x1(r6)
    8c80:	b8 63 00 10 	l.slli r3,r3,0x10
    8c84:	b8 84 00 08 	l.slli r4,r4,0x8
    8c88:	e0 a5 18 04 	l.or r5,r5,r3
    8c8c:	a8 70 00 00 	l.ori r3,r16,0x0
    8c90:	07 ff fe 54 	l.jal 85e0 <fdt_string>
    8c94:	e0 85 20 04 	l.or r4,r5,r4
    8c98:	d4 0e 58 00 	l.sw 0x0(r14),r11
	return prop->data;
    8c9c:	9d 62 00 0c 	l.addi r11,r2,0xc
}
    8ca0:	9c 21 00 10 	l.addi r1,r1,0x10
    8ca4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8ca8:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    8cac:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    8cb0:	44 00 48 00 	l.jr r9
    8cb4:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00008cb8 <fdt_getprop>:

const void *fdt_getprop(const void *fdt, int nodeoffset,
			const char *name, int *lenp)
{
    8cb8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8cbc:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    8cc0:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    8cc4:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    8cc8:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    8ccc:	aa 03 00 00 	l.ori r16,r3,0x0
    8cd0:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	return fdt_getprop_namelen(fdt, nodeoffset, name, strlen(name), lenp);
    8cd4:	a8 65 00 00 	l.ori r3,r5,0x0
	return prop->data;
}

const void *fdt_getprop(const void *fdt, int nodeoffset,
			const char *name, int *lenp)
{
    8cd8:	aa 46 00 00 	l.ori r18,r6,0x0
    8cdc:	a9 c4 00 00 	l.ori r14,r4,0x0
	return fdt_getprop_namelen(fdt, nodeoffset, name, strlen(name), lenp);
    8ce0:	07 ff fb 01 	l.jal 78e4 <strlen>
    8ce4:	a8 45 00 00 	l.ori r2,r5,0x0
}
    8ce8:	9c 21 00 14 	l.addi r1,r1,0x14
}

const void *fdt_getprop(const void *fdt, int nodeoffset,
			const char *name, int *lenp)
{
	return fdt_getprop_namelen(fdt, nodeoffset, name, strlen(name), lenp);
    8cec:	a8 70 00 00 	l.ori r3,r16,0x0
    8cf0:	a8 8e 00 00 	l.ori r4,r14,0x0
    8cf4:	a8 a2 00 00 	l.ori r5,r2,0x0
    8cf8:	a8 f2 00 00 	l.ori r7,r18,0x0
    8cfc:	a8 cb 00 00 	l.ori r6,r11,0x0
}
    8d00:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8d04:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    8d08:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    8d0c:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
}

const void *fdt_getprop(const void *fdt, int nodeoffset,
			const char *name, int *lenp)
{
	return fdt_getprop_namelen(fdt, nodeoffset, name, strlen(name), lenp);
    8d10:	03 ff ff bc 	l.j 8c00 <fdt_getprop_namelen>
    8d14:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00008d18 <fdt_getprop_u32>:
}

int fdt_getprop_u32(const void *fdt, int nodeoffset,
		const char *prop, uint32_t *val)
{
    8d18:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    8d1c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8d20:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    8d24:	a8 46 00 00 	l.ori r2,r6,0x0
	int len;
	const fdt32_t *data = NULL;

	data = fdt_getprop(fdt, nodeoffset, prop, &len);
    8d28:	07 ff ff e4 	l.jal 8cb8 <fdt_getprop>
    8d2c:	a8 c1 00 00 	l.ori r6,r1,0x0
	if ((data == NULL) || (len == 0) || (len % 4 != 0)) {
    8d30:	bc 0b 00 00 	l.sfeqi r11,0x0
    8d34:	10 00 00 25 	l.bf 8dc8 <fdt_getprop_u32+0xb0>
    8d38:	9c a0 ff f3 	l.addi r5,r0,0xfffffff3
    8d3c:	84 61 00 00 	l.lwz r3,0x0(r1)
    8d40:	bc 03 00 00 	l.sfeqi r3,0x0
    8d44:	10 00 00 21 	l.bf 8dc8 <fdt_getprop_u32+0xb0>
    8d48:	15 00 00 00 	l.nop 0x0
    8d4c:	a4 83 00 03 	l.andi r4,r3,0x3
    8d50:	bc 24 00 00 	l.sfnei r4,0x0
    8d54:	10 00 00 1d 	l.bf 8dc8 <fdt_getprop_u32+0xb0>
    8d58:	bc 02 00 00 	l.sfeqi r2,0x0
		return -FDT_ERR_INTERNAL;
	}
	if (val != NULL) {
    8d5c:	10 00 00 17 	l.bf 8db8 <fdt_getprop_u32+0xa0>
    8d60:	b8 a3 00 9f 	l.srai r5,r3,0x1f
		const uint32_t *p = data;
		int j ;
		for (j = 0, p = data; j < len/4; j++) {
    8d64:	a4 a5 00 03 	l.andi r5,r5,0x3
    8d68:	e0 a5 18 00 	l.add r5,r5,r3
    8d6c:	00 00 00 10 	l.j 8dac <fdt_getprop_u32+0x94>
    8d70:	b8 a5 00 82 	l.srai r5,r5,0x2
			*val = fdt32_to_cpu(p[j]);
    8d74:	8c eb 00 00 	l.lbz r7,0x0(r11)
    8d78:	8c cb 00 01 	l.lbz r6,0x1(r11)
    8d7c:	b8 e7 00 18 	l.slli r7,r7,0x18
    8d80:	b8 c6 00 10 	l.slli r6,r6,0x10
		return -FDT_ERR_INTERNAL;
	}
	if (val != NULL) {
		const uint32_t *p = data;
		int j ;
		for (j = 0, p = data; j < len/4; j++) {
    8d84:	9c 84 00 01 	l.addi r4,r4,0x1
			*val = fdt32_to_cpu(p[j]);
    8d88:	e0 c7 30 04 	l.or r6,r7,r6
    8d8c:	8c eb 00 03 	l.lbz r7,0x3(r11)
    8d90:	e0 c6 38 04 	l.or r6,r6,r7
    8d94:	8c eb 00 02 	l.lbz r7,0x2(r11)
    8d98:	b8 e7 00 08 	l.slli r7,r7,0x8
		return -FDT_ERR_INTERNAL;
	}
	if (val != NULL) {
		const uint32_t *p = data;
		int j ;
		for (j = 0, p = data; j < len/4; j++) {
    8d9c:	9d 6b 00 04 	l.addi r11,r11,0x4
			*val = fdt32_to_cpu(p[j]);
    8da0:	e0 c6 38 04 	l.or r6,r6,r7
    8da4:	d4 02 30 00 	l.sw 0x0(r2),r6
			val++;
    8da8:	9c 42 00 04 	l.addi r2,r2,0x4
		return -FDT_ERR_INTERNAL;
	}
	if (val != NULL) {
		const uint32_t *p = data;
		int j ;
		for (j = 0, p = data; j < len/4; j++) {
    8dac:	e5 84 28 00 	l.sflts r4,r5
    8db0:	13 ff ff f1 	l.bf 8d74 <fdt_getprop_u32+0x5c>
    8db4:	15 00 00 00 	l.nop 0x0
			*val = fdt32_to_cpu(p[j]);
			val++;
		}
	}
	return len/4;
    8db8:	b8 a3 00 9f 	l.srai r5,r3,0x1f
    8dbc:	a4 a5 00 03 	l.andi r5,r5,0x3
    8dc0:	e0 65 18 00 	l.add r3,r5,r3
    8dc4:	b8 a3 00 82 	l.srai r5,r3,0x2
}
    8dc8:	9c 21 00 0c 	l.addi r1,r1,0xc
    8dcc:	a9 65 00 00 	l.ori r11,r5,0x0
    8dd0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8dd4:	44 00 48 00 	l.jr r9
    8dd8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00008ddc <fdt_get_phandle>:

uint32_t fdt_get_phandle(const void *fdt, int nodeoffset)
{
    8ddc:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    8de0:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    8de4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	const fdt32_t *php;
	int len;

	/* FIXME: This is a bit sub-optimal, since we potentially scan
	 * over all the properties twice. */
	php = fdt_getprop(fdt, nodeoffset, "phandle", &len);
    8de8:	18 a0 00 01 	l.movhi r5,0x1
	}
	return len/4;
}

uint32_t fdt_get_phandle(const void *fdt, int nodeoffset)
{
    8dec:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
	const fdt32_t *php;
	int len;

	/* FIXME: This is a bit sub-optimal, since we potentially scan
	 * over all the properties twice. */
	php = fdt_getprop(fdt, nodeoffset, "phandle", &len);
    8df0:	a8 a5 27 9f 	l.ori r5,r5,0x279f
    8df4:	a8 c1 00 00 	l.ori r6,r1,0x0
	}
	return len/4;
}

uint32_t fdt_get_phandle(const void *fdt, int nodeoffset)
{
    8df8:	a9 c3 00 00 	l.ori r14,r3,0x0
	const fdt32_t *php;
	int len;

	/* FIXME: This is a bit sub-optimal, since we potentially scan
	 * over all the properties twice. */
	php = fdt_getprop(fdt, nodeoffset, "phandle", &len);
    8dfc:	07 ff ff af 	l.jal 8cb8 <fdt_getprop>
    8e00:	a8 44 00 00 	l.ori r2,r4,0x0
	if (!php || (len != sizeof(*php))) {
    8e04:	bc 0b 00 00 	l.sfeqi r11,0x0
    8e08:	10 00 00 06 	l.bf 8e20 <fdt_get_phandle+0x44>
    8e0c:	18 a0 00 01 	l.movhi r5,0x1
    8e10:	84 61 00 00 	l.lwz r3,0x0(r1)
    8e14:	bc 03 00 04 	l.sfeqi r3,0x4
    8e18:	10 00 00 0e 	l.bf 8e50 <fdt_get_phandle+0x74>
    8e1c:	15 00 00 00 	l.nop 0x0
		php = fdt_getprop(fdt, nodeoffset, "linux,phandle", &len);
    8e20:	a8 6e 00 00 	l.ori r3,r14,0x0
    8e24:	a8 82 00 00 	l.ori r4,r2,0x0
    8e28:	a8 a5 27 99 	l.ori r5,r5,0x2799
    8e2c:	07 ff ff a3 	l.jal 8cb8 <fdt_getprop>
    8e30:	a8 c1 00 00 	l.ori r6,r1,0x0
		if (!php || (len != sizeof(*php)))
    8e34:	bc 0b 00 00 	l.sfeqi r11,0x0
    8e38:	10 00 00 10 	l.bf 8e78 <fdt_get_phandle+0x9c>
    8e3c:	a8 6b 00 00 	l.ori r3,r11,0x0
    8e40:	84 41 00 00 	l.lwz r2,0x0(r1)
    8e44:	bc 22 00 04 	l.sfnei r2,0x4
    8e48:	10 00 00 0c 	l.bf 8e78 <fdt_get_phandle+0x9c>
    8e4c:	9c 60 00 00 	l.addi r3,r0,0x0
			return 0;
	}

	return fdt32_to_cpu(*php);
    8e50:	8c 6b 00 00 	l.lbz r3,0x0(r11)
    8e54:	8c 4b 00 03 	l.lbz r2,0x3(r11)
    8e58:	b8 63 00 18 	l.slli r3,r3,0x18
    8e5c:	e0 62 18 04 	l.or r3,r2,r3
    8e60:	8c 4b 00 01 	l.lbz r2,0x1(r11)
    8e64:	b8 42 00 10 	l.slli r2,r2,0x10
    8e68:	e0 63 10 04 	l.or r3,r3,r2
    8e6c:	8c 4b 00 02 	l.lbz r2,0x2(r11)
    8e70:	b8 42 00 08 	l.slli r2,r2,0x8
    8e74:	e0 63 10 04 	l.or r3,r3,r2
}
    8e78:	9c 21 00 10 	l.addi r1,r1,0x10
    8e7c:	a9 63 00 00 	l.ori r11,r3,0x0
    8e80:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8e84:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    8e88:	44 00 48 00 	l.jr r9
    8e8c:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

00008e90 <fdt_get_alias_namelen>:

const char *fdt_get_alias_namelen(const void *fdt,
				  const char *name, int namelen)
{
    8e90:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    8e94:	aa 04 00 00 	l.ori r16,r4,0x0
	int aliasoffset;

	aliasoffset = fdt_path_offset(fdt, "/aliases");
    8e98:	18 80 00 01 	l.movhi r4,0x1
	return fdt32_to_cpu(*php);
}

const char *fdt_get_alias_namelen(const void *fdt,
				  const char *name, int namelen)
{
    8e9c:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    8ea0:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    8ea4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	int aliasoffset;

	aliasoffset = fdt_path_offset(fdt, "/aliases");
    8ea8:	a8 84 27 a7 	l.ori r4,r4,0x27a7
	return fdt32_to_cpu(*php);
}

const char *fdt_get_alias_namelen(const void *fdt,
				  const char *name, int namelen)
{
    8eac:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    8eb0:	a8 43 00 00 	l.ori r2,r3,0x0
	int aliasoffset;

	aliasoffset = fdt_path_offset(fdt, "/aliases");
    8eb4:	04 00 00 16 	l.jal 8f0c <fdt_path_offset>
    8eb8:	a9 c5 00 00 	l.ori r14,r5,0x0
	if (aliasoffset < 0)
    8ebc:	bd 8b 00 00 	l.sfltsi r11,0x0
    8ec0:	10 00 00 0c 	l.bf 8ef0 <fdt_get_alias_namelen+0x60>
    8ec4:	a8 8b 00 00 	l.ori r4,r11,0x0
		return NULL;

	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
}
    8ec8:	9c 21 00 10 	l.addi r1,r1,0x10

	aliasoffset = fdt_path_offset(fdt, "/aliases");
	if (aliasoffset < 0)
		return NULL;

	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
    8ecc:	a8 62 00 00 	l.ori r3,r2,0x0
    8ed0:	a8 b0 00 00 	l.ori r5,r16,0x0
    8ed4:	a8 ce 00 00 	l.ori r6,r14,0x0
    8ed8:	9c e0 00 00 	l.addi r7,r0,0x0
}
    8edc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8ee0:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    8ee4:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)

	aliasoffset = fdt_path_offset(fdt, "/aliases");
	if (aliasoffset < 0)
		return NULL;

	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
    8ee8:	03 ff ff 46 	l.j 8c00 <fdt_getprop_namelen>
    8eec:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)
}
    8ef0:	9c 21 00 10 	l.addi r1,r1,0x10
    8ef4:	9d 60 00 00 	l.addi r11,r0,0x0
    8ef8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    8efc:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    8f00:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    8f04:	44 00 48 00 	l.jr r9
    8f08:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00008f0c <fdt_path_offset>:
{
	return fdt_subnode_offset_namelen(fdt, parentoffset, name, strlen(name));
}

int fdt_path_offset(const void *fdt, const char *path)
{
    8f0c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    8f10:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    8f14:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    8f18:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
    8f1c:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
    8f20:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
    8f24:	aa 03 00 00 	l.ori r16,r3,0x0
    8f28:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
	const char *end = path + strlen(path);
    8f2c:	a8 64 00 00 	l.ori r3,r4,0x0
    8f30:	07 ff fa 6d 	l.jal 78e4 <strlen>
    8f34:	a8 44 00 00 	l.ori r2,r4,0x0
	const char *p = path;
	int offset = 0;

	FDT_CHECK_HEADER(fdt);
    8f38:	a8 70 00 00 	l.ori r3,r16,0x0
    8f3c:	07 ff fb 87 	l.jal 7d58 <fdt_check_header>
    8f40:	aa 8b 00 00 	l.ori r20,r11,0x0
    8f44:	bc 2b 00 00 	l.sfnei r11,0x0
    8f48:	10 00 00 38 	l.bf 9028 <fdt_path_offset+0x11c>
    8f4c:	a8 cb 00 00 	l.ori r6,r11,0x0

	/* see if we have an alias */
	if (*path != '/') {
    8f50:	90 62 00 00 	l.lbs r3,0x0(r2)
    8f54:	bc 03 00 2f 	l.sfeqi r3,0x2f
    8f58:	10 00 00 2d 	l.bf 900c <fdt_path_offset+0x100>
    8f5c:	e2 82 a0 00 	l.add r20,r2,r20
		const char *q = strchr(path, '/');
    8f60:	a8 62 00 00 	l.ori r3,r2,0x0
    8f64:	07 ff fa ae 	l.jal 7a1c <strchr>
    8f68:	9c 80 00 2f 	l.addi r4,r0,0x2f

		if (!q)
    8f6c:	bc 0b 00 00 	l.sfeqi r11,0x0
    8f70:	0c 00 00 03 	l.bnf 8f7c <fdt_path_offset+0x70>
    8f74:	a9 cb 00 00 	l.ori r14,r11,0x0
			q = end;
    8f78:	a9 d4 00 00 	l.ori r14,r20,0x0

		p = fdt_get_alias_namelen(fdt, p, q - p);
    8f7c:	a8 82 00 00 	l.ori r4,r2,0x0
    8f80:	a8 70 00 00 	l.ori r3,r16,0x0
    8f84:	07 ff ff c3 	l.jal 8e90 <fdt_get_alias_namelen>
    8f88:	e0 ae 10 02 	l.sub r5,r14,r2
		if (!p)
			return -FDT_ERR_BADPATH;
    8f8c:	9c c0 ff fb 	l.addi r6,r0,0xfffffffb

		if (!q)
			q = end;

		p = fdt_get_alias_namelen(fdt, p, q - p);
		if (!p)
    8f90:	bc 0b 00 00 	l.sfeqi r11,0x0
    8f94:	10 00 00 25 	l.bf 9028 <fdt_path_offset+0x11c>
    8f98:	a8 8b 00 00 	l.ori r4,r11,0x0
			return -FDT_ERR_BADPATH;
		offset = fdt_path_offset(fdt, p);
    8f9c:	07 ff ff dc 	l.jal 8f0c <fdt_path_offset>
    8fa0:	a8 70 00 00 	l.ori r3,r16,0x0
    8fa4:	00 00 00 1c 	l.j 9014 <fdt_path_offset+0x108>
    8fa8:	a8 4b 00 00 	l.ori r2,r11,0x0
	}

	while (*p) {
		const char *q;

		while (*p == '/')
    8fac:	90 6e 00 00 	l.lbs r3,0x0(r14)
    8fb0:	bc 03 00 2f 	l.sfeqi r3,0x2f
    8fb4:	13 ff ff fe 	l.bf 8fac <fdt_path_offset+0xa0>
    8fb8:	9d ce 00 01 	l.addi r14,r14,0x1
    8fbc:	9d ce ff ff 	l.addi r14,r14,0xffffffff
			p++;
		if (! *p)
    8fc0:	bc 03 00 00 	l.sfeqi r3,0x0
    8fc4:	10 00 00 18 	l.bf 9024 <fdt_path_offset+0x118>
    8fc8:	a8 6e 00 00 	l.ori r3,r14,0x0
			return offset;
		q = strchr(p, '/');
    8fcc:	07 ff fa 94 	l.jal 7a1c <strchr>
    8fd0:	9c 80 00 2f 	l.addi r4,r0,0x2f
		if (! q)
    8fd4:	bc 0b 00 00 	l.sfeqi r11,0x0
    8fd8:	0c 00 00 03 	l.bnf 8fe4 <fdt_path_offset+0xd8>
    8fdc:	aa 4b 00 00 	l.ori r18,r11,0x0
			q = end;
    8fe0:	aa 54 00 00 	l.ori r18,r20,0x0

		offset = fdt_subnode_offset_namelen(fdt, offset, p, q-p);
    8fe4:	a8 82 00 00 	l.ori r4,r2,0x0
    8fe8:	a8 70 00 00 	l.ori r3,r16,0x0
    8fec:	a8 ae 00 00 	l.ori r5,r14,0x0
    8ff0:	07 ff fd cc 	l.jal 8720 <fdt_subnode_offset_namelen>
    8ff4:	e0 d2 70 02 	l.sub r6,r18,r14
		if (offset < 0)
    8ff8:	bd 8b 00 00 	l.sfltsi r11,0x0
    8ffc:	10 00 00 0a 	l.bf 9024 <fdt_path_offset+0x118>
    9000:	a8 4b 00 00 	l.ori r2,r11,0x0
			return offset;

		p = q;
    9004:	00 00 00 04 	l.j 9014 <fdt_path_offset+0x108>
    9008:	a9 d2 00 00 	l.ori r14,r18,0x0
	int offset = 0;

	FDT_CHECK_HEADER(fdt);

	/* see if we have an alias */
	if (*path != '/') {
    900c:	a9 c2 00 00 	l.ori r14,r2,0x0

int fdt_path_offset(const void *fdt, const char *path)
{
	const char *end = path + strlen(path);
	const char *p = path;
	int offset = 0;
    9010:	a8 4b 00 00 	l.ori r2,r11,0x0
		offset = fdt_path_offset(fdt, p);

		p = q;
	}

	while (*p) {
    9014:	90 6e 00 00 	l.lbs r3,0x0(r14)
    9018:	bc 03 00 00 	l.sfeqi r3,0x0
    901c:	0f ff ff e6 	l.bnf 8fb4 <fdt_path_offset+0xa8>
    9020:	bc 03 00 2f 	l.sfeqi r3,0x2f
    9024:	a8 c2 00 00 	l.ori r6,r2,0x0

		p = q;
	}

	return offset;
}
    9028:	9c 21 00 18 	l.addi r1,r1,0x18
    902c:	a9 66 00 00 	l.ori r11,r6,0x0
    9030:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9034:	84 41 ff e8 	l.lwz r2,0xffffffe8(r1)
    9038:	85 c1 ff ec 	l.lwz r14,0xffffffec(r1)
    903c:	86 01 ff f0 	l.lwz r16,0xfffffff0(r1)
    9040:	86 41 ff f4 	l.lwz r18,0xfffffff4(r1)
    9044:	44 00 48 00 	l.jr r9
    9048:	86 81 ff f8 	l.lwz r20,0xfffffff8(r1)

0000904c <fdt_get_alias>:

	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
}

const char *fdt_get_alias(const void *fdt, const char *name)
{
    904c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9050:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    9054:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    9058:	a9 c3 00 00 	l.ori r14,r3,0x0
    905c:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	return fdt_get_alias_namelen(fdt, name, strlen(name));
    9060:	a8 64 00 00 	l.ori r3,r4,0x0
    9064:	07 ff fa 20 	l.jal 78e4 <strlen>
    9068:	a8 44 00 00 	l.ori r2,r4,0x0
}
    906c:	9c 21 00 0c 	l.addi r1,r1,0xc
	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
}

const char *fdt_get_alias(const void *fdt, const char *name)
{
	return fdt_get_alias_namelen(fdt, name, strlen(name));
    9070:	a8 6e 00 00 	l.ori r3,r14,0x0
    9074:	a8 82 00 00 	l.ori r4,r2,0x0
    9078:	a8 ab 00 00 	l.ori r5,r11,0x0
}
    907c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9080:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
}

const char *fdt_get_alias(const void *fdt, const char *name)
{
	return fdt_get_alias_namelen(fdt, name, strlen(name));
    9084:	03 ff ff 83 	l.j 8e90 <fdt_get_alias_namelen>
    9088:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

0000908c <fdt_get_path>:
}

int fdt_get_path(const void *fdt, int nodeoffset, char *buf, int buflen)
{
    908c:	d7 e1 17 d4 	l.sw 0xffffffd4(r1),r2
    9090:	d7 e1 a7 e4 	l.sw 0xffffffe4(r1),r20
    9094:	d7 e1 c7 ec 	l.sw 0xffffffec(r1),r24
    9098:	d7 e1 d7 f0 	l.sw 0xfffffff0(r1),r26
    909c:	d7 e1 e7 f4 	l.sw 0xfffffff4(r1),r28
    90a0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    90a4:	d7 e1 77 d8 	l.sw 0xffffffd8(r1),r14
    90a8:	d7 e1 87 dc 	l.sw 0xffffffdc(r1),r16
    90ac:	d7 e1 97 e0 	l.sw 0xffffffe0(r1),r18
    90b0:	d7 e1 b7 e8 	l.sw 0xffffffe8(r1),r22
    90b4:	d7 e1 f7 f8 	l.sw 0xfffffff8(r1),r30
    90b8:	9c 21 ff cc 	l.addi r1,r1,0xffffffcc
    90bc:	ab 03 00 00 	l.ori r24,r3,0x0
    90c0:	ab 44 00 00 	l.ori r26,r4,0x0
    90c4:	aa 85 00 00 	l.ori r20,r5,0x0
	int pdepth = 0, p = 0;
	int offset, depth, namelen;
	const char *name;

	FDT_CHECK_HEADER(fdt);
    90c8:	07 ff fb 24 	l.jal 7d58 <fdt_check_header>
    90cc:	ab 86 00 00 	l.ori r28,r6,0x0
    90d0:	bc 2b 00 00 	l.sfnei r11,0x0
    90d4:	10 00 00 53 	l.bf 9220 <fdt_get_path+0x194>
    90d8:	a8 4b 00 00 	l.ori r2,r11,0x0

	if (buflen < 2)
    90dc:	bd bc 00 01 	l.sflesi r28,0x1
    90e0:	10 00 00 4f 	l.bf 921c <fdt_get_path+0x190>
    90e4:	aa 0b 00 00 	l.ori r16,r11,0x0
		return -FDT_ERR_NOSPACE;

	for (offset = 0, depth = 0;
    90e8:	d4 01 58 04 	l.sw 0x4(r1),r11
	return fdt_get_alias_namelen(fdt, name, strlen(name));
}

int fdt_get_path(const void *fdt, int nodeoffset, char *buf, int buflen)
{
	int pdepth = 0, p = 0;
    90ec:	a9 cb 00 00 	l.ori r14,r11,0x0
    90f0:	aa 4b 00 00 	l.ori r18,r11,0x0
	FDT_CHECK_HEADER(fdt);

	if (buflen < 2)
		return -FDT_ERR_NOSPACE;

	for (offset = 0, depth = 0;
    90f4:	00 00 00 38 	l.j 91d4 <fdt_get_path+0x148>
    90f8:	9f c1 00 04 	l.addi r30,r1,0x4
	     (offset >= 0) && (offset <= nodeoffset);
	     offset = fdt_next_node(fdt, offset, &depth)) {
		while (pdepth > depth) {
			do {
				p--;
			} while (buf[p-1] != '/');
    90fc:	90 87 00 00 	l.lbs r4,0x0(r7)
	for (offset = 0, depth = 0;
	     (offset >= 0) && (offset <= nodeoffset);
	     offset = fdt_next_node(fdt, offset, &depth)) {
		while (pdepth > depth) {
			do {
				p--;
    9100:	9d ce ff ff 	l.addi r14,r14,0xffffffff
			} while (buf[p-1] != '/');
    9104:	bc 24 00 2f 	l.sfnei r4,0x2f
    9108:	13 ff ff fd 	l.bf 90fc <fdt_get_path+0x70>
    910c:	9c e7 ff ff 	l.addi r7,r7,0xffffffff
			pdepth--;
    9110:	9e 52 ff ff 	l.addi r18,r18,0xffffffff
		return -FDT_ERR_NOSPACE;

	for (offset = 0, depth = 0;
	     (offset >= 0) && (offset <= nodeoffset);
	     offset = fdt_next_node(fdt, offset, &depth)) {
		while (pdepth > depth) {
    9114:	e5 b2 18 00 	l.sfles r18,r3
    9118:	10 00 00 04 	l.bf 9128 <fdt_get_path+0x9c>
    911c:	9c ee ff fe 	l.addi r7,r14,0xfffffffe
const char *fdt_get_alias(const void *fdt, const char *name)
{
	return fdt_get_alias_namelen(fdt, name, strlen(name));
}

int fdt_get_path(const void *fdt, int nodeoffset, char *buf, int buflen)
    9120:	03 ff ff f7 	l.j 90fc <fdt_get_path+0x70>
    9124:	e0 f4 38 00 	l.add r7,r20,r7
				p--;
			} while (buf[p-1] != '/');
			pdepth--;
		}

		if (pdepth >= depth) {
    9128:	e5 92 18 00 	l.sflts r18,r3
    912c:	10 00 00 19 	l.bf 9190 <fdt_get_path+0x104>
    9130:	e4 30 d0 00 	l.sfne r16,r26
			name = fdt_get_name(fdt, offset, &namelen);
    9134:	a8 78 00 00 	l.ori r3,r24,0x0
    9138:	a8 90 00 00 	l.ori r4,r16,0x0
    913c:	07 ff fd d9 	l.jal 88a0 <fdt_get_name>
    9140:	a8 a1 00 00 	l.ori r5,r1,0x0
			if (!name)
    9144:	bc 2b 00 00 	l.sfnei r11,0x0
    9148:	10 00 00 04 	l.bf 9158 <fdt_get_path+0xcc>
    914c:	84 e1 00 00 	l.lwz r7,0x0(r1)
				return namelen;
    9150:	00 00 00 34 	l.j 9220 <fdt_get_path+0x194>
    9154:	a8 47 00 00 	l.ori r2,r7,0x0
			if ((p + namelen + 1) <= buflen) {
    9158:	e2 ce 38 00 	l.add r22,r14,r7
    915c:	e5 76 e0 00 	l.sfges r22,r28
    9160:	10 00 00 0c 	l.bf 9190 <fdt_get_path+0x104>
    9164:	e4 30 d0 00 	l.sfne r16,r26
				memcpy(buf + p, name, namelen);
    9168:	e0 74 70 00 	l.add r3,r20,r14
    916c:	a8 8b 00 00 	l.ori r4,r11,0x0
    9170:	a8 a7 00 00 	l.ori r5,r7,0x0
    9174:	07 ff fa 37 	l.jal 7a50 <memcpy>
    9178:	9d d6 00 01 	l.addi r14,r22,0x1
				p += namelen;
				buf[p++] = '/';
    917c:	e0 74 b0 00 	l.add r3,r20,r22
    9180:	9c 80 00 2f 	l.addi r4,r0,0x2f
				pdepth++;
    9184:	9e 52 00 01 	l.addi r18,r18,0x1
			if (!name)
				return namelen;
			if ((p + namelen + 1) <= buflen) {
				memcpy(buf + p, name, namelen);
				p += namelen;
				buf[p++] = '/';
    9188:	d8 03 20 00 	l.sb 0x0(r3),r4
				pdepth++;
			}
		}

		if (offset == nodeoffset) {
    918c:	e4 30 d0 00 	l.sfne r16,r26
    9190:	10 00 00 0d 	l.bf 91c4 <fdt_get_path+0x138>
    9194:	a8 90 00 00 	l.ori r4,r16,0x0
			if (pdepth < (depth + 1))
    9198:	84 61 00 04 	l.lwz r3,0x4(r1)
    919c:	e5 63 90 00 	l.sfges r3,r18
    91a0:	10 00 00 1f 	l.bf 921c <fdt_get_path+0x190>
    91a4:	bd ae 00 01 	l.sflesi r14,0x1
				return -FDT_ERR_NOSPACE;

			if (p > 1) /* special case so that root path is "/", not "" */
    91a8:	10 00 00 03 	l.bf 91b4 <fdt_get_path+0x128>
    91ac:	15 00 00 00 	l.nop 0x0
				p--;
    91b0:	9d ce ff ff 	l.addi r14,r14,0xffffffff
			buf[p] = '\0';
    91b4:	e1 d4 70 00 	l.add r14,r20,r14
    91b8:	9c 60 00 00 	l.addi r3,r0,0x0
			return 0;
    91bc:	00 00 00 19 	l.j 9220 <fdt_get_path+0x194>
    91c0:	d8 0e 18 00 	l.sb 0x0(r14),r3
	if (buflen < 2)
		return -FDT_ERR_NOSPACE;

	for (offset = 0, depth = 0;
	     (offset >= 0) && (offset <= nodeoffset);
	     offset = fdt_next_node(fdt, offset, &depth)) {
    91c4:	a8 78 00 00 	l.ori r3,r24,0x0
    91c8:	07 ff fb e7 	l.jal 8164 <fdt_next_node>
    91cc:	a8 be 00 00 	l.ori r5,r30,0x0
    91d0:	aa 0b 00 00 	l.ori r16,r11,0x0

	if (buflen < 2)
		return -FDT_ERR_NOSPACE;

	for (offset = 0, depth = 0;
	     (offset >= 0) && (offset <= nodeoffset);
    91d4:	e5 b0 d0 00 	l.sfles r16,r26
    91d8:	10 00 00 03 	l.bf 91e4 <fdt_get_path+0x158>
    91dc:	9c 60 00 01 	l.addi r3,r0,0x1
    91e0:	9c 60 00 00 	l.addi r3,r0,0x0
	FDT_CHECK_HEADER(fdt);

	if (buflen < 2)
		return -FDT_ERR_NOSPACE;

	for (offset = 0, depth = 0;
    91e4:	a4 63 00 ff 	l.andi r3,r3,0xff
    91e8:	bc 03 00 00 	l.sfeqi r3,0x0
    91ec:	10 00 00 04 	l.bf 91fc <fdt_get_path+0x170>
    91f0:	bd 90 00 00 	l.sfltsi r16,0x0
    91f4:	0f ff ff c8 	l.bnf 9114 <fdt_get_path+0x88>
    91f8:	84 61 00 04 	l.lwz r3,0x4(r1)
			buf[p] = '\0';
			return 0;
		}
	}

	if ((offset == -FDT_ERR_NOTFOUND) || (offset >= 0))
    91fc:	bd 70 ff ff 	l.sfgesi r16,0xffffffff
    9200:	10 00 00 08 	l.bf 9220 <fdt_get_path+0x194>
    9204:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
		return -FDT_ERR_BADOFFSET;
	else if (offset == -FDT_ERR_BADOFFSET)
    9208:	bc 30 ff fc 	l.sfnei r16,0xfffffffc
    920c:	10 00 00 05 	l.bf 9220 <fdt_get_path+0x194>
    9210:	a8 50 00 00 	l.ori r2,r16,0x0
		return -FDT_ERR_BADSTRUCTURE;
    9214:	00 00 00 03 	l.j 9220 <fdt_get_path+0x194>
    9218:	9c 40 ff f5 	l.addi r2,r0,0xfffffff5
			}
		}

		if (offset == nodeoffset) {
			if (pdepth < (depth + 1))
				return -FDT_ERR_NOSPACE;
    921c:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd
		return -FDT_ERR_BADOFFSET;
	else if (offset == -FDT_ERR_BADOFFSET)
		return -FDT_ERR_BADSTRUCTURE;

	return offset; /* error from fdt_next_node() */
}
    9220:	9c 21 00 34 	l.addi r1,r1,0x34
    9224:	a9 62 00 00 	l.ori r11,r2,0x0
    9228:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    922c:	84 41 ff d4 	l.lwz r2,0xffffffd4(r1)
    9230:	85 c1 ff d8 	l.lwz r14,0xffffffd8(r1)
    9234:	86 01 ff dc 	l.lwz r16,0xffffffdc(r1)
    9238:	86 41 ff e0 	l.lwz r18,0xffffffe0(r1)
    923c:	86 81 ff e4 	l.lwz r20,0xffffffe4(r1)
    9240:	86 c1 ff e8 	l.lwz r22,0xffffffe8(r1)
    9244:	87 01 ff ec 	l.lwz r24,0xffffffec(r1)
    9248:	87 41 ff f0 	l.lwz r26,0xfffffff0(r1)
    924c:	87 81 ff f4 	l.lwz r28,0xfffffff4(r1)
    9250:	44 00 48 00 	l.jr r9
    9254:	87 c1 ff f8 	l.lwz r30,0xfffffff8(r1)

00009258 <fdt_supernode_atdepth_offset>:

int fdt_supernode_atdepth_offset(const void *fdt, int nodeoffset,
				 int supernodedepth, int *nodedepth)
{
    9258:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    925c:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    9260:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    9264:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    9268:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    926c:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    9270:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    9274:	9c 21 ff e0 	l.addi r1,r1,0xffffffe0
    9278:	aa c3 00 00 	l.ori r22,r3,0x0
    927c:	aa 44 00 00 	l.ori r18,r4,0x0
    9280:	a8 45 00 00 	l.ori r2,r5,0x0
	int offset, depth;
	int supernodeoffset = -FDT_ERR_INTERNAL;

	FDT_CHECK_HEADER(fdt);
    9284:	07 ff fa b5 	l.jal 7d58 <fdt_check_header>
    9288:	aa 06 00 00 	l.ori r16,r6,0x0
    928c:	bc 2b 00 00 	l.sfnei r11,0x0
    9290:	10 00 00 2a 	l.bf 9338 <fdt_supernode_atdepth_offset+0xe0>
    9294:	a8 eb 00 00 	l.ori r7,r11,0x0

	if (supernodedepth < 0)
    9298:	bd 82 00 00 	l.sfltsi r2,0x0
    929c:	10 00 00 27 	l.bf 9338 <fdt_supernode_atdepth_offset+0xe0>
    92a0:	9c e0 ff ff 	l.addi r7,r0,0xffffffff
		return -FDT_ERR_NOTFOUND;

	for (offset = 0, depth = 0;
    92a4:	d4 01 58 00 	l.sw 0x0(r1),r11
    92a8:	00 00 00 13 	l.j 92f4 <fdt_supernode_atdepth_offset+0x9c>
    92ac:	9d c0 ff f3 	l.addi r14,r0,0xfffffff3
	     (offset >= 0) && (offset <= nodeoffset);
	     offset = fdt_next_node(fdt, offset, &depth)) {
		if (depth == supernodedepth)
    92b0:	e4 08 10 00 	l.sfeq r8,r2
    92b4:	0c 00 00 03 	l.bnf 92c0 <fdt_supernode_atdepth_offset+0x68>
    92b8:	e4 2b 90 00 	l.sfne r11,r18
    92bc:	a9 cb 00 00 	l.ori r14,r11,0x0
			supernodeoffset = offset;

		if (offset == nodeoffset) {
    92c0:	10 00 00 0a 	l.bf 92e8 <fdt_supernode_atdepth_offset+0x90>
    92c4:	a8 76 00 00 	l.ori r3,r22,0x0
			if (nodedepth)
    92c8:	bc 10 00 00 	l.sfeqi r16,0x0
    92cc:	10 00 00 03 	l.bf 92d8 <fdt_supernode_atdepth_offset+0x80>
    92d0:	e5 a2 40 00 	l.sfles r2,r8
				*nodedepth = depth;
    92d4:	d4 10 40 00 	l.sw 0x0(r16),r8

			if (supernodedepth > depth)
    92d8:	10 00 00 18 	l.bf 9338 <fdt_supernode_atdepth_offset+0xe0>
    92dc:	a8 ee 00 00 	l.ori r7,r14,0x0
				return -FDT_ERR_NOTFOUND;
    92e0:	00 00 00 16 	l.j 9338 <fdt_supernode_atdepth_offset+0xe0>
    92e4:	9c e0 ff ff 	l.addi r7,r0,0xffffffff
	if (supernodedepth < 0)
		return -FDT_ERR_NOTFOUND;

	for (offset = 0, depth = 0;
	     (offset >= 0) && (offset <= nodeoffset);
	     offset = fdt_next_node(fdt, offset, &depth)) {
    92e8:	a8 8b 00 00 	l.ori r4,r11,0x0
    92ec:	07 ff fb 9e 	l.jal 8164 <fdt_next_node>
    92f0:	a8 a1 00 00 	l.ori r5,r1,0x0

	if (supernodedepth < 0)
		return -FDT_ERR_NOTFOUND;

	for (offset = 0, depth = 0;
	     (offset >= 0) && (offset <= nodeoffset);
    92f4:	e5 ab 90 00 	l.sfles r11,r18
    92f8:	10 00 00 03 	l.bf 9304 <fdt_supernode_atdepth_offset+0xac>
    92fc:	9c 80 00 01 	l.addi r4,r0,0x1
    9300:	9c 80 00 00 	l.addi r4,r0,0x0
	FDT_CHECK_HEADER(fdt);

	if (supernodedepth < 0)
		return -FDT_ERR_NOTFOUND;

	for (offset = 0, depth = 0;
    9304:	a4 84 00 ff 	l.andi r4,r4,0xff
    9308:	bc 04 00 00 	l.sfeqi r4,0x0
    930c:	10 00 00 04 	l.bf 931c <fdt_supernode_atdepth_offset+0xc4>
    9310:	bd 6b 00 00 	l.sfgesi r11,0x0
    9314:	13 ff ff e7 	l.bf 92b0 <fdt_supernode_atdepth_offset+0x58>
    9318:	85 01 00 00 	l.lwz r8,0x0(r1)
			else
				return supernodeoffset;
		}
	}

	if ((offset == -FDT_ERR_NOTFOUND) || (offset >= 0))
    931c:	bd 6b ff ff 	l.sfgesi r11,0xffffffff
    9320:	10 00 00 06 	l.bf 9338 <fdt_supernode_atdepth_offset+0xe0>
    9324:	9c e0 ff fc 	l.addi r7,r0,0xfffffffc
		return -FDT_ERR_BADOFFSET;
	else if (offset == -FDT_ERR_BADOFFSET)
    9328:	bc 2b ff fc 	l.sfnei r11,0xfffffffc
    932c:	10 00 00 03 	l.bf 9338 <fdt_supernode_atdepth_offset+0xe0>
    9330:	a8 eb 00 00 	l.ori r7,r11,0x0
		return -FDT_ERR_BADSTRUCTURE;
    9334:	9c e0 ff f5 	l.addi r7,r0,0xfffffff5

	return offset; /* error from fdt_next_node() */
}
    9338:	9c 21 00 20 	l.addi r1,r1,0x20
    933c:	a9 67 00 00 	l.ori r11,r7,0x0
    9340:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9344:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    9348:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    934c:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    9350:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    9354:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    9358:	44 00 48 00 	l.jr r9
    935c:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00009360 <fdt_node_depth>:

int fdt_node_depth(const void *fdt, int nodeoffset)
{
    9360:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9364:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	int nodedepth;
	int err;

	err = fdt_supernode_atdepth_offset(fdt, nodeoffset, 0, &nodedepth);
    9368:	9c a0 00 00 	l.addi r5,r0,0x0
    936c:	07 ff ff bb 	l.jal 9258 <fdt_supernode_atdepth_offset>
    9370:	a8 c1 00 00 	l.ori r6,r1,0x0
	if (err)
    9374:	bc 0b 00 00 	l.sfeqi r11,0x0
    9378:	10 00 00 06 	l.bf 9390 <fdt_node_depth+0x30>
    937c:	bd 8b 00 00 	l.sfltsi r11,0x0
		return (err < 0) ? err : -FDT_ERR_INTERNAL;
    9380:	10 00 00 05 	l.bf 9394 <fdt_node_depth+0x34>
    9384:	15 00 00 00 	l.nop 0x0
    9388:	00 00 00 03 	l.j 9394 <fdt_node_depth+0x34>
    938c:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
	return nodedepth;
    9390:	85 61 00 00 	l.lwz r11,0x0(r1)
}
    9394:	9c 21 00 08 	l.addi r1,r1,0x8
    9398:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    939c:	44 00 48 00 	l.jr r9
    93a0:	15 00 00 00 	l.nop 0x0

000093a4 <fdt_parent_offset>:

int fdt_parent_offset(const void *fdt, int nodeoffset)
{
    93a4:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    93a8:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    93ac:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    93b0:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    93b4:	a9 c3 00 00 	l.ori r14,r3,0x0
	int nodedepth = fdt_node_depth(fdt, nodeoffset);
    93b8:	07 ff ff ea 	l.jal 9360 <fdt_node_depth>
    93bc:	a8 44 00 00 	l.ori r2,r4,0x0

	if (nodedepth < 0)
    93c0:	bd 8b 00 00 	l.sfltsi r11,0x0
    93c4:	10 00 00 0a 	l.bf 93ec <fdt_parent_offset+0x48>
    93c8:	a8 6e 00 00 	l.ori r3,r14,0x0
		return nodedepth;
	return fdt_supernode_atdepth_offset(fdt, nodeoffset,
					    nodedepth - 1, NULL);
}
    93cc:	9c 21 00 0c 	l.addi r1,r1,0xc
{
	int nodedepth = fdt_node_depth(fdt, nodeoffset);

	if (nodedepth < 0)
		return nodedepth;
	return fdt_supernode_atdepth_offset(fdt, nodeoffset,
    93d0:	a8 82 00 00 	l.ori r4,r2,0x0
    93d4:	9c ab ff ff 	l.addi r5,r11,0xffffffff
    93d8:	9c c0 00 00 	l.addi r6,r0,0x0
					    nodedepth - 1, NULL);
}
    93dc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    93e0:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
{
	int nodedepth = fdt_node_depth(fdt, nodeoffset);

	if (nodedepth < 0)
		return nodedepth;
	return fdt_supernode_atdepth_offset(fdt, nodeoffset,
    93e4:	03 ff ff 9d 	l.j 9258 <fdt_supernode_atdepth_offset>
    93e8:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)
					    nodedepth - 1, NULL);
}
    93ec:	9c 21 00 0c 	l.addi r1,r1,0xc
    93f0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    93f4:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    93f8:	44 00 48 00 	l.jr r9
    93fc:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

00009400 <fdt_node_offset_by_prop_value>:

int fdt_node_offset_by_prop_value(const void *fdt, int startoffset,
				  const char *propname,
				  const void *propval, int proplen)
{
    9400:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    9404:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    9408:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    940c:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    9410:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    9414:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9418:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    941c:	9c 21 ff e0 	l.addi r1,r1,0xffffffe0
    9420:	a9 c3 00 00 	l.ori r14,r3,0x0
    9424:	a8 44 00 00 	l.ori r2,r4,0x0
    9428:	aa 85 00 00 	l.ori r20,r5,0x0
    942c:	aa c6 00 00 	l.ori r22,r6,0x0
	int offset;
	const void *val;
	int len;

	FDT_CHECK_HEADER(fdt);
    9430:	07 ff fa 4a 	l.jal 7d58 <fdt_check_header>
    9434:	aa 07 00 00 	l.ori r16,r7,0x0
    9438:	bc 2b 00 00 	l.sfnei r11,0x0
    943c:	10 00 00 1f 	l.bf 94b8 <fdt_node_offset_by_prop_value+0xb8>
    9440:	a8 6e 00 00 	l.ori r3,r14,0x0
	/* FIXME: The algorithm here is pretty horrible: we scan each
	 * property of a node in fdt_getprop(), then if that didn't
	 * find what we want, we scan over them again making our way
	 * to the next node.  Still it's the easiest to implement
	 * approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
    9444:	a8 82 00 00 	l.ori r4,r2,0x0
    9448:	00 00 00 16 	l.j 94a0 <fdt_node_offset_by_prop_value+0xa0>
    944c:	a8 ab 00 00 	l.ori r5,r11,0x0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		val = fdt_getprop(fdt, offset, propname, &len);
    9450:	a8 6e 00 00 	l.ori r3,r14,0x0
    9454:	a8 82 00 00 	l.ori r4,r2,0x0
    9458:	a8 b4 00 00 	l.ori r5,r20,0x0
    945c:	07 ff fe 17 	l.jal 8cb8 <fdt_getprop>
    9460:	a8 c1 00 00 	l.ori r6,r1,0x0
		if (val && (len == proplen)
    9464:	bc 0b 00 00 	l.sfeqi r11,0x0
    9468:	10 00 00 0b 	l.bf 9494 <fdt_node_offset_by_prop_value+0x94>
    946c:	a8 6b 00 00 	l.ori r3,r11,0x0
    9470:	84 81 00 00 	l.lwz r4,0x0(r1)
    9474:	e4 24 80 00 	l.sfne r4,r16
    9478:	10 00 00 07 	l.bf 9494 <fdt_node_offset_by_prop_value+0x94>
    947c:	a8 96 00 00 	l.ori r4,r22,0x0
		    && (memcmp(val, propval, len) == 0))
    9480:	07 ff f9 c6 	l.jal 7b98 <memcmp>
    9484:	a8 b0 00 00 	l.ori r5,r16,0x0
    9488:	bc 0b 00 00 	l.sfeqi r11,0x0
    948c:	10 00 00 0b 	l.bf 94b8 <fdt_node_offset_by_prop_value+0xb8>
    9490:	a9 62 00 00 	l.ori r11,r2,0x0
	 * find what we want, we scan over them again making our way
	 * to the next node.  Still it's the easiest to implement
	 * approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
    9494:	a8 6e 00 00 	l.ori r3,r14,0x0
    9498:	a8 82 00 00 	l.ori r4,r2,0x0
    949c:	9c a0 00 00 	l.addi r5,r0,0x0
    94a0:	07 ff fb 31 	l.jal 8164 <fdt_next_node>
    94a4:	15 00 00 00 	l.nop 0x0
	/* FIXME: The algorithm here is pretty horrible: we scan each
	 * property of a node in fdt_getprop(), then if that didn't
	 * find what we want, we scan over them again making our way
	 * to the next node.  Still it's the easiest to implement
	 * approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
    94a8:	bd 6b 00 00 	l.sfgesi r11,0x0
    94ac:	13 ff ff e9 	l.bf 9450 <fdt_node_offset_by_prop_value+0x50>
    94b0:	a8 4b 00 00 	l.ori r2,r11,0x0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		val = fdt_getprop(fdt, offset, propname, &len);
		if (val && (len == proplen)
		    && (memcmp(val, propval, len) == 0))
    94b4:	a9 62 00 00 	l.ori r11,r2,0x0
			return offset;
	}

	return offset; /* error from fdt_next_node() */
}
    94b8:	9c 21 00 20 	l.addi r1,r1,0x20
    94bc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    94c0:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    94c4:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    94c8:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    94cc:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    94d0:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    94d4:	44 00 48 00 	l.jr r9
    94d8:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

000094dc <fdt_node_offset_by_phandle>:

int fdt_node_offset_by_phandle(const void *fdt, uint32_t phandle)
{
    94dc:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    94e0:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    94e4:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    94e8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	int offset;

	if ((phandle == 0) || (phandle == -1))
    94ec:	9c 44 ff ff 	l.addi r2,r4,0xffffffff

	return offset; /* error from fdt_next_node() */
}

int fdt_node_offset_by_phandle(const void *fdt, uint32_t phandle)
{
    94f0:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    94f4:	a9 c3 00 00 	l.ori r14,r3,0x0
    94f8:	aa 04 00 00 	l.ori r16,r4,0x0
	int offset;

	if ((phandle == 0) || (phandle == -1))
    94fc:	bc 42 ff fd 	l.sfgtui r2,0xfffffffd
    9500:	10 00 00 18 	l.bf 9560 <fdt_node_offset_by_phandle+0x84>
    9504:	9d 60 ff fa 	l.addi r11,r0,0xfffffffa
		return -FDT_ERR_BADPHANDLE;

	FDT_CHECK_HEADER(fdt);
    9508:	07 ff fa 14 	l.jal 7d58 <fdt_check_header>
    950c:	15 00 00 00 	l.nop 0x0
    9510:	bc 2b 00 00 	l.sfnei r11,0x0
    9514:	10 00 00 13 	l.bf 9560 <fdt_node_offset_by_phandle+0x84>
    9518:	a8 6e 00 00 	l.ori r3,r14,0x0
	 * potentially scan each property of a node in
	 * fdt_get_phandle(), then if that didn't find what
	 * we want, we scan over them again making our way to the next
	 * node.  Still it's the easiest to implement approach;
	 * performance can come later. */
	for (offset = fdt_next_node(fdt, -1, NULL);
    951c:	9c 80 ff ff 	l.addi r4,r0,0xffffffff
    9520:	00 00 00 0a 	l.j 9548 <fdt_node_offset_by_phandle+0x6c>
    9524:	a8 ab 00 00 	l.ori r5,r11,0x0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		if (fdt_get_phandle(fdt, offset) == phandle)
    9528:	a8 6e 00 00 	l.ori r3,r14,0x0
    952c:	07 ff fe 2c 	l.jal 8ddc <fdt_get_phandle>
    9530:	a8 82 00 00 	l.ori r4,r2,0x0
    9534:	e4 0b 80 00 	l.sfeq r11,r16
    9538:	10 00 00 09 	l.bf 955c <fdt_node_offset_by_phandle+0x80>
    953c:	a8 6e 00 00 	l.ori r3,r14,0x0
	 * we want, we scan over them again making our way to the next
	 * node.  Still it's the easiest to implement approach;
	 * performance can come later. */
	for (offset = fdt_next_node(fdt, -1, NULL);
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
    9540:	a8 82 00 00 	l.ori r4,r2,0x0
    9544:	9c a0 00 00 	l.addi r5,r0,0x0
    9548:	07 ff fb 07 	l.jal 8164 <fdt_next_node>
    954c:	15 00 00 00 	l.nop 0x0
	 * potentially scan each property of a node in
	 * fdt_get_phandle(), then if that didn't find what
	 * we want, we scan over them again making our way to the next
	 * node.  Still it's the easiest to implement approach;
	 * performance can come later. */
	for (offset = fdt_next_node(fdt, -1, NULL);
    9550:	bd 6b 00 00 	l.sfgesi r11,0x0
    9554:	13 ff ff f5 	l.bf 9528 <fdt_node_offset_by_phandle+0x4c>
    9558:	a8 4b 00 00 	l.ori r2,r11,0x0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		if (fdt_get_phandle(fdt, offset) == phandle)
    955c:	a9 62 00 00 	l.ori r11,r2,0x0
			return offset;
	}

	return offset; /* error from fdt_next_node() */
}
    9560:	9c 21 00 10 	l.addi r1,r1,0x10
    9564:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9568:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    956c:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    9570:	44 00 48 00 	l.jr r9
    9574:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00009578 <fdt_stringlist_contains>:

int fdt_stringlist_contains(const char *strlist, int listlen, const char *str)
{
    9578:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    957c:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
    9580:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    9584:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
    9588:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
    958c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9590:	a9 c3 00 00 	l.ori r14,r3,0x0
    9594:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
	int len = strlen(str);
    9598:	a8 65 00 00 	l.ori r3,r5,0x0

	return offset; /* error from fdt_next_node() */
}

int fdt_stringlist_contains(const char *strlist, int listlen, const char *str)
{
    959c:	a8 44 00 00 	l.ori r2,r4,0x0
	int len = strlen(str);
    95a0:	07 ff f8 d1 	l.jal 78e4 <strlen>
    95a4:	aa 45 00 00 	l.ori r18,r5,0x0
    95a8:	aa 0b 00 00 	l.ori r16,r11,0x0
	const char *p;

	while (listlen >= len) {
    95ac:	00 00 00 11 	l.j 95f0 <fdt_stringlist_contains+0x78>
    95b0:	9e 8b 00 01 	l.addi r20,r11,0x1
		if (memcmp(str, strlist, len+1) == 0)
    95b4:	a8 8e 00 00 	l.ori r4,r14,0x0
    95b8:	07 ff f9 78 	l.jal 7b98 <memcmp>
    95bc:	a8 b4 00 00 	l.ori r5,r20,0x0
    95c0:	bc 0b 00 00 	l.sfeqi r11,0x0
    95c4:	10 00 00 10 	l.bf 9604 <fdt_stringlist_contains+0x8c>
    95c8:	a8 6e 00 00 	l.ori r3,r14,0x0
			return 1;
		p = memchr(strlist, '\0', listlen);
    95cc:	9c 80 00 00 	l.addi r4,r0,0x0
    95d0:	07 ff f9 81 	l.jal 7bd4 <memchr>
    95d4:	a8 a2 00 00 	l.ori r5,r2,0x0
		if (!p)
    95d8:	bc 0b 00 00 	l.sfeqi r11,0x0
    95dc:	10 00 00 0b 	l.bf 9608 <fdt_stringlist_contains+0x90>
    95e0:	e1 cb 70 02 	l.sub r14,r11,r14
			return 0; /* malformed strlist.. */
		listlen -= (p-strlist) + 1;
    95e4:	ad ce ff ff 	l.xori r14,r14,0xffffffff
    95e8:	e0 42 70 00 	l.add r2,r2,r14
		strlist = p + 1;
    95ec:	9d cb 00 01 	l.addi r14,r11,0x1
int fdt_stringlist_contains(const char *strlist, int listlen, const char *str)
{
	int len = strlen(str);
	const char *p;

	while (listlen >= len) {
    95f0:	e5 62 80 00 	l.sfges r2,r16
    95f4:	13 ff ff f0 	l.bf 95b4 <fdt_stringlist_contains+0x3c>
    95f8:	a8 72 00 00 	l.ori r3,r18,0x0
		if (!p)
			return 0; /* malformed strlist.. */
		listlen -= (p-strlist) + 1;
		strlist = p + 1;
	}
	return 0;
    95fc:	00 00 00 03 	l.j 9608 <fdt_stringlist_contains+0x90>
    9600:	9d 60 00 00 	l.addi r11,r0,0x0
	int len = strlen(str);
	const char *p;

	while (listlen >= len) {
		if (memcmp(str, strlist, len+1) == 0)
			return 1;
    9604:	9d 60 00 01 	l.addi r11,r0,0x1
			return 0; /* malformed strlist.. */
		listlen -= (p-strlist) + 1;
		strlist = p + 1;
	}
	return 0;
}
    9608:	9c 21 00 18 	l.addi r1,r1,0x18
    960c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9610:	84 41 ff e8 	l.lwz r2,0xffffffe8(r1)
    9614:	85 c1 ff ec 	l.lwz r14,0xffffffec(r1)
    9618:	86 01 ff f0 	l.lwz r16,0xfffffff0(r1)
    961c:	86 41 ff f4 	l.lwz r18,0xfffffff4(r1)
    9620:	44 00 48 00 	l.jr r9
    9624:	86 81 ff f8 	l.lwz r20,0xfffffff8(r1)

00009628 <fdt_stringlist_count>:

int fdt_stringlist_count(const void *fdt, int nodeoffset, const char *property)
{
    9628:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    962c:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    9630:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9634:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    9638:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	const char *list, *end;
	int length, count = 0;

	list = fdt_getprop(fdt, nodeoffset, property, &length);
    963c:	07 ff fd 9f 	l.jal 8cb8 <fdt_getprop>
    9640:	a8 c1 00 00 	l.ori r6,r1,0x0
    9644:	85 c1 00 00 	l.lwz r14,0x0(r1)
	if (!list)
    9648:	bc 2b 00 00 	l.sfnei r11,0x0
    964c:	0c 00 00 13 	l.bnf 9698 <fdt_stringlist_count+0x70>
    9650:	a8 4b 00 00 	l.ori r2,r11,0x0
		return length;

	end = list + length;
    9654:	e2 0b 70 00 	l.add r16,r11,r14

	while (list < end) {
    9658:	00 00 00 0a 	l.j 9680 <fdt_stringlist_count+0x58>
    965c:	9d c0 00 00 	l.addi r14,r0,0x0
		length = strnlen(list, end - list) + 1;
    9660:	07 ff f8 a9 	l.jal 7904 <strnlen>
    9664:	e0 90 10 02 	l.sub r4,r16,r2
    9668:	9d 6b 00 01 	l.addi r11,r11,0x1

		/* Abort if the last string isn't properly NUL-terminated. */
		if (list + length > end)
    966c:	e0 42 58 00 	l.add r2,r2,r11
    9670:	e4 42 80 00 	l.sfgtu r2,r16
    9674:	10 00 00 08 	l.bf 9694 <fdt_stringlist_count+0x6c>
    9678:	d4 01 58 00 	l.sw 0x0(r1),r11
			return -FDT_ERR_BADVALUE;

		list += length;
		count++;
    967c:	9d ce 00 01 	l.addi r14,r14,0x1
	if (!list)
		return length;

	end = list + length;

	while (list < end) {
    9680:	e4 82 80 00 	l.sfltu r2,r16
    9684:	13 ff ff f7 	l.bf 9660 <fdt_stringlist_count+0x38>
    9688:	a8 62 00 00 	l.ori r3,r2,0x0
		list += length;
		count++;
	}

	return count;
}
    968c:	00 00 00 04 	l.j 969c <fdt_stringlist_count+0x74>
    9690:	9c 21 00 14 	l.addi r1,r1,0x14
	while (list < end) {
		length = strnlen(list, end - list) + 1;

		/* Abort if the last string isn't properly NUL-terminated. */
		if (list + length > end)
			return -FDT_ERR_BADVALUE;
    9694:	9d c0 ff f1 	l.addi r14,r0,0xfffffff1
		list += length;
		count++;
	}

	return count;
}
    9698:	9c 21 00 14 	l.addi r1,r1,0x14
    969c:	a9 6e 00 00 	l.ori r11,r14,0x0
    96a0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    96a4:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    96a8:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    96ac:	44 00 48 00 	l.jr r9
    96b0:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

000096b4 <fdt_stringlist_search>:

int fdt_stringlist_search(const void *fdt, int nodeoffset, const char *property,
			  const char *string)
{
    96b4:	d7 e1 17 e4 	l.sw 0xffffffe4(r1),r2
    96b8:	d7 e1 77 e8 	l.sw 0xffffffe8(r1),r14
    96bc:	d7 e1 a7 f4 	l.sw 0xfffffff4(r1),r20
    96c0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    96c4:	d7 e1 87 ec 	l.sw 0xffffffec(r1),r16
    96c8:	d7 e1 97 f0 	l.sw 0xfffffff0(r1),r18
    96cc:	d7 e1 b7 f8 	l.sw 0xfffffff8(r1),r22
    96d0:	9c 21 ff e0 	l.addi r1,r1,0xffffffe0
    96d4:	aa 86 00 00 	l.ori r20,r6,0x0
	int length, len, idx = 0;
	const char *list, *end;

	list = fdt_getprop(fdt, nodeoffset, property, &length);
    96d8:	07 ff fd 78 	l.jal 8cb8 <fdt_getprop>
    96dc:	a8 c1 00 00 	l.ori r6,r1,0x0
    96e0:	85 c1 00 00 	l.lwz r14,0x0(r1)
	if (!list)
    96e4:	bc 2b 00 00 	l.sfnei r11,0x0
    96e8:	0c 00 00 20 	l.bnf 9768 <fdt_stringlist_search+0xb4>
    96ec:	a8 4b 00 00 	l.ori r2,r11,0x0
		return length;

	len = strlen(string) + 1;
    96f0:	a8 74 00 00 	l.ori r3,r20,0x0
    96f4:	07 ff f8 7c 	l.jal 78e4 <strlen>
    96f8:	e2 02 70 00 	l.add r16,r2,r14
}

int fdt_stringlist_search(const void *fdt, int nodeoffset, const char *property,
			  const char *string)
{
	int length, len, idx = 0;
    96fc:	9d c0 00 00 	l.addi r14,r0,0x0
		return length;

	len = strlen(string) + 1;
	end = list + length;

	while (list < end) {
    9700:	00 00 00 14 	l.j 9750 <fdt_stringlist_search+0x9c>
    9704:	9e 4b 00 01 	l.addi r18,r11,0x1
		length = strnlen(list, end - list) + 1;
    9708:	07 ff f8 7f 	l.jal 7904 <strnlen>
    970c:	e0 90 10 02 	l.sub r4,r16,r2
    9710:	9c eb 00 01 	l.addi r7,r11,0x1

		/* Abort if the last string isn't properly NUL-terminated. */
		if (list + length > end)
    9714:	e2 c2 38 00 	l.add r22,r2,r7
    9718:	e4 56 80 00 	l.sfgtu r22,r16
    971c:	10 00 00 12 	l.bf 9764 <fdt_stringlist_search+0xb0>
    9720:	d4 01 38 00 	l.sw 0x0(r1),r7
			return -FDT_ERR_BADVALUE;

		if (length == len && memcmp(list, string, length) == 0)
    9724:	e4 27 90 00 	l.sfne r7,r18
    9728:	10 00 00 08 	l.bf 9748 <fdt_stringlist_search+0x94>
    972c:	a8 62 00 00 	l.ori r3,r2,0x0
    9730:	a8 94 00 00 	l.ori r4,r20,0x0
    9734:	07 ff f9 19 	l.jal 7b98 <memcmp>
    9738:	a8 b2 00 00 	l.ori r5,r18,0x0
    973c:	bc 0b 00 00 	l.sfeqi r11,0x0
    9740:	10 00 00 0a 	l.bf 9768 <fdt_stringlist_search+0xb4>
    9744:	15 00 00 00 	l.nop 0x0
			return idx;

		list += length;
		idx++;
    9748:	9d ce 00 01 	l.addi r14,r14,0x1
    974c:	a8 56 00 00 	l.ori r2,r22,0x0
		return length;

	len = strlen(string) + 1;
	end = list + length;

	while (list < end) {
    9750:	e4 82 80 00 	l.sfltu r2,r16
    9754:	13 ff ff ed 	l.bf 9708 <fdt_stringlist_search+0x54>
    9758:	a8 62 00 00 	l.ori r3,r2,0x0

		list += length;
		idx++;
	}

	return -FDT_ERR_NOTFOUND;
    975c:	00 00 00 03 	l.j 9768 <fdt_stringlist_search+0xb4>
    9760:	9d c0 ff ff 	l.addi r14,r0,0xffffffff
	while (list < end) {
		length = strnlen(list, end - list) + 1;

		/* Abort if the last string isn't properly NUL-terminated. */
		if (list + length > end)
			return -FDT_ERR_BADVALUE;
    9764:	9d c0 ff f1 	l.addi r14,r0,0xfffffff1
		list += length;
		idx++;
	}

	return -FDT_ERR_NOTFOUND;
}
    9768:	9c 21 00 20 	l.addi r1,r1,0x20
    976c:	a9 6e 00 00 	l.ori r11,r14,0x0
    9770:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9774:	84 41 ff e4 	l.lwz r2,0xffffffe4(r1)
    9778:	85 c1 ff e8 	l.lwz r14,0xffffffe8(r1)
    977c:	86 01 ff ec 	l.lwz r16,0xffffffec(r1)
    9780:	86 41 ff f0 	l.lwz r18,0xfffffff0(r1)
    9784:	86 81 ff f4 	l.lwz r20,0xfffffff4(r1)
    9788:	44 00 48 00 	l.jr r9
    978c:	86 c1 ff f8 	l.lwz r22,0xfffffff8(r1)

00009790 <fdt_stringlist_get>:

const char *fdt_stringlist_get(const void *fdt, int nodeoffset,
			       const char *property, int idx,
			       int *lenp)
{
    9790:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    9794:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    9798:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    979c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    97a0:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    97a4:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
    97a8:	aa 46 00 00 	l.ori r18,r6,0x0
	const char *list, *end;
	int length;

	list = fdt_getprop(fdt, nodeoffset, property, &length);
    97ac:	a8 c1 00 00 	l.ori r6,r1,0x0
    97b0:	07 ff fd 42 	l.jal 8cb8 <fdt_getprop>
    97b4:	a9 c7 00 00 	l.ori r14,r7,0x0
	if (!list) {
    97b8:	bc 2b 00 00 	l.sfnei r11,0x0
    97bc:	10 00 00 07 	l.bf 97d8 <fdt_stringlist_get+0x48>
    97c0:	a8 4b 00 00 	l.ori r2,r11,0x0
		if (lenp)
    97c4:	bc 0e 00 00 	l.sfeqi r14,0x0
    97c8:	10 00 00 26 	l.bf 9860 <fdt_stringlist_get+0xd0>
    97cc:	84 61 00 00 	l.lwz r3,0x0(r1)
			*lenp = length;
    97d0:	00 00 00 24 	l.j 9860 <fdt_stringlist_get+0xd0>
    97d4:	d4 0e 18 00 	l.sw 0x0(r14),r3

		return NULL;
	}

	end = list + length;
    97d8:	86 01 00 00 	l.lwz r16,0x0(r1)

	while (list < end) {
    97dc:	00 00 00 19 	l.j 9840 <fdt_stringlist_get+0xb0>
    97e0:	e2 0b 80 00 	l.add r16,r11,r16
		length = strnlen(list, end - list) + 1;
    97e4:	a8 62 00 00 	l.ori r3,r2,0x0
    97e8:	07 ff f8 47 	l.jal 7904 <strnlen>
    97ec:	e0 90 10 02 	l.sub r4,r16,r2
    97f0:	9c 6b 00 01 	l.addi r3,r11,0x1
    97f4:	d4 01 18 00 	l.sw 0x0(r1),r3

		/* Abort if the last string isn't properly NUL-terminated. */
		if (list + length > end) {
    97f8:	e0 62 18 00 	l.add r3,r2,r3
    97fc:	e4 a3 80 00 	l.sfleu r3,r16
    9800:	10 00 00 08 	l.bf 9820 <fdt_stringlist_get+0x90>
    9804:	bc 32 00 00 	l.sfnei r18,0x0
			if (lenp)
				*lenp = -FDT_ERR_BADVALUE;

			return NULL;
    9808:	a8 4e 00 00 	l.ori r2,r14,0x0
	while (list < end) {
		length = strnlen(list, end - list) + 1;

		/* Abort if the last string isn't properly NUL-terminated. */
		if (list + length > end) {
			if (lenp)
    980c:	bc 0e 00 00 	l.sfeqi r14,0x0
    9810:	10 00 00 14 	l.bf 9860 <fdt_stringlist_get+0xd0>
    9814:	9c 60 ff f1 	l.addi r3,r0,0xfffffff1
		list += length;
		idx--;
	}

	if (lenp)
		*lenp = -FDT_ERR_NOTFOUND;
    9818:	00 00 00 11 	l.j 985c <fdt_stringlist_get+0xcc>
    981c:	d4 02 18 00 	l.sw 0x0(r2),r3
				*lenp = -FDT_ERR_BADVALUE;

			return NULL;
		}

		if (idx == 0) {
    9820:	10 00 00 07 	l.bf 983c <fdt_stringlist_get+0xac>
    9824:	9e 52 ff ff 	l.addi r18,r18,0xffffffff
			if (lenp)
    9828:	bc 0e 00 00 	l.sfeqi r14,0x0
    982c:	10 00 00 0d 	l.bf 9860 <fdt_stringlist_get+0xd0>
    9830:	9e 52 00 01 	l.addi r18,r18,0x1
				*lenp = length - 1;
    9834:	00 00 00 0b 	l.j 9860 <fdt_stringlist_get+0xd0>
    9838:	d4 0e 58 00 	l.sw 0x0(r14),r11

			return list;
		}

		list += length;
		idx--;
    983c:	a8 43 00 00 	l.ori r2,r3,0x0
		return NULL;
	}

	end = list + length;

	while (list < end) {
    9840:	e4 82 80 00 	l.sfltu r2,r16
    9844:	13 ff ff e8 	l.bf 97e4 <fdt_stringlist_get+0x54>
    9848:	bc 0e 00 00 	l.sfeqi r14,0x0

		list += length;
		idx--;
	}

	if (lenp)
    984c:	10 00 00 05 	l.bf 9860 <fdt_stringlist_get+0xd0>
    9850:	a8 4e 00 00 	l.ori r2,r14,0x0
		*lenp = -FDT_ERR_NOTFOUND;
    9854:	9c 60 ff ff 	l.addi r3,r0,0xffffffff
    9858:	d4 02 18 00 	l.sw 0x0(r2),r3

	return NULL;
    985c:	9c 40 00 00 	l.addi r2,r0,0x0
}
    9860:	9c 21 00 18 	l.addi r1,r1,0x18
    9864:	a9 62 00 00 	l.ori r11,r2,0x0
    9868:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    986c:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    9870:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    9874:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    9878:	44 00 48 00 	l.jr r9
    987c:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00009880 <fdt_node_check_compatible>:

int fdt_node_check_compatible(const void *fdt, int nodeoffset,
			      const char *compatible)
{
    9880:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    9884:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9888:	a8 45 00 00 	l.ori r2,r5,0x0
    988c:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
	const void *prop;
	int len;

	prop = fdt_getprop(fdt, nodeoffset, "compatible", &len);
    9890:	18 a0 00 01 	l.movhi r5,0x1
    9894:	a8 c1 00 00 	l.ori r6,r1,0x0
    9898:	07 ff fd 08 	l.jal 8cb8 <fdt_getprop>
    989c:	a8 a5 27 b0 	l.ori r5,r5,0x27b0
    98a0:	84 81 00 00 	l.lwz r4,0x0(r1)
	if (!prop)
    98a4:	bc 2b 00 00 	l.sfnei r11,0x0
    98a8:	10 00 00 04 	l.bf 98b8 <fdt_node_check_compatible+0x38>
    98ac:	a8 6b 00 00 	l.ori r3,r11,0x0
		return len;
    98b0:	00 00 00 08 	l.j 98d0 <fdt_node_check_compatible+0x50>
    98b4:	a9 64 00 00 	l.ori r11,r4,0x0
	if (fdt_stringlist_contains(prop, len, compatible))
    98b8:	07 ff ff 30 	l.jal 9578 <fdt_stringlist_contains>
    98bc:	a8 a2 00 00 	l.ori r5,r2,0x0
	const void *prop;
	int len;

	prop = fdt_getprop(fdt, nodeoffset, "compatible", &len);
	if (!prop)
		return len;
    98c0:	e0 40 58 02 	l.sub r2,r0,r11
    98c4:	e1 62 58 04 	l.or r11,r2,r11
    98c8:	ad 6b ff ff 	l.xori r11,r11,0xffffffff
    98cc:	b9 6b 00 5f 	l.srli r11,r11,0x1f
	if (fdt_stringlist_contains(prop, len, compatible))
		return 0;
	else
		return 1;
}
    98d0:	9c 21 00 0c 	l.addi r1,r1,0xc
    98d4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    98d8:	44 00 48 00 	l.jr r9
    98dc:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000098e0 <fdt_node_offset_by_compatible>:

int fdt_node_offset_by_compatible(const void *fdt, int startoffset,
				  const char *compatible)
{
    98e0:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    98e4:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    98e8:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    98ec:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    98f0:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    98f4:	a9 c3 00 00 	l.ori r14,r3,0x0
    98f8:	a8 44 00 00 	l.ori r2,r4,0x0
	int offset, err;

	FDT_CHECK_HEADER(fdt);
    98fc:	07 ff f9 17 	l.jal 7d58 <fdt_check_header>
    9900:	aa 05 00 00 	l.ori r16,r5,0x0
    9904:	bc 2b 00 00 	l.sfnei r11,0x0
    9908:	10 00 00 16 	l.bf 9960 <fdt_node_offset_by_compatible+0x80>
    990c:	a8 6e 00 00 	l.ori r3,r14,0x0
	/* FIXME: The algorithm here is pretty horrible: we scan each
	 * property of a node in fdt_node_check_compatible(), then if
	 * that didn't find what we want, we scan over them again
	 * making our way to the next node.  Still it's the easiest to
	 * implement approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
    9910:	a8 82 00 00 	l.ori r4,r2,0x0
    9914:	00 00 00 0d 	l.j 9948 <fdt_node_offset_by_compatible+0x68>
    9918:	a8 ab 00 00 	l.ori r5,r11,0x0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		err = fdt_node_check_compatible(fdt, offset, compatible);
    991c:	a8 6e 00 00 	l.ori r3,r14,0x0
    9920:	a8 82 00 00 	l.ori r4,r2,0x0
    9924:	07 ff ff d7 	l.jal 9880 <fdt_node_check_compatible>
    9928:	a8 b0 00 00 	l.ori r5,r16,0x0
		if ((err < 0) && (err != -FDT_ERR_NOTFOUND))
    992c:	bd 8b ff ff 	l.sfltsi r11,0xffffffff
    9930:	10 00 00 0c 	l.bf 9960 <fdt_node_offset_by_compatible+0x80>
    9934:	bc 0b 00 00 	l.sfeqi r11,0x0
			return err;
		else if (err == 0)
    9938:	10 00 00 09 	l.bf 995c <fdt_node_offset_by_compatible+0x7c>
    993c:	a8 6e 00 00 	l.ori r3,r14,0x0
	 * that didn't find what we want, we scan over them again
	 * making our way to the next node.  Still it's the easiest to
	 * implement approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
    9940:	a8 82 00 00 	l.ori r4,r2,0x0
    9944:	9c a0 00 00 	l.addi r5,r0,0x0
    9948:	07 ff fa 07 	l.jal 8164 <fdt_next_node>
    994c:	15 00 00 00 	l.nop 0x0
	/* FIXME: The algorithm here is pretty horrible: we scan each
	 * property of a node in fdt_node_check_compatible(), then if
	 * that didn't find what we want, we scan over them again
	 * making our way to the next node.  Still it's the easiest to
	 * implement approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
    9950:	bd 6b 00 00 	l.sfgesi r11,0x0
    9954:	13 ff ff f2 	l.bf 991c <fdt_node_offset_by_compatible+0x3c>
    9958:	a8 4b 00 00 	l.ori r2,r11,0x0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		err = fdt_node_check_compatible(fdt, offset, compatible);
		if ((err < 0) && (err != -FDT_ERR_NOTFOUND))
			return err;
		else if (err == 0)
    995c:	a9 62 00 00 	l.ori r11,r2,0x0
			return offset;
	}

	return offset; /* error from fdt_next_node() */
}
    9960:	9c 21 00 10 	l.addi r1,r1,0x10
    9964:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9968:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    996c:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    9970:	44 00 48 00 	l.jr r9
    9974:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00009978 <fdt_strerror>:
	FDT_ERRTABENT(FDT_ERR_BADLAYOUT),
};
#define FDT_ERRTABSIZE	(sizeof(fdt_errtable) / sizeof(fdt_errtable[0]))

const char *fdt_strerror(int errval)
{
    9978:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	if (errval > 0)
		return "<valid offset/length>";
    997c:	19 60 00 01 	l.movhi r11,0x1
	FDT_ERRTABENT(FDT_ERR_BADLAYOUT),
};
#define FDT_ERRTABSIZE	(sizeof(fdt_errtable) / sizeof(fdt_errtable[0]))

const char *fdt_strerror(int errval)
{
    9980:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	if (errval > 0)
    9984:	bd 43 00 00 	l.sfgtsi r3,0x0
    9988:	10 00 00 15 	l.bf 99dc <fdt_strerror+0x64>
    998c:	a9 6b 27 bb 	l.ori r11,r11,0x27bb
		return "<valid offset/length>";
	else if (errval == 0)
		return "<no error>";
    9990:	19 60 00 01 	l.movhi r11,0x1

const char *fdt_strerror(int errval)
{
	if (errval > 0)
		return "<valid offset/length>";
	else if (errval == 0)
    9994:	bc 03 00 00 	l.sfeqi r3,0x0
    9998:	10 00 00 11 	l.bf 99dc <fdt_strerror+0x64>
    999c:	a9 6b 27 d1 	l.ori r11,r11,0x27d1

		if (s)
			return s;
	}

	return "<unknown error>";
    99a0:	19 60 00 01 	l.movhi r11,0x1
{
	if (errval > 0)
		return "<valid offset/length>";
	else if (errval == 0)
		return "<no error>";
	else if (errval > -FDT_ERRTABSIZE) {
    99a4:	bc a3 ff f3 	l.sfleui r3,0xfffffff3
    99a8:	10 00 00 0d 	l.bf 99dc <fdt_strerror+0x64>
    99ac:	a9 6b 27 dc 	l.ori r11,r11,0x27dc
		const char *s = fdt_errtable[-errval].str;
    99b0:	e0 60 18 02 	l.sub r3,r0,r3
    99b4:	18 40 00 01 	l.movhi r2,0x1
    99b8:	b8 63 00 02 	l.slli r3,r3,0x2
    99bc:	a8 42 31 0c 	l.ori r2,r2,0x310c
    99c0:	e0 63 10 00 	l.add r3,r3,r2
    99c4:	85 63 00 00 	l.lwz r11,0x0(r3)

		if (s)
    99c8:	bc 2b 00 00 	l.sfnei r11,0x0
    99cc:	10 00 00 04 	l.bf 99dc <fdt_strerror+0x64>
    99d0:	15 00 00 00 	l.nop 0x0
			return s;
	}

	return "<unknown error>";
    99d4:	19 60 00 01 	l.movhi r11,0x1
    99d8:	a9 6b 27 dc 	l.ori r11,r11,0x27dc
}
    99dc:	9c 21 00 04 	l.addi r1,r1,0x4
    99e0:	44 00 48 00 	l.jr r9
    99e4:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

000099e8 <fdt_address_cells>:
#include <libfdt.h>

#include "libfdt_internal.h"

int fdt_address_cells(const void *fdt, int nodeoffset)
{
    99e8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	const fdt32_t *ac;
	int val;
	int len;

	ac = fdt_getprop(fdt, nodeoffset, "#address-cells", &len);
    99ec:	18 a0 00 01 	l.movhi r5,0x1
#include <libfdt.h>

#include "libfdt_internal.h"

int fdt_address_cells(const void *fdt, int nodeoffset)
{
    99f0:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	const fdt32_t *ac;
	int val;
	int len;

	ac = fdt_getprop(fdt, nodeoffset, "#address-cells", &len);
    99f4:	a8 a5 28 ac 	l.ori r5,r5,0x28ac
    99f8:	07 ff fc b0 	l.jal 8cb8 <fdt_getprop>
    99fc:	a8 c1 00 00 	l.ori r6,r1,0x0
    9a00:	a8 6b 00 00 	l.ori r3,r11,0x0
	if (!ac)
    9a04:	bc 03 00 00 	l.sfeqi r3,0x0
    9a08:	10 00 00 15 	l.bf 9a5c <fdt_address_cells+0x74>
    9a0c:	9d 60 00 02 	l.addi r11,r0,0x2
		return 2;

	if (len != sizeof(*ac))
    9a10:	84 81 00 00 	l.lwz r4,0x0(r1)
    9a14:	bc 24 00 04 	l.sfnei r4,0x4
    9a18:	10 00 00 11 	l.bf 9a5c <fdt_address_cells+0x74>
    9a1c:	9d 60 ff f2 	l.addi r11,r0,0xfffffff2
		return -FDT_ERR_BADNCELLS;

	val = fdt32_to_cpu(*ac);
    9a20:	8c a3 00 00 	l.lbz r5,0x0(r3)
    9a24:	8c 83 00 03 	l.lbz r4,0x3(r3)
    9a28:	b8 a5 00 18 	l.slli r5,r5,0x18
    9a2c:	e0 a4 28 04 	l.or r5,r4,r5
    9a30:	8c 83 00 01 	l.lbz r4,0x1(r3)
    9a34:	b8 84 00 10 	l.slli r4,r4,0x10
    9a38:	e0 a5 20 04 	l.or r5,r5,r4
    9a3c:	8c 83 00 02 	l.lbz r4,0x2(r3)
    9a40:	b8 84 00 08 	l.slli r4,r4,0x8
    9a44:	e0 65 20 04 	l.or r3,r5,r4
	if ((val <= 0) || (val > FDT_MAX_NCELLS))
    9a48:	9c 83 ff ff 	l.addi r4,r3,0xffffffff
    9a4c:	bc 44 00 03 	l.sfgtui r4,0x3
    9a50:	10 00 00 03 	l.bf 9a5c <fdt_address_cells+0x74>
    9a54:	15 00 00 00 	l.nop 0x0
		return 2;

	if (len != sizeof(*ac))
		return -FDT_ERR_BADNCELLS;

	val = fdt32_to_cpu(*ac);
    9a58:	a9 63 00 00 	l.ori r11,r3,0x0
	if ((val <= 0) || (val > FDT_MAX_NCELLS))
		return -FDT_ERR_BADNCELLS;

	return val;
}
    9a5c:	9c 21 00 08 	l.addi r1,r1,0x8
    9a60:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9a64:	44 00 48 00 	l.jr r9
    9a68:	15 00 00 00 	l.nop 0x0

00009a6c <fdt_size_cells>:

int fdt_size_cells(const void *fdt, int nodeoffset)
{
    9a6c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	const fdt32_t *sc;
	int val;
	int len;

	sc = fdt_getprop(fdt, nodeoffset, "#size-cells", &len);
    9a70:	18 a0 00 01 	l.movhi r5,0x1

	return val;
}

int fdt_size_cells(const void *fdt, int nodeoffset)
{
    9a74:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	const fdt32_t *sc;
	int val;
	int len;

	sc = fdt_getprop(fdt, nodeoffset, "#size-cells", &len);
    9a78:	a8 a5 28 bb 	l.ori r5,r5,0x28bb
    9a7c:	07 ff fc 8f 	l.jal 8cb8 <fdt_getprop>
    9a80:	a8 c1 00 00 	l.ori r6,r1,0x0
    9a84:	a8 6b 00 00 	l.ori r3,r11,0x0
	if (!sc)
    9a88:	bc 03 00 00 	l.sfeqi r3,0x0
    9a8c:	10 00 00 14 	l.bf 9adc <fdt_size_cells+0x70>
    9a90:	9d 60 00 02 	l.addi r11,r0,0x2
		return 2;

	if (len != sizeof(*sc))
    9a94:	84 81 00 00 	l.lwz r4,0x0(r1)
    9a98:	bc 24 00 04 	l.sfnei r4,0x4
    9a9c:	10 00 00 10 	l.bf 9adc <fdt_size_cells+0x70>
    9aa0:	9d 60 ff f2 	l.addi r11,r0,0xfffffff2
		return -FDT_ERR_BADNCELLS;

	val = fdt32_to_cpu(*sc);
    9aa4:	8c a3 00 00 	l.lbz r5,0x0(r3)
    9aa8:	8c 83 00 03 	l.lbz r4,0x3(r3)
    9aac:	b8 a5 00 18 	l.slli r5,r5,0x18
    9ab0:	e0 a4 28 04 	l.or r5,r4,r5
    9ab4:	8c 83 00 01 	l.lbz r4,0x1(r3)
    9ab8:	b8 84 00 10 	l.slli r4,r4,0x10
    9abc:	e0 a5 20 04 	l.or r5,r5,r4
    9ac0:	8c 83 00 02 	l.lbz r4,0x2(r3)
    9ac4:	b8 84 00 08 	l.slli r4,r4,0x8
    9ac8:	e0 65 20 04 	l.or r3,r5,r4
	if ((val < 0) || (val > FDT_MAX_NCELLS))
    9acc:	bc 43 00 04 	l.sfgtui r3,0x4
    9ad0:	10 00 00 03 	l.bf 9adc <fdt_size_cells+0x70>
    9ad4:	15 00 00 00 	l.nop 0x0
		return 2;

	if (len != sizeof(*sc))
		return -FDT_ERR_BADNCELLS;

	val = fdt32_to_cpu(*sc);
    9ad8:	a9 63 00 00 	l.ori r11,r3,0x0
	if ((val < 0) || (val > FDT_MAX_NCELLS))
		return -FDT_ERR_BADNCELLS;

	return val;
}
    9adc:	9c 21 00 08 	l.addi r1,r1,0x8
    9ae0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9ae4:	44 00 48 00 	l.jr r9
    9ae8:	15 00 00 00 	l.nop 0x0

00009aec <notifier_init>:
{
	u32 i;

	/*initialize notifiers as free status*/
	for (i = 0; i < NOTIFIER_MAX; i++) {
		notifiers[i].flag = NOTIFIER_FREE;
    9aec:	18 60 00 01 	l.movhi r3,0x1

/*global notifiers table*/
static struct notifier notifiers[NOTIFIER_MAX];

s32 notifier_init(void)
{
    9af0:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	u32 i;

	/*initialize notifiers as free status*/
	for (i = 0; i < NOTIFIER_MAX; i++) {
		notifiers[i].flag = NOTIFIER_FREE;
    9af4:	a8 63 34 ec 	l.ori r3,r3,0x34ec
    9af8:	9c 40 00 00 	l.addi r2,r0,0x0

/*global notifiers table*/
static struct notifier notifiers[NOTIFIER_MAX];

s32 notifier_init(void)
{
    9afc:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	u32 i;

	/*initialize notifiers as free status*/
	for (i = 0; i < NOTIFIER_MAX; i++) {
		notifiers[i].flag = NOTIFIER_FREE;
    9b00:	d4 03 10 00 	l.sw 0x0(r3),r2
    9b04:	d4 03 10 0c 	l.sw 0xc(r3),r2
    9b08:	d4 03 10 18 	l.sw 0x18(r3),r2
    9b0c:	d4 03 10 24 	l.sw 0x24(r3),r2
    9b10:	d4 03 10 30 	l.sw 0x30(r3),r2
    9b14:	d4 03 10 3c 	l.sw 0x3c(r3),r2
    9b18:	d4 03 10 48 	l.sw 0x48(r3),r2
    9b1c:	d4 03 10 54 	l.sw 0x54(r3),r2
	}
	return OK;
}
    9b20:	9c 21 00 04 	l.addi r1,r1,0x4
    9b24:	a9 62 00 00 	l.ori r11,r2,0x0
    9b28:	44 00 48 00 	l.jr r9
    9b2c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00009b30 <notifier_exit>:

s32 notifier_exit(void)
{
	return OK;
}
    9b30:	44 00 48 00 	l.jr r9
    9b34:	9d 60 00 00 	l.addi r11,r0,0x0

00009b38 <notifier_insert>:
		notifier->next = NULL;
	}
}

s32 notifier_insert(struct notifier **head, __pNotifier_t pcb)
{
    9b38:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    9b3c:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    9b40:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    9b44:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9b48:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
{
	u32              i;
	struct notifier *notifier = NULL;

	/*allocate notifier from global table*/
	s32 cpsr = cpu_disable_int();
    9b4c:	18 40 00 01 	l.movhi r2,0x1
		notifier->next = NULL;
	}
}

s32 notifier_insert(struct notifier **head, __pNotifier_t pcb)
{
    9b50:	a9 c3 00 00 	l.ori r14,r3,0x0
{
	u32              i;
	struct notifier *notifier = NULL;

	/*allocate notifier from global table*/
	s32 cpsr = cpu_disable_int();
    9b54:	04 00 08 94 	l.jal bda4 <cpu_disable_int>
    9b58:	aa 04 00 00 	l.ori r16,r4,0x0
    9b5c:	a8 42 34 ec 	l.ori r2,r2,0x34ec
    9b60:	a8 6b 00 00 	l.ori r3,r11,0x0
	for (i = 0; i < NOTIFIER_MAX; i++) {
    9b64:	9c a0 00 00 	l.addi r5,r0,0x0
		if (notifiers[i].flag == NOTIFIER_FREE) {
    9b68:	84 82 00 00 	l.lwz r4,0x0(r2)
    9b6c:	bc 24 00 00 	l.sfnei r4,0x0
    9b70:	10 00 00 0c 	l.bf 9ba0 <notifier_insert+0x68>
    9b74:	9c a5 00 01 	l.addi r5,r5,0x1
    9b78:	9c a5 ff ff 	l.addi r5,r5,0xffffffff
			notifiers[i].flag = NOTIFIER_USED;
    9b7c:	e0 45 28 00 	l.add r2,r5,r5
    9b80:	18 80 00 01 	l.movhi r4,0x1
    9b84:	e0 42 28 00 	l.add r2,r2,r5
    9b88:	a8 84 34 ec 	l.ori r4,r4,0x34ec
    9b8c:	b8 42 00 02 	l.slli r2,r2,0x2
    9b90:	e0 42 20 00 	l.add r2,r2,r4
    9b94:	9c 80 00 01 	l.addi r4,r0,0x1
    9b98:	00 00 00 06 	l.j 9bb0 <notifier_insert+0x78>
    9b9c:	d4 02 20 00 	l.sw 0x0(r2),r4
	u32              i;
	struct notifier *notifier = NULL;

	/*allocate notifier from global table*/
	s32 cpsr = cpu_disable_int();
	for (i = 0; i < NOTIFIER_MAX; i++) {
    9ba0:	bc 25 00 08 	l.sfnei r5,0x8
    9ba4:	13 ff ff f1 	l.bf 9b68 <notifier_insert+0x30>
    9ba8:	9c 42 00 0c 	l.addi r2,r2,0xc
}

static struct notifier *notifier_alloc(void)
{
	u32              i;
	struct notifier *notifier = NULL;
    9bac:	9c 40 00 00 	l.addi r2,r0,0x0
			notifiers[i].flag = NOTIFIER_USED;
			notifier = &(notifiers[i]);
			break;
		}
	}
	cpu_enable_int(cpsr);
    9bb0:	04 00 08 87 	l.jal bdcc <cpu_enable_int>
    9bb4:	15 00 00 00 	l.nop 0x0

	ASSERT(pcb != NULL);

	/*allocate a notifier*/
	notifier = notifier_alloc();
	if (notifier == NULL) {
    9bb8:	bc 22 00 00 	l.sfnei r2,0x0
    9bbc:	10 00 00 07 	l.bf 9bd8 <notifier_insert+0xa0>
    9bc0:	18 80 00 01 	l.movhi r4,0x1
		WRN("allocate notifier failed\n");
    9bc4:	9c 60 00 04 	l.addi r3,r0,0x4
    9bc8:	04 00 00 fc 	l.jal 9fb8 <debugger_printf>
    9bcc:	a8 84 28 c7 	l.ori r4,r4,0x28c7
		return -ENOSPC;
    9bd0:	00 00 00 07 	l.j 9bec <notifier_insert+0xb4>
    9bd4:	9d 60 ff e4 	l.addi r11,r0,0xffffffe4
	}

	/*add notifier to head of notifier list*/
	notifier->pcb  = pcb;
	notifier->next = *head;
    9bd8:	84 6e 00 00 	l.lwz r3,0x0(r14)
		WRN("allocate notifier failed\n");
		return -ENOSPC;
	}

	/*add notifier to head of notifier list*/
	notifier->pcb  = pcb;
    9bdc:	d4 02 80 04 	l.sw 0x4(r2),r16
	notifier->next = *head;
    9be0:	d4 02 18 08 	l.sw 0x8(r2),r3
	*head = notifier;
    9be4:	d4 0e 10 00 	l.sw 0x0(r14),r2

	return OK;
    9be8:	9d 60 00 00 	l.addi r11,r0,0x0
}
    9bec:	9c 21 00 10 	l.addi r1,r1,0x10
    9bf0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9bf4:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    9bf8:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    9bfc:	44 00 48 00 	l.jr r9
    9c00:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00009c04 <notifier_delete>:

s32 notifier_delete(struct notifier **head, __pNotifier_t pcb)
{
    9c04:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	struct notifier *pnext;
	struct notifier *pprev;

	ASSERT(pcb != NULL);

	if (*head == NULL) {
    9c08:	84 c3 00 00 	l.lwz r6,0x0(r3)

	return OK;
}

s32 notifier_delete(struct notifier **head, __pNotifier_t pcb)
{
    9c0c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	struct notifier *pnext;
	struct notifier *pprev;

	ASSERT(pcb != NULL);

	if (*head == NULL) {
    9c10:	bc 06 00 00 	l.sfeqi r6,0x0
    9c14:	10 00 00 1f 	l.bf 9c90 <notifier_delete+0x8c>
    9c18:	9d 60 ff ed 	l.addi r11,r0,0xffffffed
		/*notifier list is empty, you can't delete anything*/
		return -ENODEV;
	}
	/*search the target notifier*/
	pprev = *head;
	if (pprev->next == NULL) {
    9c1c:	84 a6 00 08 	l.lwz r5,0x8(r6)
    9c20:	bc 25 00 00 	l.sfnei r5,0x0
    9c24:	10 00 00 0a 	l.bf 9c4c <notifier_delete+0x48>
    9c28:	15 00 00 00 	l.nop 0x0
		/*only one notifier in list*/
		if (pprev->pcb == pcb) {
    9c2c:	84 e6 00 04 	l.lwz r7,0x4(r6)
    9c30:	e4 27 20 00 	l.sfne r7,r4
    9c34:	10 00 00 17 	l.bf 9c90 <notifier_delete+0x8c>
    9c38:	9d 60 ff dc 	l.addi r11,r0,0xffffffdc
			/*find target, free this notifier and clear notifier list.*/
			*head = NULL;
    9c3c:	d4 03 28 00 	l.sw 0x0(r3),r5
    9c40:	00 00 00 10 	l.j 9c80 <notifier_delete+0x7c>
    9c44:	a8 a6 00 00 	l.ori r5,r6,0x0
				pprev->next = pnext->next;
				target = pnext;
				break;
			}
			pprev = pnext;
			pnext = pnext->next;
    9c48:	a8 a3 00 00 	l.ori r5,r3,0x0
			target = pprev;
		}
	} else {
		pnext = pprev->next;
		while (pnext) {
			if (pnext->pcb == pcb) {
    9c4c:	84 65 00 04 	l.lwz r3,0x4(r5)
    9c50:	e4 23 20 00 	l.sfne r3,r4
    9c54:	10 00 00 05 	l.bf 9c68 <notifier_delete+0x64>
    9c58:	15 00 00 00 	l.nop 0x0
				/*find target notifier.*/
				pprev->next = pnext->next;
    9c5c:	84 65 00 08 	l.lwz r3,0x8(r5)
				target = pnext;
				break;
    9c60:	00 00 00 08 	l.j 9c80 <notifier_delete+0x7c>
    9c64:	d4 06 18 08 	l.sw 0x8(r6),r3
			}
			pprev = pnext;
			pnext = pnext->next;
    9c68:	84 65 00 08 	l.lwz r3,0x8(r5)
			*head = NULL;
			target = pprev;
		}
	} else {
		pnext = pprev->next;
		while (pnext) {
    9c6c:	bc 23 00 00 	l.sfnei r3,0x0
    9c70:	13 ff ff f6 	l.bf 9c48 <notifier_delete+0x44>
    9c74:	a8 c5 00 00 	l.ori r6,r5,0x0
			pprev = pnext;
			pnext = pnext->next;
		}
	}
	if (target == NULL) {
		return -EFAIL;
    9c78:	00 00 00 06 	l.j 9c90 <notifier_delete+0x8c>
    9c7c:	9d 60 ff dc 	l.addi r11,r0,0xffffffdc
}

static void notifier_free(struct notifier *notifier)
{
	if (notifier) {
		notifier->flag = NOTIFIER_FREE;
    9c80:	9c 40 00 00 	l.addi r2,r0,0x0
    9c84:	d4 05 10 00 	l.sw 0x0(r5),r2
		notifier->next = NULL;
    9c88:	d4 05 10 08 	l.sw 0x8(r5),r2
		return -EFAIL;
	}
	/*free target notifier*/
	notifier_free(target);

	return OK;
    9c8c:	a9 62 00 00 	l.ori r11,r2,0x0
}
    9c90:	9c 21 00 04 	l.addi r1,r1,0x4
    9c94:	44 00 48 00 	l.jr r9
    9c98:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00009c9c <notifier_notify>:

s32 notifier_notify(struct notifier **head, u32 command, u32 aux)
{
    9c9c:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    9ca0:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    9ca4:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    9ca8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9cac:	aa 04 00 00 	l.ori r16,r4,0x0
    9cb0:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    9cb4:	a9 c5 00 00 	l.ori r14,r5,0x0
	struct notifier *notifier;

	/*broadcast message*/
	notifier = *head;
	while (notifier) {
    9cb8:	00 00 00 06 	l.j 9cd0 <notifier_notify+0x34>
    9cbc:	84 43 00 00 	l.lwz r2,0x0(r3)
		notifier->pcb(command, aux);
    9cc0:	85 62 00 04 	l.lwz r11,0x4(r2)
    9cc4:	48 00 58 00 	l.jalr r11
    9cc8:	a8 8e 00 00 	l.ori r4,r14,0x0

		/*next notifier*/
		notifier = notifier->next;
    9ccc:	84 42 00 08 	l.lwz r2,0x8(r2)
{
	struct notifier *notifier;

	/*broadcast message*/
	notifier = *head;
	while (notifier) {
    9cd0:	bc 22 00 00 	l.sfnei r2,0x0
    9cd4:	13 ff ff fb 	l.bf 9cc0 <notifier_notify+0x24>
    9cd8:	a8 70 00 00 	l.ori r3,r16,0x0

		/*next notifier*/
		notifier = notifier->next;
	}
	return OK;
}
    9cdc:	9c 21 00 10 	l.addi r1,r1,0x10
    9ce0:	a9 62 00 00 	l.ori r11,r2,0x0
    9ce4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9ce8:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    9cec:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    9cf0:	44 00 48 00 	l.jr r9
    9cf4:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

00009cf8 <message_valid>:

s32 message_valid(struct message *pmessage)
{
	/* valid message */
	if (!!pmessage->type)
		return TRUE;
    9cf8:	8d 63 00 02 	l.lbz r11,0x2(r3)
    9cfc:	e1 60 58 02 	l.sub r11,r0,r11

	/* invalid message */
	return FALSE;
}
    9d00:	44 00 48 00 	l.jr r9
    9d04:	b9 6b 00 5f 	l.srli r11,r11,0x1f

00009d08 <message_manager_init>:
 * @return: OK if initialize succeeded, others if failed.
 */
s32 message_manager_init(void)
{
	return OK;
}
    9d08:	44 00 48 00 	l.jr r9
    9d0c:	9d 60 00 00 	l.addi r11,r0,0x0

00009d10 <message_manager_exit>:
 * @return: OK if exit succeeded, others if failed.
 */
s32 message_manager_exit(void)
{
	return OK;
}
    9d10:	44 00 48 00 	l.jr r9
    9d14:	9d 60 00 00 	l.addi r11,r0,0x0

00009d18 <message_coming_notify>:
 *
 * pmessage: the pointer of coming message frame.
 * @return: OK if notify succeeded, other if failed.
 */
s32 message_coming_notify(struct message *pmessage)
{
    9d18:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    9d1c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9d20:	a8 43 00 00 	l.ori r2,r3,0x0
static s32 process_message(struct message *pmessage)
{
	s32 result;

	/* process message */
	switch (pmessage->type) {
    9d24:	8c 63 00 02 	l.lbz r3,0x2(r3)
 *
 * pmessage: the pointer of coming message frame.
 * @return: OK if notify succeeded, other if failed.
 */
s32 message_coming_notify(struct message *pmessage)
{
    9d28:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
static s32 process_message(struct message *pmessage)
{
	s32 result;

	/* process message */
	switch (pmessage->type) {
    9d2c:	bc 03 00 61 	l.sfeqi r3,0x61
    9d30:	10 00 00 55 	l.bf 9e84 <message_coming_notify+0x16c>
    9d34:	9d 60 00 00 	l.addi r11,r0,0x0
    9d38:	bc 43 00 61 	l.sfgtui r3,0x61
    9d3c:	10 00 00 14 	l.bf 9d8c <message_coming_notify+0x74>
    9d40:	bc 03 00 62 	l.sfeqi r3,0x62
    9d44:	bc 03 00 25 	l.sfeqi r3,0x25
    9d48:	10 00 00 25 	l.bf 9ddc <message_coming_notify+0xc4>
    9d4c:	bc 43 00 25 	l.sfgtui r3,0x25
    9d50:	10 00 00 09 	l.bf 9d74 <message_coming_notify+0x5c>
    9d54:	bc 03 00 26 	l.sfeqi r3,0x26
    9d58:	bc 03 00 22 	l.sfeqi r3,0x22
    9d5c:	10 00 00 12 	l.bf 9da4 <message_coming_notify+0x8c>
    9d60:	bc 03 00 24 	l.sfeqi r3,0x24
    9d64:	0c 00 00 3d 	l.bnf 9e58 <message_coming_notify+0x140>
    9d68:	18 80 00 01 	l.movhi r4,0x1
		LOG("cpu op req\n");
		result = cpu_op(pmessage);
		break;

	case SYS_OP_REQ:
		LOG("sys op req\n");
    9d6c:	00 00 00 16 	l.j 9dc4 <message_coming_notify+0xac>
    9d70:	9c 60 00 02 	l.addi r3,r0,0x2
static s32 process_message(struct message *pmessage)
{
	s32 result;

	/* process message */
	switch (pmessage->type) {
    9d74:	10 00 00 22 	l.bf 9dfc <message_coming_notify+0xe4>
    9d78:	bc 03 00 60 	l.sfeqi r3,0x60
    9d7c:	0c 00 00 38 	l.bnf 9e5c <message_coming_notify+0x144>
    9d80:	18 80 00 01 	l.movhi r4,0x1
		result = set_wakeup_src(pmessage);
		break;

	case SET_DEBUG_LEVEL_REQ:
		INF("set debug level request\n");
		result = set_debug_level(pmessage->paras[0]);
    9d84:	00 00 00 26 	l.j 9e1c <message_coming_notify+0x104>
    9d88:	84 62 00 1c 	l.lwz r3,0x1c(r2)
static s32 process_message(struct message *pmessage)
{
	s32 result;

	/* process message */
	switch (pmessage->type) {
    9d8c:	10 00 00 28 	l.bf 9e2c <message_coming_notify+0x114>
    9d90:	bc 03 00 64 	l.sfeqi r3,0x64
    9d94:	0c 00 00 32 	l.bnf 9e5c <message_coming_notify+0x144>
    9d98:	18 80 00 01 	l.movhi r4,0x1
		result = uart_set_baudrate(pmessage->paras[0]);
		break;

	case SET_DRAM_CRC_PARAS:
		INF("set dram crc paras request\n");
		result = standby_set_dram_crc_paras(pmessage->paras[0], pmessage->paras[1], pmessage->paras[2]);
    9d9c:	00 00 00 29 	l.j 9e40 <message_coming_notify+0x128>
    9da0:	84 a2 00 1c 	l.lwz r5,0x1c(r2)

	/* process message */
	switch (pmessage->type) {

	case CPU_OP_REQ:
		LOG("cpu op req\n");
    9da4:	18 80 00 01 	l.movhi r4,0x1
    9da8:	9c 60 00 02 	l.addi r3,r0,0x2
    9dac:	04 00 00 83 	l.jal 9fb8 <debugger_printf>
    9db0:	a8 84 28 e5 	l.ori r4,r4,0x28e5
		result = cpu_op(pmessage);
    9db4:	04 00 03 9d 	l.jal ac28 <cpu_op>
    9db8:	a8 62 00 00 	l.ori r3,r2,0x0
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    9dbc:	00 00 00 33 	l.j 9e88 <message_coming_notify+0x170>
    9dc0:	8c 62 00 01 	l.lbz r3,0x1(r2)
		LOG("cpu op req\n");
		result = cpu_op(pmessage);
		break;

	case SYS_OP_REQ:
		LOG("sys op req\n");
    9dc4:	04 00 00 7d 	l.jal 9fb8 <debugger_printf>
    9dc8:	a8 84 28 f1 	l.ori r4,r4,0x28f1
		result = sys_op(pmessage);
    9dcc:	04 00 07 6b 	l.jal bb78 <sys_op>
    9dd0:	a8 62 00 00 	l.ori r3,r2,0x0
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    9dd4:	00 00 00 2d 	l.j 9e88 <message_coming_notify+0x170>
    9dd8:	8c 62 00 01 	l.lbz r3,0x1(r2)
		LOG("sys op req\n");
		result = sys_op(pmessage);
		break;

	case CLEAR_WAKEUP_SRC_REQ:
		LOG("clear wakeup src req\n");
    9ddc:	18 80 00 01 	l.movhi r4,0x1
    9de0:	9c 60 00 02 	l.addi r3,r0,0x2
    9de4:	04 00 00 75 	l.jal 9fb8 <debugger_printf>
    9de8:	a8 84 28 fd 	l.ori r4,r4,0x28fd
		result = clear_wakeup_src(pmessage);
    9dec:	04 00 03 54 	l.jal ab3c <clear_wakeup_src>
    9df0:	a8 62 00 00 	l.ori r3,r2,0x0
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    9df4:	00 00 00 25 	l.j 9e88 <message_coming_notify+0x170>
    9df8:	8c 62 00 01 	l.lbz r3,0x1(r2)
		LOG("clear wakeup src req\n");
		result = clear_wakeup_src(pmessage);
		break;

	case SET_WAKEUP_SRC_REQ:
		LOG("set wakeup src req\n");
    9dfc:	18 80 00 01 	l.movhi r4,0x1
    9e00:	9c 60 00 02 	l.addi r3,r0,0x2
    9e04:	04 00 00 6d 	l.jal 9fb8 <debugger_printf>
    9e08:	a8 84 29 13 	l.ori r4,r4,0x2913
		result = set_wakeup_src(pmessage);
    9e0c:	04 00 02 fd 	l.jal aa00 <set_wakeup_src>
    9e10:	a8 62 00 00 	l.ori r3,r2,0x0
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    9e14:	00 00 00 1d 	l.j 9e88 <message_coming_notify+0x170>
    9e18:	8c 62 00 01 	l.lbz r3,0x1(r2)
		result = set_wakeup_src(pmessage);
		break;

	case SET_DEBUG_LEVEL_REQ:
		INF("set debug level request\n");
		result = set_debug_level(pmessage->paras[0]);
    9e1c:	04 00 01 3a 	l.jal a304 <set_debug_level>
    9e20:	84 63 00 00 	l.lwz r3,0x0(r3)
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    9e24:	00 00 00 19 	l.j 9e88 <message_coming_notify+0x170>
    9e28:	8c 62 00 01 	l.lbz r3,0x1(r2)
		result = set_debug_level(pmessage->paras[0]);
		break;

	case SET_UART_BAUDRATE:
		INF("set uart baudrate request\n");
		result = uart_set_baudrate(pmessage->paras[0]);
    9e2c:	84 62 00 1c 	l.lwz r3,0x1c(r2)
    9e30:	07 ff ed e4 	l.jal 55c0 <uart_set_baudrate>
    9e34:	84 63 00 00 	l.lwz r3,0x0(r3)
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    9e38:	00 00 00 14 	l.j 9e88 <message_coming_notify+0x170>
    9e3c:	8c 62 00 01 	l.lbz r3,0x1(r2)
		result = uart_set_baudrate(pmessage->paras[0]);
		break;

	case SET_DRAM_CRC_PARAS:
		INF("set dram crc paras request\n");
		result = standby_set_dram_crc_paras(pmessage->paras[0], pmessage->paras[1], pmessage->paras[2]);
    9e40:	84 65 00 00 	l.lwz r3,0x0(r5)
    9e44:	84 85 00 04 	l.lwz r4,0x4(r5)
    9e48:	04 00 02 43 	l.jal a754 <standby_set_dram_crc_paras>
    9e4c:	84 a5 00 08 	l.lwz r5,0x8(r5)
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    9e50:	00 00 00 0e 	l.j 9e88 <message_coming_notify+0x170>
    9e54:	8c 62 00 01 	l.lbz r3,0x1(r2)
		INF("loopback message request\n");
		result = OK;
		break;

	default:
		ERR("imt [%x]\n", pmessage->type);
    9e58:	18 80 00 01 	l.movhi r4,0x1
    9e5c:	d4 01 18 00 	l.sw 0x0(r1),r3
    9e60:	a8 84 29 27 	l.ori r4,r4,0x2927
    9e64:	04 00 00 55 	l.jal 9fb8 <debugger_printf>
    9e68:	9c 60 00 08 	l.addi r3,r0,0x8
		hexdump("msg", (char *)pmessage, sizeof(struct message));
    9e6c:	18 60 00 01 	l.movhi r3,0x1
    9e70:	a8 82 00 00 	l.ori r4,r2,0x0
    9e74:	a8 63 29 35 	l.ori r3,r3,0x2935
    9e78:	07 ff f6 35 	l.jal 774c <hexdump>
    9e7c:	9c a0 00 20 	l.addi r5,r0,0x20
		result = -ESRCH;
    9e80:	9d 60 ff fd 	l.addi r11,r0,0xfffffffd
	}

	pmessage->result = result;

	/* synchronous message, should feedback process result */
	if (pmessage->attr & (MESSAGE_ATTR_SOFTSYN | MESSAGE_ATTR_HARDSYN))
    9e84:	8c 62 00 01 	l.lbz r3,0x1(r2)
    9e88:	a4 63 00 03 	l.andi r3,r3,0x3
    9e8c:	bc 03 00 00 	l.sfeqi r3,0x0
    9e90:	10 00 00 06 	l.bf 9ea8 <message_coming_notify+0x190>
    9e94:	d8 02 58 03 	l.sb 0x3(r2),r11
		hwmsgbox_feedback_message(pmessage, SEND_MSG_TIMEOUT);
    9e98:	18 80 00 01 	l.movhi r4,0x1
    9e9c:	a8 62 00 00 	l.ori r3,r2,0x0
    9ea0:	07 ff f2 e7 	l.jal 6a3c <hwmsgbox_feedback_message>
    9ea4:	a8 84 86 a0 	l.ori r4,r4,0x86a0

	if (process_message(pmessage) != OK)
		WRN("message [%x, %x] process fail\n", pmessage, pmessage->type);

	return OK;
}
    9ea8:	9c 21 00 0c 	l.addi r1,r1,0xc
    9eac:	9d 60 00 00 	l.addi r11,r0,0x0
    9eb0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9eb4:	44 00 48 00 	l.jr r9
    9eb8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00009ebc <print_align>:
	}
	return OK;
}

static s32 print_align(char *string, s32 len, s32 align)
{
    9ebc:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    9ec0:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
    9ec4:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
    9ec8:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
    9ecc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9ed0:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    9ed4:	aa 44 00 00 	l.ori r18,r4,0x0
    9ed8:	9c 21 ff d4 	l.addi r1,r1,0xffffffd4
	/*
	 * fill with space ' ' when align request,
	 * the max align length is 16 byte.
	 */
	char fill_ch[] = "                ";
    9edc:	18 80 00 01 	l.movhi r4,0x1
	}
	return OK;
}

static s32 print_align(char *string, s32 len, s32 align)
{
    9ee0:	aa 85 00 00 	l.ori r20,r5,0x0
    9ee4:	a9 c3 00 00 	l.ori r14,r3,0x0
	/*
	 * fill with space ' ' when align request,
	 * the max align length is 16 byte.
	 */
	char fill_ch[] = "                ";
    9ee8:	a8 84 29 39 	l.ori r4,r4,0x2939
    9eec:	a8 61 00 00 	l.ori r3,r1,0x0
    9ef0:	9c a0 00 11 	l.addi r5,r0,0x11
    9ef4:	07 ff f6 d7 	l.jal 7a50 <memcpy>
    9ef8:	9c 40 00 00 	l.addi r2,r0,0x0
	if (len < align) {
    9efc:	e5 72 a0 00 	l.sfges r18,r20
    9f00:	10 00 00 06 	l.bf 9f18 <print_align+0x5c>
    9f04:	a8 6e 00 00 	l.ori r3,r14,0x0
		/* fill at right */
		strncat(string, fill_ch, align - len);
    9f08:	e0 54 90 02 	l.sub r2,r20,r18
    9f0c:	a8 81 00 00 	l.ori r4,r1,0x0
    9f10:	07 ff f6 93 	l.jal 795c <strncat>
    9f14:	a8 a2 00 00 	l.ori r5,r2,0x0
		return align - len;
	}
	/* not fill anything */
	return 0;
}
    9f18:	9c 21 00 2c 	l.addi r1,r1,0x2c
    9f1c:	a9 62 00 00 	l.ori r11,r2,0x0
    9f20:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9f24:	84 41 ff e8 	l.lwz r2,0xffffffe8(r1)
    9f28:	85 c1 ff ec 	l.lwz r14,0xffffffec(r1)
    9f2c:	86 01 ff f0 	l.lwz r16,0xfffffff0(r1)
    9f30:	86 41 ff f4 	l.lwz r18,0xfffffff4(r1)
    9f34:	44 00 48 00 	l.jr r9
    9f38:	86 81 ff f8 	l.lwz r20,0xfffffff8(r1)

00009f3c <debugger_init>:
*
* Returns    :  OK if initialize debugger succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_init(void)
{
    9f3c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	/* initialize serial module */
	uart_init();
    9f40:	07 ff ec ed 	l.jal 52f4 <uart_init>
    9f44:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	install_isr(INTC_R_UART_IRQ, getcmd, NULL);
	interrupt_enable(INTC_R_UART_IRQ);
#endif

	return OK;
}
    9f48:	9c 21 00 04 	l.addi r1,r1,0x4
    9f4c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9f50:	44 00 48 00 	l.jr r9
    9f54:	9d 60 00 00 	l.addi r11,r0,0x0

00009f58 <debugger_exit>:
*********************************************************************************************************
*/
s32 debugger_exit(void)
{
	return OK;
}
    9f58:	44 00 48 00 	l.jr r9
    9f5c:	9d 60 00 00 	l.addi r11,r0,0x0

00009f60 <debugger_putc>:
*
* Returns    :  OK if put out charset succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_putc(char ch)
{
    9f60:	b8 63 00 18 	l.slli r3,r3,0x18
    9f64:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9f68:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	uart_putc(ch);
    9f6c:	07 ff ed 41 	l.jal 5470 <uart_putc>
    9f70:	b8 63 00 98 	l.srai r3,r3,0x18

	return OK;
}
    9f74:	9c 21 00 04 	l.addi r1,r1,0x4
    9f78:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9f7c:	44 00 48 00 	l.jr r9
    9f80:	9d 60 00 00 	l.addi r11,r0,0x0

00009f84 <debugger_get>:
*
* Returns    :  the charset we read from uart.
*********************************************************************************************************
*/
u32 debugger_get(char *buf)
{
    9f84:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    9f88:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	return uart_get(buf);
}
    9f8c:	9c 21 00 04 	l.addi r1,r1,0x4
    9f90:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
* Returns    :  the charset we read from uart.
*********************************************************************************************************
*/
u32 debugger_get(char *buf)
{
	return uart_get(buf);
    9f94:	03 ff ed 50 	l.j 54d4 <uart_get>
    9f98:	15 00 00 00 	l.nop 0x0

00009f9c <debugger_puts>:
*
* Returns    :  OK if put out string succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_puts(char *string)
{
    9f9c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	uart_puts(string);
    9fa0:	07 ff ed 67 	l.jal 553c <uart_puts>
    9fa4:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc

	return OK;
}
    9fa8:	9c 21 00 04 	l.addi r1,r1,0x4
    9fac:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    9fb0:	44 00 48 00 	l.jr r9
    9fb4:	9d 60 00 00 	l.addi r11,r0,0x0

00009fb8 <debugger_printf>:
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
{
    9fb8:	d7 e1 17 e0 	l.sw 0xffffffe0(r1),r2
	char    *psrc;
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
    9fbc:	18 40 00 01 	l.movhi r2,0x1
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
{
    9fc0:	d7 e1 87 e8 	l.sw 0xffffffe8(r1),r16
	char    *psrc;
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
    9fc4:	a8 42 33 dc 	l.ori r2,r2,0x33dc
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
{
    9fc8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	char    *psrc;
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
    9fcc:	85 62 00 00 	l.lwz r11,0x0(r2)
    9fd0:	9c 40 00 f0 	l.addi r2,r0,0xf0
    9fd4:	9d 6b 00 01 	l.addi r11,r11,0x1
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
{
    9fd8:	d7 e1 77 e4 	l.sw 0xffffffe4(r1),r14
	char    *psrc;
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
    9fdc:	e1 62 58 88 	l.sra r11,r2,r11
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
{
    9fe0:	d7 e1 97 ec 	l.sw 0xffffffec(r1),r18
    9fe4:	d7 e1 a7 f0 	l.sw 0xfffffff0(r1),r20
    9fe8:	d7 e1 b7 f4 	l.sw 0xfffffff4(r1),r22
    9fec:	d7 e1 c7 f8 	l.sw 0xfffffff8(r1),r24
	char    *psrc;
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
    9ff0:	e1 6b 18 03 	l.and r11,r11,r3
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
{
    9ff4:	9c 21 ff c4 	l.addi r1,r1,0xffffffc4
	char    *psrc;
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
    9ff8:	bc 0b 00 00 	l.sfeqi r11,0x0
    9ffc:	10 00 00 b8 	l.bf a2dc <debugger_printf+0x324>
    a000:	aa 04 00 00 	l.ori r16,r4,0x0
		cpsr = cpu_disable_int();
    a004:	04 00 07 68 	l.jal bda4 <cpu_disable_int>
    a008:	18 40 00 01 	l.movhi r2,0x1
		/* dump current timestemp */
		if (print_timeflg)
    a00c:	a8 42 33 e0 	l.ori r2,r2,0x33e0
	s32      align;
	s32      len = 0;
	s32      cpsr;

	if (level & (0xf0 >> (debug_level + 1))) {
		cpsr = cpu_disable_int();
    a010:	aa cb 00 00 	l.ori r22,r11,0x0
		/* dump current timestemp */
		if (print_timeflg)
    a014:	84 42 00 00 	l.lwz r2,0x0(r2)
    a018:	bc 02 00 00 	l.sfeqi r2,0x0
    a01c:	10 00 00 3d 	l.bf a110 <debugger_printf+0x158>
    a020:	15 00 00 00 	l.nop 0x0
	u32  sec;
	u32  div;
	u32  i;

	/* convert current ticks to millisecond. */
	millisec = current_time_tick() * (1000 / TICK_PER_SEC);
    a024:	04 00 09 73 	l.jal c5f0 <current_time_tick>
    a028:	9c 40 00 5b 	l.addi r2,r0,0x5b
    a02c:	e2 8b 58 00 	l.add r20,r11,r11
    a030:	b9 6b 00 03 	l.slli r11,r11,0x3
	/*
	 * time print format : [secs.ms] s,
	 * example           : [0001.00] s.
	 */
	time[0]  = '[';
	time[5]  = '.';
    a034:	9c 60 00 2e 	l.addi r3,r0,0x2e
	u32  sec;
	u32  div;
	u32  i;

	/* convert current ticks to millisecond. */
	millisec = current_time_tick() * (1000 / TICK_PER_SEC);
    a038:	e2 94 58 00 	l.add r20,r20,r11

	/*
	 * time print format : [secs.ms] s,
	 * example           : [0001.00] s.
	 */
	time[0]  = '[';
    a03c:	d8 01 10 10 	l.sb 0x10(r1),r2
	time[5]  = '.';
    a040:	d8 01 18 15 	l.sb 0x15(r1),r3
	time[8]  = ']';
    a044:	9c 40 00 5d 	l.addi r2,r0,0x5d
	time[9]  = ' ';
    a048:	9c 60 00 20 	l.addi r3,r0,0x20
	 * time print format : [secs.ms] s,
	 * example           : [0001.00] s.
	 */
	time[0]  = '[';
	time[5]  = '.';
	time[8]  = ']';
    a04c:	d8 01 10 18 	l.sb 0x18(r1),r2
	time[9]  = ' ';
    a050:	d8 01 18 19 	l.sb 0x19(r1),r3
	time[10] = '\0';
    a054:	9c 40 00 00 	l.addi r2,r0,0x0

	/* second */
	sec = millisec / 1000;
    a058:	a8 74 00 00 	l.ori r3,r20,0x0
    a05c:	9c 80 03 e8 	l.addi r4,r0,0x3e8
    a060:	04 00 08 6a 	l.jal c208 <__udivsi3>
    a064:	d8 01 10 1a 	l.sb 0x1a(r1),r2
	sec = sec % 10000;
    a068:	9c 80 27 10 	l.addi r4,r0,0x2710
    a06c:	a8 6b 00 00 	l.ori r3,r11,0x0
    a070:	04 00 08 be 	l.jal c368 <__umodsi3>
    a074:	9d c1 00 11 	l.addi r14,r1,0x11
*
* Note       :  the usage refer to ANSI-C function printf().
*********************************************************************************************************
*/
char debugger_buffer[DEBUG_BUFFER_SIZE];
s32 debugger_printf(u32 level, const char *format, ...)
    a078:	9f 01 00 15 	l.addi r24,r1,0x15
	time[9]  = ' ';
	time[10] = '\0';

	/* second */
	sec = millisec / 1000;
	sec = sec % 10000;
    a07c:	aa 4b 00 00 	l.ori r18,r11,0x0
	div = 1000;
    a080:	9c 40 03 e8 	l.addi r2,r0,0x3e8
	for (i = 1; i <= 4; i++) {
		time[i] = ((u8)(sec / div)) + '0';
    a084:	a8 72 00 00 	l.ori r3,r18,0x0
    a088:	04 00 08 60 	l.jal c208 <__udivsi3>
    a08c:	a8 82 00 00 	l.ori r4,r2,0x0
    a090:	9c 8b 00 30 	l.addi r4,r11,0x30
		sec = sec % div;
    a094:	a8 72 00 00 	l.ori r3,r18,0x0
	/* second */
	sec = millisec / 1000;
	sec = sec % 10000;
	div = 1000;
	for (i = 1; i <= 4; i++) {
		time[i] = ((u8)(sec / div)) + '0';
    a098:	d8 0e 20 00 	l.sb 0x0(r14),r4
		sec = sec % div;
    a09c:	a8 82 00 00 	l.ori r4,r2,0x0
    a0a0:	04 00 08 b2 	l.jal c368 <__umodsi3>
    a0a4:	9d ce 00 01 	l.addi r14,r14,0x1
		div = div / 10;
    a0a8:	a8 62 00 00 	l.ori r3,r2,0x0
    a0ac:	9c 80 00 0a 	l.addi r4,r0,0xa
    a0b0:	04 00 08 56 	l.jal c208 <__udivsi3>
    a0b4:	aa 4b 00 00 	l.ori r18,r11,0x0

	/* second */
	sec = millisec / 1000;
	sec = sec % 10000;
	div = 1000;
	for (i = 1; i <= 4; i++) {
    a0b8:	e4 2e c0 00 	l.sfne r14,r24
    a0bc:	13 ff ff f2 	l.bf a084 <debugger_printf+0xcc>
    a0c0:	a8 4b 00 00 	l.ori r2,r11,0x0
		time[i] = ((u8)(sec / div)) + '0';
		sec = sec % div;
		div = div / 10;
	}
	/* millisecond */
	millisec = millisec % 1000;
    a0c4:	a8 74 00 00 	l.ori r3,r20,0x0
    a0c8:	04 00 08 a8 	l.jal c368 <__umodsi3>
    a0cc:	9c 80 03 e8 	l.addi r4,r0,0x3e8
	div = 100;
	for (i = 6; i <= 7; i++) {
		time[i] = ((u8)(millisec / div)) + '0';
    a0d0:	9c 80 00 64 	l.addi r4,r0,0x64
    a0d4:	a8 6b 00 00 	l.ori r3,r11,0x0
    a0d8:	04 00 08 4c 	l.jal c208 <__udivsi3>
    a0dc:	a8 4b 00 00 	l.ori r2,r11,0x0
    a0e0:	9c 8b 00 30 	l.addi r4,r11,0x30
		millisec = millisec % div;
    a0e4:	a8 62 00 00 	l.ori r3,r2,0x0
	}
	/* millisecond */
	millisec = millisec % 1000;
	div = 100;
	for (i = 6; i <= 7; i++) {
		time[i] = ((u8)(millisec / div)) + '0';
    a0e8:	d8 01 20 16 	l.sb 0x16(r1),r4
		millisec = millisec % div;
    a0ec:	04 00 08 9f 	l.jal c368 <__umodsi3>
    a0f0:	9c 80 00 64 	l.addi r4,r0,0x64
	}
	/* millisecond */
	millisec = millisec % 1000;
	div = 100;
	for (i = 6; i <= 7; i++) {
		time[i] = ((u8)(millisec / div)) + '0';
    a0f4:	9c 80 00 0a 	l.addi r4,r0,0xa
    a0f8:	04 00 08 44 	l.jal c208 <__udivsi3>
    a0fc:	a8 6b 00 00 	l.ori r3,r11,0x0
* Returns    :  OK if put out string succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_puts(char *string)
{
	uart_puts(string);
    a100:	9c 61 00 10 	l.addi r3,r1,0x10
	}
	/* millisecond */
	millisec = millisec % 1000;
	div = 100;
	for (i = 6; i <= 7; i++) {
		time[i] = ((u8)(millisec / div)) + '0';
    a104:	9c 4b 00 30 	l.addi r2,r11,0x30
* Returns    :  OK if put out string succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_puts(char *string)
{
	uart_puts(string);
    a108:	07 ff ed 0d 	l.jal 553c <uart_puts>
    a10c:	d8 01 10 17 	l.sb 0x17(r1),r2
	if (level & (0xf0 >> (debug_level + 1))) {
		cpsr = cpu_disable_int();
		/* dump current timestemp */
		if (print_timeflg)
		print_current_time();
		pdest = debugger_buffer;
    a110:	18 40 00 01 	l.movhi r2,0x1
		va_start(args, format);
    a114:	9c c1 00 3c 	l.addi r6,r1,0x3c
		while (*format) {
    a118:	00 00 00 58 	l.j a278 <debugger_printf+0x2c0>
    a11c:	a8 42 37 40 	l.ori r2,r2,0x3740
			if (*format == '%') {
    a120:	10 00 00 53 	l.bf a26c <debugger_printf+0x2b4>
    a124:	15 00 00 00 	l.nop 0x0
				++format;
    a128:	9e 10 00 01 	l.addi r16,r16,0x1
				if (('0' < (*format)) && ((*format) <= '9')) {
    a12c:	90 90 00 00 	l.lbs r4,0x0(r16)
    a130:	9c 64 ff cf 	l.addi r3,r4,0xffffffcf
    a134:	a4 63 00 ff 	l.andi r3,r3,0xff
    a138:	bc 43 00 08 	l.sfgtui r3,0x8
    a13c:	10 00 00 05 	l.bf a150 <debugger_printf+0x198>
    a140:	9e 40 00 00 	l.addi r18,r0,0x0
					/* we just suport wide from 1 to 9. */
					align = *format - '0';
    a144:	9e 44 ff d0 	l.addi r18,r4,0xffffffd0
					++format;
    a148:	9e 10 00 01 	l.addi r16,r16,0x1
				} else {
					align = 0;
				}

				switch (*format) {
    a14c:	90 90 00 00 	l.lbs r4,0x0(r16)
    a150:	bc 04 00 70 	l.sfeqi r4,0x70
    a154:	10 00 00 19 	l.bf a1b8 <debugger_printf+0x200>
    a158:	bd 44 00 70 	l.sfgtsi r4,0x70
    a15c:	10 00 00 09 	l.bf a180 <debugger_printf+0x1c8>
    a160:	bc 04 00 75 	l.sfeqi r4,0x75
    a164:	bc 04 00 63 	l.sfeqi r4,0x63
    a168:	10 00 00 2e 	l.bf a220 <debugger_printf+0x268>
    a16c:	bc 04 00 64 	l.sfeqi r4,0x64
    a170:	0c 00 00 39 	l.bnf a254 <debugger_printf+0x29c>
    a174:	15 00 00 00 	l.nop 0x0
				case 'd':
					{
						/* int */
						itoa(va_arg(args, int), string, 10);
    a178:	00 00 00 0a 	l.j a1a0 <debugger_printf+0x1e8>
    a17c:	84 66 00 00 	l.lwz r3,0x0(r6)
					++format;
				} else {
					align = 0;
				}

				switch (*format) {
    a180:	10 00 00 23 	l.bf a20c <debugger_printf+0x254>
    a184:	bc 04 00 78 	l.sfeqi r4,0x78
    a188:	10 00 00 0c 	l.bf a1b8 <debugger_printf+0x200>
    a18c:	bc 04 00 73 	l.sfeqi r4,0x73
    a190:	0c 00 00 31 	l.bnf a254 <debugger_printf+0x29c>
    a194:	15 00 00 00 	l.nop 0x0
						break;
					}
				case 's':
					{
						/* string */
						psrc = va_arg(args, char *);
    a198:	00 00 00 26 	l.j a230 <debugger_printf+0x278>
    a19c:	86 46 00 00 	l.lwz r18,0x0(r6)

				switch (*format) {
				case 'd':
					{
						/* int */
						itoa(va_arg(args, int), string, 10);
    a1a0:	a8 81 00 00 	l.ori r4,r1,0x0
    a1a4:	9c a0 00 0a 	l.addi r5,r0,0xa
    a1a8:	07 ff f4 e1 	l.jal 752c <itoa>
    a1ac:	9f 06 00 04 	l.addi r24,r6,0x4
    a1b0:	00 00 00 08 	l.j a1d0 <debugger_printf+0x218>
    a1b4:	15 00 00 00 	l.nop 0x0
					}
				case 'x':
				case 'p':
					{
						/* hex */
						utoa(va_arg(args, unsigned long), string, 16);
    a1b8:	9f 06 00 04 	l.addi r24,r6,0x4
    a1bc:	84 66 00 00 	l.lwz r3,0x0(r6)
    a1c0:	a8 81 00 00 	l.ori r4,r1,0x0
    a1c4:	9c a0 00 10 	l.addi r5,r0,0x10
    a1c8:	07 ff f5 25 	l.jal 765c <utoa>
    a1cc:	15 00 00 00 	l.nop 0x0
						len = strlen(string);
    a1d0:	07 ff f5 c5 	l.jal 78e4 <strlen>
    a1d4:	a8 61 00 00 	l.ori r3,r1,0x0
						len += print_align(string, len, align);
    a1d8:	a8 b2 00 00 	l.ori r5,r18,0x0
    a1dc:	a8 61 00 00 	l.ori r3,r1,0x0
    a1e0:	a8 8b 00 00 	l.ori r4,r11,0x0
    a1e4:	07 ff ff 36 	l.jal 9ebc <print_align>
    a1e8:	aa 8b 00 00 	l.ori r20,r11,0x0
    a1ec:	aa 4b 00 00 	l.ori r18,r11,0x0
						strcpy(pdest, string);
    a1f0:	a8 62 00 00 	l.ori r3,r2,0x0
    a1f4:	a8 81 00 00 	l.ori r4,r1,0x0
    a1f8:	07 ff f5 cf 	l.jal 7934 <strcpy>
    a1fc:	e2 94 90 00 	l.add r20,r20,r18
						pdest += len;
    a200:	e0 42 a0 00 	l.add r2,r2,r20
						break;
    a204:	00 00 00 1c 	l.j a274 <debugger_printf+0x2bc>
    a208:	a8 d8 00 00 	l.ori r6,r24,0x0
					}
				case 'u':
					{
						/* unsigned int */
						utoa(va_arg(args, unsigned long), string, 10);
    a20c:	9f 06 00 04 	l.addi r24,r6,0x4
    a210:	84 66 00 00 	l.lwz r3,0x0(r6)
    a214:	a8 81 00 00 	l.ori r4,r1,0x0
    a218:	03 ff ff ec 	l.j a1c8 <debugger_printf+0x210>
    a21c:	9c a0 00 0a 	l.addi r5,r0,0xa
						break;
					}
				case 'c':
					{
						/* charset, aligned by cpu word */
						*pdest = (char)va_arg(args, int);
    a220:	84 66 00 00 	l.lwz r3,0x0(r6)
    a224:	9c c6 00 04 	l.addi r6,r6,0x4
						break;
    a228:	00 00 00 13 	l.j a274 <debugger_printf+0x2bc>
    a22c:	d8 02 18 00 	l.sb 0x0(r2),r3
					}
				case 's':
					{
						/* string */
						psrc = va_arg(args, char *);
						strcpy(pdest, psrc);
    a230:	a8 62 00 00 	l.ori r3,r2,0x0
    a234:	a8 92 00 00 	l.ori r4,r18,0x0
    a238:	07 ff f5 bf 	l.jal 7934 <strcpy>
    a23c:	9e 86 00 04 	l.addi r20,r6,0x4
						pdest += strlen(psrc);
    a240:	07 ff f5 a9 	l.jal 78e4 <strlen>
    a244:	a8 72 00 00 	l.ori r3,r18,0x0
						break;
					}
				case 's':
					{
						/* string */
						psrc = va_arg(args, char *);
    a248:	a8 d4 00 00 	l.ori r6,r20,0x0
						strcpy(pdest, psrc);
						pdest += strlen(psrc);
						break;
    a24c:	00 00 00 0a 	l.j a274 <debugger_printf+0x2bc>
    a250:	e0 42 58 00 	l.add r2,r2,r11
					}
				default:
					{
						/* no-conversion */
						*pdest++ = '%';
    a254:	9c 60 00 25 	l.addi r3,r0,0x25
    a258:	d8 02 18 00 	l.sb 0x0(r2),r3
						*pdest++ = *format;
    a25c:	8c 70 00 00 	l.lbz r3,0x0(r16)
    a260:	d8 02 18 01 	l.sb 0x1(r2),r3
    a264:	00 00 00 04 	l.j a274 <debugger_printf+0x2bc>
    a268:	9c 42 00 02 	l.addi r2,r2,0x2
					}
				}
			} else {
				*pdest++ = *format;
    a26c:	d8 02 20 00 	l.sb 0x0(r2),r4
    a270:	9c 42 00 01 	l.addi r2,r2,0x1
			}
			/* parse next token */
			++format;
    a274:	9e 10 00 01 	l.addi r16,r16,0x1
		/* dump current timestemp */
		if (print_timeflg)
		print_current_time();
		pdest = debugger_buffer;
		va_start(args, format);
		while (*format) {
    a278:	90 90 00 00 	l.lbs r4,0x0(r16)
    a27c:	bc 24 00 00 	l.sfnei r4,0x0
    a280:	13 ff ff a8 	l.bf a120 <debugger_printf+0x168>
    a284:	bc 24 00 25 	l.sfnei r4,0x25
			/* parse next token */
			++format;
		}
		va_end(args);

		if (*(pdest - 1) == '\n')
    a288:	90 62 ff ff 	l.lbs r3,0xffffffff(r2)
    a28c:	18 a0 00 01 	l.movhi r5,0x1
    a290:	bc 23 00 0a 	l.sfnei r3,0xa
    a294:	10 00 00 06 	l.bf a2ac <debugger_printf+0x2f4>
    a298:	a8 a5 33 e0 	l.ori r5,r5,0x33e0
			print_timeflg = 1;
    a29c:	9c 60 00 01 	l.addi r3,r0,0x1
    a2a0:	d4 05 18 00 	l.sw 0x0(r5),r3
		else
			print_timeflg = 0;
		/* must end with '\0' */
		*pdest = '\0';
    a2a4:	00 00 00 04 	l.j a2b4 <debugger_printf+0x2fc>
    a2a8:	9c 60 00 00 	l.addi r3,r0,0x0
		va_end(args);

		if (*(pdest - 1) == '\n')
			print_timeflg = 1;
		else
			print_timeflg = 0;
    a2ac:	d4 05 20 00 	l.sw 0x0(r5),r4
		/* must end with '\0' */
		*pdest = '\0';
    a2b0:	9c 60 00 00 	l.addi r3,r0,0x0
    a2b4:	d8 02 18 00 	l.sb 0x0(r2),r3
* Returns    :  OK if put out string succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_puts(char *string)
{
	uart_puts(string);
    a2b8:	18 60 00 01 	l.movhi r3,0x1
			print_timeflg = 1;
		else
			print_timeflg = 0;
		/* must end with '\0' */
		*pdest = '\0';
		pdest++;
    a2bc:	9c 42 00 01 	l.addi r2,r2,0x1
* Returns    :  OK if put out string succeeded, others if failed.
*********************************************************************************************************
*/
s32 debugger_puts(char *string)
{
	uart_puts(string);
    a2c0:	07 ff ec 9f 	l.jal 553c <uart_puts>
    a2c4:	a8 63 37 40 	l.ori r3,r3,0x3740
			print_timeflg = 0;
		/* must end with '\0' */
		*pdest = '\0';
		pdest++;
		debugger_puts(debugger_buffer);
		cpu_enable_int(cpsr);
    a2c8:	04 00 06 c1 	l.jal bdcc <cpu_enable_int>
    a2cc:	a8 76 00 00 	l.ori r3,r22,0x0

		return (pdest - debugger_buffer);
    a2d0:	18 60 00 01 	l.movhi r3,0x1
    a2d4:	a8 63 37 40 	l.ori r3,r3,0x3740
    a2d8:	e1 62 18 02 	l.sub r11,r2,r3
	}
	return OK;
}
    a2dc:	9c 21 00 3c 	l.addi r1,r1,0x3c
    a2e0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a2e4:	84 41 ff e0 	l.lwz r2,0xffffffe0(r1)
    a2e8:	85 c1 ff e4 	l.lwz r14,0xffffffe4(r1)
    a2ec:	86 01 ff e8 	l.lwz r16,0xffffffe8(r1)
    a2f0:	86 41 ff ec 	l.lwz r18,0xffffffec(r1)
    a2f4:	86 81 ff f0 	l.lwz r20,0xfffffff0(r1)
    a2f8:	86 c1 ff f4 	l.lwz r22,0xfffffff4(r1)
    a2fc:	44 00 48 00 	l.jr r9
    a300:	87 01 ff f8 	l.lwz r24,0xfffffff8(r1)

0000a304 <set_debug_level>:
*
* Returns    :  OK if set the debug level succeeded.
*********************************************************************************************************
*/
s32 set_debug_level(u32 level)
{
    a304:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
	LOG("debug_mask from %d to %d\n", debug_level, level);
    a308:	18 40 00 01 	l.movhi r2,0x1
*
* Returns    :  OK if set the debug level succeeded.
*********************************************************************************************************
*/
s32 set_debug_level(u32 level)
{
    a30c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	LOG("debug_mask from %d to %d\n", debug_level, level);
    a310:	a8 42 33 dc 	l.ori r2,r2,0x33dc
*
* Returns    :  OK if set the debug level succeeded.
*********************************************************************************************************
*/
s32 set_debug_level(u32 level)
{
    a314:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
	LOG("debug_mask from %d to %d\n", debug_level, level);
    a318:	18 80 00 01 	l.movhi r4,0x1
*
* Returns    :  OK if set the debug level succeeded.
*********************************************************************************************************
*/
s32 set_debug_level(u32 level)
{
    a31c:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
    a320:	a9 c3 00 00 	l.ori r14,r3,0x0
	LOG("debug_mask from %d to %d\n", debug_level, level);
    a324:	84 62 00 00 	l.lwz r3,0x0(r2)
    a328:	a8 84 29 4a 	l.ori r4,r4,0x294a
    a32c:	d4 01 18 00 	l.sw 0x0(r1),r3
    a330:	9c 60 00 02 	l.addi r3,r0,0x2
    a334:	07 ff ff 21 	l.jal 9fb8 <debugger_printf>
    a338:	d4 01 70 04 	l.sw 0x4(r1),r14
	debug_level  = level;
    a33c:	d4 02 70 00 	l.sw 0x0(r2),r14

	return OK;
}
    a340:	9c 21 00 14 	l.addi r1,r1,0x14
    a344:	9d 60 00 00 	l.addi r11,r0,0x0
    a348:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a34c:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    a350:	44 00 48 00 	l.jr r9
    a354:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

0000a358 <daemon_register_service>:

/* the list of daemon notifier */
static struct notifier *daemon_list;

int daemon_register_service(__pNotifier_t pcb)
{
    a358:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a35c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    a360:	a8 83 00 00 	l.ori r4,r3,0x0
	return notifier_insert(&daemon_list, pcb);
}
    a364:	9c 21 00 04 	l.addi r1,r1,0x4
/* the list of daemon notifier */
static struct notifier *daemon_list;

int daemon_register_service(__pNotifier_t pcb)
{
	return notifier_insert(&daemon_list, pcb);
    a368:	18 60 00 01 	l.movhi r3,0x1
}
    a36c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
/* the list of daemon notifier */
static struct notifier *daemon_list;

int daemon_register_service(__pNotifier_t pcb)
{
	return notifier_insert(&daemon_list, pcb);
    a370:	03 ff fd f2 	l.j 9b38 <notifier_insert>
    a374:	a8 63 35 4c 	l.ori r3,r3,0x354c

0000a378 <startup_entry>:
*
* Returns    :  none.
*********************************************************************************************************
*/
void startup_entry(void)
{
    a378:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a37c:	d7 e1 17 e8 	l.sw 0xffffffe8(r1),r2
    a380:	d7 e1 77 ec 	l.sw 0xffffffec(r1),r14
    a384:	d7 e1 87 f0 	l.sw 0xfffffff0(r1),r16
    a388:	d7 e1 97 f4 	l.sw 0xfffffff4(r1),r18
    a38c:	d7 e1 a7 f8 	l.sw 0xfffffff8(r1),r20
	notifier_init();
    a390:	07 ff fd d7 	l.jal 9aec <notifier_init>
    a394:	9c 21 ff 90 	l.addi r1,r1,0xffffff90
	save_state_flag(REC_HOTPULG | 0x0);
    a398:	04 00 1d bd 	l.jal 11a8c <save_state_flag>
    a39c:	a8 60 b0 00 	l.ori r3,r0,0xb000

	ccu_init();
    a3a0:	04 00 1d 8a 	l.jal 119c8 <ccu_init>
    a3a4:	9c 41 00 04 	l.addi r2,r1,0x4
	save_state_flag(REC_HOTPULG | 0x1);
    a3a8:	04 00 1d b9 	l.jal 11a8c <save_state_flag>
    a3ac:	a8 60 b0 01 	l.ori r3,r0,0xb001

	pin_init();
    a3b0:	07 ff e9 20 	l.jal 4830 <pin_init>
    a3b4:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0x2);
    a3b8:	04 00 1d b5 	l.jal 11a8c <save_state_flag>
    a3bc:	a8 60 b0 02 	l.ori r3,r0,0xb002

	save_state_flag(REC_HOTPULG | 0x3);
    a3c0:	04 00 1d b3 	l.jal 11a8c <save_state_flag>
    a3c4:	a8 60 b0 03 	l.ori r3,r0,0xb003

	interrupt_init();
    a3c8:	07 ff e8 61 	l.jal 454c <interrupt_init>
    a3cc:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0x4);
    a3d0:	04 00 1d af 	l.jal 11a8c <save_state_flag>
    a3d4:	a8 60 b0 04 	l.ori r3,r0,0xb004

	arisc_para_init();
    a3d8:	04 00 00 bd 	l.jal a6cc <arisc_para_init>
    a3dc:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0x5);
    a3e0:	04 00 1d ab 	l.jal 11a8c <save_state_flag>
    a3e4:	a8 60 b0 05 	l.ori r3,r0,0xb005

	debugger_init();
    a3e8:	07 ff fe d5 	l.jal 9f3c <debugger_init>
    a3ec:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0x6);
    a3f0:	04 00 1d a7 	l.jal 11a8c <save_state_flag>
    a3f4:	a8 60 b0 06 	l.ori r3,r0,0xb006
	LOG("debugger system ok\n");
    a3f8:	18 80 00 01 	l.movhi r4,0x1
    a3fc:	9c 60 00 02 	l.addi r3,r0,0x2
    a400:	07 ff fe ee 	l.jal 9fb8 <debugger_printf>
    a404:	a8 84 29 64 	l.ori r4,r4,0x2964

	twi_init();
    a408:	07 ff ed 7a 	l.jal 59f0 <twi_init>
    a40c:	15 00 00 00 	l.nop 0x0
	LOG("twi driver ok\n");
    a410:	18 80 00 01 	l.movhi r4,0x1
    a414:	9c 60 00 02 	l.addi r3,r0,0x2
    a418:	07 ff fe e8 	l.jal 9fb8 <debugger_printf>
    a41c:	a8 84 29 78 	l.ori r4,r4,0x2978
	save_state_flag(REC_HOTPULG | 0x7);
    a420:	04 00 1d 9b 	l.jal 11a8c <save_state_flag>
    a424:	a8 60 b0 07 	l.ori r3,r0,0xb007
	pin_set_multi_sel(PIN_GRP_PL, 5, 3);
	pin_set_pull     (PIN_GRP_PL, 5, PIN_PULL_UP);
	pin_set_drive    (PIN_GRP_PL, 5, PIN_MULTI_DRIVE_2);
#endif

	pmu_init();
    a428:	07 ff f3 cb 	l.jal 7354 <pmu_init>
    a42c:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0x8);
    a430:	04 00 1d 97 	l.jal 11a8c <save_state_flag>
    a434:	a8 60 b0 08 	l.ori r3,r0,0xb008
	LOG("pmu driver ok\n");
    a438:	18 80 00 01 	l.movhi r4,0x1
    a43c:	9c 60 00 02 	l.addi r3,r0,0x2
    a440:	07 ff fe de 	l.jal 9fb8 <debugger_printf>
    a444:	a8 84 29 87 	l.ori r4,r4,0x2987

	hwmsgbox_init();
    a448:	07 ff f0 70 	l.jal 6608 <hwmsgbox_init>
    a44c:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0x9);
    a450:	04 00 1d 8f 	l.jal 11a8c <save_state_flag>
    a454:	a8 60 b0 09 	l.ori r3,r0,0xb009
	LOG("hwmsgbox driver ok\n");
    a458:	18 80 00 01 	l.movhi r4,0x1
    a45c:	9c 60 00 02 	l.addi r3,r0,0x2
    a460:	07 ff fe d6 	l.jal 9fb8 <debugger_printf>
    a464:	a8 84 29 96 	l.ori r4,r4,0x2996

	cpucfg_init();
    a468:	04 00 08 f6 	l.jal c840 <cpucfg_init>
    a46c:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0xa);
    a470:	04 00 1d 87 	l.jal 11a8c <save_state_flag>
    a474:	a8 60 b0 0a 	l.ori r3,r0,0xb00a
	LOG("cpucfg driver ok\n");
    a478:	18 80 00 01 	l.movhi r4,0x1
    a47c:	9c 60 00 02 	l.addi r3,r0,0x2
    a480:	07 ff fe ce 	l.jal 9fb8 <debugger_printf>
    a484:	a8 84 29 aa 	l.ori r4,r4,0x29aa

	message_manager_init();
    a488:	07 ff fe 20 	l.jal 9d08 <message_manager_init>
    a48c:	15 00 00 00 	l.nop 0x0
	LOG("message manager ok\n");
    a490:	18 80 00 01 	l.movhi r4,0x1
    a494:	9c 60 00 02 	l.addi r3,r0,0x2
    a498:	07 ff fe c8 	l.jal 9fb8 <debugger_printf>
    a49c:	a8 84 29 bc 	l.ori r4,r4,0x29bc

	timer_init();
    a4a0:	07 ff ea 22 	l.jal 4d28 <timer_init>
    a4a4:	15 00 00 00 	l.nop 0x0
	LOG("timer driver ok\n");
    a4a8:	18 80 00 01 	l.movhi r4,0x1
    a4ac:	9c 60 00 02 	l.addi r3,r0,0x2
    a4b0:	07 ff fe c2 	l.jal 9fb8 <debugger_printf>
    a4b4:	a8 84 29 d0 	l.ori r4,r4,0x29d0

	standby_init();
    a4b8:	04 00 00 8e 	l.jal a6f0 <standby_init>
    a4bc:	15 00 00 00 	l.nop 0x0
	LOG("standby service ok\n");
    a4c0:	18 80 00 01 	l.movhi r4,0x1
    a4c4:	9c 60 00 02 	l.addi r3,r0,0x2
    a4c8:	07 ff fe bc 	l.jal 9fb8 <debugger_printf>
    a4cc:	a8 84 29 e1 	l.ori r4,r4,0x29e1

	time_ticks_init();
    a4d0:	04 00 08 5a 	l.jal c638 <time_ticks_init>
    a4d4:	15 00 00 00 	l.nop 0x0
	LOG("time ticks ok\n");
    a4d8:	18 80 00 01 	l.movhi r4,0x1
    a4dc:	9c 60 00 02 	l.addi r3,r0,0x2
    a4e0:	07 ff fe b6 	l.jal 9fb8 <debugger_printf>
    a4e4:	a8 84 29 f5 	l.ori r4,r4,0x29f5

	watchdog_init();
    a4e8:	07 ff f3 c9 	l.jal 740c <watchdog_init>
    a4ec:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_HOTPULG | 0xc);
    a4f0:	04 00 1d 67 	l.jal 11a8c <save_state_flag>
    a4f4:	a8 60 b0 0c 	l.ori r3,r0,0xb00c
	LOG("watchdog ok\n");
    a4f8:	18 80 00 01 	l.movhi r4,0x1
    a4fc:	9c 60 00 02 	l.addi r3,r0,0x2
    a500:	07 ff fe ae 	l.jal 9fb8 <debugger_printf>
    a504:	a8 84 2a 04 	l.ori r4,r4,0x2a04
}

static s32 startup_state_notify(s32 result)
{
	struct message message;
	u32 arisc_version[13] = {0};
    a508:	9c a0 00 34 	l.addi r5,r0,0x34
    a50c:	a8 62 00 00 	l.ori r3,r2,0x0
    a510:	07 ff f5 c1 	l.jal 7c14 <memset>
    a514:	9c 80 00 00 	l.addi r4,r0,0x0
	s32 ret;

	LOG("feedback startup result [%d]\n", result);
    a518:	9c 60 00 00 	l.addi r3,r0,0x0
    a51c:	18 80 00 01 	l.movhi r4,0x1
    a520:	d4 01 18 00 	l.sw 0x0(r1),r3
    a524:	a8 84 2a 11 	l.ori r4,r4,0x2a11
    a528:	07 ff fe a4 	l.jal 9fb8 <debugger_printf>
    a52c:	9c 60 00 02 	l.addi r3,r0,0x2

	save_state_flag(REC_HOTPULG | 0xd);
    a530:	04 00 1d 57 	l.jal 11a8c <save_state_flag>
    a534:	a8 60 b0 0d 	l.ori r3,r0,0xb00d

	/* initialize message */
	message.type = AR100_STARTUP_NOTIFY;
    a538:	9c 60 ff 90 	l.addi r3,r0,0xffffff90

		while(1)
			;
	}

	strcpy((char *)(arisc_version), SUB_VER);
    a53c:	18 80 00 01 	l.movhi r4,0x1
	LOG("feedback startup result [%d]\n", result);

	save_state_flag(REC_HOTPULG | 0xd);

	/* initialize message */
	message.type = AR100_STARTUP_NOTIFY;
    a540:	d8 01 18 3a 	l.sb 0x3a(r1),r3
	message.attr = MESSAGE_ATTR_HARDSYN;
    a544:	9c 60 00 02 	l.addi r3,r0,0x2

		while(1)
			;
	}

	strcpy((char *)(arisc_version), SUB_VER);
    a548:	a8 84 2f a3 	l.ori r4,r4,0x2fa3

	save_state_flag(REC_HOTPULG | 0xd);

	/* initialize message */
	message.type = AR100_STARTUP_NOTIFY;
	message.attr = MESSAGE_ATTR_HARDSYN;
    a54c:	d8 01 18 39 	l.sb 0x39(r1),r3
	message.result = result;
    a550:	9c 60 00 00 	l.addi r3,r0,0x0
	message.count = sizeof(arisc_version) / sizeof(u32);
	message.paras = arisc_version;
    a554:	d4 01 10 54 	l.sw 0x54(r1),r2
	save_state_flag(REC_HOTPULG | 0xd);

	/* initialize message */
	message.type = AR100_STARTUP_NOTIFY;
	message.attr = MESSAGE_ATTR_HARDSYN;
	message.result = result;
    a558:	d8 01 18 3b 	l.sb 0x3b(r1),r3
	message.count = sizeof(arisc_version) / sizeof(u32);
    a55c:	9c 60 00 0d 	l.addi r3,r0,0xd
    a560:	d8 01 18 3c 	l.sb 0x3c(r1),r3

		while(1)
			;
	}

	strcpy((char *)(arisc_version), SUB_VER);
    a564:	07 ff f4 f4 	l.jal 7934 <strcpy>
    a568:	a8 62 00 00 	l.ori r3,r2,0x0

	ret = hwmsgbox_send_message(&message, SEND_MSG_TIMEOUT);
    a56c:	18 80 00 01 	l.movhi r4,0x1
    a570:	9c 61 00 38 	l.addi r3,r1,0x38
    a574:	07 ff f0 93 	l.jal 67c0 <hwmsgbox_send_message>
    a578:	a8 84 86 a0 	l.ori r4,r4,0x86a0
	if (ret == OK)
    a57c:	bc 2b 00 00 	l.sfnei r11,0x0
    a580:	10 00 00 06 	l.bf a598 <startup_entry+0x220>
    a584:	15 00 00 00 	l.nop 0x0
		LOG("send notify succeed\n");
    a588:	18 80 00 01 	l.movhi r4,0x1
    a58c:	9c 60 00 02 	l.addi r3,r0,0x2
    a590:	00 00 00 05 	l.j a5a4 <startup_entry+0x22c>
    a594:	a8 84 2a 2f 	l.ori r4,r4,0x2a2f
	else
		LOG("send notify failed\n");
    a598:	18 80 00 01 	l.movhi r4,0x1
    a59c:	9c 60 00 02 	l.addi r3,r0,0x2
    a5a0:	a8 84 2a 44 	l.ori r4,r4,0x2a44
    a5a4:	07 ff fe 85 	l.jal 9fb8 <debugger_printf>
    a5a8:	18 40 00 01 	l.movhi r2,0x1

	save_state_flag(REC_HOTPULG | 0xe);
    a5ac:	04 00 1d 38 	l.jal 11a8c <save_state_flag>
    a5b0:	a8 60 b0 0e 	l.ori r3,r0,0xb00e
	save_state_flag(REC_HOTPULG | 0xc);
	LOG("watchdog ok\n");

	/* feedback the startup state to ac327 */
	startup_state_notify(OK);
	set_paras();
    a5b4:	04 00 00 4d 	l.jal a6e8 <set_paras>
    a5b8:	a8 42 2f a3 	l.ori r2,r2,0x2fa3
	save_state_flag(REC_HOTPULG | 0xf);
    a5bc:	04 00 1d 34 	l.jal 11a8c <save_state_flag>
    a5c0:	a8 60 b0 0f 	l.ori r3,r0,0xb00f
	LOG("startup feedback ok\n");
    a5c4:	18 80 00 01 	l.movhi r4,0x1
    a5c8:	9c 60 00 02 	l.addi r3,r0,0x2
    a5cc:	07 ff fe 7b 	l.jal 9fb8 <debugger_printf>
    a5d0:	a8 84 2a 58 	l.ori r4,r4,0x2a58

	LOG("ar100 firmware version : %s\n", SUB_VER);
    a5d4:	18 80 00 01 	l.movhi r4,0x1
    a5d8:	9c 60 00 02 	l.addi r3,r0,0x2
    a5dc:	a8 84 2a 6d 	l.ori r4,r4,0x2a6d
{
	s32 ret;
	struct message message;
	static u32 msg_paras[32];

	message.paras = msg_paras;
    a5e0:	1a 80 00 01 	l.movhi r20,0x1
	startup_state_notify(OK);
	set_paras();
	save_state_flag(REC_HOTPULG | 0xf);
	LOG("startup feedback ok\n");

	LOG("ar100 firmware version : %s\n", SUB_VER);
    a5e4:	07 ff fe 75 	l.jal 9fb8 <debugger_printf>
    a5e8:	d4 01 10 00 	l.sw 0x0(r1),r2
}

static void daemon_main(void)
{
	/* initialize cpu */
	cpu_init();
    a5ec:	04 00 05 e1 	l.jal bd70 <cpu_init>
    a5f0:	18 40 00 01 	l.movhi r2,0x1

	/* daemon & message & user defined task loop process */
	LOG("daemon service setup...\n");
    a5f4:	18 80 00 01 	l.movhi r4,0x1
    a5f8:	9c 60 00 02 	l.addi r3,r0,0x2
    a5fc:	a8 84 2a 8a 	l.ori r4,r4,0x2a8a
{
	s32 ret;
	struct message message;
	static u32 msg_paras[32];

	message.paras = msg_paras;
    a600:	aa 94 35 50 	l.ori r20,r20,0x3550

	ret = hwmsgbox_query_message(&message, 0);
    a604:	9d c1 00 38 	l.addi r14,r1,0x38
	while (1) {
		/* message loop process */
		message_process_loop();

		/* daemon list process */
		if (((current_time_tick()) % DAEMON_ONCE_TICKS) == 0) {
    a608:	9e 40 01 f4 	l.addi r18,r0,0x1f4
{
	/* initialize cpu */
	cpu_init();

	/* daemon & message & user defined task loop process */
	LOG("daemon service setup...\n");
    a60c:	07 ff fe 6b 	l.jal 9fb8 <debugger_printf>
    a610:	a8 42 33 dc 	l.ori r2,r2,0x33dc
	struct message message;
	static u32 msg_paras[32];

	message.paras = msg_paras;

	ret = hwmsgbox_query_message(&message, 0);
    a614:	a8 6e 00 00 	l.ori r3,r14,0x0
    a618:	9c 80 00 00 	l.addi r4,r0,0x0
    a61c:	07 ff f1 50 	l.jal 6b5c <hwmsgbox_query_message>
    a620:	d4 01 a0 54 	l.sw 0x54(r1),r20
	if (ret == OK)
    a624:	bc 2b 00 00 	l.sfnei r11,0x0
    a628:	10 00 00 04 	l.bf a638 <startup_entry+0x2c0>
    a62c:	15 00 00 00 	l.nop 0x0
		message_coming_notify(&message);
    a630:	07 ff fd ba 	l.jal 9d18 <message_coming_notify>
    a634:	a8 6e 00 00 	l.ori r3,r14,0x0
	while (1) {
		/* message loop process */
		message_process_loop();

		/* daemon list process */
		if (((current_time_tick()) % DAEMON_ONCE_TICKS) == 0) {
    a638:	04 00 07 ee 	l.jal c5f0 <current_time_tick>
    a63c:	15 00 00 00 	l.nop 0x0
    a640:	9c 80 01 f4 	l.addi r4,r0,0x1f4
    a644:	04 00 07 49 	l.jal c368 <__umodsi3>
    a648:	a8 6b 00 00 	l.ori r3,r11,0x0
    a64c:	bc 2b 00 00 	l.sfnei r11,0x0
    a650:	13 ff ff f1 	l.bf a614 <startup_entry+0x29c>
    a654:	aa 0b 00 00 	l.ori r16,r11,0x0
			/* daemon run one time */
			printk("------------------------------\n");
    a658:	18 80 00 01 	l.movhi r4,0x1
    a65c:	9c 60 00 0f 	l.addi r3,r0,0xf
    a660:	07 ff fe 56 	l.jal 9fb8 <debugger_printf>
    a664:	a8 84 2a a3 	l.ori r4,r4,0x2aa3
			LOG("system tick:%d\n", DAEMON_ONCE_TICKS);
    a668:	18 80 00 01 	l.movhi r4,0x1
    a66c:	9c 60 00 02 	l.addi r3,r0,0x2
    a670:	a8 84 2a c3 	l.ori r4,r4,0x2ac3
    a674:	07 ff fe 51 	l.jal 9fb8 <debugger_printf>
    a678:	d4 01 90 00 	l.sw 0x0(r1),r18
			LOG("debug_mask:%d\n", debug_level);
    a67c:	84 62 00 00 	l.lwz r3,0x0(r2)
    a680:	18 80 00 01 	l.movhi r4,0x1
    a684:	d4 01 18 00 	l.sw 0x0(r1),r3
    a688:	a8 84 2a d3 	l.ori r4,r4,0x2ad3
    a68c:	07 ff fe 4b 	l.jal 9fb8 <debugger_printf>
    a690:	9c 60 00 02 	l.addi r3,r0,0x2
			LOG("uart_buadrate:%d\n", uart_get_baudrate());
    a694:	07 ff ec 41 	l.jal 5798 <uart_get_baudrate>
    a698:	15 00 00 00 	l.nop 0x0
    a69c:	18 80 00 01 	l.movhi r4,0x1
    a6a0:	9c 60 00 02 	l.addi r3,r0,0x2
    a6a4:	a8 84 2a e2 	l.ori r4,r4,0x2ae2
    a6a8:	07 ff fe 44 	l.jal 9fb8 <debugger_printf>
    a6ac:	d4 01 58 00 	l.sw 0x0(r1),r11
			notifier_notify(&daemon_list, DAEMON_RUN_NOTIFY, 0);
    a6b0:	18 60 00 01 	l.movhi r3,0x1
    a6b4:	9c 80 01 00 	l.addi r4,r0,0x100
    a6b8:	a8 63 35 4c 	l.ori r3,r3,0x354c
    a6bc:	07 ff fd 78 	l.jal 9c9c <notifier_notify>
    a6c0:	a8 b0 00 00 	l.ori r5,r16,0x0
	struct message message;
	static u32 msg_paras[32];

	message.paras = msg_paras;

	ret = hwmsgbox_query_message(&message, 0);
    a6c4:	03 ff ff d5 	l.j a618 <startup_entry+0x2a0>
    a6c8:	a8 6e 00 00 	l.ori r3,r14,0x0

0000a6cc <arisc_para_init>:
*
* Returns    :  none.
*********************************************************************************************************
*/
void arisc_para_init(void)
{
    a6cc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a6d0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	cpucfg_set_little_endian_address((void *)(ARISC_DTS_BASE), (void *)(ARISC_DTS_BASE + ARISC_DTS_SIZE));
    a6d4:	18 60 48 10 	l.movhi r3,0x4810
}
    a6d8:	9c 21 00 04 	l.addi r1,r1,0x4
    a6dc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
* Returns    :  none.
*********************************************************************************************************
*/
void arisc_para_init(void)
{
	cpucfg_set_little_endian_address((void *)(ARISC_DTS_BASE), (void *)(ARISC_DTS_BASE + ARISC_DTS_SIZE));
    a6e0:	00 00 08 71 	l.j c8a4 <cpucfg_set_little_endian_address>
    a6e4:	18 80 48 20 	l.movhi r4,0x4820

0000a6e8 <set_paras>:
}

void set_paras(void)
{
}
    a6e8:	44 00 48 00 	l.jr r9
    a6ec:	15 00 00 00 	l.nop 0x0

0000a6f0 <standby_init>:
* Returns    :  OK if initialize succeeded, others if failed.
*********************************************************************************************************
*/
s32 standby_init(void)
{
	before_crc = 0;
    a6f0:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if initialize succeeded, others if failed.
*********************************************************************************************************
*/
s32 standby_init(void)
{
    a6f4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	before_crc = 0;
    a6f8:	a8 63 37 38 	l.ori r3,r3,0x3738
    a6fc:	9c 40 00 00 	l.addi r2,r0,0x0
*
* Returns    :  OK if initialize succeeded, others if failed.
*********************************************************************************************************
*/
s32 standby_init(void)
{
    a700:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	before_crc = 0;
    a704:	d4 03 10 00 	l.sw 0x0(r3),r2
	after_crc = 0;
    a708:	18 60 00 01 	l.movhi r3,0x1
*
* Returns    :  OK if initialize succeeded, others if failed.
*********************************************************************************************************
*/
s32 standby_init(void)
{
    a70c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	before_crc = 0;
	after_crc = 0;
    a710:	a8 63 37 3c 	l.ori r3,r3,0x373c

	wakeup_timer_init();
    a714:	04 00 00 92 	l.jal a95c <wakeup_timer_init>
    a718:	d4 03 10 00 	l.sw 0x0(r3),r2

	return OK;
}
    a71c:	9c 21 00 08 	l.addi r1,r1,0x8
    a720:	a9 62 00 00 	l.ori r11,r2,0x0
    a724:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a728:	44 00 48 00 	l.jr r9
    a72c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000a730 <standby_exit>:
*********************************************************************************************************
*/
s32 standby_exit(void)
{
	return OK;
}
    a730:	44 00 48 00 	l.jr r9
    a734:	9d 60 00 00 	l.addi r11,r0,0x0

0000a738 <long_jump>:

int long_jump(int (*fn)(void *arg), void *arg)
{
    a738:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a73c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    a740:	a8 a3 00 00 	l.ori r5,r3,0x0
	INF("fn:%x,arg:%x\n", fn, arg);

	return (*fn)(arg);
}
    a744:	9c 21 00 04 	l.addi r1,r1,0x4
    a748:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)

int long_jump(int (*fn)(void *arg), void *arg)
{
	INF("fn:%x,arg:%x\n", fn, arg);

	return (*fn)(arg);
    a74c:	44 00 28 00 	l.jr r5
    a750:	a8 64 00 00 	l.ori r3,r4,0x0

0000a754 <standby_set_dram_crc_paras>:
u32 dram_crc_src     = 0x40000000;
u32 dram_crc_len     = (1024 * 1024);

s32 standby_set_dram_crc_paras(u32 enable, u32 src, u32 len)
{
	dram_crc_enable = enable;
    a754:	18 c0 00 01 	l.movhi r6,0x1
	dram_crc_src    = src;
	dram_crc_len    = len;

	return OK;
}
    a758:	9d 60 00 00 	l.addi r11,r0,0x0
u32 dram_crc_src     = 0x40000000;
u32 dram_crc_len     = (1024 * 1024);

s32 standby_set_dram_crc_paras(u32 enable, u32 src, u32 len)
{
	dram_crc_enable = enable;
    a75c:	a8 c6 34 44 	l.ori r6,r6,0x3444
    a760:	d4 06 18 00 	l.sw 0x0(r6),r3
	dram_crc_src    = src;
    a764:	18 60 00 01 	l.movhi r3,0x1
    a768:	a8 63 33 d0 	l.ori r3,r3,0x33d0
    a76c:	d4 03 20 00 	l.sw 0x0(r3),r4
	dram_crc_len    = len;
    a770:	18 60 00 01 	l.movhi r3,0x1
    a774:	a8 63 33 d4 	l.ori r3,r3,0x33d4

	return OK;
}
    a778:	44 00 48 00 	l.jr r9
    a77c:	d4 03 28 00 	l.sw 0x0(r3),r5

0000a780 <standby_dram_crc_enable>:

s32 standby_dram_crc_enable(void)
{
	return dram_crc_enable;
}
    a780:	18 60 00 01 	l.movhi r3,0x1
    a784:	a8 63 34 44 	l.ori r3,r3,0x3444
    a788:	44 00 48 00 	l.jr r9
    a78c:	85 63 00 00 	l.lwz r11,0x0(r3)

0000a790 <standby_dram_crc>:

u32 standby_dram_crc(void)
{
	u32 *pdata = (u32 *)(dram_crc_src);
    a790:	18 60 00 01 	l.movhi r3,0x1
	u32 crc = 0;

	INF("crc begin src:%x len:%x\n", dram_crc_src, dram_crc_len);
	while (pdata < (u32 *)(dram_crc_src + dram_crc_len)) {
    a794:	18 80 00 01 	l.movhi r4,0x1
	return dram_crc_enable;
}

u32 standby_dram_crc(void)
{
	u32 *pdata = (u32 *)(dram_crc_src);
    a798:	a8 63 33 d0 	l.ori r3,r3,0x33d0
	u32 crc = 0;

	INF("crc begin src:%x len:%x\n", dram_crc_src, dram_crc_len);
	while (pdata < (u32 *)(dram_crc_src + dram_crc_len)) {
    a79c:	a8 84 33 d4 	l.ori r4,r4,0x33d4
	return dram_crc_enable;
}

u32 standby_dram_crc(void)
{
	u32 *pdata = (u32 *)(dram_crc_src);
    a7a0:	84 63 00 00 	l.lwz r3,0x0(r3)
	u32 crc = 0;

	INF("crc begin src:%x len:%x\n", dram_crc_src, dram_crc_len);
	while (pdata < (u32 *)(dram_crc_src + dram_crc_len)) {
    a7a4:	84 84 00 00 	l.lwz r4,0x0(r4)
}

u32 standby_dram_crc(void)
{
	u32 *pdata = (u32 *)(dram_crc_src);
	u32 crc = 0;
    a7a8:	9d 60 00 00 	l.addi r11,r0,0x0

	INF("crc begin src:%x len:%x\n", dram_crc_src, dram_crc_len);
	while (pdata < (u32 *)(dram_crc_src + dram_crc_len)) {
    a7ac:	00 00 00 05 	l.j a7c0 <standby_dram_crc+0x30>
    a7b0:	e0 83 20 00 	l.add r4,r3,r4
		crc += *pdata;
    a7b4:	84 a3 00 00 	l.lwz r5,0x0(r3)
		pdata++;
    a7b8:	9c 63 00 04 	l.addi r3,r3,0x4
	u32 *pdata = (u32 *)(dram_crc_src);
	u32 crc = 0;

	INF("crc begin src:%x len:%x\n", dram_crc_src, dram_crc_len);
	while (pdata < (u32 *)(dram_crc_src + dram_crc_len)) {
		crc += *pdata;
    a7bc:	e1 6b 28 00 	l.add r11,r11,r5
{
	u32 *pdata = (u32 *)(dram_crc_src);
	u32 crc = 0;

	INF("crc begin src:%x len:%x\n", dram_crc_src, dram_crc_len);
	while (pdata < (u32 *)(dram_crc_src + dram_crc_len)) {
    a7c0:	e4 83 20 00 	l.sfltu r3,r4
    a7c4:	13 ff ff fc 	l.bf a7b4 <standby_dram_crc+0x24>
    a7c8:	15 00 00 00 	l.nop 0x0
		pdata++;
	}
	INF("crc finish...\n");

	return crc;
}
    a7cc:	44 00 48 00 	l.jr r9
    a7d0:	15 00 00 00 	l.nop 0x0

0000a7d4 <CPUX_IRQ_MAPTO_CPUS>:
	for (cpux_irq = 0; cpux_irq < ARRAY_SIZE(irq_table); cpux_irq++) {
		if (irq_table[cpux_irq][1] == (intno + GIC_SRC_SPI))
			return irq_table[cpux_irq][0];
	}

	return FAIL;
    a7d4:	18 a0 00 01 	l.movhi r5,0x1

	return FAIL;
}

static inline s32 CPUX_IRQ_MAPTO_CPUS(u32 intno)
{
    a7d8:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
	for (cpux_irq = 0; cpux_irq < ARRAY_SIZE(irq_table); cpux_irq++) {
		if (irq_table[cpux_irq][1] == (intno + GIC_SRC_SPI))
			return irq_table[cpux_irq][0];
	}

	return FAIL;
    a7dc:	a8 a5 31 58 	l.ori r5,r5,0x3158

	return FAIL;
}

static inline s32 CPUX_IRQ_MAPTO_CPUS(u32 intno)
{
    a7e0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	u32 cpux_irq;

	for (cpux_irq = 0; cpux_irq < ARRAY_SIZE(irq_table); cpux_irq++) {
    a7e4:	9c 80 00 00 	l.addi r4,r0,0x0
		if (irq_table[cpux_irq][1] == (intno + GIC_SRC_SPI))
    a7e8:	9c 63 00 20 	l.addi r3,r3,0x20
    a7ec:	84 c5 00 00 	l.lwz r6,0x0(r5)
    a7f0:	e4 26 18 00 	l.sfne r6,r3
    a7f4:	10 00 00 09 	l.bf a818 <CPUX_IRQ_MAPTO_CPUS+0x44>
    a7f8:	9c 84 00 01 	l.addi r4,r4,0x1
    a7fc:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
			return irq_table[cpux_irq][0];
    a800:	18 40 00 01 	l.movhi r2,0x1
    a804:	b8 84 00 03 	l.slli r4,r4,0x3
    a808:	a8 42 31 54 	l.ori r2,r2,0x3154
    a80c:	e0 84 10 00 	l.add r4,r4,r2
    a810:	00 00 00 06 	l.j a828 <CPUX_IRQ_MAPTO_CPUS+0x54>
    a814:	85 64 00 00 	l.lwz r11,0x0(r4)

static inline s32 CPUX_IRQ_MAPTO_CPUS(u32 intno)
{
	u32 cpux_irq;

	for (cpux_irq = 0; cpux_irq < ARRAY_SIZE(irq_table); cpux_irq++) {
    a818:	bc 24 00 07 	l.sfnei r4,0x7
    a81c:	13 ff ff f4 	l.bf a7ec <CPUX_IRQ_MAPTO_CPUS+0x18>
    a820:	9c a5 00 08 	l.addi r5,r5,0x8
		if (irq_table[cpux_irq][1] == (intno + GIC_SRC_SPI))
			return irq_table[cpux_irq][0];
	}

	return FAIL;
    a824:	9d 60 ff ff 	l.addi r11,r0,0xffffffff
}
    a828:	9c 21 00 04 	l.addi r1,r1,0x4
    a82c:	44 00 48 00 	l.jr r9
    a830:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000a834 <CPUX_IRQ_MAPTO_CPUS_GRP>:
{
	u32 cpux_irq;

	for (cpux_irq = 0; cpux_irq < ARRAY_SIZE(grp_irq_table);
	     cpux_irq++) {
		if (grp_irq_table[cpux_irq][0] == (intno + GIC_SRC_SPI))
    a834:	bc 03 ff e0 	l.sfeqi r3,0xffffffe0
    a838:	10 00 00 03 	l.bf a844 <CPUX_IRQ_MAPTO_CPUS_GRP+0x10>
    a83c:	9d 60 00 00 	l.addi r11,r0,0x0
			return grp_irq_table[cpux_irq][1];
	}

	return FAIL;
    a840:	9d 60 ff ff 	l.addi r11,r0,0xffffffff
}
    a844:	44 00 48 00 	l.jr r9
    a848:	15 00 00 00 	l.nop 0x0

0000a84c <wakeup_timer_handler>:

static struct softtimer wakeup_timer;

static s32 wakeup_timer_handler(void *parg)
{
	wakeup_source = WAKESOURE_TIMER;
    a84c:	18 60 00 01 	l.movhi r3,0x1
    a850:	18 80 c0 00 	l.movhi r4,0xc000
    a854:	a8 63 37 34 	l.ori r3,r3,0x3734

	return OK;
}
    a858:	9d 60 00 00 	l.addi r11,r0,0x0

static struct softtimer wakeup_timer;

static s32 wakeup_timer_handler(void *parg)
{
	wakeup_source = WAKESOURE_TIMER;
    a85c:	d4 03 20 00 	l.sw 0x0(r3),r4

	return OK;
}
    a860:	44 00 48 00 	l.jr r9
    a864:	15 00 00 00 	l.nop 0x0

0000a868 <group_irq_exit>:

	return OK;
}

static int group_irq_exit(void *parg)
{
    a868:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 *p = (u32 *)parg;
	u32 wakeup_root_irq = p[0];

	s32 group_irq_num = CPUX_IRQ_MAPTO_CPUS_GRP(wakeup_root_irq);
    a86c:	84 63 00 00 	l.lwz r3,0x0(r3)
    a870:	07 ff ff f1 	l.jal a834 <CPUX_IRQ_MAPTO_CPUS_GRP>
    a874:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc

	/* this is a group irq, we need to set group config, otherwise do nothing. */
	if (group_irq_num != FAIL)
    a878:	bc 0b ff ff 	l.sfeqi r11,0xffffffff
    a87c:	10 00 00 04 	l.bf a88c <group_irq_exit+0x24>
    a880:	a8 6b 00 00 	l.ori r3,r11,0x0
		interrupt_set_group_config(group_irq_num, FALSE);
    a884:	07 ff e7 6a 	l.jal 462c <interrupt_set_group_config>
    a888:	9c 80 00 00 	l.addi r4,r0,0x0

	return OK;
}
    a88c:	9c 21 00 04 	l.addi r1,r1,0x4
    a890:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a894:	44 00 48 00 	l.jr r9
    a898:	9d 60 00 00 	l.addi r11,r0,0x0

0000a89c <group_irq_init>:

	return OK;
}

static int group_irq_init(void *parg)
{
    a89c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 *p = (u32 *)parg;
	u32 wakeup_root_irq = p[0];

	s32 group_irq_num = CPUX_IRQ_MAPTO_CPUS_GRP(wakeup_root_irq);
    a8a0:	84 63 00 00 	l.lwz r3,0x0(r3)
    a8a4:	07 ff ff e4 	l.jal a834 <CPUX_IRQ_MAPTO_CPUS_GRP>
    a8a8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc

	/* this is a group irq, we need to set group config, otherwise do nothing. */
	if (group_irq_num != FAIL)
    a8ac:	bc 0b ff ff 	l.sfeqi r11,0xffffffff
    a8b0:	10 00 00 04 	l.bf a8c0 <group_irq_init+0x24>
    a8b4:	a8 6b 00 00 	l.ori r3,r11,0x0
		interrupt_set_group_config(group_irq_num, TRUE);
    a8b8:	07 ff e7 5d 	l.jal 462c <interrupt_set_group_config>
    a8bc:	9c 80 00 01 	l.addi r4,r0,0x1

	return OK;
}
    a8c0:	9c 21 00 04 	l.addi r1,r1,0x4
    a8c4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a8c8:	44 00 48 00 	l.jr r9
    a8cc:	9d 60 00 00 	l.addi r11,r0,0x0

0000a8d0 <default_wakeup_handler>:
{
	stop_softtimer(&wakeup_timer);
}

s32 default_wakeup_handler(void *parg)
{
    a8d0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a8d4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	u32 intno = interrupt_get_current_intno();
    a8d8:	07 ff e7 ca 	l.jal 4800 <interrupt_get_current_intno>
    a8dc:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8

	/*
	 * when wakeup event happen, we should mask the r_intc interrupt here first,
	 * otherwise cpus can't go out of the interrupt handler and the resume process can't go ahead.
	 */
	interrupt_set_mask(intno, TRUE);
    a8e0:	9c 80 00 01 	l.addi r4,r0,0x1
    a8e4:	a8 6b 00 00 	l.ori r3,r11,0x0
    a8e8:	07 ff e7 4b 	l.jal 4614 <interrupt_set_mask>
    a8ec:	a8 4b 00 00 	l.ori r2,r11,0x0
    a8f0:	18 a0 00 01 	l.movhi r5,0x1

static inline s32 CPUS_IRQ_MAPTO_CPUX(u32 intno)
{
	u32 cpus_irq;

	for (cpus_irq = 0; cpus_irq < ARRAY_SIZE(irq_table); cpus_irq++) {
    a8f4:	9c 80 00 00 	l.addi r4,r0,0x0
    a8f8:	a8 a5 31 54 	l.ori r5,r5,0x3154
		if (irq_table[cpus_irq][0] == intno)
    a8fc:	84 65 00 00 	l.lwz r3,0x0(r5)
    a900:	e4 23 10 00 	l.sfne r3,r2
    a904:	10 00 00 0a 	l.bf a92c <default_wakeup_handler+0x5c>
    a908:	9c 84 00 01 	l.addi r4,r4,0x1
    a90c:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
			return (irq_table[cpus_irq][1] - GIC_SRC_SPI);
    a910:	18 40 00 01 	l.movhi r2,0x1
    a914:	b8 84 00 03 	l.slli r4,r4,0x3
    a918:	a8 42 31 54 	l.ori r2,r2,0x3154
    a91c:	e0 84 10 00 	l.add r4,r4,r2
    a920:	84 64 00 04 	l.lwz r3,0x4(r4)
    a924:	00 00 00 06 	l.j a93c <default_wakeup_handler+0x6c>
    a928:	9c 63 ff e0 	l.addi r3,r3,0xffffffe0

static inline s32 CPUS_IRQ_MAPTO_CPUX(u32 intno)
{
	u32 cpus_irq;

	for (cpus_irq = 0; cpus_irq < ARRAY_SIZE(irq_table); cpus_irq++) {
    a92c:	bc 24 00 07 	l.sfnei r4,0x7
    a930:	13 ff ff f3 	l.bf a8fc <default_wakeup_handler+0x2c>
    a934:	9c a5 00 08 	l.addi r5,r5,0x8
		if (irq_table[cpus_irq][0] == intno)
			return (irq_table[cpus_irq][1] - GIC_SRC_SPI);
	}

	return FAIL;
    a938:	9c 60 ff ff 	l.addi r3,r0,0xffffffff

	wakeup_source = CPUS_IRQ_MAPTO_CPUX(intno);
    a93c:	18 40 00 01 	l.movhi r2,0x1

	return OK;
}
    a940:	9d 60 00 00 	l.addi r11,r0,0x0
	 * when wakeup event happen, we should mask the r_intc interrupt here first,
	 * otherwise cpus can't go out of the interrupt handler and the resume process can't go ahead.
	 */
	interrupt_set_mask(intno, TRUE);

	wakeup_source = CPUS_IRQ_MAPTO_CPUX(intno);
    a944:	a8 42 37 34 	l.ori r2,r2,0x3734
    a948:	d4 02 18 00 	l.sw 0x0(r2),r3

	return OK;
}
    a94c:	9c 21 00 08 	l.addi r1,r1,0x8
    a950:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a954:	44 00 48 00 	l.jr r9
    a958:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000a95c <wakeup_timer_init>:
	return OK;
}

s32 wakeup_timer_init(void)
{
	wakeup_timer.cycle = 0;
    a95c:	18 60 00 01 	l.movhi r3,0x1
	wakeup_timer.expires = 0;
	wakeup_timer.cb = wakeup_timer_handler;
    a960:	18 80 00 00 	l.movhi r4,0x0

	return OK;
}

s32 wakeup_timer_init(void)
{
    a964:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
	wakeup_timer.cycle = 0;
    a968:	a8 63 34 48 	l.ori r3,r3,0x3448
    a96c:	9c 40 00 00 	l.addi r2,r0,0x0
	wakeup_timer.expires = 0;
	wakeup_timer.cb = wakeup_timer_handler;
    a970:	a8 84 a8 4c 	l.ori r4,r4,0xa84c

	return OK;
}

s32 wakeup_timer_init(void)
{
    a974:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	wakeup_timer.cycle = 0;
    a978:	d4 03 10 00 	l.sw 0x0(r3),r2

	return OK;
}

s32 wakeup_timer_init(void)
{
    a97c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
	wakeup_timer.cycle = 0;
	wakeup_timer.expires = 0;
    a980:	d4 03 10 04 	l.sw 0x4(r3),r2
	wakeup_timer.cb = wakeup_timer_handler;
	wakeup_timer.arg = NULL;
    a984:	d4 03 10 0c 	l.sw 0xc(r3),r2
	wakeup_timer.start = SOFTTIMER_OFF;
    a988:	d4 03 10 10 	l.sw 0x10(r3),r2
	add_softtimer(&wakeup_timer);
    a98c:	04 00 07 00 	l.jal c58c <add_softtimer>
    a990:	d4 03 20 08 	l.sw 0x8(r3),r4

	return OK;
}
    a994:	9c 21 00 08 	l.addi r1,r1,0x8
    a998:	a9 62 00 00 	l.ori r11,r2,0x0
    a99c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a9a0:	44 00 48 00 	l.jr r9
    a9a4:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000a9a8 <wakeup_timer_start>:

void wakeup_timer_start(void)
{
	if (wakeup_timer.cycle != 0)
    a9a8:	18 60 00 01 	l.movhi r3,0x1

	return OK;
}

void wakeup_timer_start(void)
{
    a9ac:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	if (wakeup_timer.cycle != 0)
    a9b0:	a8 63 34 48 	l.ori r3,r3,0x3448
    a9b4:	84 83 00 00 	l.lwz r4,0x0(r3)
    a9b8:	bc 04 00 00 	l.sfeqi r4,0x0
    a9bc:	10 00 00 06 	l.bf a9d4 <wakeup_timer_start+0x2c>
    a9c0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
		start_softtimer(&wakeup_timer);
}
    a9c4:	9c 21 00 04 	l.addi r1,r1,0x4
    a9c8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
}

void wakeup_timer_start(void)
{
	if (wakeup_timer.cycle != 0)
		start_softtimer(&wakeup_timer);
    a9cc:	00 00 06 e3 	l.j c558 <start_softtimer>
    a9d0:	15 00 00 00 	l.nop 0x0
}
    a9d4:	9c 21 00 04 	l.addi r1,r1,0x4
    a9d8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    a9dc:	44 00 48 00 	l.jr r9
    a9e0:	15 00 00 00 	l.nop 0x0

0000a9e4 <wakeup_timer_stop>:

void wakeup_timer_stop(void)
{
    a9e4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    a9e8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
	stop_softtimer(&wakeup_timer);
    a9ec:	18 60 00 01 	l.movhi r3,0x1
}
    a9f0:	9c 21 00 04 	l.addi r1,r1,0x4
    a9f4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
		start_softtimer(&wakeup_timer);
}

void wakeup_timer_stop(void)
{
	stop_softtimer(&wakeup_timer);
    a9f8:	00 00 06 dd 	l.j c56c <stop_softtimer>
    a9fc:	a8 63 34 48 	l.ori r3,r3,0x3448

0000aa00 <set_wakeup_src>:

	return OK;
}

s32 set_wakeup_src(struct message *pmessage)
{
    aa00:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    aa04:	a8 43 00 00 	l.ori r2,r3,0x0
	u32 time_to_wakeup;

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
    aa08:	84 63 00 1c 	l.lwz r3,0x1c(r3)

	return OK;
}

s32 set_wakeup_src(struct message *pmessage)
{
    aa0c:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;

	LOG("wakeup_root_irq: %d\n", wakeup_root_irq);
    aa10:	18 80 00 01 	l.movhi r4,0x1
	u32 time_to_wakeup;

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
    aa14:	86 03 00 00 	l.lwz r16,0x0(r3)

	return OK;
}

s32 set_wakeup_src(struct message *pmessage)
{
    aa18:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    aa1c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;

	LOG("wakeup_root_irq: %d\n", wakeup_root_irq);
    aa20:	9c 60 00 02 	l.addi r3,r0,0x2

	return OK;
}

s32 set_wakeup_src(struct message *pmessage)
{
    aa24:	9c 21 ff d8 	l.addi r1,r1,0xffffffd8

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
    aa28:	a5 d0 03 ff 	l.andi r14,r16,0x3ff
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;

	LOG("wakeup_root_irq: %d\n", wakeup_root_irq);
    aa2c:	a8 84 2a f4 	l.ori r4,r4,0x2af4
    aa30:	07 ff fd 62 	l.jal 9fb8 <debugger_printf>
    aa34:	d4 01 70 00 	l.sw 0x0(r1),r14
	u32 time_to_wakeup;

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
    aa38:	b8 70 00 5e 	l.srli r3,r16,0x1e
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;

	LOG("wakeup_root_irq: %d\n", wakeup_root_irq);

	if (wakeup_src_type == 0x3) {
    aa3c:	bc 23 00 03 	l.sfnei r3,0x3
    aa40:	10 00 00 0c 	l.bf aa70 <set_wakeup_src+0x70>
    aa44:	15 00 00 00 	l.nop 0x0
		time_to_wakeup = pmessage->paras[0] & 0x3fffffff;
    aa48:	84 42 00 1c 	l.lwz r2,0x1c(r2)
    aa4c:	84 62 00 00 	l.lwz r3,0x0(r2)
		wakeup_timer.cycle = msec_to_ticks(time_to_wakeup);
    aa50:	18 40 3f ff 	l.movhi r2,0x3fff
    aa54:	a8 42 ff ff 	l.ori r2,r2,0xffff
    aa58:	e0 63 10 03 	l.and r3,r3,r2
    aa5c:	04 00 06 ea 	l.jal c604 <msec_to_ticks>
    aa60:	18 40 00 01 	l.movhi r2,0x1
    aa64:	a8 42 34 48 	l.ori r2,r2,0x3448
    aa68:	00 00 00 2e 	l.j ab20 <set_wakeup_src+0x120>
    aa6c:	d4 02 58 00 	l.sw 0x0(r2),r11
	} else {
		irq_no = CPUX_IRQ_MAPTO_CPUS(wakeup_root_irq);
    aa70:	07 ff ff 59 	l.jal a7d4 <CPUX_IRQ_MAPTO_CPUS>
    aa74:	a8 6e 00 00 	l.ori r3,r14,0x0
		if (irq_no == -1) {
    aa78:	bc 2b ff ff 	l.sfnei r11,0xffffffff
    aa7c:	10 00 00 0e 	l.bf aab4 <set_wakeup_src+0xb4>
    aa80:	a8 4b 00 00 	l.ori r2,r11,0x0
			ERR("%s(%d) irq_no error, root_irq %x\n",
    aa84:	18 60 00 01 	l.movhi r3,0x1
    aa88:	18 80 00 01 	l.movhi r4,0x1
    aa8c:	a8 63 31 8c 	l.ori r3,r3,0x318c
    aa90:	a8 84 2b 09 	l.ori r4,r4,0x2b09
    aa94:	d4 01 18 00 	l.sw 0x0(r1),r3
    aa98:	9c 60 00 85 	l.addi r3,r0,0x85
    aa9c:	d4 01 70 08 	l.sw 0x8(r1),r14
    aaa0:	d4 01 18 04 	l.sw 0x4(r1),r3
    aaa4:	07 ff fd 45 	l.jal 9fb8 <debugger_printf>
    aaa8:	9c 60 00 08 	l.addi r3,r0,0x8
				__func__, __LINE__, wakeup_root_irq);
			return -1;
    aaac:	00 00 00 1e 	l.j ab24 <set_wakeup_src+0x124>
    aab0:	a9 62 00 00 	l.ori r11,r2,0x0
		/**
		 * 1.we should clear wakeup_source here to avoid
		 * missing or remain of wakeup event.
		 * 2.FIXME: modify wakeup_source only in process context
		 */
		if (wakeup_source == wakeup_root_irq) {
    aab4:	18 60 00 01 	l.movhi r3,0x1
    aab8:	a8 63 37 34 	l.ori r3,r3,0x3734
    aabc:	84 83 00 00 	l.lwz r4,0x0(r3)
    aac0:	e4 24 70 00 	l.sfne r4,r14
    aac4:	10 00 00 04 	l.bf aad4 <set_wakeup_src+0xd4>
    aac8:	15 00 00 00 	l.nop 0x0
			wakeup_source = NO_WAKESOURCE;
    aacc:	9c 80 00 00 	l.addi r4,r0,0x0
    aad0:	d4 03 20 00 	l.sw 0x0(r3),r4
	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
    aad4:	b8 70 00 4a 	l.srli r3,r16,0xa
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;
    aad8:	ba 10 00 54 	l.srli r16,r16,0x14
		}

		switch (irq_no) {
		default:
			{
				para[0] = wakeup_root_irq;
    aadc:	d4 01 70 0c 	l.sw 0xc(r1),r14
	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
    aae0:	a4 63 03 ff 	l.andi r3,r3,0x3ff
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;
    aae4:	a6 10 03 ff 	l.andi r16,r16,0x3ff

		switch (irq_no) {
		default:
			{
				para[0] = wakeup_root_irq;
				para[1] = wakeup_secondary_irq;
    aae8:	d4 01 18 10 	l.sw 0x10(r1),r3
}

static int irq_wakesource_init(s32 irq_num, __pCBK_t init, void *init_parg, __pISR_t handler, void *parg)
{
	if (init != NULL)
		(*init)(init_parg);
    aaec:	9c 61 00 0c 	l.addi r3,r1,0xc
    aaf0:	07 ff ff 6b 	l.jal a89c <group_irq_init>
    aaf4:	d4 01 80 14 	l.sw 0x14(r1),r16

	if (handler != NULL)
		install_isr(irq_num, handler, parg);
    aaf8:	18 80 00 00 	l.movhi r4,0x0
    aafc:	a8 62 00 00 	l.ori r3,r2,0x0
    ab00:	a8 84 a8 d0 	l.ori r4,r4,0xa8d0
    ab04:	07 ff e6 d0 	l.jal 4644 <install_isr>
    ab08:	9c a0 00 00 	l.addi r5,r0,0x0

	interrupt_enable(irq_num);
    ab0c:	07 ff e6 ac 	l.jal 45bc <interrupt_enable>
    ab10:	a8 62 00 00 	l.ori r3,r2,0x0
	interrupt_set_mask(irq_num, FALSE);
    ab14:	a8 62 00 00 	l.ori r3,r2,0x0
    ab18:	07 ff e6 bf 	l.jal 4614 <interrupt_set_mask>
    ab1c:	9c 80 00 00 	l.addi r4,r0,0x0
				break;
			}
		}
	}

	return OK;
    ab20:	9d 60 00 00 	l.addi r11,r0,0x0
}
    ab24:	9c 21 00 28 	l.addi r1,r1,0x28
    ab28:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    ab2c:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    ab30:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    ab34:	44 00 48 00 	l.jr r9
    ab38:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

0000ab3c <clear_wakeup_src>:


s32 clear_wakeup_src(struct message *pmessage)
{
    ab3c:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
	u32 time_to_wakeup;

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
    ab40:	84 43 00 1c 	l.lwz r2,0x1c(r3)
	return OK;
}


s32 clear_wakeup_src(struct message *pmessage)
{
    ab44:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 time_to_wakeup;

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
    ab48:	84 42 00 00 	l.lwz r2,0x0(r2)
	return OK;
}


s32 clear_wakeup_src(struct message *pmessage)
{
    ab4c:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
	u32 time_to_wakeup;

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
    ab50:	b8 62 00 5e 	l.srli r3,r2,0x1e
	return OK;
}


s32 clear_wakeup_src(struct message *pmessage)
{
    ab54:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;

	if (wakeup_src_type == 0x3) {
    ab58:	bc 23 00 03 	l.sfnei r3,0x3
    ab5c:	10 00 00 0a 	l.bf ab84 <clear_wakeup_src+0x48>
    ab60:	9c 21 ff d8 	l.addi r1,r1,0xffffffd8
		time_to_wakeup = pmessage->paras[0] & 0x3fffffff;
		wakeup_timer.cycle = msec_to_ticks(time_to_wakeup);
    ab64:	18 80 3f ff 	l.movhi r4,0x3fff
    ab68:	a8 84 ff ff 	l.ori r4,r4,0xffff
    ab6c:	e0 62 20 03 	l.and r3,r2,r4
    ab70:	04 00 06 a5 	l.jal c604 <msec_to_ticks>
    ab74:	18 40 00 01 	l.movhi r2,0x1
    ab78:	a8 42 34 48 	l.ori r2,r2,0x3448
    ab7c:	00 00 00 20 	l.j abfc <clear_wakeup_src+0xc0>
    ab80:	d4 02 58 00 	l.sw 0x0(r2),r11

	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
    ab84:	a6 02 03 ff 	l.andi r16,r2,0x3ff

	if (wakeup_src_type == 0x3) {
		time_to_wakeup = pmessage->paras[0] & 0x3fffffff;
		wakeup_timer.cycle = msec_to_ticks(time_to_wakeup);
	} else {
		irq_no = CPUX_IRQ_MAPTO_CPUS(wakeup_root_irq);
    ab88:	07 ff ff 13 	l.jal a7d4 <CPUX_IRQ_MAPTO_CPUS>
    ab8c:	a8 70 00 00 	l.ori r3,r16,0x0
		if (irq_no == -1) {
    ab90:	bc 2b ff ff 	l.sfnei r11,0xffffffff
    ab94:	10 00 00 0e 	l.bf abcc <clear_wakeup_src+0x90>
    ab98:	a9 cb 00 00 	l.ori r14,r11,0x0
			ERR("%s(%d) irq_no error, root_irq %x\n",
    ab9c:	18 40 00 01 	l.movhi r2,0x1
    aba0:	18 80 00 01 	l.movhi r4,0x1
    aba4:	a8 42 31 40 	l.ori r2,r2,0x3140
    aba8:	9c 60 00 08 	l.addi r3,r0,0x8
    abac:	d4 01 10 00 	l.sw 0x0(r1),r2
    abb0:	a8 84 2b 09 	l.ori r4,r4,0x2b09
    abb4:	9c 40 00 ba 	l.addi r2,r0,0xba
    abb8:	d4 01 80 08 	l.sw 0x8(r1),r16
    abbc:	07 ff fc ff 	l.jal 9fb8 <debugger_printf>
    abc0:	d4 01 10 04 	l.sw 0x4(r1),r2
				__func__, __LINE__, wakeup_root_irq);
			return -1;
    abc4:	00 00 00 0f 	l.j ac00 <clear_wakeup_src+0xc4>
    abc8:	a9 6e 00 00 	l.ori r11,r14,0x0
	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
    abcc:	b8 62 00 4a 	l.srli r3,r2,0xa
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;
    abd0:	b8 42 00 54 	l.srli r2,r2,0x14
			return -1;
		}
		switch (irq_no) {
		default:
			{
				para[0] = wakeup_root_irq;
    abd4:	d4 01 80 0c 	l.sw 0xc(r1),r16
	s32 irq_no;
	u32 para[3];

	wakeup_src_type = (pmessage->paras[0] >> 30) & 0x3;
	wakeup_root_irq = pmessage->paras[0] & 0x3FF;
	wakeup_secondary_irq = (pmessage->paras[0] >> 10) & 0x3FF;
    abd8:	a4 63 03 ff 	l.andi r3,r3,0x3ff
	wakeup_thrid_irq = (pmessage->paras[0] >> 20) & 0x3FF;
    abdc:	a4 42 03 ff 	l.andi r2,r2,0x3ff
		}
		switch (irq_no) {
		default:
			{
				para[0] = wakeup_root_irq;
				para[1] = wakeup_secondary_irq;
    abe0:	d4 01 18 10 	l.sw 0x10(r1),r3
}

static int irq_wakesource_exit(s32 irq_num, __pCBK_t exit, void *exit_parg, __pISR_t handler, void *parg)
{
	if (exit != NULL)
		(*exit)(exit_parg);
    abe4:	9c 61 00 0c 	l.addi r3,r1,0xc
    abe8:	07 ff ff 20 	l.jal a868 <group_irq_exit>
    abec:	d4 01 10 14 	l.sw 0x14(r1),r2

	if (handler != NULL)
		install_isr(irq_num, handler, parg);
	interrupt_set_mask(irq_num, TRUE);
    abf0:	a8 6e 00 00 	l.ori r3,r14,0x0
    abf4:	07 ff e6 88 	l.jal 4614 <interrupt_set_mask>
    abf8:	9c 80 00 01 	l.addi r4,r0,0x1
				break;
			}
		}
	}

	return OK;
    abfc:	9d 60 00 00 	l.addi r11,r0,0x0
}
    ac00:	9c 21 00 28 	l.addi r1,r1,0x28
    ac04:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    ac08:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    ac0c:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    ac10:	44 00 48 00 	l.jr r9
    ac14:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

0000ac18 <is_suspend_lock>:
}

u32 is_suspend_lock(void)
{
	return suspend_lock;
}
    ac18:	18 60 00 01 	l.movhi r3,0x1
    ac1c:	a8 63 34 78 	l.ori r3,r3,0x3478
    ac20:	44 00 48 00 	l.jr r9
    ac24:	85 63 00 00 	l.lwz r11,0x0(r3)

0000ac28 <cpu_op>:

int cpu_op(struct message *pmessage)
{
	u32 mpidr = pmessage->paras[0];
    ac28:	84 83 00 1c 	l.lwz r4,0x1c(r3)
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
{
    ac2c:	d7 e1 17 e0 	l.sw 0xffffffe0(r1),r2
    ac30:	d7 e1 77 e4 	l.sw 0xffffffe4(r1),r14
	u32 mpidr = pmessage->paras[0];
	u32 entrypoint = pmessage->paras[1];
    ac34:	84 44 00 04 	l.lwz r2,0x4(r4)
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
{
	u32 mpidr = pmessage->paras[0];
    ac38:	85 c4 00 00 	l.lwz r14,0x0(r4)
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
{
    ac3c:	d7 e1 87 e8 	l.sw 0xffffffe8(r1),r16
    ac40:	d7 e1 97 ec 	l.sw 0xffffffec(r1),r18
	u32 mpidr = pmessage->paras[0];
	u32 entrypoint = pmessage->paras[1];
	u32 cpu_state = pmessage->paras[2];
    ac44:	86 04 00 08 	l.lwz r16,0x8(r4)
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
{
    ac48:	d7 e1 c7 f8 	l.sw 0xfffffff8(r1),r24
    ac4c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    ac50:	d7 e1 a7 f0 	l.sw 0xfffffff0(r1),r20
    ac54:	d7 e1 b7 f4 	l.sw 0xfffffff4(r1),r22
    ac58:	9c 21 ff ac 	l.addi r1,r1,0xffffffac
	u32 mpidr = pmessage->paras[0];
	u32 entrypoint = pmessage->paras[1];
	u32 cpu_state = pmessage->paras[2];
	u32 cluster_state = pmessage->paras[3]; /* unused variable */
	u32 system_state = pmessage->paras[4];
    ac5c:	86 44 00 10 	l.lwz r18,0x10(r4)

	LOG("mpidr:%x, entrypoint:%x; cpu_state:%x, cluster_state:%x, system_state:%x\n", mpidr, entrypoint, cpu_state, cluster_state, system_state);
    ac60:	d4 01 70 00 	l.sw 0x0(r1),r14
    ac64:	d4 01 10 04 	l.sw 0x4(r1),r2
    ac68:	d4 01 80 08 	l.sw 0x8(r1),r16
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
{
    ac6c:	ab 03 00 00 	l.ori r24,r3,0x0
	u32 entrypoint = pmessage->paras[1];
	u32 cpu_state = pmessage->paras[2];
	u32 cluster_state = pmessage->paras[3]; /* unused variable */
	u32 system_state = pmessage->paras[4];

	LOG("mpidr:%x, entrypoint:%x; cpu_state:%x, cluster_state:%x, system_state:%x\n", mpidr, entrypoint, cpu_state, cluster_state, system_state);
    ac70:	84 64 00 0c 	l.lwz r3,0xc(r4)
    ac74:	18 80 00 01 	l.movhi r4,0x1
    ac78:	d4 01 18 0c 	l.sw 0xc(r1),r3
    ac7c:	a8 84 2b 2f 	l.ori r4,r4,0x2b2f
    ac80:	9c 60 00 02 	l.addi r3,r0,0x2
    ac84:	07 ff fc cd 	l.jal 9fb8 <debugger_printf>
    ac88:	d4 01 90 10 	l.sw 0x10(r1),r18
	if (cpu_state == arisc_power_on) {
    ac8c:	bc 30 00 00 	l.sfnei r16,0x0
    ac90:	10 00 00 0a 	l.bf acb8 <cpu_op+0x90>
    ac94:	bc 30 00 03 	l.sfnei r16,0x3
		set_secondary_entry(entrypoint, mpidr);
    ac98:	a8 62 00 00 	l.ori r3,r2,0x0
    ac9c:	04 00 09 38 	l.jal d17c <set_secondary_entry>
    aca0:	a8 8e 00 00 	l.ori r4,r14,0x0
		cpu_power_up(0, mpidr);
    aca4:	a8 70 00 00 	l.ori r3,r16,0x0
    aca8:	04 00 09 d2 	l.jal d3f0 <cpu_power_up>
    acac:	a8 8e 00 00 	l.ori r4,r14,0x0
			cpu_power_down(0, mpidr);
		}
	}

	return 0;
}
    acb0:	00 00 03 a8 	l.j bb50 <cpu_op+0xf28>
    acb4:	9c 21 00 54 	l.addi r1,r1,0x54

	LOG("mpidr:%x, entrypoint:%x; cpu_state:%x, cluster_state:%x, system_state:%x\n", mpidr, entrypoint, cpu_state, cluster_state, system_state);
	if (cpu_state == arisc_power_on) {
		set_secondary_entry(entrypoint, mpidr);
		cpu_power_up(0, mpidr);
	} else if (cpu_state == arisc_power_off) {
    acb8:	10 00 03 a5 	l.bf bb4c <cpu_op+0xf24>
    acbc:	bc 02 00 00 	l.sfeqi r2,0x0
		if (entrypoint) {
    acc0:	10 00 03 a0 	l.bf bb40 <cpu_op+0xf18>
    acc4:	bc 32 00 03 	l.sfnei r18,0x3
			if (system_state == arisc_power_off) {
    acc8:	10 00 03 a1 	l.bf bb4c <cpu_op+0xf24>
    accc:	18 60 f3 f3 	l.movhi r3,0xf3f3
{
	static u32 dts_has_parsed = 0;
	void *fdt;
	int32_t param_node;

	if (!!dts_has_parsed)
    acd0:	18 40 00 01 	l.movhi r2,0x1
* Returns    :  OK if enter extended super-standby succeeded, others if failed.
*********************************************************************************************************
*/
static s32 standby_entry(struct message *pmessage)
{
	save_state_flag(REC_ESTANDBY | REC_ENTER);
    acd4:	a8 63 10 00 	l.ori r3,r3,0x1000
    acd8:	04 00 1b 6d 	l.jal 11a8c <save_state_flag>
    acdc:	a8 42 34 74 	l.ori r2,r2,0x3474
{
	static u32 dts_has_parsed = 0;
	void *fdt;
	int32_t param_node;

	if (!!dts_has_parsed)
    ace0:	84 42 00 00 	l.lwz r2,0x0(r2)
    ace4:	bc 22 00 00 	l.sfnei r2,0x0
    ace8:	10 00 00 51 	l.bf ae2c <cpu_op+0x204>
    acec:	18 60 f3 f3 	l.movhi r3,0xf3f3
		return 0;

	fdt = (void *)(ARISC_DTS_BASE);

	/* parse power tree */
	param_node = fdt_path_offset(fdt, "standby_param");
    acf0:	18 80 00 01 	l.movhi r4,0x1
    acf4:	18 60 48 10 	l.movhi r3,0x4810
    acf8:	07 ff f8 85 	l.jal 8f0c <fdt_path_offset>
    acfc:	a8 84 2b 79 	l.ori r4,r4,0x2b79
	if (param_node < 0) {
    ad00:	bd 6b 00 00 	l.sfgesi r11,0x0
    ad04:	10 00 00 15 	l.bf ad58 <cpu_op+0x130>
    ad08:	a8 4b 00 00 	l.ori r2,r11,0x0
		WRN("no standby_param: %x\n", param_node);
    ad0c:	18 80 00 01 	l.movhi r4,0x1
    ad10:	9c 60 00 04 	l.addi r3,r0,0x4
    ad14:	a8 84 2b 87 	l.ori r4,r4,0x2b87
    ad18:	07 ff fc a8 	l.jal 9fb8 <debugger_printf>
    ad1c:	d4 01 58 00 	l.sw 0x0(r1),r11

		/* try "standby-param" more to keep compatibility with linux-4.9 and linux-5.4 */
		param_node = fdt_path_offset(fdt, "standby-param");
    ad20:	18 80 00 01 	l.movhi r4,0x1
    ad24:	18 60 48 10 	l.movhi r3,0x4810
    ad28:	07 ff f8 79 	l.jal 8f0c <fdt_path_offset>
    ad2c:	a8 84 2b a1 	l.ori r4,r4,0x2ba1
		if (param_node < 0) {
    ad30:	bd 6b 00 00 	l.sfgesi r11,0x0
    ad34:	10 00 00 09 	l.bf ad58 <cpu_op+0x130>
    ad38:	a8 4b 00 00 	l.ori r2,r11,0x0
			ERR("no standby-param: %x\n", param_node);
    ad3c:	18 80 00 01 	l.movhi r4,0x1
    ad40:	9c 60 00 08 	l.addi r3,r0,0x8
    ad44:	a8 84 2b af 	l.ori r4,r4,0x2baf
    ad48:	07 ff fc 9c 	l.jal 9fb8 <debugger_printf>
    ad4c:	d4 01 58 00 	l.sw 0x0(r1),r11
{
	save_state_flag(REC_ESTANDBY | REC_ENTER);

	standby_dts_parse();

	save_state_flag(REC_ESTANDBY | REC_ENTER | 0x1);
    ad50:	00 00 00 37 	l.j ae2c <cpu_op+0x204>
    ad54:	18 60 f3 f3 	l.movhi r3,0xf3f3
			ERR("no standby-param: %x\n", param_node);
			return -1;
		}
	}

	fdt_getprop_u32(fdt, param_node, "vdd-cpu", &standby_vdd_cpu);
    ad58:	18 a0 00 01 	l.movhi r5,0x1
    ad5c:	18 c0 00 01 	l.movhi r6,0x1
    ad60:	a8 82 00 00 	l.ori r4,r2,0x0
    ad64:	18 60 48 10 	l.movhi r3,0x4810
    ad68:	a8 a5 2b c9 	l.ori r5,r5,0x2bc9
    ad6c:	07 ff f7 eb 	l.jal 8d18 <fdt_getprop_u32>
    ad70:	a8 c6 34 68 	l.ori r6,r6,0x3468
	fdt_getprop_u32(fdt, param_node, "vdd-sys", &standby_vdd_sys);
    ad74:	18 a0 00 01 	l.movhi r5,0x1
    ad78:	18 c0 00 01 	l.movhi r6,0x1
    ad7c:	a8 82 00 00 	l.ori r4,r2,0x0
    ad80:	18 60 48 10 	l.movhi r3,0x4810
    ad84:	a8 a5 2b d1 	l.ori r5,r5,0x2bd1
    ad88:	07 ff f7 e4 	l.jal 8d18 <fdt_getprop_u32>
    ad8c:	a8 c6 34 6c 	l.ori r6,r6,0x346c
	fdt_getprop_u32(fdt, param_node, "vcc-pll", &standby_vcc_pll);
    ad90:	18 a0 00 01 	l.movhi r5,0x1
    ad94:	18 c0 00 01 	l.movhi r6,0x1
    ad98:	a8 82 00 00 	l.ori r4,r2,0x0
    ad9c:	18 60 48 10 	l.movhi r3,0x4810
    ada0:	a8 a5 2b d9 	l.ori r5,r5,0x2bd9
    ada4:	07 ff f7 dd 	l.jal 8d18 <fdt_getprop_u32>
    ada8:	a8 c6 34 70 	l.ori r6,r6,0x3470
	fdt_getprop_u32(fdt, param_node, "osc24m-on", &standby_osc24m_on);
    adac:	a8 82 00 00 	l.ori r4,r2,0x0
    adb0:	18 a0 00 01 	l.movhi r5,0x1
    adb4:	18 c0 00 01 	l.movhi r6,0x1
	LOG("standby power %x, %x, %x, %x\n",
    adb8:	18 40 00 01 	l.movhi r2,0x1
	}

	fdt_getprop_u32(fdt, param_node, "vdd-cpu", &standby_vdd_cpu);
	fdt_getprop_u32(fdt, param_node, "vdd-sys", &standby_vdd_sys);
	fdt_getprop_u32(fdt, param_node, "vcc-pll", &standby_vcc_pll);
	fdt_getprop_u32(fdt, param_node, "osc24m-on", &standby_osc24m_on);
    adbc:	18 60 48 10 	l.movhi r3,0x4810
    adc0:	a8 a5 2b e1 	l.ori r5,r5,0x2be1
    adc4:	a8 c6 33 d8 	l.ori r6,r6,0x33d8
    adc8:	07 ff f7 d4 	l.jal 8d18 <fdt_getprop_u32>
    adcc:	a8 42 34 68 	l.ori r2,r2,0x3468
	LOG("standby power %x, %x, %x, %x\n",
    add0:	84 42 00 00 	l.lwz r2,0x0(r2)
    add4:	18 80 00 01 	l.movhi r4,0x1
    add8:	d4 01 10 00 	l.sw 0x0(r1),r2
    addc:	18 40 00 01 	l.movhi r2,0x1
    ade0:	9c 60 00 02 	l.addi r3,r0,0x2
    ade4:	a8 42 34 6c 	l.ori r2,r2,0x346c
    ade8:	a8 84 2b eb 	l.ori r4,r4,0x2beb
    adec:	84 42 00 00 	l.lwz r2,0x0(r2)
    adf0:	d4 01 10 04 	l.sw 0x4(r1),r2
    adf4:	18 40 00 01 	l.movhi r2,0x1
    adf8:	a8 42 34 70 	l.ori r2,r2,0x3470
    adfc:	84 42 00 00 	l.lwz r2,0x0(r2)
    ae00:	d4 01 10 08 	l.sw 0x8(r1),r2
    ae04:	18 40 00 01 	l.movhi r2,0x1
    ae08:	a8 42 33 d8 	l.ori r2,r2,0x33d8
    ae0c:	84 42 00 00 	l.lwz r2,0x0(r2)
    ae10:	d4 01 10 0c 	l.sw 0xc(r1),r2
    ae14:	07 ff fc 69 	l.jal 9fb8 <debugger_printf>
    ae18:	18 40 00 01 	l.movhi r2,0x1
		standby_vdd_cpu, standby_vdd_sys, standby_vcc_pll, standby_osc24m_on);

	dts_has_parsed = 1;
    ae1c:	9c 60 00 01 	l.addi r3,r0,0x1
    ae20:	a8 42 34 74 	l.ori r2,r2,0x3474
    ae24:	d4 02 18 00 	l.sw 0x0(r2),r3
{
	save_state_flag(REC_ESTANDBY | REC_ENTER);

	standby_dts_parse();

	save_state_flag(REC_ESTANDBY | REC_ENTER | 0x1);
    ae28:	18 60 f3 f3 	l.movhi r3,0xf3f3

	/* backup cpus source clock */
	iosc_freq_init();
	cpus_src = readl(CPUS_CFG_REG) & CPUS_CLK_SRC_SEL_MASK;
    ae2c:	18 40 07 01 	l.movhi r2,0x701
{
	save_state_flag(REC_ESTANDBY | REC_ENTER);

	standby_dts_parse();

	save_state_flag(REC_ESTANDBY | REC_ENTER | 0x1);
    ae30:	04 00 1b 17 	l.jal 11a8c <save_state_flag>
    ae34:	a8 63 10 01 	l.ori r3,r3,0x1001

	/* backup cpus source clock */
	iosc_freq_init();
    ae38:	04 00 1a 86 	l.jal 11850 <iosc_freq_init>
    ae3c:	15 00 00 00 	l.nop 0x0
	cpus_src = readl(CPUS_CFG_REG) & CPUS_CLK_SRC_SEL_MASK;
    ae40:	84 62 00 00 	l.lwz r3,0x0(r2)
    ae44:	18 40 07 00 	l.movhi r2,0x700
    ae48:	e0 63 10 03 	l.and r3,r3,r2
    ae4c:	18 40 00 01 	l.movhi r2,0x1
    ae50:	a8 42 34 5c 	l.ori r2,r2,0x345c
    ae54:	d4 02 18 00 	l.sw 0x0(r2),r3
static u32 platform_standby_type(void)
{
	u32 type = 0;

	/* usb standby */
	if (interrupt_get_enabled(INTC_USB0_IRQ) ||
    ae58:	9c 60 00 10 	l.addi r3,r0,0x10
    ae5c:	07 ff e6 6f 	l.jal 4818 <interrupt_get_enabled>
    ae60:	9c 40 20 00 	l.addi r2,r0,0x2000
    ae64:	bc 2b 00 00 	l.sfnei r11,0x0
    ae68:	10 00 00 09 	l.bf ae8c <cpu_op+0x264>
    ae6c:	18 60 00 01 	l.movhi r3,0x1
			interrupt_get_enabled(INTC_USB1_IRQ)) {
    ae70:	07 ff e6 6a 	l.jal 4818 <interrupt_get_enabled>
    ae74:	9c 60 00 11 	l.addi r3,r0,0x11
static u32 platform_standby_type(void)
{
	u32 type = 0;

	/* usb standby */
	if (interrupt_get_enabled(INTC_USB0_IRQ) ||
    ae78:	bc 2b 00 00 	l.sfnei r11,0x0
    ae7c:	10 00 00 03 	l.bf ae88 <cpu_op+0x260>
    ae80:	15 00 00 00 	l.nop 0x0
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(1), VDD_SYS_PWR_RST_REG);
}

static u32 platform_standby_type(void)
{
	u32 type = 0;
    ae84:	a8 4b 00 00 	l.ori r2,r11,0x0
	/* backup cpus source clock */
	iosc_freq_init();
	cpus_src = readl(CPUS_CFG_REG) & CPUS_CLK_SRC_SEL_MASK;

	/* parse standby type from enabled interrupt */
	standby_type = platform_standby_type();
    ae88:	18 60 00 01 	l.movhi r3,0x1
    ae8c:	a8 63 34 60 	l.ori r3,r3,0x3460
    ae90:	d4 03 10 00 	l.sw 0x0(r3),r2
	 *
	 * initialize enter super-standby porcess
	 *
	 * --------------------------------------------------------------------------
	 */
	save_state_flag(REC_ESTANDBY | REC_BEFORE_INIT);
    ae94:	18 40 f3 f3 	l.movhi r2,0xf3f3
    ae98:	04 00 1a fd 	l.jal 11a8c <save_state_flag>
    ae9c:	a8 62 20 00 	l.ori r3,r2,0x2000
	return type;
}

static s32 standby_process_init(struct message *pmessage)
{
	suspend_lock = 1;
    aea0:	18 60 00 01 	l.movhi r3,0x1
    aea4:	9c 80 00 01 	l.addi r4,r0,0x1
    aea8:	a8 63 34 78 	l.ori r3,r3,0x3478
    aeac:	d4 03 20 00 	l.sw 0x0(r3),r4

	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x1);
    aeb0:	04 00 1a f7 	l.jal 11a8c <save_state_flag>
    aeb4:	a8 62 30 01 	l.ori r3,r2,0x3001

	cpucfg_cpu_suspend();
    aeb8:	04 00 07 f0 	l.jal ce78 <cpucfg_cpu_suspend>
    aebc:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x2);
    aec0:	a8 62 30 02 	l.ori r3,r2,0x3002
    aec4:	04 00 1a f2 	l.jal 11a8c <save_state_flag>
    aec8:	18 40 04 80 	l.movhi r2,0x480
    aecc:	18 80 00 01 	l.movhi r4,0x1
    aed0:	a8 42 01 08 	l.ori r2,r2,0x108
    aed4:	a8 84 34 7c 	l.ori r4,r4,0x347c
} static smc_region_save[SMC_REGION_COUNT];
static void smc_standby_init(void)
{
	int read_idx;
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (readl(SMC_REGIN_ATTRIBUTE_REG(read_idx)) == 0)
    aed8:	84 62 00 00 	l.lwz r3,0x0(r2)
    aedc:	bc 03 00 00 	l.sfeqi r3,0x0
    aee0:	10 00 00 0e 	l.bf af18 <cpu_op+0x2f0>
    aee4:	15 00 00 00 	l.nop 0x0
			break;
		smc_region_save[read_idx].region_low =
			readl(SMC_REGIN_SETUP_LOW_REG(read_idx));
    aee8:	84 62 ff f8 	l.lwz r3,0xfffffff8(r2)
{
	int read_idx;
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (readl(SMC_REGIN_ATTRIBUTE_REG(read_idx)) == 0)
			break;
		smc_region_save[read_idx].region_low =
    aeec:	d4 04 18 00 	l.sw 0x0(r4),r3
			readl(SMC_REGIN_SETUP_LOW_REG(read_idx));
		smc_region_save[read_idx].region_high =
			readl(SMC_REGIN_SETUP_HIGH_REG(read_idx));
    aef0:	84 62 ff fc 	l.lwz r3,0xfffffffc(r2)
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (readl(SMC_REGIN_ATTRIBUTE_REG(read_idx)) == 0)
			break;
		smc_region_save[read_idx].region_low =
			readl(SMC_REGIN_SETUP_LOW_REG(read_idx));
		smc_region_save[read_idx].region_high =
    aef4:	d4 04 18 04 	l.sw 0x4(r4),r3
			readl(SMC_REGIN_SETUP_HIGH_REG(read_idx));
		smc_region_save[read_idx].region_attr =
			readl(SMC_REGIN_ATTRIBUTE_REG(read_idx));
    aef8:	84 62 00 00 	l.lwz r3,0x0(r2)
			break;
		smc_region_save[read_idx].region_low =
			readl(SMC_REGIN_SETUP_LOW_REG(read_idx));
		smc_region_save[read_idx].region_high =
			readl(SMC_REGIN_SETUP_HIGH_REG(read_idx));
		smc_region_save[read_idx].region_attr =
    aefc:	9c 42 00 10 	l.addi r2,r2,0x10
    af00:	d4 04 18 08 	l.sw 0x8(r4),r3
	u32 region_attr;
} static smc_region_save[SMC_REGION_COUNT];
static void smc_standby_init(void)
{
	int read_idx;
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
    af04:	18 60 04 80 	l.movhi r3,0x480
    af08:	a8 63 01 88 	l.ori r3,r3,0x188
    af0c:	e4 22 18 00 	l.sfne r2,r3
    af10:	13 ff ff f2 	l.bf aed8 <cpu_op+0x2b0>
    af14:	9c 84 00 0c 	l.addi r4,r4,0xc
}

static void device_suspend(void)
{
	smc_standby_init();
	pmu_standby_init();
    af18:	07 ff f1 25 	l.jal 73ac <pmu_standby_init>
    af1c:	18 40 00 01 	l.movhi r2,0x1
	twi_standby_init();
    af20:	07 ff ed 3f 	l.jal 641c <twi_standby_init>
    af24:	a8 42 34 60 	l.ori r2,r2,0x3460
	hwmsgbox_super_standby_init();
    af28:	07 ff ef 80 	l.jal 6d28 <hwmsgbox_super_standby_init>
    af2c:	15 00 00 00 	l.nop 0x0

static void usb_suspend(void)
{
	u32 val;

	if (!(standby_type & CPUS_WAKEUP_USB)) {
    af30:	84 42 00 00 	l.lwz r2,0x0(r2)
    af34:	a4 42 20 00 	l.andi r2,r2,0x2000
    af38:	bc 22 00 00 	l.sfnei r2,0x0
    af3c:	10 00 00 07 	l.bf af58 <cpu_op+0x330>
    af40:	18 80 03 00 	l.movhi r4,0x300
		val = readl(VDD_SYS_PWROFF_GATING_REG);
    af44:	18 40 07 01 	l.movhi r2,0x701
    af48:	a8 42 02 50 	l.ori r2,r2,0x250
    af4c:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= VDD_USB2CPUS_GATING(1);
    af50:	00 00 00 1b 	l.j afbc <cpu_op+0x394>
    af54:	a8 63 01 00 	l.ori r3,r3,0x100
		writel(val, VDD_SYS_PWROFF_GATING_REG);
	} else {
		/* for usb standby suspend , usb0*/
		val = readl(CCU_USB0_CLOCK_REG);
		val &= ~SCLK_GATING_USBPHY0_MASK;
		val &= ~SCLK_GATING_OHCI0_MASK;
    af58:	18 a0 5f ff 	l.movhi r5,0x5fff
		val = readl(VDD_SYS_PWROFF_GATING_REG);
		val |= VDD_USB2CPUS_GATING(1);
		writel(val, VDD_SYS_PWROFF_GATING_REG);
	} else {
		/* for usb standby suspend , usb0*/
		val = readl(CCU_USB0_CLOCK_REG);
    af5c:	a8 44 1a 70 	l.ori r2,r4,0x1a70
		val &= ~SCLK_GATING_USBPHY0_MASK;
		val &= ~SCLK_GATING_OHCI0_MASK;
    af60:	a8 a5 ff ff 	l.ori r5,r5,0xffff
		val = readl(VDD_SYS_PWROFF_GATING_REG);
		val |= VDD_USB2CPUS_GATING(1);
		writel(val, VDD_SYS_PWROFF_GATING_REG);
	} else {
		/* for usb standby suspend , usb0*/
		val = readl(CCU_USB0_CLOCK_REG);
    af64:	84 62 00 00 	l.lwz r3,0x0(r2)
		val &= ~SCLK_GATING_OHCI0_MASK;
		writel(val, CCU_USB0_CLOCK_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val &= ~USBOHCI0_GATING_MASK;
		val &= ~USBEHCI0_GATING_MASK;
    af68:	9c c0 ff ee 	l.addi r6,r0,0xffffffee
		writel(val, VDD_SYS_PWROFF_GATING_REG);
	} else {
		/* for usb standby suspend , usb0*/
		val = readl(CCU_USB0_CLOCK_REG);
		val &= ~SCLK_GATING_USBPHY0_MASK;
		val &= ~SCLK_GATING_OHCI0_MASK;
    af6c:	e0 63 28 03 	l.and r3,r3,r5
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		/* usb1*/
		val = readl(CCU_USB1_CLOCK_REG);
		val &= ~SCLK_GATING_USBPHY1_MASK;
		val &= ~SCLK_GATING_OHCI1_MASK;
    af70:	18 a0 5f ff 	l.movhi r5,0x5fff
	} else {
		/* for usb standby suspend , usb0*/
		val = readl(CCU_USB0_CLOCK_REG);
		val &= ~SCLK_GATING_USBPHY0_MASK;
		val &= ~SCLK_GATING_OHCI0_MASK;
		writel(val, CCU_USB0_CLOCK_REG);
    af74:	d4 02 18 00 	l.sw 0x0(r2),r3

		val = readl(CCU_USB_BUS_GATING_RST_REG);
    af78:	a8 44 1a 8c 	l.ori r2,r4,0x1a8c
		val &= ~USBOHCI0_GATING_MASK;
		val &= ~USBEHCI0_GATING_MASK;
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		/* usb1*/
		val = readl(CCU_USB1_CLOCK_REG);
    af7c:	a8 84 1a 74 	l.ori r4,r4,0x1a74
		val = readl(CCU_USB0_CLOCK_REG);
		val &= ~SCLK_GATING_USBPHY0_MASK;
		val &= ~SCLK_GATING_OHCI0_MASK;
		writel(val, CCU_USB0_CLOCK_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
    af80:	84 62 00 00 	l.lwz r3,0x0(r2)
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		/* usb1*/
		val = readl(CCU_USB1_CLOCK_REG);
		val &= ~SCLK_GATING_USBPHY1_MASK;
		val &= ~SCLK_GATING_OHCI1_MASK;
    af84:	a8 a5 ff ff 	l.ori r5,r5,0xffff
		val &= ~SCLK_GATING_OHCI0_MASK;
		writel(val, CCU_USB0_CLOCK_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val &= ~USBOHCI0_GATING_MASK;
		val &= ~USBEHCI0_GATING_MASK;
    af88:	e0 63 30 03 	l.and r3,r3,r6
		val &= ~SCLK_GATING_OHCI1_MASK;
		writel(val, CCU_USB1_CLOCK_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val &= ~USBEHCI1_GATING_MASK;
		val &= ~USBOHCI1_GATING_MASK;
    af8c:	9c c0 ff dd 	l.addi r6,r0,0xffffffdd
		writel(val, CCU_USB0_CLOCK_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val &= ~USBOHCI0_GATING_MASK;
		val &= ~USBEHCI0_GATING_MASK;
		writel(val, CCU_USB_BUS_GATING_RST_REG);
    af90:	d4 02 18 00 	l.sw 0x0(r2),r3

		/* usb1*/
		val = readl(CCU_USB1_CLOCK_REG);
    af94:	84 64 00 00 	l.lwz r3,0x0(r4)
		val &= ~SCLK_GATING_USBPHY1_MASK;
		val &= ~SCLK_GATING_OHCI1_MASK;
    af98:	e0 63 28 03 	l.and r3,r3,r5
		writel(val, CCU_USB1_CLOCK_REG);
    af9c:	d4 04 18 00 	l.sw 0x0(r4),r3

		val = readl(CCU_USB_BUS_GATING_RST_REG);
    afa0:	84 62 00 00 	l.lwz r3,0x0(r2)
		val &= ~USBEHCI1_GATING_MASK;
		val &= ~USBOHCI1_GATING_MASK;
    afa4:	e0 63 30 03 	l.and r3,r3,r6
		writel(val, CCU_USB_BUS_GATING_RST_REG);
    afa8:	d4 02 18 00 	l.sw 0x0(r2),r3

		val = readl(VDD_SYS_PWROFF_GATING_REG);
    afac:	18 40 07 01 	l.movhi r2,0x701
    afb0:	a8 42 02 50 	l.ori r2,r2,0x250
    afb4:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= VDD_SYS2USB_GATING(1);
    afb8:	a8 63 00 08 	l.ori r3,r3,0x8
		writel(val, VDD_SYS_PWROFF_GATING_REG);
    afbc:	d4 02 18 00 	l.sw 0x0(r2),r3

	cpucfg_cpu_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x2);

	device_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x3);
    afc0:	18 60 f3 f3 	l.movhi r3,0xf3f3
    afc4:	04 00 1a b2 	l.jal 11a8c <save_state_flag>
    afc8:	a8 63 30 03 	l.ori r3,r3,0x3003

static void dram_suspend(void)
{
#ifndef CFG_FPGA_PLATFORM
	/* calc dram checksum */
	if (standby_dram_crc_enable()) {
    afcc:	07 ff fd ed 	l.jal a780 <standby_dram_crc_enable>
    afd0:	15 00 00 00 	l.nop 0x0
    afd4:	bc 0b 00 00 	l.sfeqi r11,0x0
    afd8:	10 00 00 0c 	l.bf b008 <cpu_op+0x3e0>
    afdc:	18 40 03 00 	l.movhi r2,0x300
		before_crc = standby_dram_crc();
    afe0:	07 ff fd ec 	l.jal a790 <standby_dram_crc>
    afe4:	18 40 00 01 	l.movhi r2,0x1
    afe8:	a8 42 37 38 	l.ori r2,r2,0x3738
		LOG("before_crc: 0x%x\n", before_crc);
    afec:	18 80 00 01 	l.movhi r4,0x1
static void dram_suspend(void)
{
#ifndef CFG_FPGA_PLATFORM
	/* calc dram checksum */
	if (standby_dram_crc_enable()) {
		before_crc = standby_dram_crc();
    aff0:	d4 02 58 00 	l.sw 0x0(r2),r11
		LOG("before_crc: 0x%x\n", before_crc);
    aff4:	9c 60 00 02 	l.addi r3,r0,0x2
    aff8:	a8 84 2c 09 	l.ori r4,r4,0x2c09
    affc:	07 ff fb ef 	l.jal 9fb8 <debugger_printf>
    b000:	d4 01 58 00 	l.sw 0x0(r1),r11
	}
#endif
	pll_periph0 = readl(CCU_PLL_PERIPH0_REG);
    b004:	18 40 03 00 	l.movhi r2,0x300
    b008:	18 60 00 01 	l.movhi r3,0x1
    b00c:	aa 02 10 20 	l.ori r16,r2,0x1020
    b010:	a8 63 34 dc 	l.ori r3,r3,0x34dc
    b014:	84 90 00 00 	l.lwz r4,0x0(r16)

	device_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x3);

	dram_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x4);
    b018:	19 c0 f3 f3 	l.movhi r14,0xf3f3
	if (standby_dram_crc_enable()) {
		before_crc = standby_dram_crc();
		LOG("before_crc: 0x%x\n", before_crc);
	}
#endif
	pll_periph0 = readl(CCU_PLL_PERIPH0_REG);
    b01c:	d4 03 20 00 	l.sw 0x0(r3),r4
	mbus = readl(CCU_MBUS_CLK_REG);
    b020:	a8 62 15 40 	l.ori r3,r2,0x1540
	smc_standby_exit();
}

static void clk_save(void)
{
	pll_cpux_ctrl_reg_bak = readl(CCU_PLL_C0_REG);
    b024:	aa 42 10 00 	l.ori r18,r2,0x1000
		before_crc = standby_dram_crc();
		LOG("before_crc: 0x%x\n", before_crc);
	}
#endif
	pll_periph0 = readl(CCU_PLL_PERIPH0_REG);
	mbus = readl(CCU_MBUS_CLK_REG);
    b028:	84 83 00 00 	l.lwz r4,0x0(r3)
    b02c:	18 60 00 01 	l.movhi r3,0x1
}

static void clk_save(void)
{
	pll_cpux_ctrl_reg_bak = readl(CCU_PLL_C0_REG);
	c0_cpux_axi_cfg_reg_bak = readl(CCU_CPU_AXI_CFG_REG);
    b030:	aa 82 15 00 	l.ori r20,r2,0x1500
		before_crc = standby_dram_crc();
		LOG("before_crc: 0x%x\n", before_crc);
	}
#endif
	pll_periph0 = readl(CCU_PLL_PERIPH0_REG);
	mbus = readl(CCU_MBUS_CLK_REG);
    b034:	a8 63 34 e0 	l.ori r3,r3,0x34e0
	u32 val;

	clk_save();

	/* set cpus clk to RC16M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(2), CPUS_CFG_REG);
    b038:	1a c0 07 01 	l.movhi r22,0x701
		before_crc = standby_dram_crc();
		LOG("before_crc: 0x%x\n", before_crc);
	}
#endif
	pll_periph0 = readl(CCU_PLL_PERIPH0_REG);
	mbus = readl(CCU_MBUS_CLK_REG);
    b03c:	d4 03 20 00 	l.sw 0x0(r3),r4
	dram_power_save_process(&arisc_para.dram_para);
    b040:	18 60 00 00 	l.movhi r3,0x0
    b044:	04 00 19 04 	l.jal 11454 <dram_power_save_process>
    b048:	a8 63 40 08 	l.ori r3,r3,0x4008

	device_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x3);

	dram_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x4);
    b04c:	04 00 1a 90 	l.jal 11a8c <save_state_flag>
    b050:	a8 6e 30 04 	l.ori r3,r14,0x3004

	cpucfg_cpu_suspend_late();
    b054:	04 00 07 e6 	l.jal cfec <cpucfg_cpu_suspend_late>
    b058:	15 00 00 00 	l.nop 0x0
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x5);
    b05c:	a8 6e 30 05 	l.ori r3,r14,0x3005
    b060:	04 00 1a 8b 	l.jal 11a8c <save_state_flag>
    b064:	19 c0 00 01 	l.movhi r14,0x1
	smc_standby_exit();
}

static void clk_save(void)
{
	pll_cpux_ctrl_reg_bak = readl(CCU_PLL_C0_REG);
    b068:	18 60 00 01 	l.movhi r3,0x1
    b06c:	84 92 00 00 	l.lwz r4,0x0(r18)
    b070:	a8 63 34 e4 	l.ori r3,r3,0x34e4
	u32 val;

	clk_save();

	/* set cpus clk to RC16M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(2), CPUS_CFG_REG);
    b074:	18 a0 02 00 	l.movhi r5,0x200
	smc_standby_exit();
}

static void clk_save(void)
{
	pll_cpux_ctrl_reg_bak = readl(CCU_PLL_C0_REG);
    b078:	d4 03 20 00 	l.sw 0x0(r3),r4
	c0_cpux_axi_cfg_reg_bak = readl(CCU_CPU_AXI_CFG_REG);
    b07c:	18 60 00 01 	l.movhi r3,0x1
    b080:	84 94 00 00 	l.lwz r4,0x0(r20)
    b084:	a8 63 34 e8 	l.ori r3,r3,0x34e8

	/*
	 * set apbs2 clk to RC16M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    b088:	a9 ce 34 28 	l.ori r14,r14,0x3428
}

static void clk_save(void)
{
	pll_cpux_ctrl_reg_bak = readl(CCU_PLL_C0_REG);
	c0_cpux_axi_cfg_reg_bak = readl(CCU_CPU_AXI_CFG_REG);
    b08c:	d4 03 20 00 	l.sw 0x0(r3),r4
	u32 val;

	clk_save();

	/* set cpus clk to RC16M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(2), CPUS_CFG_REG);
    b090:	18 80 f8 ff 	l.movhi r4,0xf8ff
    b094:	84 76 00 00 	l.lwz r3,0x0(r22)
    b098:	a8 84 ff ff 	l.ori r4,r4,0xffff
    b09c:	e0 63 20 03 	l.and r3,r3,r4
    b0a0:	e0 63 28 04 	l.or r3,r3,r5
    b0a4:	d4 16 18 00 	l.sw 0x0(r22),r3

	/*
	 * set apbs2 clk to RC16M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    b0a8:	9c 60 00 00 	l.addi r3,r0,0x0
    b0ac:	84 8e 00 00 	l.lwz r4,0x0(r14)
    b0b0:	07 ff ea 35 	l.jal 5984 <twi_clkchangecb>
    b0b4:	aa d6 00 10 	l.ori r22,r22,0x10
	uart_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    b0b8:	9c 60 00 00 	l.addi r3,r0,0x0
    b0bc:	07 ff e9 8e 	l.jal 56f4 <uart_clkchangecb>
    b0c0:	84 8e 00 00 	l.lwz r4,0x0(r14)
	writel((readl(APBS2_CFG_REG) & (~APBS2_CLK_SRC_SEL_MASK)) | APBS2_CLK_SRC_SEL(2), APBS2_CFG_REG);
    b0c4:	18 c0 f8 ff 	l.movhi r6,0xf8ff
    b0c8:	84 76 00 00 	l.lwz r3,0x0(r22)
    b0cc:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    b0d0:	18 80 02 00 	l.movhi r4,0x200
    b0d4:	e0 63 30 03 	l.and r3,r3,r6
    b0d8:	e0 63 20 04 	l.or r3,r3,r4
    b0dc:	d4 16 18 00 	l.sw 0x0(r22),r3
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
    b0e0:	9c 60 00 01 	l.addi r3,r0,0x1
    b0e4:	07 ff e9 84 	l.jal 56f4 <uart_clkchangecb>
    b0e8:	84 8e 00 00 	l.lwz r4,0x0(r14)
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
    b0ec:	84 8e 00 00 	l.lwz r4,0x0(r14)
    b0f0:	07 ff ea 25 	l.jal 5984 <twi_clkchangecb>
    b0f4:	9c 60 00 01 	l.addi r3,r0,0x1
	time_mdelay(10);
    b0f8:	07 ff e8 05 	l.jal 510c <time_mdelay>
    b0fc:	9c 60 00 0a 	l.addi r3,r0,0xa

	/* set axi, psi, ahb3, apb1, apb2 clk to RTC32K */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(1), CCU_PSI_AHB1_AHB2_CFG_REG);
    b100:	a8 62 15 10 	l.ori r3,r2,0x1510
    b104:	18 a0 f8 ff 	l.movhi r5,0xf8ff
    b108:	84 83 00 00 	l.lwz r4,0x0(r3)
    b10c:	a8 a5 ff ff 	l.ori r5,r5,0xffff
    b110:	18 c0 01 00 	l.movhi r6,0x100
    b114:	e0 84 28 03 	l.and r4,r4,r5
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(1), CCU_AHB3_CFG_REG);
    b118:	18 a0 f8 ff 	l.movhi r5,0xf8ff
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
	time_mdelay(10);

	/* set axi, psi, ahb3, apb1, apb2 clk to RTC32K */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(1), CCU_PSI_AHB1_AHB2_CFG_REG);
    b11c:	e0 84 30 04 	l.or r4,r4,r6
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(1), CCU_AHB3_CFG_REG);
    b120:	a8 a5 ff ff 	l.ori r5,r5,0xffff
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
	time_mdelay(10);

	/* set axi, psi, ahb3, apb1, apb2 clk to RTC32K */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(1), CCU_PSI_AHB1_AHB2_CFG_REG);
    b124:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(1), CCU_AHB3_CFG_REG);
    b128:	a8 62 15 1c 	l.ori r3,r2,0x151c
    b12c:	84 83 00 00 	l.lwz r4,0x0(r3)
    b130:	e0 84 28 03 	l.and r4,r4,r5
    b134:	e0 84 30 04 	l.or r4,r4,r6
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(1), CCU_APB1_CFG_REG);
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(1), CCU_APB2_CFG_REG);
    b138:	18 c0 f8 ff 	l.movhi r6,0xf8ff
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
	time_mdelay(10);

	/* set axi, psi, ahb3, apb1, apb2 clk to RTC32K */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(1), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(1), CCU_AHB3_CFG_REG);
    b13c:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(1), CCU_APB1_CFG_REG);
    b140:	a8 62 15 20 	l.ori r3,r2,0x1520
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(1), CCU_APB2_CFG_REG);
    b144:	a8 c6 ff ff 	l.ori r6,r6,0xffff
	time_mdelay(10);

	/* set axi, psi, ahb3, apb1, apb2 clk to RTC32K */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(1), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(1), CCU_AHB3_CFG_REG);
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(1), CCU_APB1_CFG_REG);
    b148:	84 83 00 00 	l.lwz r4,0x0(r3)
    b14c:	e0 84 28 03 	l.and r4,r4,r5
    b150:	18 a0 01 00 	l.movhi r5,0x100
    b154:	e0 84 28 04 	l.or r4,r4,r5
    b158:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(1), CCU_APB2_CFG_REG);
    b15c:	a8 62 15 24 	l.ori r3,r2,0x1524
    b160:	84 83 00 00 	l.lwz r4,0x0(r3)
    b164:	e0 84 30 03 	l.and r4,r4,r6
    b168:	e0 84 28 04 	l.or r4,r4,r5
    b16c:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | CPUX_CLK_SRC_SEL(1), CCU_CPU_AXI_CFG_REG);
    b170:	84 74 00 00 	l.lwz r3,0x0(r20)
    b174:	e0 63 30 03 	l.and r3,r3,r6
    b178:	e0 63 28 04 	l.or r3,r3,r5

	/* disable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(0), CCU_PLL_C0_REG);
    b17c:	18 a0 7f ff 	l.movhi r5,0x7fff
	/* set axi, psi, ahb3, apb1, apb2 clk to RTC32K */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(1), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(1), CCU_AHB3_CFG_REG);
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(1), CCU_APB1_CFG_REG);
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(1), CCU_APB2_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | CPUX_CLK_SRC_SEL(1), CCU_CPU_AXI_CFG_REG);
    b180:	d4 14 18 00 	l.sw 0x0(r20),r3

	/* disable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(0), CCU_PLL_C0_REG);
    b184:	a8 a5 ff ff 	l.ori r5,r5,0xffff
    b188:	84 72 00 00 	l.lwz r3,0x0(r18)
    b18c:	e0 63 28 03 	l.and r3,r3,r5
    b190:	d4 12 18 00 	l.sw 0x0(r18),r3
	writel((readl(CCU_PLL_DDR0_REG) & (~DDR0_PLL_ENABLE_MASK)) | DDR0_PLL_ENABLE(0), CCU_PLL_DDR0_REG);
    b194:	a8 62 10 10 	l.ori r3,r2,0x1010
	writel((readl(CCU_PLL_PERIPH0_REG) & (~PERIPH0_PLL_ENABLE_MASK)) | PERIPH0_PLL_ENABLE(0), CCU_PLL_PERIPH0_REG);
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(0), CCU_PLL_PERIPH1_REG);
    b198:	a8 42 10 28 	l.ori r2,r2,0x1028
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(1), CCU_APB2_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | CPUX_CLK_SRC_SEL(1), CCU_CPU_AXI_CFG_REG);

	/* disable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(0), CCU_PLL_C0_REG);
	writel((readl(CCU_PLL_DDR0_REG) & (~DDR0_PLL_ENABLE_MASK)) | DDR0_PLL_ENABLE(0), CCU_PLL_DDR0_REG);
    b19c:	84 83 00 00 	l.lwz r4,0x0(r3)
    b1a0:	e0 84 28 03 	l.and r4,r4,r5
    b1a4:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel((readl(CCU_PLL_PERIPH0_REG) & (~PERIPH0_PLL_ENABLE_MASK)) | PERIPH0_PLL_ENABLE(0), CCU_PLL_PERIPH0_REG);
    b1a8:	84 70 00 00 	l.lwz r3,0x0(r16)
    b1ac:	e0 63 28 03 	l.and r3,r3,r5
    b1b0:	d4 10 18 00 	l.sw 0x0(r16),r3
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(0), CCU_PLL_PERIPH1_REG);
    b1b4:	84 62 00 00 	l.lwz r3,0x0(r2)
    b1b8:	e0 63 28 03 	l.and r3,r3,r5
    b1bc:	d4 02 18 00 	l.sw 0x0(r2),r3

	val = readl(RTC_XO_CTRL_REG) & (1 << 31);
    b1c0:	18 40 07 00 	l.movhi r2,0x700
    b1c4:	a8 42 01 60 	l.ori r2,r2,0x160
    b1c8:	84 42 00 00 	l.lwz r2,0x0(r2)
	if ((!standby_osc24m_on) || (!!val)) {
    b1cc:	bd 82 00 00 	l.sfltsi r2,0x0
    b1d0:	10 00 00 0a 	l.bf b1f8 <cpu_op+0x5d0>
    b1d4:	15 00 00 00 	l.nop 0x0
    b1d8:	18 40 00 01 	l.movhi r2,0x1
    b1dc:	a8 42 33 d8 	l.ori r2,r2,0x33d8
    b1e0:	84 42 00 00 	l.lwz r2,0x0(r2)
    b1e4:	e0 60 10 02 	l.sub r3,r0,r2
    b1e8:	e0 43 10 04 	l.or r2,r3,r2
    b1ec:	bd 82 00 00 	l.sfltsi r2,0x0
    b1f0:	10 00 00 04 	l.bf b200 <cpu_op+0x5d8>
    b1f4:	15 00 00 00 	l.nop 0x0
		ccu_24mhosc_disable();
    b1f8:	04 00 1b 4e 	l.jal 11f30 <ccu_24mhosc_disable>
    b1fc:	15 00 00 00 	l.nop 0x0

	cpucfg_cpu_suspend_late();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x5);

	clk_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x6);
    b200:	19 c0 f3 f3 	l.movhi r14,0xf3f3
static void dm_suspend(void)
{
	u32 type;

	/* vdd-cpu powerdown */
	for (type = 0; type < axp_power_max; type++) {
    b204:	1a 00 00 01 	l.movhi r16,0x1

	cpucfg_cpu_suspend_late();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x5);

	clk_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x6);
    b208:	a8 6e 30 06 	l.ori r3,r14,0x3006
    b20c:	04 00 1a 20 	l.jal 11a8c <save_state_flag>
    b210:	aa 10 33 cc 	l.ori r16,r16,0x33cc
	clk_restore();
}

static void system_suspend(void)
{
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(0), VDD_SYS_PWR_RST_REG);
    b214:	18 80 07 01 	l.movhi r4,0x701
    b218:	9c c0 ff fe 	l.addi r6,r0,0xfffffffe
    b21c:	a8 44 02 60 	l.ori r2,r4,0x260

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(0), ANA_PWR_RST_REG);
    b220:	9c a0 ff fd 	l.addi r5,r0,0xfffffffd
	clk_restore();
}

static void system_suspend(void)
{
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(0), VDD_SYS_PWR_RST_REG);
    b224:	84 62 00 00 	l.lwz r3,0x0(r2)
    b228:	e0 63 30 03 	l.and r3,r3,r6
    b22c:	d4 02 18 00 	l.sw 0x0(r2),r3

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(0), ANA_PWR_RST_REG);
    b230:	a8 44 02 54 	l.ori r2,r4,0x254
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(1), ANA_PWR_RST_REG);

	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
    b234:	a8 84 02 50 	l.ori r4,r4,0x250

static void system_suspend(void)
{
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(0), VDD_SYS_PWR_RST_REG);

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(0), ANA_PWR_RST_REG);
    b238:	84 62 00 00 	l.lwz r3,0x0(r2)
    b23c:	e0 63 28 03 	l.and r3,r3,r5
    b240:	d4 02 18 00 	l.sw 0x0(r2),r3
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(1), ANA_PWR_RST_REG);
    b244:	84 62 00 00 	l.lwz r3,0x0(r2)
    b248:	a8 63 00 01 	l.ori r3,r3,0x1
    b24c:	d4 02 18 00 	l.sw 0x0(r2),r3

	clk_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x6);

	system_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x7);
    b250:	a8 6e 30 07 	l.ori r3,r14,0x3007
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(0), VDD_SYS_PWR_RST_REG);

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(0), ANA_PWR_RST_REG);
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(1), ANA_PWR_RST_REG);

	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
    b254:	84 44 00 00 	l.lwz r2,0x0(r4)
{
	u32 type;

	/* vdd-cpu powerdown */
	for (type = 0; type < axp_power_max; type++) {
		if ((standby_vdd_cpu >> type) & 0x1)
    b258:	19 c0 00 01 	l.movhi r14,0x1
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(0), VDD_SYS_PWR_RST_REG);

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(0), ANA_PWR_RST_REG);
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(1), ANA_PWR_RST_REG);

	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
    b25c:	a8 42 00 04 	l.ori r2,r2,0x4
{
	u32 type;

	/* vdd-cpu powerdown */
	for (type = 0; type < axp_power_max; type++) {
		if ((standby_vdd_cpu >> type) & 0x1)
    b260:	a9 ce 34 68 	l.ori r14,r14,0x3468
	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(0), VDD_SYS_PWR_RST_REG);

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(0), ANA_PWR_RST_REG);
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(1), ANA_PWR_RST_REG);

	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
    b264:	d4 04 10 00 	l.sw 0x0(r4),r2

	clk_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x6);

	system_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x7);
    b268:	04 00 1a 09 	l.jal 11a8c <save_state_flag>
    b26c:	9c 40 00 00 	l.addi r2,r0,0x0
static void dm_suspend(void)
{
	u32 type;

	/* vdd-cpu powerdown */
	for (type = 0; type < axp_power_max; type++) {
    b270:	00 00 00 0c 	l.j b2a0 <cpu_op+0x678>
    b274:	84 70 00 00 	l.lwz r3,0x0(r16)
		if ((standby_vdd_cpu >> type) & 0x1)
    b278:	84 6e 00 00 	l.lwz r3,0x0(r14)
    b27c:	e0 63 10 48 	l.srl r3,r3,r2
    b280:	a4 63 00 01 	l.andi r3,r3,0x1
    b284:	bc 03 00 00 	l.sfeqi r3,0x0
    b288:	10 00 00 04 	l.bf b298 <cpu_op+0x670>
    b28c:	a8 62 00 00 	l.ori r3,r2,0x0
			pmu_set_voltage_state(type, POWER_VOL_OFF);
    b290:	07 ff ef d3 	l.jal 71dc <pmu_set_voltage_state>
    b294:	9c 80 00 00 	l.addi r4,r0,0x0
static void dm_suspend(void)
{
	u32 type;

	/* vdd-cpu powerdown */
	for (type = 0; type < axp_power_max; type++) {
    b298:	9c 42 00 01 	l.addi r2,r2,0x1
    b29c:	84 70 00 00 	l.lwz r3,0x0(r16)
    b2a0:	e4 82 18 00 	l.sfltu r2,r3
    b2a4:	13 ff ff f5 	l.bf b278 <cpu_op+0x650>
    b2a8:	15 00 00 00 	l.nop 0x0
		if ((standby_vdd_cpu >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vdd-sys powerdown */
	for (type = 0; type < axp_power_max; type++) {
    b2ac:	1a 00 00 01 	l.movhi r16,0x1
		if ((standby_vdd_sys >> type) & 0x1)
    b2b0:	19 c0 00 01 	l.movhi r14,0x1
static void dm_suspend(void)
{
	u32 type;

	/* vdd-cpu powerdown */
	for (type = 0; type < axp_power_max; type++) {
    b2b4:	9c 40 00 00 	l.addi r2,r0,0x0
		if ((standby_vdd_cpu >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vdd-sys powerdown */
	for (type = 0; type < axp_power_max; type++) {
    b2b8:	aa 10 33 cc 	l.ori r16,r16,0x33cc
		if ((standby_vdd_sys >> type) & 0x1)
    b2bc:	00 00 00 0b 	l.j b2e8 <cpu_op+0x6c0>
    b2c0:	a9 ce 34 6c 	l.ori r14,r14,0x346c
    b2c4:	84 6e 00 00 	l.lwz r3,0x0(r14)
    b2c8:	e0 63 10 48 	l.srl r3,r3,r2
    b2cc:	a4 63 00 01 	l.andi r3,r3,0x1
    b2d0:	bc 03 00 00 	l.sfeqi r3,0x0
    b2d4:	10 00 00 04 	l.bf b2e4 <cpu_op+0x6bc>
    b2d8:	a8 62 00 00 	l.ori r3,r2,0x0
			pmu_set_voltage_state(type, POWER_VOL_OFF);
    b2dc:	07 ff ef c0 	l.jal 71dc <pmu_set_voltage_state>
    b2e0:	9c 80 00 00 	l.addi r4,r0,0x0
		if ((standby_vdd_cpu >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vdd-sys powerdown */
	for (type = 0; type < axp_power_max; type++) {
    b2e4:	9c 42 00 01 	l.addi r2,r2,0x1
    b2e8:	84 70 00 00 	l.lwz r3,0x0(r16)
    b2ec:	e4 82 18 00 	l.sfltu r2,r3
    b2f0:	13 ff ff f5 	l.bf b2c4 <cpu_op+0x69c>
    b2f4:	15 00 00 00 	l.nop 0x0
		if ((standby_vdd_sys >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vcc-pll powerdown */
	for (type = 0; type < axp_power_max; type++) {
    b2f8:	1a 00 00 01 	l.movhi r16,0x1
		if ((standby_vcc_pll >> type) & 0x1)
    b2fc:	19 c0 00 01 	l.movhi r14,0x1
		if ((standby_vdd_cpu >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vdd-sys powerdown */
	for (type = 0; type < axp_power_max; type++) {
    b300:	9c 40 00 00 	l.addi r2,r0,0x0
		if ((standby_vdd_sys >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vcc-pll powerdown */
	for (type = 0; type < axp_power_max; type++) {
    b304:	aa 10 33 cc 	l.ori r16,r16,0x33cc
		if ((standby_vcc_pll >> type) & 0x1)
    b308:	00 00 00 0b 	l.j b334 <cpu_op+0x70c>
    b30c:	a9 ce 34 70 	l.ori r14,r14,0x3470
    b310:	84 6e 00 00 	l.lwz r3,0x0(r14)
    b314:	e0 63 10 48 	l.srl r3,r3,r2
    b318:	a4 63 00 01 	l.andi r3,r3,0x1
    b31c:	bc 03 00 00 	l.sfeqi r3,0x0
    b320:	10 00 00 04 	l.bf b330 <cpu_op+0x708>
    b324:	a8 62 00 00 	l.ori r3,r2,0x0
			pmu_set_voltage_state(type, POWER_VOL_OFF);
    b328:	07 ff ef ad 	l.jal 71dc <pmu_set_voltage_state>
    b32c:	9c 80 00 00 	l.addi r4,r0,0x0
		if ((standby_vdd_sys >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_OFF);
	}

	/* vcc-pll powerdown */
	for (type = 0; type < axp_power_max; type++) {
    b330:	9c 42 00 01 	l.addi r2,r2,0x1
    b334:	84 70 00 00 	l.lwz r3,0x0(r16)
    b338:	e4 82 18 00 	l.sfltu r2,r3
    b33c:	13 ff ff f5 	l.bf b310 <cpu_op+0x6e8>
    b340:	15 00 00 00 	l.nop 0x0

	system_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x7);

	dm_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x8);
    b344:	18 40 f3 f3 	l.movhi r2,0xf3f3
		/*
		 * maybe add user defined task process here
		 */


		if (wakeup_source != NO_WAKESOURCE) {
    b348:	19 c0 00 01 	l.movhi r14,0x1

	system_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x7);

	dm_suspend();
	save_state_flag(REC_ESTANDBY | REC_ENTER_INIT | 0x8);
    b34c:	a8 62 30 08 	l.ori r3,r2,0x3008
    b350:	04 00 19 cf 	l.jal 11a8c <save_state_flag>
    b354:	a9 ce 37 34 	l.ori r14,r14,0x3734
	 * initialize enter super-standby porcess
	 *
	 * --------------------------------------------------------------------------
	 */
	save_state_flag(REC_ESTANDBY | REC_BEFORE_INIT);
	result = standby_process_init(pmessage);
    b358:	18 60 00 01 	l.movhi r3,0x1
    b35c:	9c c0 00 00 	l.addi r6,r0,0x0
    b360:	a8 63 34 64 	l.ori r3,r3,0x3464
    b364:	d4 03 30 00 	l.sw 0x0(r3),r6
	save_state_flag(REC_ESTANDBY | REC_AFTER_INIT);
    b368:	04 00 19 c9 	l.jal 11a8c <save_state_flag>
    b36c:	a8 62 40 00 	l.ori r3,r2,0x4000
	 *
	 * wait valid wakeup source porcess
	 *
	 * --------------------------------------------------------------------------
	 */
	LOG("wait wakeup\n");
    b370:	18 80 00 01 	l.movhi r4,0x1
    b374:	9c 60 00 02 	l.addi r3,r0,0x2
    b378:	07 ff fb 10 	l.jal 9fb8 <debugger_printf>
    b37c:	a8 84 2c 1b 	l.ori r4,r4,0x2c1b
	save_state_flag(REC_ESTANDBY | REC_WAIT_WAKEUP);
    b380:	a8 62 50 00 	l.ori r3,r2,0x5000
    b384:	04 00 19 c2 	l.jal 11a8c <save_state_flag>
    b388:	18 40 07 01 	l.movhi r2,0x701
	return 0;
}

static void wait_wakeup(void)
{
	wakeup_timer_start();
    b38c:	07 ff fd 87 	l.jal a9a8 <wakeup_timer_start>
    b390:	a8 42 03 3c 	l.ori r2,r2,0x33c
		/*
		 * maybe add user defined task process here
		 */


		if (wakeup_source != NO_WAKESOURCE) {
    b394:	84 6e 00 00 	l.lwz r3,0x0(r14)
    b398:	bc 03 00 00 	l.sfeqi r3,0x0
    b39c:	10 00 01 dc 	l.bf bb0c <cpu_op+0xee4>
    b3a0:	18 80 00 01 	l.movhi r4,0x1
			LOG("wakeup: %d\n", wakeup_source);
    b3a4:	18 40 00 01 	l.movhi r2,0x1
    b3a8:	a8 42 37 34 	l.ori r2,r2,0x3734
    b3ac:	a8 84 2c 28 	l.ori r4,r4,0x2c28
    b3b0:	84 42 00 00 	l.lwz r2,0x0(r2)
    b3b4:	9c 60 00 02 	l.addi r3,r0,0x2
    b3b8:	07 ff fb 00 	l.jal 9fb8 <debugger_printf>
    b3bc:	d4 01 10 00 	l.sw 0x0(r1),r2

		writel(readl(LP_CTRL_REG) | ((1 << 24) | (1 << 25) | (1 << 26) | (1 << 27)), LP_CTRL_REG);
		cpu_enter_doze();
		writel(readl(LP_CTRL_REG) & (~((1 << 24) | (1 << 25) | (1 << 26) | (1 << 27))), LP_CTRL_REG);
	}
	wakeup_timer_stop();
    b3c0:	07 ff fd 89 	l.jal a9e4 <wakeup_timer_stop>
    b3c4:	18 40 f3 f3 	l.movhi r2,0xf3f3
	 *
	 * exit super-standby wakeup porcess
	 *
	 * --------------------------------------------------------------------------
	 */
	save_state_flag(REC_ESTANDBY | REC_BEFORE_EXIT);
    b3c8:	a8 62 60 00 	l.ori r3,r2,0x6000
    b3cc:	04 00 19 b0 	l.jal 11a8c <save_state_flag>
    b3d0:	1a 00 00 01 	l.movhi r16,0x1
	return OK;
}

static s32 standby_process_exit(struct message *pmessage)
{
	u32 resume_entry = pmessage->paras[1];
    b3d4:	84 78 00 1c 	l.lwz r3,0x1c(r24)
{
	u32 type;

	/* vcc-pll powerup */
	for (type = 0; type < axp_power_max; type++) {
		if ((standby_vcc_pll >> type) & 0x1)
    b3d8:	19 c0 00 01 	l.movhi r14,0x1
	return OK;
}

static s32 standby_process_exit(struct message *pmessage)
{
	u32 resume_entry = pmessage->paras[1];
    b3dc:	86 43 00 04 	l.lwz r18,0x4(r3)

	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x1);
    b3e0:	a8 62 70 01 	l.ori r3,r2,0x7001
    b3e4:	04 00 19 aa 	l.jal 11a8c <save_state_flag>
    b3e8:	aa 10 33 cc 	l.ori r16,r16,0x33cc
static void dm_resume(void)
{
	u32 type;

	/* vcc-pll powerup */
	for (type = 0; type < axp_power_max; type++) {
    b3ec:	9c 40 00 00 	l.addi r2,r0,0x0
		if ((standby_vcc_pll >> type) & 0x1)
    b3f0:	00 00 00 0b 	l.j b41c <cpu_op+0x7f4>
    b3f4:	a9 ce 34 70 	l.ori r14,r14,0x3470
    b3f8:	84 6e 00 00 	l.lwz r3,0x0(r14)
    b3fc:	e0 63 10 48 	l.srl r3,r3,r2
    b400:	a4 63 00 01 	l.andi r3,r3,0x1
    b404:	bc 03 00 00 	l.sfeqi r3,0x0
    b408:	10 00 00 04 	l.bf b418 <cpu_op+0x7f0>
    b40c:	a8 62 00 00 	l.ori r3,r2,0x0
			pmu_set_voltage_state(type, POWER_VOL_ON);
    b410:	07 ff ef 73 	l.jal 71dc <pmu_set_voltage_state>
    b414:	9c 80 00 01 	l.addi r4,r0,0x1
static void dm_resume(void)
{
	u32 type;

	/* vcc-pll powerup */
	for (type = 0; type < axp_power_max; type++) {
    b418:	9c 42 00 01 	l.addi r2,r2,0x1
    b41c:	84 70 00 00 	l.lwz r3,0x0(r16)
    b420:	e4 82 18 00 	l.sfltu r2,r3
    b424:	13 ff ff f5 	l.bf b3f8 <cpu_op+0x7d0>
    b428:	15 00 00 00 	l.nop 0x0
		if ((standby_vcc_pll >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-sys powerup */
	for (type = 0; type < axp_power_max; type++) {
    b42c:	1a 00 00 01 	l.movhi r16,0x1
		if ((standby_vdd_sys >> type) & 0x1)
    b430:	19 c0 00 01 	l.movhi r14,0x1
static void dm_resume(void)
{
	u32 type;

	/* vcc-pll powerup */
	for (type = 0; type < axp_power_max; type++) {
    b434:	9c 40 00 00 	l.addi r2,r0,0x0
		if ((standby_vcc_pll >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-sys powerup */
	for (type = 0; type < axp_power_max; type++) {
    b438:	aa 10 33 cc 	l.ori r16,r16,0x33cc
		if ((standby_vdd_sys >> type) & 0x1)
    b43c:	00 00 00 0b 	l.j b468 <cpu_op+0x840>
    b440:	a9 ce 34 6c 	l.ori r14,r14,0x346c
    b444:	84 6e 00 00 	l.lwz r3,0x0(r14)
    b448:	e0 63 10 48 	l.srl r3,r3,r2
    b44c:	a4 63 00 01 	l.andi r3,r3,0x1
    b450:	bc 03 00 00 	l.sfeqi r3,0x0
    b454:	10 00 00 04 	l.bf b464 <cpu_op+0x83c>
    b458:	a8 62 00 00 	l.ori r3,r2,0x0
			pmu_set_voltage_state(type, POWER_VOL_ON);
    b45c:	07 ff ef 60 	l.jal 71dc <pmu_set_voltage_state>
    b460:	9c 80 00 01 	l.addi r4,r0,0x1
		if ((standby_vcc_pll >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-sys powerup */
	for (type = 0; type < axp_power_max; type++) {
    b464:	9c 42 00 01 	l.addi r2,r2,0x1
    b468:	84 70 00 00 	l.lwz r3,0x0(r16)
    b46c:	e4 82 18 00 	l.sfltu r2,r3
    b470:	13 ff ff f5 	l.bf b444 <cpu_op+0x81c>
    b474:	15 00 00 00 	l.nop 0x0
		if ((standby_vdd_sys >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-cpu powerup */
	for (type = 0; type < axp_power_max; type++) {
    b478:	1a 00 00 01 	l.movhi r16,0x1
		if ((standby_vdd_cpu >> type) & 0x1)
    b47c:	19 c0 00 01 	l.movhi r14,0x1
		if ((standby_vcc_pll >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-sys powerup */
	for (type = 0; type < axp_power_max; type++) {
    b480:	9c 40 00 00 	l.addi r2,r0,0x0
		if ((standby_vdd_sys >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-cpu powerup */
	for (type = 0; type < axp_power_max; type++) {
    b484:	aa 10 33 cc 	l.ori r16,r16,0x33cc
		if ((standby_vdd_cpu >> type) & 0x1)
    b488:	00 00 00 0b 	l.j b4b4 <cpu_op+0x88c>
    b48c:	a9 ce 34 68 	l.ori r14,r14,0x3468
    b490:	84 6e 00 00 	l.lwz r3,0x0(r14)
    b494:	e0 63 10 48 	l.srl r3,r3,r2
    b498:	a4 63 00 01 	l.andi r3,r3,0x1
    b49c:	bc 03 00 00 	l.sfeqi r3,0x0
    b4a0:	10 00 00 04 	l.bf b4b0 <cpu_op+0x888>
    b4a4:	a8 62 00 00 	l.ori r3,r2,0x0
			pmu_set_voltage_state(type, POWER_VOL_ON);
    b4a8:	07 ff ef 4d 	l.jal 71dc <pmu_set_voltage_state>
    b4ac:	9c 80 00 01 	l.addi r4,r0,0x1
		if ((standby_vdd_sys >> type) & 0x1)
			pmu_set_voltage_state(type, POWER_VOL_ON);
	}

	/* vdd-cpu powerup */
	for (type = 0; type < axp_power_max; type++) {
    b4b0:	9c 42 00 01 	l.addi r2,r2,0x1
    b4b4:	84 70 00 00 	l.lwz r3,0x0(r16)
    b4b8:	e4 82 18 00 	l.sfltu r2,r3
    b4bc:	13 ff ff f5 	l.bf b490 <cpu_op+0x868>
    b4c0:	18 60 f3 f3 	l.movhi r3,0xf3f3

static void clk_resume_early(void)
{
	u32 val;

	val = readl(RTC_XO_CTRL_REG) & (1 << 31);
    b4c4:	18 40 07 00 	l.movhi r2,0x700
	u32 resume_entry = pmessage->paras[1];

	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x1);

	dm_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x2);
    b4c8:	a8 63 70 02 	l.ori r3,r3,0x7002
    b4cc:	04 00 19 70 	l.jal 11a8c <save_state_flag>
    b4d0:	a8 42 01 60 	l.ori r2,r2,0x160

static void clk_resume_early(void)
{
	u32 val;

	val = readl(RTC_XO_CTRL_REG) & (1 << 31);
    b4d4:	84 42 00 00 	l.lwz r2,0x0(r2)
	if ((!standby_osc24m_on) || (!!val)) {
    b4d8:	bd 82 00 00 	l.sfltsi r2,0x0
    b4dc:	10 00 00 09 	l.bf b500 <cpu_op+0x8d8>
    b4e0:	18 40 00 01 	l.movhi r2,0x1
    b4e4:	a8 42 33 d8 	l.ori r2,r2,0x33d8
    b4e8:	84 42 00 00 	l.lwz r2,0x0(r2)
    b4ec:	e0 60 10 02 	l.sub r3,r0,r2
    b4f0:	e0 43 10 04 	l.or r2,r3,r2
    b4f4:	bd 82 00 00 	l.sfltsi r2,0x0
    b4f8:	10 00 00 06 	l.bf b510 <cpu_op+0x8e8>
    b4fc:	18 40 07 01 	l.movhi r2,0x701
		ccu_24mhosc_enable();
    b500:	04 00 1a b5 	l.jal 11fd4 <ccu_24mhosc_enable>
    b504:	18 40 07 01 	l.movhi r2,0x701
		time_mdelay(1);
    b508:	07 ff e7 01 	l.jal 510c <time_mdelay>
    b50c:	9c 60 00 01 	l.addi r3,r0,0x1
	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
}

static void system_resume(void)
{
	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(0), VDD_SYS_PWROFF_GATING_REG);
    b510:	9c a0 ff fb 	l.addi r5,r0,0xfffffffb
    b514:	a8 62 02 50 	l.ori r3,r2,0x250

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(1), ANA_PWR_RST_REG);
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(0), ANA_PWR_RST_REG);
    b518:	9c c0 ff fe 	l.addi r6,r0,0xfffffffe
	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
}

static void system_resume(void)
{
	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(0), VDD_SYS_PWROFF_GATING_REG);
    b51c:	84 83 00 00 	l.lwz r4,0x0(r3)

	/*
	 * set apbs2 clk to OSC24M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, CCU_HOSC_FREQ);
    b520:	19 c0 01 6e 	l.movhi r14,0x16e
	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(1), VDD_SYS_PWROFF_GATING_REG);
}

static void system_resume(void)
{
	writel((readl(VDD_SYS_PWROFF_GATING_REG) & (~VDD_CPUS_GATING_MASK)) | VDD_CPUS_GATING(0), VDD_SYS_PWROFF_GATING_REG);
    b524:	e0 84 28 03 	l.and r4,r4,r5
    b528:	d4 03 20 00 	l.sw 0x0(r3),r4

	writel((readl(ANA_PWR_RST_REG) & (~RES_VDD_ON_CTRL_MASK)) | RES_VDD_ON_CTRL(1), ANA_PWR_RST_REG);
    b52c:	a8 82 02 54 	l.ori r4,r2,0x254
    b530:	84 64 00 00 	l.lwz r3,0x0(r4)
    b534:	a8 63 00 02 	l.ori r3,r3,0x2
    b538:	d4 04 18 00 	l.sw 0x0(r4),r3
	writel((readl(ANA_PWR_RST_REG) & (~AVCC_A_GATING_MASK)) | AVCC_A_GATING(0), ANA_PWR_RST_REG);
    b53c:	84 64 00 00 	l.lwz r3,0x0(r4)
    b540:	e0 63 30 03 	l.and r3,r3,r6
    b544:	d4 04 18 00 	l.sw 0x0(r4),r3

	writel((readl(VDD_SYS_PWR_RST_REG) & (~VDD_SYS_MODULE_RST_MASK)) | VDD_SYS_MODULE_RST(1), VDD_SYS_PWR_RST_REG);
    b548:	a8 62 02 60 	l.ori r3,r2,0x260
    b54c:	84 83 00 00 	l.lwz r4,0x0(r3)
    b550:	a8 84 00 01 	l.ori r4,r4,0x1
    b554:	d4 03 20 00 	l.sw 0x0(r3),r4
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x2);

	clk_resume_early();

	system_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x3);
    b558:	18 60 f3 f3 	l.movhi r3,0xf3f3
    b55c:	04 00 19 4c 	l.jal 11a8c <save_state_flag>
    b560:	a8 63 70 03 	l.ori r3,r3,0x7003

	/*
	 * set apbs2 clk to OSC24M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, CCU_HOSC_FREQ);
    b564:	9c 60 00 00 	l.addi r3,r0,0x0
    b568:	07 ff e9 07 	l.jal 5984 <twi_clkchangecb>
    b56c:	a8 8e 36 00 	l.ori r4,r14,0x3600
	uart_clkchangecb(CCU_CLK_CLKCHG_REQ, CCU_HOSC_FREQ);
    b570:	9c 60 00 00 	l.addi r3,r0,0x0
    b574:	07 ff e8 60 	l.jal 56f4 <uart_clkchangecb>
    b578:	a8 8e 36 00 	l.ori r4,r14,0x3600
	writel((readl(APBS2_CFG_REG) & (~APBS2_CLK_SRC_SEL_MASK)) | APBS2_CLK_SRC_SEL(0), APBS2_CFG_REG);
    b57c:	a8 62 00 10 	l.ori r3,r2,0x10
    b580:	18 a0 f8 ff 	l.movhi r5,0xf8ff
    b584:	84 83 00 00 	l.lwz r4,0x0(r3)
    b588:	a8 a5 ff ff 	l.ori r5,r5,0xffff
    b58c:	e0 84 28 03 	l.and r4,r4,r5
    b590:	d4 03 20 00 	l.sw 0x0(r3),r4
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, CCU_HOSC_FREQ);
    b594:	9c 60 00 01 	l.addi r3,r0,0x1
    b598:	07 ff e8 57 	l.jal 56f4 <uart_clkchangecb>
    b59c:	a8 8e 36 00 	l.ori r4,r14,0x3600
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, CCU_HOSC_FREQ);
    b5a0:	9c 60 00 01 	l.addi r3,r0,0x1
    b5a4:	07 ff e8 f8 	l.jal 5984 <twi_clkchangecb>
    b5a8:	a8 8e 36 00 	l.ori r4,r14,0x3600

	/* set cpus clk to OSC24M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(0), CPUS_CFG_REG);
    b5ac:	18 c0 f8 ff 	l.movhi r6,0xf8ff
    b5b0:	84 62 00 00 	l.lwz r3,0x0(r2)
    b5b4:	a8 c6 ff ff 	l.ori r6,r6,0xffff

	/* enable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(1), CCU_PLL_C0_REG);
    b5b8:	18 a0 80 00 	l.movhi r5,0x8000
	writel((readl(APBS2_CFG_REG) & (~APBS2_CLK_SRC_SEL_MASK)) | APBS2_CLK_SRC_SEL(0), APBS2_CFG_REG);
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, CCU_HOSC_FREQ);
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, CCU_HOSC_FREQ);

	/* set cpus clk to OSC24M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(0), CPUS_CFG_REG);
    b5bc:	e0 63 30 03 	l.and r3,r3,r6

	/* enable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(1), CCU_PLL_C0_REG);
	writel((readl(CCU_PLL_DDR0_REG) & (~DDR0_PLL_ENABLE_MASK)) | DDR0_PLL_ENABLE(1), CCU_PLL_DDR0_REG);
    b5c0:	18 c0 80 00 	l.movhi r6,0x8000
	writel((readl(APBS2_CFG_REG) & (~APBS2_CLK_SRC_SEL_MASK)) | APBS2_CLK_SRC_SEL(0), APBS2_CFG_REG);
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, CCU_HOSC_FREQ);
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, CCU_HOSC_FREQ);

	/* set cpus clk to OSC24M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(0), CPUS_CFG_REG);
    b5c4:	d4 02 18 00 	l.sw 0x0(r2),r3

	/* enable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(1), CCU_PLL_C0_REG);
    b5c8:	18 40 03 00 	l.movhi r2,0x300
    b5cc:	a8 82 10 00 	l.ori r4,r2,0x1000
    b5d0:	84 64 00 00 	l.lwz r3,0x0(r4)
    b5d4:	e0 63 28 04 	l.or r3,r3,r5
    b5d8:	d4 04 18 00 	l.sw 0x0(r4),r3
	writel((readl(CCU_PLL_DDR0_REG) & (~DDR0_PLL_ENABLE_MASK)) | DDR0_PLL_ENABLE(1), CCU_PLL_DDR0_REG);
    b5dc:	a8 62 10 10 	l.ori r3,r2,0x1010
    b5e0:	84 a3 00 00 	l.lwz r5,0x0(r3)
    b5e4:	e0 a5 30 04 	l.or r5,r5,r6
    b5e8:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((readl(CCU_PLL_PERIPH0_REG) & (~PERIPH0_PLL_ENABLE_MASK)) | PERIPH0_PLL_ENABLE(1), CCU_PLL_PERIPH0_REG);
    b5ec:	a8 62 10 20 	l.ori r3,r2,0x1020
    b5f0:	84 a3 00 00 	l.lwz r5,0x0(r3)
    b5f4:	e0 a5 30 04 	l.or r5,r5,r6
    b5f8:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(1), CCU_PLL_PERIPH1_REG);
    b5fc:	a8 62 10 28 	l.ori r3,r2,0x1028
    b600:	84 a3 00 00 	l.lwz r5,0x0(r3)
    b604:	e0 a5 30 04 	l.or r5,r5,r6

	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
    b608:	18 c0 f8 ff 	l.movhi r6,0xf8ff

	/* enable PLLs */
	writel((readl(CCU_PLL_C0_REG) & (~CPUX_PLL_ENABLE_MASK)) | CPUX_PLL_ENABLE(1), CCU_PLL_C0_REG);
	writel((readl(CCU_PLL_DDR0_REG) & (~DDR0_PLL_ENABLE_MASK)) | DDR0_PLL_ENABLE(1), CCU_PLL_DDR0_REG);
	writel((readl(CCU_PLL_PERIPH0_REG) & (~PERIPH0_PLL_ENABLE_MASK)) | PERIPH0_PLL_ENABLE(1), CCU_PLL_PERIPH0_REG);
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(1), CCU_PLL_PERIPH1_REG);
    b60c:	d4 03 28 00 	l.sw 0x0(r3),r5

	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
    b610:	a8 62 15 10 	l.ori r3,r2,0x1510
    b614:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    b618:	84 a3 00 00 	l.lwz r5,0x0(r3)
    b61c:	e0 a5 30 03 	l.and r5,r5,r6
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(0), CCU_AHB3_CFG_REG);
    b620:	18 c0 f8 ff 	l.movhi r6,0xf8ff
	writel((readl(CCU_PLL_DDR0_REG) & (~DDR0_PLL_ENABLE_MASK)) | DDR0_PLL_ENABLE(1), CCU_PLL_DDR0_REG);
	writel((readl(CCU_PLL_PERIPH0_REG) & (~PERIPH0_PLL_ENABLE_MASK)) | PERIPH0_PLL_ENABLE(1), CCU_PLL_PERIPH0_REG);
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(1), CCU_PLL_PERIPH1_REG);

	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
    b624:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(0), CCU_AHB3_CFG_REG);
    b628:	a8 62 15 1c 	l.ori r3,r2,0x151c
    b62c:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    b630:	84 a3 00 00 	l.lwz r5,0x0(r3)
    b634:	e0 a5 30 03 	l.and r5,r5,r6
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(0), CCU_APB1_CFG_REG);
    b638:	18 c0 f8 ff 	l.movhi r6,0xf8ff
	writel((readl(CCU_PLL_PERIPH0_REG) & (~PERIPH0_PLL_ENABLE_MASK)) | PERIPH0_PLL_ENABLE(1), CCU_PLL_PERIPH0_REG);
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(1), CCU_PLL_PERIPH1_REG);

	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(0), CCU_AHB3_CFG_REG);
    b63c:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(0), CCU_APB1_CFG_REG);
    b640:	a8 62 15 20 	l.ori r3,r2,0x1520
    b644:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    b648:	84 a3 00 00 	l.lwz r5,0x0(r3)
    b64c:	e0 a5 30 03 	l.and r5,r5,r6
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(0), CCU_APB2_CFG_REG);
    b650:	18 c0 f8 ff 	l.movhi r6,0xf8ff
	writel((readl(CCU_PLL_PERIPH1_REG) & (~PERIPH1_PLL_ENABLE_MASK)) | PERIPH1_PLL_ENABLE(1), CCU_PLL_PERIPH1_REG);

	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(0), CCU_AHB3_CFG_REG);
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(0), CCU_APB1_CFG_REG);
    b654:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(0), CCU_APB2_CFG_REG);
    b658:	a8 62 15 24 	l.ori r3,r2,0x1524
    b65c:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    b660:	84 a3 00 00 	l.lwz r5,0x0(r3)
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | CPUX_CLK_SRC_SEL(0), CCU_CPU_AXI_CFG_REG);
    b664:	a8 42 15 00 	l.ori r2,r2,0x1500

	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(0), CCU_AHB3_CFG_REG);
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(0), CCU_APB1_CFG_REG);
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(0), CCU_APB2_CFG_REG);
    b668:	e0 a5 30 03 	l.and r5,r5,r6
    b66c:	d4 03 28 00 	l.sw 0x0(r3),r5
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | CPUX_CLK_SRC_SEL(0), CCU_CPU_AXI_CFG_REG);
    b670:	84 62 00 00 	l.lwz r3,0x0(r2)
    b674:	e0 63 30 03 	l.and r3,r3,r6
static void clk_restore(void)
{
	/* recovery CCU_PLL_C0_REG */
	writel(pll_cpux_ctrl_reg_bak, CCU_PLL_C0_REG);

	writel((readl(CCU_PLL_C0_REG) & (~C0_PLL_LOCK_ENABLE_MASK)) | (C0_PLL_LOCK_ENABLE(0)),
    b678:	18 c0 df ff 	l.movhi r6,0xdfff
	/* set axi, psi, ahb3, apb1, apb2 clk to OSC24M */
	writel((readl(CCU_PSI_AHB1_AHB2_CFG_REG) & (~PSI_CLK_SRC_SEL_MASK)) | PSI_CLK_SRC_SEL(0), CCU_PSI_AHB1_AHB2_CFG_REG);
	writel((readl(CCU_AHB3_CFG_REG) & (~AHB3_CLK_SRC_SEL_MASK)) | AHB3_CLK_SRC_SEL(0), CCU_AHB3_CFG_REG);
	writel((readl(CCU_APB1_CFG_REG) & (~APB1_CLK_SRC_SEL_MASK)) | APB1_CLK_SRC_SEL(0), CCU_APB1_CFG_REG);
	writel((readl(CCU_APB2_CFG_REG) & (~APB2_CLK_SRC_SEL_MASK)) | APB2_CLK_SRC_SEL(0), CCU_APB2_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | CPUX_CLK_SRC_SEL(0), CCU_CPU_AXI_CFG_REG);
    b67c:	d4 02 18 00 	l.sw 0x0(r2),r3
}

static void clk_restore(void)
{
	/* recovery CCU_PLL_C0_REG */
	writel(pll_cpux_ctrl_reg_bak, CCU_PLL_C0_REG);
    b680:	18 40 00 01 	l.movhi r2,0x1

	writel((readl(CCU_PLL_C0_REG) & (~C0_PLL_LOCK_ENABLE_MASK)) | (C0_PLL_LOCK_ENABLE(0)),
    b684:	a8 c6 ff ff 	l.ori r6,r6,0xffff
}

static void clk_restore(void)
{
	/* recovery CCU_PLL_C0_REG */
	writel(pll_cpux_ctrl_reg_bak, CCU_PLL_C0_REG);
    b688:	a8 42 34 e4 	l.ori r2,r2,0x34e4

	writel((readl(CCU_PLL_C0_REG) & (~C0_PLL_LOCK_ENABLE_MASK)) | (C0_PLL_LOCK_ENABLE(0)),
			CCU_PLL_C0_REG);
	writel((readl(CCU_PLL_C0_REG) & (~C0_PLL_LOCK_ENABLE_MASK)) | (C0_PLL_LOCK_ENABLE(1)),
    b68c:	18 60 20 00 	l.movhi r3,0x2000
}

static void clk_restore(void)
{
	/* recovery CCU_PLL_C0_REG */
	writel(pll_cpux_ctrl_reg_bak, CCU_PLL_C0_REG);
    b690:	84 42 00 00 	l.lwz r2,0x0(r2)
    b694:	d4 04 10 00 	l.sw 0x0(r4),r2

	writel((readl(CCU_PLL_C0_REG) & (~C0_PLL_LOCK_ENABLE_MASK)) | (C0_PLL_LOCK_ENABLE(0)),
    b698:	84 44 00 00 	l.lwz r2,0x0(r4)
    b69c:	e0 42 30 03 	l.and r2,r2,r6
    b6a0:	d4 04 10 00 	l.sw 0x0(r4),r2
			CCU_PLL_C0_REG);
	writel((readl(CCU_PLL_C0_REG) & (~C0_PLL_LOCK_ENABLE_MASK)) | (C0_PLL_LOCK_ENABLE(1)),
    b6a4:	84 44 00 00 	l.lwz r2,0x0(r4)
    b6a8:	e0 42 18 04 	l.or r2,r2,r3
    b6ac:	d4 04 10 00 	l.sw 0x0(r4),r2
			CCU_PLL_C0_REG);

	while (!(readl(CCU_PLL_C0_REG) & C0_PLL_LOCK_STATUS_MASK))
    b6b0:	84 44 00 00 	l.lwz r2,0x0(r4)
    b6b4:	18 a0 10 00 	l.movhi r5,0x1000
    b6b8:	e0 42 28 03 	l.and r2,r2,r5
    b6bc:	bc 02 00 00 	l.sfeqi r2,0x0
    b6c0:	13 ff ff fc 	l.bf b6b0 <cpu_op+0xa88>
    b6c4:	19 c0 03 00 	l.movhi r14,0x300
		;

	/* recovery CCU_CPU_AXI_CFG_REG */
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_AXI_FACTOR_M_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_AXI_FACTOR_M_MASK),
    b6c8:	18 80 00 01 	l.movhi r4,0x1
    b6cc:	a8 4e 15 00 	l.ori r2,r14,0x1500
    b6d0:	a8 84 34 e8 	l.ori r4,r4,0x34e8
    b6d4:	84 62 00 00 	l.lwz r3,0x0(r2)
    b6d8:	9c c0 ff fc 	l.addi r6,r0,0xfffffffc
    b6dc:	84 a4 00 00 	l.lwz r5,0x0(r4)
    b6e0:	e0 63 30 03 	l.and r3,r3,r6
    b6e4:	a4 a5 00 03 	l.andi r5,r5,0x3
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_APB_FACTOR_N_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_APB_FACTOR_N_MASK),
    b6e8:	9c c0 fc ff 	l.addi r6,r0,0xfffffcff

	while (!(readl(CCU_PLL_C0_REG) & C0_PLL_LOCK_STATUS_MASK))
		;

	/* recovery CCU_CPU_AXI_CFG_REG */
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_AXI_FACTOR_M_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_AXI_FACTOR_M_MASK),
    b6ec:	e0 65 18 04 	l.or r3,r5,r3
	 * mbus default clk src is 24MHz, switch to pll_periph0(x2),
	 * so before increase mbus freq, should set div firstly.
	 * by Superm Wu at 2015-09-18
	 */
#ifndef CFG_FPGA_PLATFORM
	writel(mbus&0x7, CCU_MBUS_CLK_REG);
    b6f0:	1a 00 00 01 	l.movhi r16,0x1

	while (!(readl(CCU_PLL_C0_REG) & C0_PLL_LOCK_STATUS_MASK))
		;

	/* recovery CCU_CPU_AXI_CFG_REG */
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_AXI_FACTOR_M_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_AXI_FACTOR_M_MASK),
    b6f4:	d4 02 18 00 	l.sw 0x0(r2),r3
	 * mbus default clk src is 24MHz, switch to pll_periph0(x2),
	 * so before increase mbus freq, should set div firstly.
	 * by Superm Wu at 2015-09-18
	 */
#ifndef CFG_FPGA_PLATFORM
	writel(mbus&0x7, CCU_MBUS_CLK_REG);
    b6f8:	aa 10 34 e0 	l.ori r16,r16,0x34e0
		;

	/* recovery CCU_CPU_AXI_CFG_REG */
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_AXI_FACTOR_M_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_AXI_FACTOR_M_MASK),
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_APB_FACTOR_N_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_APB_FACTOR_N_MASK),
    b6fc:	84 62 00 00 	l.lwz r3,0x0(r2)
    b700:	84 a4 00 00 	l.lwz r5,0x0(r4)
    b704:	e0 63 30 03 	l.and r3,r3,r6
    b708:	a4 a5 03 00 	l.andi r5,r5,0x300
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_CLK_SRC_SEL_MASK),
    b70c:	18 c0 f8 ff 	l.movhi r6,0xf8ff
		;

	/* recovery CCU_CPU_AXI_CFG_REG */
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_AXI_FACTOR_M_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_AXI_FACTOR_M_MASK),
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_APB_FACTOR_N_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_APB_FACTOR_N_MASK),
    b710:	e0 65 18 04 	l.or r3,r5,r3
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_CLK_SRC_SEL_MASK),
    b714:	a8 c6 ff ff 	l.ori r6,r6,0xffff
		;

	/* recovery CCU_CPU_AXI_CFG_REG */
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_AXI_FACTOR_M_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_AXI_FACTOR_M_MASK),
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_APB_FACTOR_N_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_APB_FACTOR_N_MASK),
    b718:	d4 02 18 00 	l.sw 0x0(r2),r3
			CCU_CPU_AXI_CFG_REG);
	writel((readl(CCU_CPU_AXI_CFG_REG) & (~CPUX_CLK_SRC_SEL_MASK)) | (c0_cpux_axi_cfg_reg_bak & CPUX_CLK_SRC_SEL_MASK),
    b71c:	18 a0 07 00 	l.movhi r5,0x700
    b720:	84 62 00 00 	l.lwz r3,0x0(r2)
    b724:	84 84 00 00 	l.lwz r4,0x0(r4)
    b728:	e0 63 30 03 	l.and r3,r3,r6
    b72c:	e0 84 28 03 	l.and r4,r4,r5
    b730:	e0 64 18 04 	l.or r3,r4,r3
    b734:	d4 02 18 00 	l.sw 0x0(r2),r3
			CCU_CPU_AXI_CFG_REG);
	time_mdelay(1);
    b738:	9c 60 00 01 	l.addi r3,r0,0x1
    b73c:	07 ff e6 74 	l.jal 510c <time_mdelay>
    b740:	18 40 f3 f3 	l.movhi r2,0xf3f3

	system_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x3);

	clk_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x4);
    b744:	04 00 18 d2 	l.jal 11a8c <save_state_flag>
    b748:	a8 62 70 04 	l.ori r3,r2,0x7004

	cpucfg_cpu_resume_early(resume_entry);
    b74c:	04 00 06 cc 	l.jal d27c <cpucfg_cpu_resume_early>
    b750:	a8 72 00 00 	l.ori r3,r18,0x0
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x5);
    b754:	a8 62 70 05 	l.ori r3,r2,0x7005
    b758:	04 00 18 cd 	l.jal 11a8c <save_state_flag>
    b75c:	a8 4e 10 20 	l.ori r2,r14,0x1020
}

static void dram_resume(void)
{
	/* restore dram controller and transing area. */
	LOG("power-up dram\n");
    b760:	18 80 00 01 	l.movhi r4,0x1
    b764:	9c 60 00 02 	l.addi r3,r0,0x2
    b768:	07 ff fa 14 	l.jal 9fb8 <debugger_printf>
    b76c:	a8 84 2c 34 	l.ori r4,r4,0x2c34

	/* disable pll_periph0 firstly */
	writel(readl(CCU_PLL_PERIPH0_REG) & (~(1 << 31)), CCU_PLL_PERIPH0_REG);
    b770:	18 80 7f ff 	l.movhi r4,0x7fff
    b774:	84 62 00 00 	l.lwz r3,0x0(r2)
    b778:	a8 84 ff ff 	l.ori r4,r4,0xffff
    b77c:	e0 63 20 03 	l.and r3,r3,r4
    b780:	d4 02 18 00 	l.sw 0x0(r2),r3

	/* set pll factor but not enable pll */
	writel((pll_periph0&(~(0x1 << 31))), CCU_PLL_PERIPH0_REG);
    b784:	18 60 00 01 	l.movhi r3,0x1
    b788:	a8 63 34 dc 	l.ori r3,r3,0x34dc
    b78c:	84 63 00 00 	l.lwz r3,0x0(r3)
    b790:	e0 63 20 03 	l.and r3,r3,r4
    b794:	d4 02 18 00 	l.sw 0x0(r2),r3

	/* delay 100us for factor to be effective */
	time_udelay(100);
    b798:	07 ff e6 ab 	l.jal 5244 <time_udelay>
    b79c:	9c 60 00 64 	l.addi r3,r0,0x64

	/* enable pll */
	writel((readl(CCU_PLL_PERIPH0_REG) | (0x1 << 31)), CCU_PLL_PERIPH0_REG);
    b7a0:	18 c0 80 00 	l.movhi r6,0x8000
    b7a4:	84 62 00 00 	l.lwz r3,0x0(r2)
    b7a8:	e0 63 30 04 	l.or r3,r3,r6
    b7ac:	d4 02 18 00 	l.sw 0x0(r2),r3

	time_udelay(20);
    b7b0:	9c 60 00 14 	l.addi r3,r0,0x14
    b7b4:	07 ff e6 a4 	l.jal 5244 <time_udelay>
    b7b8:	a8 4e 15 40 	l.ori r2,r14,0x1540
	 * mbus default clk src is 24MHz, switch to pll_periph0(x2),
	 * so before increase mbus freq, should set div firstly.
	 * by Superm Wu at 2015-09-18
	 */
#ifndef CFG_FPGA_PLATFORM
	writel(mbus&0x7, CCU_MBUS_CLK_REG);
    b7bc:	84 70 00 00 	l.lwz r3,0x0(r16)
    b7c0:	a4 63 00 07 	l.andi r3,r3,0x7
    b7c4:	d4 02 18 00 	l.sw 0x0(r2),r3
	time_udelay(200);
    b7c8:	07 ff e6 9f 	l.jal 5244 <time_udelay>
    b7cc:	9c 60 00 c8 	l.addi r3,r0,0xc8
	writel(mbus&((0x3 << 24) | 0x7), CCU_MBUS_CLK_REG);
    b7d0:	a8 8e 00 07 	l.ori r4,r14,0x7
    b7d4:	84 70 00 00 	l.lwz r3,0x0(r16)
    b7d8:	e0 63 20 03 	l.and r3,r3,r4
    b7dc:	d4 02 18 00 	l.sw 0x0(r2),r3
	time_udelay(20);
    b7e0:	07 ff e6 99 	l.jal 5244 <time_udelay>
    b7e4:	9c 60 00 14 	l.addi r3,r0,0x14
	writel((readl(CCU_MBUS_CLK_REG) | (0x1 << 31)), CCU_MBUS_CLK_REG);
    b7e8:	18 a0 80 00 	l.movhi r5,0x8000
    b7ec:	84 62 00 00 	l.lwz r3,0x0(r2)
    b7f0:	e0 63 28 04 	l.or r3,r3,r5
    b7f4:	d4 02 18 00 	l.sw 0x0(r2),r3
	time_udelay(10000);
    b7f8:	07 ff e6 93 	l.jal 5244 <time_udelay>
    b7fc:	9c 60 27 10 	l.addi r3,r0,0x2710
	dram_power_up_process(&arisc_para.dram_para);
    b800:	18 60 00 00 	l.movhi r3,0x0
    b804:	04 00 17 72 	l.jal 115cc <dram_power_up_process>
    b808:	a8 63 40 08 	l.ori r3,r3,0x4008

	/* calc dram checksum */
	if (standby_dram_crc_enable()) {
    b80c:	07 ff fb dd 	l.jal a780 <standby_dram_crc_enable>
    b810:	15 00 00 00 	l.nop 0x0
    b814:	bc 0b 00 00 	l.sfeqi r11,0x0
    b818:	10 00 00 19 	l.bf b87c <cpu_op+0xc54>
    b81c:	18 60 f3 f3 	l.movhi r3,0xf3f3
//		dram_master_enable(16, 1);
		after_crc = standby_dram_crc();
    b820:	07 ff fb dc 	l.jal a790 <standby_dram_crc>
    b824:	18 40 00 01 	l.movhi r2,0x1
    b828:	a8 42 37 3c 	l.ori r2,r2,0x373c
    b82c:	d4 02 58 00 	l.sw 0x0(r2),r11
		if (after_crc != before_crc) {
    b830:	18 40 00 01 	l.movhi r2,0x1
    b834:	a8 42 37 38 	l.ori r2,r2,0x3738
    b838:	84 42 00 00 	l.lwz r2,0x0(r2)
    b83c:	e4 0b 10 00 	l.sfeq r11,r2
    b840:	10 00 00 0e 	l.bf b878 <cpu_op+0xc50>
    b844:	18 60 f1 f1 	l.movhi r3,0xf1f1
			save_state_flag(REC_SSTANDBY | REC_DRAM_DBG | 0xf);
    b848:	04 00 18 91 	l.jal 11a8c <save_state_flag>
    b84c:	a8 63 90 0f 	l.ori r3,r3,0x900f
			ERR("dram crc error...\n");
    b850:	18 80 00 01 	l.movhi r4,0x1
    b854:	9c 60 00 08 	l.addi r3,r0,0x8
    b858:	07 ff f9 d8 	l.jal 9fb8 <debugger_printf>
    b85c:	a8 84 2c 43 	l.ori r4,r4,0x2c43
			ERR("---->>>>LOOP<<<<----\n");
    b860:	18 80 00 01 	l.movhi r4,0x1
    b864:	9c 60 00 08 	l.addi r3,r0,0x8
    b868:	07 ff f9 d4 	l.jal 9fb8 <debugger_printf>
    b86c:	a8 84 2c 5a 	l.ori r4,r4,0x2c5a
    b870:	00 00 00 00 	l.j b870 <cpu_op+0xc48>
    b874:	15 00 00 00 	l.nop 0x0

	cpucfg_cpu_resume_early(resume_entry);
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x5);

	dram_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x6);
    b878:	18 60 f3 f3 	l.movhi r3,0xf3f3

static void usb_resume(void)
{
	u32 val;

	if (!(standby_type & CPUS_WAKEUP_USB)) {
    b87c:	18 40 00 01 	l.movhi r2,0x1

	cpucfg_cpu_resume_early(resume_entry);
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x5);

	dram_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x6);
    b880:	a8 63 70 06 	l.ori r3,r3,0x7006
    b884:	04 00 18 82 	l.jal 11a8c <save_state_flag>
    b888:	a8 42 34 60 	l.ori r2,r2,0x3460

static void usb_resume(void)
{
	u32 val;

	if (!(standby_type & CPUS_WAKEUP_USB)) {
    b88c:	84 42 00 00 	l.lwz r2,0x0(r2)
    b890:	a4 42 20 00 	l.andi r2,r2,0x2000
    b894:	bc 22 00 00 	l.sfnei r2,0x0
    b898:	10 00 00 08 	l.bf b8b8 <cpu_op+0xc90>
    b89c:	18 80 03 00 	l.movhi r4,0x300
		val = readl(VDD_SYS_PWROFF_GATING_REG);
    b8a0:	18 40 07 01 	l.movhi r2,0x701
		val &= ~VDD_USB2CPUS_GATING(1);
    b8a4:	9c c0 fe ff 	l.addi r6,r0,0xfffffeff
static void usb_resume(void)
{
	u32 val;

	if (!(standby_type & CPUS_WAKEUP_USB)) {
		val = readl(VDD_SYS_PWROFF_GATING_REG);
    b8a8:	a8 42 02 50 	l.ori r2,r2,0x250
    b8ac:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= SCLK_GATING_OHCI0_MASK;
		val |= USBPHY0_RST_MASK;
		writel(val, CCU_USB0_CLOCK_REG);

		val = readl(VDD_SYS_PWROFF_GATING_REG);
		val &= ~VDD_SYS2USB_GATING(1);
    b8b0:	00 00 00 1f 	l.j b92c <cpu_op+0xd04>
    b8b4:	e0 63 30 03 	l.and r3,r3,r6
		val |= USBOHCI1_GATING_MASK;
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val |= USBEHCI1_RST_MASK;
		val |= USBOHCI1_RST_MASK;
    b8b8:	18 a0 00 22 	l.movhi r5,0x22
		val = readl(VDD_SYS_PWROFF_GATING_REG);
		val &= ~VDD_USB2CPUS_GATING(1);
		writel(val, VDD_SYS_PWROFF_GATING_REG);
	} else {
		/* for usb standby resume */
		val = readl(CCU_USB_BUS_GATING_RST_REG);
    b8bc:	a8 44 1a 8c 	l.ori r2,r4,0x1a8c
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		val = readl(CCU_USB1_CLOCK_REG);
		val |= SCLK_GATING_USBPHY1_MASK;
		val |= SCLK_GATING_OHCI1_MASK;
		val |= USBPHY1_RST_MASK;
    b8c0:	18 c0 e0 00 	l.movhi r6,0xe000
		val = readl(VDD_SYS_PWROFF_GATING_REG);
		val &= ~VDD_USB2CPUS_GATING(1);
		writel(val, VDD_SYS_PWROFF_GATING_REG);
	} else {
		/* for usb standby resume */
		val = readl(CCU_USB_BUS_GATING_RST_REG);
    b8c4:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= USBEHCI1_GATING_MASK;
		val |= USBOHCI1_GATING_MASK;
    b8c8:	a8 63 00 22 	l.ori r3,r3,0x22
		writel(val, CCU_USB_BUS_GATING_RST_REG);
    b8cc:	d4 02 18 00 	l.sw 0x0(r2),r3

		val = readl(CCU_USB_BUS_GATING_RST_REG);
    b8d0:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= USBEHCI1_RST_MASK;
		val |= USBOHCI1_RST_MASK;
    b8d4:	e0 63 28 04 	l.or r3,r3,r5
		writel(val, CCU_USB_BUS_GATING_RST_REG);
    b8d8:	d4 02 18 00 	l.sw 0x0(r2),r3

		val = readl(CCU_USB1_CLOCK_REG);
    b8dc:	a8 64 1a 74 	l.ori r3,r4,0x1a74
		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val |= USBOHCI0_RST_MASK;
		val |= USBEHCI0_RST_MASK;
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		val = readl(CCU_USB0_CLOCK_REG);
    b8e0:	a8 84 1a 70 	l.ori r4,r4,0x1a70
		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val |= USBEHCI1_RST_MASK;
		val |= USBOHCI1_RST_MASK;
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		val = readl(CCU_USB1_CLOCK_REG);
    b8e4:	84 a3 00 00 	l.lwz r5,0x0(r3)
		val |= SCLK_GATING_USBPHY1_MASK;
		val |= SCLK_GATING_OHCI1_MASK;
		val |= USBPHY1_RST_MASK;
    b8e8:	e0 a5 30 04 	l.or r5,r5,r6
		writel(val, CCU_USB1_CLOCK_REG);
    b8ec:	d4 03 28 00 	l.sw 0x0(r3),r5
		val |= USBEHCI0_GATING_MASK;
		writel(val, CCU_USB_BUS_GATING_RST_REG);

		val = readl(CCU_USB_BUS_GATING_RST_REG);
		val |= USBOHCI0_RST_MASK;
		val |= USBEHCI0_RST_MASK;
    b8f0:	18 a0 00 11 	l.movhi r5,0x11
		val |= SCLK_GATING_OHCI1_MASK;
		val |= USBPHY1_RST_MASK;
		writel(val, CCU_USB1_CLOCK_REG);

		/* for usb standby resume */
		val = readl(CCU_USB_BUS_GATING_RST_REG);
    b8f4:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= USBOHCI0_GATING_MASK;
		val |= USBEHCI0_GATING_MASK;
    b8f8:	a8 63 00 11 	l.ori r3,r3,0x11
		writel(val, CCU_USB_BUS_GATING_RST_REG);
    b8fc:	d4 02 18 00 	l.sw 0x0(r2),r3

		val = readl(CCU_USB_BUS_GATING_RST_REG);
    b900:	84 62 00 00 	l.lwz r3,0x0(r2)
		val |= USBOHCI0_RST_MASK;
		val |= USBEHCI0_RST_MASK;
    b904:	e0 63 28 04 	l.or r3,r3,r5
		writel(val, CCU_USB_BUS_GATING_RST_REG);
    b908:	d4 02 18 00 	l.sw 0x0(r2),r3

		val = readl(CCU_USB0_CLOCK_REG);
    b90c:	84 44 00 00 	l.lwz r2,0x0(r4)
		val |= SCLK_GATING_USBPHY0_MASK;
		val |= SCLK_GATING_OHCI0_MASK;
		val |= USBPHY0_RST_MASK;
    b910:	e0 42 30 04 	l.or r2,r2,r6
		writel(val, CCU_USB0_CLOCK_REG);

		val = readl(VDD_SYS_PWROFF_GATING_REG);
		val &= ~VDD_SYS2USB_GATING(1);
    b914:	9c c0 ff f7 	l.addi r6,r0,0xfffffff7

		val = readl(CCU_USB0_CLOCK_REG);
		val |= SCLK_GATING_USBPHY0_MASK;
		val |= SCLK_GATING_OHCI0_MASK;
		val |= USBPHY0_RST_MASK;
		writel(val, CCU_USB0_CLOCK_REG);
    b918:	d4 04 10 00 	l.sw 0x0(r4),r2

		val = readl(VDD_SYS_PWROFF_GATING_REG);
    b91c:	18 40 07 01 	l.movhi r2,0x701
    b920:	a8 42 02 50 	l.ori r2,r2,0x250
    b924:	84 62 00 00 	l.lwz r3,0x0(r2)
		val &= ~VDD_SYS2USB_GATING(1);
    b928:	e0 63 30 03 	l.and r3,r3,r6
		writel(val, VDD_SYS_PWROFF_GATING_REG);
    b92c:	d4 02 18 00 	l.sw 0x0(r2),r3
}

static void device_resume(void)
{
	usb_resume();
	hwmsgbox_super_standby_exit();
    b930:	07 ff ed 09 	l.jal 6d54 <hwmsgbox_super_standby_exit>
    b934:	18 40 03 00 	l.movhi r2,0x300
	twi_standby_exit();
    b938:	07 ff ea fb 	l.jal 6524 <twi_standby_exit>
    b93c:	a8 42 60 a0 	l.ori r2,r2,0x60a0
	pmu_standby_exit();
    b940:	07 ff ee a7 	l.jal 73dc <pmu_standby_exit>
    b944:	15 00 00 00 	l.nop 0x0
	}
}
static void smc_standby_exit(void)
{
	int read_idx, resume_idx;
	if ((readl(SID_SEC_MODE_STA) & SID_SEC_MODE_MASK) == 0) {
    b948:	84 42 00 00 	l.lwz r2,0x0(r2)
    b94c:	a4 42 00 01 	l.andi r2,r2,0x1
    b950:	bc 02 00 00 	l.sfeqi r2,0x0
    b954:	10 00 00 2e 	l.bf ba0c <cpu_op+0xde4>
    b958:	18 a0 00 01 	l.movhi r5,0x1
		/*chip non-secure, do not need smc config*/
		return;
	}

	/*enable smc control*/
	writel(0x0, SMC_ACTION_REG);
    b95c:	18 40 04 80 	l.movhi r2,0x480
    b960:	9c 80 00 00 	l.addi r4,r0,0x0
    b964:	a8 62 00 04 	l.ori r3,r2,0x4
    b968:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel(0, SMC_MST0_BYP_REG);
    b96c:	a8 62 00 70 	l.ori r3,r2,0x70
	writel(0, SMC_MST1_BYP_REG);
	writel(0, SMC_MST2_BYP_REG);
	writel(0xffffffff, SMC_MST0_SEC_REG);
	writel(0xffffffff, SMC_MST1_SEC_REG);
	writel(0xffffffff, SMC_MST2_SEC_REG);
    b970:	a8 a5 34 84 	l.ori r5,r5,0x3484
		return;
	}

	/*enable smc control*/
	writel(0x0, SMC_ACTION_REG);
	writel(0, SMC_MST0_BYP_REG);
    b974:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel(0, SMC_MST1_BYP_REG);
    b978:	a8 62 00 74 	l.ori r3,r2,0x74
    b97c:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel(0, SMC_MST2_BYP_REG);
    b980:	a8 62 00 78 	l.ori r3,r2,0x78
    b984:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel(0xffffffff, SMC_MST0_SEC_REG);
    b988:	9c 80 ff ff 	l.addi r4,r0,0xffffffff
    b98c:	a8 62 00 80 	l.ori r3,r2,0x80
    b990:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel(0xffffffff, SMC_MST1_SEC_REG);
    b994:	a8 62 00 84 	l.ori r3,r2,0x84
	writel(0xffffffff, SMC_MST2_SEC_REG);
    b998:	a8 42 00 88 	l.ori r2,r2,0x88
	writel(0x0, SMC_ACTION_REG);
	writel(0, SMC_MST0_BYP_REG);
	writel(0, SMC_MST1_BYP_REG);
	writel(0, SMC_MST2_BYP_REG);
	writel(0xffffffff, SMC_MST0_SEC_REG);
	writel(0xffffffff, SMC_MST1_SEC_REG);
    b99c:	d4 03 20 00 	l.sw 0x0(r3),r4
	writel(0xffffffff, SMC_MST2_SEC_REG);
    b9a0:	d4 02 20 00 	l.sw 0x0(r2),r4
    b9a4:	18 80 00 01 	l.movhi r4,0x1
    b9a8:	9c 40 00 00 	l.addi r2,r0,0x0
    b9ac:	a8 84 34 7c 	l.ori r4,r4,0x347c

	/*resume region settings*/
	resume_idx = 0;
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (smc_region_save[read_idx].region_attr == 0)
    b9b0:	84 65 00 00 	l.lwz r3,0x0(r5)
    b9b4:	bc 03 00 00 	l.sfeqi r3,0x0
    b9b8:	10 00 00 15 	l.bf ba0c <cpu_op+0xde4>
    b9bc:	18 c0 04 80 	l.movhi r6,0x480
u32 is_suspend_lock(void)
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
    b9c0:	a8 c6 01 00 	l.ori r6,r6,0x100
    b9c4:	e0 62 30 00 	l.add r3,r2,r6
	/*resume region settings*/
	resume_idx = 0;
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (smc_region_save[read_idx].region_attr == 0)
			break;
		writel(smc_region_save[resume_idx].region_low,
    b9c8:	84 c4 00 00 	l.lwz r6,0x0(r4)
    b9cc:	d4 03 30 00 	l.sw 0x0(r3),r6
u32 is_suspend_lock(void)
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
    b9d0:	18 c0 04 80 	l.movhi r6,0x480
    b9d4:	a8 c6 01 04 	l.ori r6,r6,0x104
    b9d8:	e0 62 30 00 	l.add r3,r2,r6
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (smc_region_save[read_idx].region_attr == 0)
			break;
		writel(smc_region_save[resume_idx].region_low,
		       SMC_REGIN_SETUP_LOW_REG(resume_idx));
		writel(smc_region_save[resume_idx].region_high,
    b9dc:	84 c4 00 04 	l.lwz r6,0x4(r4)
		       SMC_REGIN_SETUP_HIGH_REG(resume_idx));
		writel(smc_region_save[resume_idx].region_attr,
    b9e0:	9c 84 00 0c 	l.addi r4,r4,0xc
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
		if (smc_region_save[read_idx].region_attr == 0)
			break;
		writel(smc_region_save[resume_idx].region_low,
		       SMC_REGIN_SETUP_LOW_REG(resume_idx));
		writel(smc_region_save[resume_idx].region_high,
    b9e4:	d4 03 30 00 	l.sw 0x0(r3),r6
u32 is_suspend_lock(void)
{
	return suspend_lock;
}

int cpu_op(struct message *pmessage)
    b9e8:	18 c0 04 80 	l.movhi r6,0x480
    b9ec:	a8 c6 01 08 	l.ori r6,r6,0x108
    b9f0:	e0 62 30 00 	l.add r3,r2,r6
			break;
		writel(smc_region_save[resume_idx].region_low,
		       SMC_REGIN_SETUP_LOW_REG(resume_idx));
		writel(smc_region_save[resume_idx].region_high,
		       SMC_REGIN_SETUP_HIGH_REG(resume_idx));
		writel(smc_region_save[resume_idx].region_attr,
    b9f4:	84 c5 00 00 	l.lwz r6,0x0(r5)
    b9f8:	9c 42 00 10 	l.addi r2,r2,0x10
    b9fc:	d4 03 30 00 	l.sw 0x0(r3),r6
	writel(0xffffffff, SMC_MST1_SEC_REG);
	writel(0xffffffff, SMC_MST2_SEC_REG);

	/*resume region settings*/
	resume_idx = 0;
	for (read_idx = 0; read_idx < SMC_REGION_COUNT; read_idx++) {
    ba00:	bc 22 00 80 	l.sfnei r2,0x80
    ba04:	13 ff ff eb 	l.bf b9b0 <cpu_op+0xd88>
    ba08:	9c a5 00 0c 	l.addi r5,r5,0xc

	dram_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x6);

	device_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x7);
    ba0c:	18 40 f3 f3 	l.movhi r2,0xf3f3

	printk("wait ac327 resume...\n");

	/* wait cpu0 restore finished. */
	while (1) {
		ret = hwmsgbox_query_message(&message, 0);
    ba10:	9e 01 00 14 	l.addi r16,r1,0x14

	dram_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x6);

	device_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x7);
    ba14:	04 00 18 1e 	l.jal 11a8c <save_state_flag>
    ba18:	a8 62 70 07 	l.ori r3,r2,0x7007

	cpucfg_cpu_resume(resume_entry);
    ba1c:	04 00 05 b8 	l.jal d0fc <cpucfg_cpu_resume>
    ba20:	a8 72 00 00 	l.ori r3,r18,0x0
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x8);
    ba24:	a8 62 70 08 	l.ori r3,r2,0x7008
    ba28:	04 00 18 19 	l.jal 11a8c <save_state_flag>
    ba2c:	9c 40 00 00 	l.addi r2,r0,0x0
	struct message message;

	/* no paras for resume notify message */
	message.paras = NULL;

	printk("wait ac327 resume...\n");
    ba30:	18 80 00 01 	l.movhi r4,0x1
    ba34:	9c 60 00 0f 	l.addi r3,r0,0xf
    ba38:	a8 84 2c 74 	l.ori r4,r4,0x2c74
    ba3c:	07 ff f9 5f 	l.jal 9fb8 <debugger_printf>
    ba40:	d4 01 10 30 	l.sw 0x30(r1),r2

	/* wait cpu0 restore finished. */
	while (1) {
		ret = hwmsgbox_query_message(&message, 0);
    ba44:	a8 70 00 00 	l.ori r3,r16,0x0
    ba48:	07 ff ec 45 	l.jal 6b5c <hwmsgbox_query_message>
    ba4c:	9c 80 00 00 	l.addi r4,r0,0x0
		if (ret != OK)
    ba50:	bc 2b 00 00 	l.sfnei r11,0x0
    ba54:	13 ff ff fc 	l.bf ba44 <cpu_op+0xe1c>
    ba58:	a8 4b 00 00 	l.ori r2,r11,0x0
			continue; /* no message, query again */

		/* query valid message */
		if (message.type == SSTANDBY_RESTORE_NOTIFY) {
    ba5c:	8c 61 00 16 	l.lbz r3,0x16(r1)
    ba60:	bc 23 00 11 	l.sfnei r3,0x11
    ba64:	10 00 00 23 	l.bf baf0 <cpu_op+0xec8>
    ba68:	18 80 00 01 	l.movhi r4,0x1
			/* cpu0 restore, feedback wakeup event. */
			LOG("cpu0 restore finished\n");
    ba6c:	9c 60 00 02 	l.addi r3,r0,0x2
    ba70:	a8 84 2c 8a 	l.ori r4,r4,0x2c8a
    ba74:	07 ff f9 51 	l.jal 9fb8 <debugger_printf>
    ba78:	19 c0 00 01 	l.movhi r14,0x1
			/* init feedback message */
			message.count = 1;
    ba7c:	9c 60 00 01 	l.addi r3,r0,0x1
			message.paras = (u32 *)&wakeup_source;
			hwmsgbox_feedback_message(&message, SEND_MSG_TIMEOUT); /* synchronous message, need feedback. */
    ba80:	18 80 00 01 	l.movhi r4,0x1
		if (message.type == SSTANDBY_RESTORE_NOTIFY) {
			/* cpu0 restore, feedback wakeup event. */
			LOG("cpu0 restore finished\n");
			/* init feedback message */
			message.count = 1;
			message.paras = (u32 *)&wakeup_source;
    ba84:	a9 ce 37 34 	l.ori r14,r14,0x3734
			hwmsgbox_feedback_message(&message, SEND_MSG_TIMEOUT); /* synchronous message, need feedback. */
    ba88:	a8 84 86 a0 	l.ori r4,r4,0x86a0
		/* query valid message */
		if (message.type == SSTANDBY_RESTORE_NOTIFY) {
			/* cpu0 restore, feedback wakeup event. */
			LOG("cpu0 restore finished\n");
			/* init feedback message */
			message.count = 1;
    ba8c:	d8 01 18 18 	l.sb 0x18(r1),r3
			message.paras = (u32 *)&wakeup_source;
			hwmsgbox_feedback_message(&message, SEND_MSG_TIMEOUT); /* synchronous message, need feedback. */
    ba90:	a8 70 00 00 	l.ori r3,r16,0x0
    ba94:	07 ff eb ea 	l.jal 6a3c <hwmsgbox_feedback_message>
    ba98:	d4 01 70 30 	l.sw 0x30(r1),r14
			/* invalid message detected, ignore it, by sunny at 2012-6-28 11:33:13. */
			ERR("standby ignore message [%x]\n", message.type);
		}
	}

	wakeup_source = NO_WAKESOURCE;
    ba9c:	d4 0e 10 00 	l.sw 0x0(r14),r2

	cpucfg_cpu_resume(resume_entry);
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x8);

	wait_cpu0_resume();
	save_state_flag(REC_ESTANDBY | REC_ENTER_EXIT | 0x9);
    baa0:	19 c0 f3 f3 	l.movhi r14,0xf3f3
    baa4:	04 00 17 fa 	l.jal 11a8c <save_state_flag>
    baa8:	a8 6e 70 09 	l.ori r3,r14,0x7009

	suspend_lock = 0;
    baac:	18 60 00 01 	l.movhi r3,0x1
    bab0:	a8 63 34 78 	l.ori r3,r3,0x3478
    bab4:	d4 03 10 00 	l.sw 0x0(r3),r2
	 *
	 * --------------------------------------------------------------------------
	 */
	save_state_flag(REC_ESTANDBY | REC_BEFORE_EXIT);
	standby_process_exit(pmessage);
	save_state_flag(REC_ESTANDBY | REC_AFTER_EXIT);
    bab8:	a8 6e 80 00 	l.ori r3,r14,0x8000
    babc:	04 00 17 f4 	l.jal 11a8c <save_state_flag>
    bac0:	18 40 07 01 	l.movhi r2,0x701

	/* restore cpus source clock */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | cpus_src, CPUS_CFG_REG);
    bac4:	18 80 f8 ff 	l.movhi r4,0xf8ff
    bac8:	84 62 00 00 	l.lwz r3,0x0(r2)
    bacc:	a8 84 ff ff 	l.ori r4,r4,0xffff
    bad0:	e0 63 20 03 	l.and r3,r3,r4
    bad4:	18 80 00 01 	l.movhi r4,0x1
    bad8:	a8 84 34 5c 	l.ori r4,r4,0x345c
    badc:	84 84 00 00 	l.lwz r4,0x0(r4)
    bae0:	e0 63 20 04 	l.or r3,r3,r4
    bae4:	d4 02 18 00 	l.sw 0x0(r2),r3
			cpu_power_down(0, mpidr);
		}
	}

	return 0;
}
    bae8:	00 00 00 1a 	l.j bb50 <cpu_op+0xf28>
    baec:	9c 21 00 54 	l.addi r1,r1,0x54
			message.paras = (u32 *)&wakeup_source;
			hwmsgbox_feedback_message(&message, SEND_MSG_TIMEOUT); /* synchronous message, need feedback. */
			break;
		} else {
			/* invalid message detected, ignore it, by sunny at 2012-6-28 11:33:13. */
			ERR("standby ignore message [%x]\n", message.type);
    baf0:	18 80 00 01 	l.movhi r4,0x1
    baf4:	d4 01 18 00 	l.sw 0x0(r1),r3
    baf8:	a8 84 2c a1 	l.ori r4,r4,0x2ca1
    bafc:	07 ff f9 2f 	l.jal 9fb8 <debugger_printf>
    bb00:	9c 60 00 08 	l.addi r3,r0,0x8

	printk("wait ac327 resume...\n");

	/* wait cpu0 restore finished. */
	while (1) {
		ret = hwmsgbox_query_message(&message, 0);
    bb04:	03 ff ff d1 	l.j ba48 <cpu_op+0xe20>
    bb08:	a8 70 00 00 	l.ori r3,r16,0x0
		if (wakeup_source != NO_WAKESOURCE) {
			LOG("wakeup: %d\n", wakeup_source);
			break;
		}

		writel(readl(LP_CTRL_REG) | ((1 << 24) | (1 << 25) | (1 << 26) | (1 << 27)), LP_CTRL_REG);
    bb0c:	84 62 00 00 	l.lwz r3,0x0(r2)
    bb10:	18 a0 0f 00 	l.movhi r5,0xf00
    bb14:	e0 63 28 04 	l.or r3,r3,r5
    bb18:	d4 02 18 00 	l.sw 0x0(r2),r3
		cpu_enter_doze();
    bb1c:	04 00 00 b8 	l.jal bdfc <cpu_enter_doze>
    bb20:	15 00 00 00 	l.nop 0x0
		writel(readl(LP_CTRL_REG) & (~((1 << 24) | (1 << 25) | (1 << 26) | (1 << 27))), LP_CTRL_REG);
    bb24:	18 c0 f0 ff 	l.movhi r6,0xf0ff
    bb28:	84 62 00 00 	l.lwz r3,0x0(r2)
    bb2c:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    bb30:	e0 63 30 03 	l.and r3,r3,r6
    bb34:	d4 02 18 00 	l.sw 0x0(r2),r3
    bb38:	03 ff fe 17 	l.j b394 <cpu_op+0x76c>
    bb3c:	15 00 00 00 	l.nop 0x0

			} else {

			}
		} else {
			cpu_power_down(0, mpidr);
    bb40:	a8 62 00 00 	l.ori r3,r2,0x0
    bb44:	04 00 06 a7 	l.jal d5e0 <cpu_power_down>
    bb48:	a8 8e 00 00 	l.ori r4,r14,0x0
		}
	}

	return 0;
}
    bb4c:	9c 21 00 54 	l.addi r1,r1,0x54
    bb50:	9d 60 00 00 	l.addi r11,r0,0x0
    bb54:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    bb58:	84 41 ff e0 	l.lwz r2,0xffffffe0(r1)
    bb5c:	85 c1 ff e4 	l.lwz r14,0xffffffe4(r1)
    bb60:	86 01 ff e8 	l.lwz r16,0xffffffe8(r1)
    bb64:	86 41 ff ec 	l.lwz r18,0xffffffec(r1)
    bb68:	86 81 ff f0 	l.lwz r20,0xfffffff0(r1)
    bb6c:	86 c1 ff f4 	l.lwz r22,0xfffffff4(r1)
    bb70:	44 00 48 00 	l.jr r9
    bb74:	87 01 ff f8 	l.lwz r24,0xfffffff8(r1)

0000bb78 <sys_op>:
{
	pmu_reset();
}

int sys_op(struct message *pmessage)
{
    bb78:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
	u32 state = pmessage->paras[0];

	LOG("state:%x\n", state);
    bb7c:	18 80 00 01 	l.movhi r4,0x1
	pmu_reset();
}

int sys_op(struct message *pmessage)
{
	u32 state = pmessage->paras[0];
    bb80:	84 43 00 1c 	l.lwz r2,0x1c(r3)
{
	pmu_reset();
}

int sys_op(struct message *pmessage)
{
    bb84:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
	u32 state = pmessage->paras[0];
    bb88:	84 42 00 00 	l.lwz r2,0x0(r2)
{
	pmu_reset();
}

int sys_op(struct message *pmessage)
{
    bb8c:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    bb90:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
	u32 state = pmessage->paras[0];

	LOG("state:%x\n", state);
    bb94:	9c 60 00 02 	l.addi r3,r0,0x2
{
	pmu_reset();
}

int sys_op(struct message *pmessage)
{
    bb98:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
	u32 state = pmessage->paras[0];

	LOG("state:%x\n", state);
    bb9c:	a8 84 2b 6f 	l.ori r4,r4,0x2b6f
    bba0:	07 ff f9 06 	l.jal 9fb8 <debugger_printf>
    bba4:	d4 01 10 00 	l.sw 0x0(r1),r2

	switch (state) {
    bba8:	bc 02 00 00 	l.sfeqi r2,0x0
    bbac:	10 00 00 06 	l.bf bbc4 <sys_op+0x4c>
    bbb0:	bc 42 00 02 	l.sfgtui r2,0x2
    bbb4:	10 00 00 35 	l.bf bc88 <sys_op+0x110>
    bbb8:	18 80 00 01 	l.movhi r4,0x1
    bbbc:	00 00 00 2d 	l.j bc70 <sys_op+0xf8>
    bbc0:	15 00 00 00 	l.nop 0x0
	case arisc_system_shutdown:
		{
			save_state_flag(REC_SHUTDOWN | 0x101);
    bbc4:	04 00 17 b2 	l.jal 11a8c <save_state_flag>
    bbc8:	a8 60 a1 01 	l.ori r3,r0,0xa101
	return 0;
}

static void system_shutdown(void)
{
	pmu_charging_reset();
    bbcc:	07 ff ed 4f 	l.jal 7108 <pmu_charging_reset>
    bbd0:	1a 00 07 01 	l.movhi r16,0x701

	iosc_freq_init();
    bbd4:	04 00 17 1f 	l.jal 11850 <iosc_freq_init>
    bbd8:	15 00 00 00 	l.nop 0x0

	/* set cpus clk to RC16M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(2), CPUS_CFG_REG);
    bbdc:	18 80 f8 ff 	l.movhi r4,0xf8ff
    bbe0:	84 70 00 00 	l.lwz r3,0x0(r16)
    bbe4:	a8 84 ff ff 	l.ori r4,r4,0xffff

	/*
	 * set apbs2 clk to RC16M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    bbe8:	19 c0 00 01 	l.movhi r14,0x1
	pmu_charging_reset();

	iosc_freq_init();

	/* set cpus clk to RC16M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(2), CPUS_CFG_REG);
    bbec:	e0 63 20 03 	l.and r3,r3,r4
    bbf0:	18 80 02 00 	l.movhi r4,0x200

	/*
	 * set apbs2 clk to RC16M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    bbf4:	a9 ce 34 28 	l.ori r14,r14,0x3428
	pmu_charging_reset();

	iosc_freq_init();

	/* set cpus clk to RC16M */
	writel((readl(CPUS_CFG_REG) & (~CPUS_CLK_SRC_SEL_MASK)) | CPUS_CLK_SRC_SEL(2), CPUS_CFG_REG);
    bbf8:	e0 63 20 04 	l.or r3,r3,r4
    bbfc:	d4 10 18 00 	l.sw 0x0(r16),r3

	/*
	 * set apbs2 clk to RC16M,
	 * then change the baudrate of uart and twi...
	 */
	twi_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    bc00:	a8 62 00 00 	l.ori r3,r2,0x0
    bc04:	84 8e 00 00 	l.lwz r4,0x0(r14)
    bc08:	07 ff e7 5f 	l.jal 5984 <twi_clkchangecb>
    bc0c:	aa 10 00 10 	l.ori r16,r16,0x10
	uart_clkchangecb(CCU_CLK_CLKCHG_REQ, iosc_freq);
    bc10:	a8 62 00 00 	l.ori r3,r2,0x0
    bc14:	07 ff e6 b8 	l.jal 56f4 <uart_clkchangecb>
    bc18:	84 8e 00 00 	l.lwz r4,0x0(r14)
	writel((readl(APBS2_CFG_REG) & (~APBS2_CLK_SRC_SEL_MASK)) | APBS2_CLK_SRC_SEL(2), APBS2_CFG_REG);
    bc1c:	18 80 f8 ff 	l.movhi r4,0xf8ff
    bc20:	84 70 00 00 	l.lwz r3,0x0(r16)
    bc24:	a8 84 ff ff 	l.ori r4,r4,0xffff
    bc28:	e0 63 20 03 	l.and r3,r3,r4
    bc2c:	18 80 02 00 	l.movhi r4,0x200
    bc30:	e0 63 20 04 	l.or r3,r3,r4
    bc34:	d4 10 18 00 	l.sw 0x0(r16),r3
	uart_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
    bc38:	9c 60 00 01 	l.addi r3,r0,0x1
    bc3c:	07 ff e6 ae 	l.jal 56f4 <uart_clkchangecb>
    bc40:	84 8e 00 00 	l.lwz r4,0x0(r14)
	twi_clkchangecb(CCU_CLK_CLKCHG_DONE, iosc_freq);
    bc44:	84 8e 00 00 	l.lwz r4,0x0(r14)
    bc48:	07 ff e7 4f 	l.jal 5984 <twi_clkchangecb>
    bc4c:	9c 60 00 01 	l.addi r3,r0,0x1
	time_mdelay(10);
    bc50:	07 ff e5 2f 	l.jal 510c <time_mdelay>
    bc54:	9c 60 00 0a 	l.addi r3,r0,0xa

	ccu_24mhosc_disable();
    bc58:	04 00 18 b6 	l.jal 11f30 <ccu_24mhosc_disable>
    bc5c:	15 00 00 00 	l.nop 0x0

	pmu_shutdown();
    bc60:	07 ff ec dc 	l.jal 6fd0 <pmu_shutdown>
    bc64:	15 00 00 00 	l.nop 0x0
			WRN("invaid system power state (%d)\n", state);
			return -EINVAL;
		}
	}

	return 0;
    bc68:	00 00 00 0d 	l.j bc9c <sys_op+0x124>
    bc6c:	a9 62 00 00 	l.ori r11,r2,0x0
			break;
		}
	case arisc_system_reset:
	case arisc_system_reboot:
		{
			save_state_flag(REC_SHUTDOWN | 0x102);
    bc70:	04 00 17 87 	l.jal 11a8c <save_state_flag>
    bc74:	a8 60 a1 02 	l.ori r3,r0,0xa102
	pmu_shutdown();
}

static void system_reset(void)
{
	pmu_reset();
    bc78:	07 ff ec fc 	l.jal 7068 <pmu_reset>
    bc7c:	15 00 00 00 	l.nop 0x0
			WRN("invaid system power state (%d)\n", state);
			return -EINVAL;
		}
	}

	return 0;
    bc80:	00 00 00 07 	l.j bc9c <sys_op+0x124>
    bc84:	9d 60 00 00 	l.addi r11,r0,0x0
			system_reset();
			break;
		}
	default:
		{
			WRN("invaid system power state (%d)\n", state);
    bc88:	9c 60 00 04 	l.addi r3,r0,0x4
    bc8c:	a8 84 2c c2 	l.ori r4,r4,0x2cc2
    bc90:	07 ff f8 ca 	l.jal 9fb8 <debugger_printf>
    bc94:	d4 01 10 00 	l.sw 0x0(r1),r2
			return -EINVAL;
    bc98:	9d 60 ff ea 	l.addi r11,r0,0xffffffea
		}
	}

	return 0;
}
    bc9c:	9c 21 00 14 	l.addi r1,r1,0x14
    bca0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    bca4:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    bca8:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    bcac:	44 00 48 00 	l.jr r9
    bcb0:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

0000bcb4 <icache_coherent>:
    bcb4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    bcb8:	d7 e1 1f f8 	l.sw 0xfffffff8(r1),r3
    bcbc:	d7 e1 27 f4 	l.sw 0xfffffff4(r1),r4
    bcc0:	d7 e1 2f f0 	l.sw 0xfffffff0(r1),r5
    bcc4:	22 00 00 00 	l.msync 
    bcc8:	23 00 00 00 	l.csync 
    bccc:	9c 60 00 10 	l.addi r3,r0,0x10
    bcd0:	9c 80 00 00 	l.addi r4,r0,0x0
    bcd4:	9c a0 10 00 	l.addi r5,r0,0x1000

0000bcd8 <invalidate_block>:
    bcd8:	c0 80 20 02 	l.mtspr r0,r4,0x2002
    bcdc:	e4 24 28 00 	l.sfne r4,r5
    bce0:	13 ff ff fe 	l.bf bcd8 <invalidate_block>
    bce4:	e0 84 18 00 	l.add r4,r4,r3
    bce8:	22 80 00 00 	l.psync 
    bcec:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    bcf0:	84 61 ff f8 	l.lwz r3,0xfffffff8(r1)
    bcf4:	84 81 ff f4 	l.lwz r4,0xfffffff4(r1)
    bcf8:	84 a1 ff f0 	l.lwz r5,0xfffffff0(r1)
    bcfc:	44 00 48 00 	l.jr r9
    bd00:	15 00 00 00 	l.nop 0x0

0000bd04 <cpu_stack_monitor>:
    bd04:	18 60 00 01 	l.movhi r3,0x1
    bd08:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    bd0c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    bd10:	a8 63 37 e0 	l.ori r3,r3,0x37e0
    bd14:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    bd18:	00 00 00 03 	l.j bd24 <cpu_stack_monitor+0x20>
    bd1c:	9c 80 00 00 	l.addi r4,r0,0x0
    bd20:	9c 84 00 04 	l.addi r4,r4,0x4
    bd24:	18 40 00 01 	l.movhi r2,0x1
    bd28:	a8 42 3b e0 	l.ori r2,r2,0x3be0
    bd2c:	e4 63 10 00 	l.sfgeu r3,r2
    bd30:	10 00 00 06 	l.bf bd48 <cpu_stack_monitor+0x44>
    bd34:	15 00 00 00 	l.nop 0x0
    bd38:	84 a3 00 00 	l.lwz r5,0x0(r3)
    bd3c:	bc 05 00 00 	l.sfeqi r5,0x0
    bd40:	13 ff ff f8 	l.bf bd20 <cpu_stack_monitor+0x1c>
    bd44:	9c 63 00 04 	l.addi r3,r3,0x4
    bd48:	d4 01 20 00 	l.sw 0x0(r1),r4
    bd4c:	18 80 00 01 	l.movhi r4,0x1
    bd50:	9c 60 00 0f 	l.addi r3,r0,0xf
    bd54:	07 ff f8 99 	l.jal 9fb8 <debugger_printf>
    bd58:	a8 84 2c e6 	l.ori r4,r4,0x2ce6
    bd5c:	9c 21 00 0c 	l.addi r1,r1,0xc
    bd60:	9d 60 00 00 	l.addi r11,r0,0x0
    bd64:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    bd68:	44 00 48 00 	l.jr r9
    bd6c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000bd70 <cpu_init>:
    bd70:	18 60 00 00 	l.movhi r3,0x0
    bd74:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    bd78:	a8 63 bd 04 	l.ori r3,r3,0xbd04
    bd7c:	07 ff f9 77 	l.jal a358 <daemon_register_service>
    bd80:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    bd84:	9c 60 00 11 	l.addi r3,r0,0x11
    bd88:	b4 83 00 00 	l.mfspr r4,r3,0x0
    bd8c:	a8 84 00 04 	l.ori r4,r4,0x4
    bd90:	c0 03 20 00 	l.mtspr r3,r4,0x0
    bd94:	9c 21 00 04 	l.addi r1,r1,0x4
    bd98:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    bd9c:	44 00 48 00 	l.jr r9
    bda0:	15 00 00 00 	l.nop 0x0

0000bda4 <cpu_disable_int>:
    bda4:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    bda8:	9c 40 ff f9 	l.addi r2,r0,0xfffffff9
    bdac:	9c 60 00 11 	l.addi r3,r0,0x11
    bdb0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    bdb4:	b5 63 00 00 	l.mfspr r11,r3,0x0
    bdb8:	e0 8b 10 03 	l.and r4,r11,r2
    bdbc:	c0 03 20 00 	l.mtspr r3,r4,0x0
    bdc0:	9c 21 00 04 	l.addi r1,r1,0x4
    bdc4:	44 00 48 00 	l.jr r9
    bdc8:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000bdcc <cpu_enable_int>:
    bdcc:	9c 80 00 11 	l.addi r4,r0,0x11
    bdd0:	c0 04 18 00 	l.mtspr r4,r3,0x0
    bdd4:	44 00 48 00 	l.jr r9
    bdd8:	15 00 00 00 	l.nop 0x0

0000bddc <exit>:
    bddc:	18 80 00 01 	l.movhi r4,0x1
    bde0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    bde4:	9c 60 00 02 	l.addi r3,r0,0x2
    bde8:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    bdec:	07 ff f8 73 	l.jal 9fb8 <debugger_printf>
    bdf0:	a8 84 2c f9 	l.ori r4,r4,0x2cf9
    bdf4:	00 00 00 00 	l.j bdf4 <exit+0x18>
    bdf8:	15 00 00 00 	l.nop 0x0

0000bdfc <cpu_enter_doze>:
    bdfc:	9c 80 00 10 	l.addi r4,r0,0x10
    be00:	9c 60 40 00 	l.addi r3,r0,0x4000
    be04:	c0 03 20 00 	l.mtspr r3,r4,0x0
    be08:	44 00 48 00 	l.jr r9
    be0c:	15 00 00 00 	l.nop 0x0

0000be10 <reset_handler>:
    be10:	18 20 00 00 	l.movhi r1,0x0
    be14:	18 40 00 00 	l.movhi r2,0x0
    be18:	18 60 00 00 	l.movhi r3,0x0
    be1c:	18 80 00 00 	l.movhi r4,0x0
    be20:	18 a0 00 00 	l.movhi r5,0x0
    be24:	18 c0 00 00 	l.movhi r6,0x0
    be28:	18 e0 00 00 	l.movhi r7,0x0
    be2c:	19 00 00 00 	l.movhi r8,0x0
    be30:	19 20 00 00 	l.movhi r9,0x0
    be34:	19 40 00 00 	l.movhi r10,0x0
    be38:	19 60 00 00 	l.movhi r11,0x0
    be3c:	19 80 00 00 	l.movhi r12,0x0
    be40:	19 a0 00 00 	l.movhi r13,0x0
    be44:	19 c0 00 00 	l.movhi r14,0x0
    be48:	19 e0 00 00 	l.movhi r15,0x0
    be4c:	1a 00 00 00 	l.movhi r16,0x0
    be50:	1a 20 00 00 	l.movhi r17,0x0
    be54:	1a 40 00 00 	l.movhi r18,0x0
    be58:	1a 60 00 00 	l.movhi r19,0x0
    be5c:	1a 80 00 00 	l.movhi r20,0x0
    be60:	1a a0 00 00 	l.movhi r21,0x0
    be64:	1a c0 00 00 	l.movhi r22,0x0
    be68:	1a e0 00 00 	l.movhi r23,0x0
    be6c:	1b 00 00 00 	l.movhi r24,0x0
    be70:	1b 20 00 00 	l.movhi r25,0x0
    be74:	1b 40 00 00 	l.movhi r26,0x0
    be78:	1b 60 00 00 	l.movhi r27,0x0
    be7c:	1b 80 00 00 	l.movhi r28,0x0
    be80:	1b a0 00 00 	l.movhi r29,0x0
    be84:	1b c0 00 00 	l.movhi r30,0x0
    be88:	1b e0 00 00 	l.movhi r31,0x0
    be8c:	a8 20 00 01 	l.ori r1,r0,0x1
    be90:	a8 21 00 80 	l.ori r1,r1,0x80
    be94:	c0 00 08 11 	l.mtspr r0,r1,0x11
    be98:	c1 40 00 00 	l.mtspr r0,r0,0x5000
    be9c:	18 20 00 01 	l.movhi r1,0x1
    bea0:	a8 21 3b e0 	l.ori r1,r1,0x3be0
    bea4:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd
    bea8:	e0 21 10 03 	l.and r1,r1,r2
    beac:	b4 c0 00 11 	l.mfspr r6,r0,0x11
    beb0:	9c a0 ff ff 	l.addi r5,r0,0xffffffff
    beb4:	ac a5 00 10 	l.xori r5,r5,0x10
    beb8:	e0 a6 28 03 	l.and r5,r6,r5
    bebc:	c0 00 28 11 	l.mtspr r0,r5,0x11
    bec0:	9d c0 00 10 	l.addi r14,r0,0x10
    bec4:	9c c0 00 00 	l.addi r6,r0,0x0
    bec8:	9c a0 10 00 	l.addi r5,r0,0x1000

0000becc <invalid_block>:
    becc:	c0 80 30 02 	l.mtspr r0,r6,0x2002
    bed0:	e4 26 28 00 	l.sfne r6,r5
    bed4:	13 ff ff fe 	l.bf becc <invalid_block>
    bed8:	e0 c6 70 00 	l.add r6,r6,r14
    bedc:	15 00 00 00 	l.nop 0x0
    bee0:	15 00 00 00 	l.nop 0x0
    bee4:	15 00 00 00 	l.nop 0x0
    bee8:	15 00 00 00 	l.nop 0x0
    beec:	15 00 00 00 	l.nop 0x0
    bef0:	15 00 00 00 	l.nop 0x0
    bef4:	15 00 00 00 	l.nop 0x0
    bef8:	15 00 00 00 	l.nop 0x0
    befc:	15 00 00 00 	l.nop 0x0
    bf00:	15 00 00 00 	l.nop 0x0
    bf04:	15 00 00 00 	l.nop 0x0
    bf08:	18 a0 00 01 	l.movhi r5,0x1
    bf0c:	a8 a5 34 30 	l.ori r5,r5,0x3430
    bf10:	18 c0 00 01 	l.movhi r6,0x1
    bf14:	a8 c6 37 e0 	l.ori r6,r6,0x37e0
    bf18:	d4 05 00 00 	l.sw 0x0(r5),r0
    bf1c:	e4 85 30 00 	l.sfltu r5,r6
    bf20:	13 ff ff fe 	l.bf bf18 <invalid_block+0x4c>
    bf24:	9c a5 00 04 	l.addi r5,r5,0x4
    bf28:	07 ff f9 14 	l.jal a378 <startup_entry>
    bf2c:	15 00 00 00 	l.nop 0x0
    bf30:	9c 6b 00 00 	l.addi r3,r11,0x0
    bf34:	07 ff ff aa 	l.jal bddc <exit>
    bf38:	15 00 00 00 	l.nop 0x0

0000bf3c <bus_error_exception_handler>:
    bf3c:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    bf40:	d4 01 18 04 	l.sw 0x4(r1),r3
    bf44:	d4 01 20 08 	l.sw 0x8(r1),r4
    bf48:	d4 01 28 0c 	l.sw 0xc(r1),r5
    bf4c:	9c 60 00 02 	l.addi r3,r0,0x2
    bf50:	b4 80 00 20 	l.mfspr r4,r0,0x20
    bf54:	9c a1 00 00 	l.addi r5,r1,0x0
    bf58:	00 00 00 6e 	l.j c110 <cpu_exception_handler_entry>
    bf5c:	15 00 00 00 	l.nop 0x0

0000bf60 <data_page_fault_exception_handler>:
    bf60:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    bf64:	d4 01 18 04 	l.sw 0x4(r1),r3
    bf68:	d4 01 20 08 	l.sw 0x8(r1),r4
    bf6c:	d4 01 28 0c 	l.sw 0xc(r1),r5
    bf70:	9c 60 00 03 	l.addi r3,r0,0x3
    bf74:	b4 80 00 20 	l.mfspr r4,r0,0x20
    bf78:	9c a1 00 00 	l.addi r5,r1,0x0
    bf7c:	00 00 00 65 	l.j c110 <cpu_exception_handler_entry>
    bf80:	15 00 00 00 	l.nop 0x0

0000bf84 <insn_page_fault_exception_handler>:
    bf84:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    bf88:	d4 01 18 04 	l.sw 0x4(r1),r3
    bf8c:	d4 01 20 08 	l.sw 0x8(r1),r4
    bf90:	d4 01 28 0c 	l.sw 0xc(r1),r5
    bf94:	9c 60 00 04 	l.addi r3,r0,0x4
    bf98:	b4 80 00 20 	l.mfspr r4,r0,0x20
    bf9c:	9c a1 00 00 	l.addi r5,r1,0x0
    bfa0:	00 00 00 5c 	l.j c110 <cpu_exception_handler_entry>
    bfa4:	15 00 00 00 	l.nop 0x0

0000bfa8 <timer_exception_handler>:
    bfa8:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    bfac:	d4 01 18 04 	l.sw 0x4(r1),r3
    bfb0:	d4 01 20 08 	l.sw 0x8(r1),r4
    bfb4:	d4 01 28 0c 	l.sw 0xc(r1),r5
    bfb8:	9c 60 00 05 	l.addi r3,r0,0x5
    bfbc:	b4 80 00 20 	l.mfspr r4,r0,0x20
    bfc0:	9c a1 00 00 	l.addi r5,r1,0x0
    bfc4:	00 00 00 53 	l.j c110 <cpu_exception_handler_entry>
    bfc8:	15 00 00 00 	l.nop 0x0

0000bfcc <aligment_exception_handler>:
    bfcc:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    bfd0:	d4 01 18 04 	l.sw 0x4(r1),r3
    bfd4:	d4 01 20 08 	l.sw 0x8(r1),r4
    bfd8:	d4 01 28 0c 	l.sw 0xc(r1),r5
    bfdc:	9c 60 00 06 	l.addi r3,r0,0x6
    bfe0:	b4 80 00 20 	l.mfspr r4,r0,0x20
    bfe4:	9c a1 00 00 	l.addi r5,r1,0x0
    bfe8:	00 00 00 4a 	l.j c110 <cpu_exception_handler_entry>
    bfec:	15 00 00 00 	l.nop 0x0

0000bff0 <illegal_exception_handler>:
    bff0:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    bff4:	d4 01 18 04 	l.sw 0x4(r1),r3
    bff8:	d4 01 20 08 	l.sw 0x8(r1),r4
    bffc:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c000:	9c 60 00 07 	l.addi r3,r0,0x7
    c004:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c008:	9c a1 00 00 	l.addi r5,r1,0x0
    c00c:	00 00 00 41 	l.j c110 <cpu_exception_handler_entry>
    c010:	15 00 00 00 	l.nop 0x0

0000c014 <irq_exception_handler>:
    c014:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c018:	d4 01 18 04 	l.sw 0x4(r1),r3
    c01c:	d4 01 20 08 	l.sw 0x8(r1),r4
    c020:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c024:	9c 60 00 08 	l.addi r3,r0,0x8
    c028:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c02c:	9c a1 00 00 	l.addi r5,r1,0x0
    c030:	00 00 00 38 	l.j c110 <cpu_exception_handler_entry>
    c034:	15 00 00 00 	l.nop 0x0

0000c038 <dtlb_miss_exception_handler>:
    c038:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c03c:	d4 01 18 04 	l.sw 0x4(r1),r3
    c040:	d4 01 20 08 	l.sw 0x8(r1),r4
    c044:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c048:	9c 60 00 09 	l.addi r3,r0,0x9
    c04c:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c050:	9c a1 00 00 	l.addi r5,r1,0x0
    c054:	00 00 00 2f 	l.j c110 <cpu_exception_handler_entry>
    c058:	15 00 00 00 	l.nop 0x0

0000c05c <itlb_miss_exception_handler>:
    c05c:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c060:	d4 01 18 04 	l.sw 0x4(r1),r3
    c064:	d4 01 20 08 	l.sw 0x8(r1),r4
    c068:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c06c:	9c 60 00 0a 	l.addi r3,r0,0xa
    c070:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c074:	9c a1 00 00 	l.addi r5,r1,0x0
    c078:	00 00 00 26 	l.j c110 <cpu_exception_handler_entry>
    c07c:	15 00 00 00 	l.nop 0x0

0000c080 <range_exception_handler>:
    c080:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c084:	d4 01 18 04 	l.sw 0x4(r1),r3
    c088:	d4 01 20 08 	l.sw 0x8(r1),r4
    c08c:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c090:	9c 60 00 0b 	l.addi r3,r0,0xb
    c094:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c098:	9c a1 00 00 	l.addi r5,r1,0x0
    c09c:	00 00 00 1d 	l.j c110 <cpu_exception_handler_entry>
    c0a0:	15 00 00 00 	l.nop 0x0

0000c0a4 <syscall_exception_handler>:
    c0a4:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c0a8:	d4 01 18 04 	l.sw 0x4(r1),r3
    c0ac:	d4 01 20 08 	l.sw 0x8(r1),r4
    c0b0:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c0b4:	9c 60 00 0c 	l.addi r3,r0,0xc
    c0b8:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c0bc:	9c a1 00 00 	l.addi r5,r1,0x0
    c0c0:	00 00 00 14 	l.j c110 <cpu_exception_handler_entry>
    c0c4:	15 00 00 00 	l.nop 0x0

0000c0c8 <fpu_exception_handler>:
    c0c8:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c0cc:	d4 01 18 04 	l.sw 0x4(r1),r3
    c0d0:	d4 01 20 08 	l.sw 0x8(r1),r4
    c0d4:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c0d8:	9c 60 00 0d 	l.addi r3,r0,0xd
    c0dc:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c0e0:	9c a1 00 00 	l.addi r5,r1,0x0
    c0e4:	00 00 00 0b 	l.j c110 <cpu_exception_handler_entry>
    c0e8:	15 00 00 00 	l.nop 0x0

0000c0ec <trap_exception_handler>:
    c0ec:	9c 21 ff 00 	l.addi r1,r1,0xffffff00
    c0f0:	d4 01 18 04 	l.sw 0x4(r1),r3
    c0f4:	d4 01 20 08 	l.sw 0x8(r1),r4
    c0f8:	d4 01 28 0c 	l.sw 0xc(r1),r5
    c0fc:	9c 60 00 0e 	l.addi r3,r0,0xe
    c100:	b4 80 00 20 	l.mfspr r4,r0,0x20
    c104:	9c a1 00 00 	l.addi r5,r1,0x0
    c108:	00 00 00 02 	l.j c110 <cpu_exception_handler_entry>
    c10c:	15 00 00 00 	l.nop 0x0

0000c110 <cpu_exception_handler_entry>:
    c110:	d4 01 10 00 	l.sw 0x0(r1),r2
    c114:	d4 01 30 10 	l.sw 0x10(r1),r6
    c118:	d4 01 38 14 	l.sw 0x14(r1),r7
    c11c:	d4 01 40 18 	l.sw 0x18(r1),r8
    c120:	d4 01 48 1c 	l.sw 0x1c(r1),r9
    c124:	d4 01 50 20 	l.sw 0x20(r1),r10
    c128:	d4 01 58 24 	l.sw 0x24(r1),r11
    c12c:	d4 01 60 28 	l.sw 0x28(r1),r12
    c130:	d4 01 68 2c 	l.sw 0x2c(r1),r13
    c134:	d4 01 70 30 	l.sw 0x30(r1),r14
    c138:	d4 01 78 34 	l.sw 0x34(r1),r15
    c13c:	d4 01 80 38 	l.sw 0x38(r1),r16
    c140:	d4 01 88 3c 	l.sw 0x3c(r1),r17
    c144:	d4 01 90 40 	l.sw 0x40(r1),r18
    c148:	d4 01 98 44 	l.sw 0x44(r1),r19
    c14c:	d4 01 a0 48 	l.sw 0x48(r1),r20
    c150:	d4 01 a8 4c 	l.sw 0x4c(r1),r21
    c154:	d4 01 b0 50 	l.sw 0x50(r1),r22
    c158:	d4 01 b8 54 	l.sw 0x54(r1),r23
    c15c:	d4 01 c0 58 	l.sw 0x58(r1),r24
    c160:	d4 01 c8 5c 	l.sw 0x5c(r1),r25
    c164:	d4 01 d0 60 	l.sw 0x60(r1),r26
    c168:	d4 01 d8 64 	l.sw 0x64(r1),r27
    c16c:	d4 01 e0 68 	l.sw 0x68(r1),r28
    c170:	d4 01 e8 6c 	l.sw 0x6c(r1),r29
    c174:	d4 01 f0 70 	l.sw 0x70(r1),r30
    c178:	d4 01 f8 74 	l.sw 0x74(r1),r31
    c17c:	04 00 00 9a 	l.jal c3e4 <cpu_exception_handler_entry_c>
    c180:	15 00 00 00 	l.nop 0x0
    c184:	84 41 00 00 	l.lwz r2,0x0(r1)
    c188:	84 61 00 04 	l.lwz r3,0x4(r1)
    c18c:	84 81 00 08 	l.lwz r4,0x8(r1)
    c190:	84 a1 00 0c 	l.lwz r5,0xc(r1)
    c194:	84 c1 00 10 	l.lwz r6,0x10(r1)
    c198:	84 e1 00 14 	l.lwz r7,0x14(r1)
    c19c:	85 01 00 18 	l.lwz r8,0x18(r1)
    c1a0:	85 21 00 1c 	l.lwz r9,0x1c(r1)
    c1a4:	85 41 00 20 	l.lwz r10,0x20(r1)
    c1a8:	85 61 00 24 	l.lwz r11,0x24(r1)
    c1ac:	85 81 00 28 	l.lwz r12,0x28(r1)
    c1b0:	85 a1 00 2c 	l.lwz r13,0x2c(r1)
    c1b4:	85 c1 00 30 	l.lwz r14,0x30(r1)
    c1b8:	85 e1 00 34 	l.lwz r15,0x34(r1)
    c1bc:	86 01 00 38 	l.lwz r16,0x38(r1)
    c1c0:	86 21 00 3c 	l.lwz r17,0x3c(r1)
    c1c4:	86 41 00 40 	l.lwz r18,0x40(r1)
    c1c8:	86 61 00 44 	l.lwz r19,0x44(r1)
    c1cc:	86 81 00 48 	l.lwz r20,0x48(r1)
    c1d0:	86 a1 00 4c 	l.lwz r21,0x4c(r1)
    c1d4:	86 c1 00 50 	l.lwz r22,0x50(r1)
    c1d8:	86 e1 00 54 	l.lwz r23,0x54(r1)
    c1dc:	87 01 00 58 	l.lwz r24,0x58(r1)
    c1e0:	87 21 00 5c 	l.lwz r25,0x5c(r1)
    c1e4:	87 41 00 60 	l.lwz r26,0x60(r1)
    c1e8:	87 61 00 64 	l.lwz r27,0x64(r1)
    c1ec:	87 81 00 68 	l.lwz r28,0x68(r1)
    c1f0:	87 a1 00 6c 	l.lwz r29,0x6c(r1)
    c1f4:	87 c1 00 70 	l.lwz r30,0x70(r1)
    c1f8:	87 e1 00 74 	l.lwz r31,0x74(r1)
    c1fc:	9c 21 01 00 	l.addi r1,r1,0x100
    c200:	24 00 00 00 	l.rfe 
    c204:	15 00 00 00 	l.nop 0x0

0000c208 <__udivsi3>:
    c208:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    c20c:	d4 01 48 00 	l.sw 0x0(r1),r9
    c210:	9d 60 00 00 	l.addi r11,r0,0x0
    c214:	9d 04 00 00 	l.addi r8,r4,0x0
    c218:	9c a3 00 00 	l.addi r5,r3,0x0
    c21c:	e4 28 58 00 	l.sfne r8,r11
    c220:	0c 00 00 36 	l.bnf c2f8 <__udivsi3+0xf0>
    c224:	9c e0 00 00 	l.addi r7,r0,0x0
    c228:	e4 48 28 00 	l.sfgtu r8,r5
    c22c:	10 00 00 32 	l.bf c2f4 <__udivsi3+0xec>
    c230:	e4 08 28 00 	l.sfeq r8,r5
    c234:	10 00 00 2e 	l.bf c2ec <__udivsi3+0xe4>
    c238:	e4 8b 40 00 	l.sfltu r11,r8
    c23c:	0c 00 00 0d 	l.bnf c270 <__udivsi3+0x68>
    c240:	9d a0 00 20 	l.addi r13,r0,0x20
    c244:	19 20 80 00 	l.movhi r9,0x8000
    c248:	9c c0 ff ff 	l.addi r6,r0,0xffffffff
    c24c:	e0 65 48 03 	l.and r3,r5,r9
    c250:	b8 87 00 01 	l.slli r4,r7,0x1
    c254:	9d e5 00 00 	l.addi r15,r5,0x0
    c258:	b8 63 00 5f 	l.srli r3,r3,0x1f
    c25c:	e1 ad 30 00 	l.add r13,r13,r6
    c260:	e0 e4 18 04 	l.or r7,r4,r3
    c264:	e4 87 40 00 	l.sfltu r7,r8
    c268:	13 ff ff f9 	l.bf c24c <__udivsi3+0x44>
    c26c:	b8 a5 00 01 	l.slli r5,r5,0x1
    c270:	b8 e7 00 41 	l.srli r7,r7,0x1
    c274:	9d ad 00 01 	l.addi r13,r13,0x1
    c278:	9d 20 00 00 	l.addi r9,r0,0x0
    c27c:	e4 89 68 00 	l.sfltu r9,r13
    c280:	0c 00 00 1e 	l.bnf c2f8 <__udivsi3+0xf0>
    c284:	9c af 00 00 	l.addi r5,r15,0x0
    c288:	19 e0 80 00 	l.movhi r15,0x8000
    c28c:	9e 20 00 00 	l.addi r17,r0,0x0
    c290:	e0 65 78 03 	l.and r3,r5,r15
    c294:	b8 87 00 01 	l.slli r4,r7,0x1
    c298:	b8 63 00 5f 	l.srli r3,r3,0x1f
    c29c:	e0 e4 18 04 	l.or r7,r4,r3
    c2a0:	e0 c7 40 02 	l.sub r6,r7,r8
    c2a4:	e0 66 78 03 	l.and r3,r6,r15
    c2a8:	b8 63 00 5f 	l.srli r3,r3,0x1f
    c2ac:	9c 80 00 00 	l.addi r4,r0,0x0
    c2b0:	e4 23 20 00 	l.sfne r3,r4
    c2b4:	10 00 00 03 	l.bf c2c0 <__udivsi3+0xb8>
    c2b8:	b8 6b 00 01 	l.slli r3,r11,0x1
    c2bc:	9c 80 00 01 	l.addi r4,r0,0x1
    c2c0:	b8 a5 00 01 	l.slli r5,r5,0x1
    c2c4:	e4 24 88 00 	l.sfne r4,r17
    c2c8:	0c 00 00 03 	l.bnf c2d4 <__udivsi3+0xcc>
    c2cc:	e1 63 20 04 	l.or r11,r3,r4
    c2d0:	9c e6 00 00 	l.addi r7,r6,0x0
    c2d4:	9d 29 00 01 	l.addi r9,r9,0x1
    c2d8:	e4 89 68 00 	l.sfltu r9,r13
    c2dc:	13 ff ff ed 	l.bf c290 <__udivsi3+0x88>
    c2e0:	15 00 00 00 	l.nop 0x0
    c2e4:	00 00 00 05 	l.j c2f8 <__udivsi3+0xf0>
    c2e8:	15 00 00 00 	l.nop 0x0
    c2ec:	00 00 00 03 	l.j c2f8 <__udivsi3+0xf0>
    c2f0:	9d 60 00 01 	l.addi r11,r0,0x1
    c2f4:	9c e5 00 00 	l.addi r7,r5,0x0
    c2f8:	85 21 00 00 	l.lwz r9,0x0(r1)
    c2fc:	44 00 48 00 	l.jr r9
    c300:	9c 21 00 04 	l.addi r1,r1,0x4

0000c304 <__divsi3>:
    c304:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    c308:	d4 01 48 00 	l.sw 0x0(r1),r9
    c30c:	d4 01 70 04 	l.sw 0x4(r1),r14
    c310:	9c a3 00 00 	l.addi r5,r3,0x0
    c314:	9d c0 00 00 	l.addi r14,r0,0x0
    c318:	e5 85 00 00 	l.sflts r5,r0
    c31c:	0c 00 00 04 	l.bnf c32c <__divsi3+0x28>
    c320:	9c 60 00 00 	l.addi r3,r0,0x0
    c324:	9d c0 00 01 	l.addi r14,r0,0x1
    c328:	e0 a0 28 02 	l.sub r5,r0,r5
    c32c:	e5 84 00 00 	l.sflts r4,r0
    c330:	0c 00 00 04 	l.bnf c340 <__divsi3+0x3c>
    c334:	15 00 00 00 	l.nop 0x0
    c338:	9d ce 00 01 	l.addi r14,r14,0x1
    c33c:	e0 80 20 02 	l.sub r4,r0,r4
    c340:	07 ff ff b2 	l.jal c208 <__udivsi3>
    c344:	9c 65 00 00 	l.addi r3,r5,0x0
    c348:	bc 0e 00 01 	l.sfeqi r14,0x1
    c34c:	0c 00 00 03 	l.bnf c358 <__divsi3+0x54>
    c350:	15 00 00 00 	l.nop 0x0
    c354:	e1 60 58 02 	l.sub r11,r0,r11
    c358:	85 21 00 00 	l.lwz r9,0x0(r1)
    c35c:	85 c1 00 04 	l.lwz r14,0x4(r1)
    c360:	44 00 48 00 	l.jr r9
    c364:	9c 21 00 08 	l.addi r1,r1,0x8

0000c368 <__umodsi3>:
    c368:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    c36c:	d4 01 48 00 	l.sw 0x0(r1),r9
    c370:	07 ff ff a6 	l.jal c208 <__udivsi3>
    c374:	15 00 00 00 	l.nop 0x0
    c378:	9d 67 00 00 	l.addi r11,r7,0x0
    c37c:	85 21 00 00 	l.lwz r9,0x0(r1)
    c380:	44 00 48 00 	l.jr r9
    c384:	9c 21 00 04 	l.addi r1,r1,0x4

0000c388 <__modsi3>:
    c388:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    c38c:	d4 01 48 00 	l.sw 0x0(r1),r9
    c390:	d4 01 70 04 	l.sw 0x4(r1),r14
    c394:	9d c0 00 00 	l.addi r14,r0,0x0
    c398:	e5 83 00 00 	l.sflts r3,r0
    c39c:	0c 00 00 04 	l.bnf c3ac <__modsi3+0x24>
    c3a0:	15 00 00 00 	l.nop 0x0
    c3a4:	9d c0 00 01 	l.addi r14,r0,0x1
    c3a8:	e0 60 18 02 	l.sub r3,r0,r3
    c3ac:	e5 84 00 00 	l.sflts r4,r0
    c3b0:	0c 00 00 03 	l.bnf c3bc <__modsi3+0x34>
    c3b4:	15 00 00 00 	l.nop 0x0
    c3b8:	e0 80 20 02 	l.sub r4,r0,r4
    c3bc:	07 ff ff 93 	l.jal c208 <__udivsi3>
    c3c0:	15 00 00 00 	l.nop 0x0
    c3c4:	bc 0e 00 01 	l.sfeqi r14,0x1
    c3c8:	0c 00 00 03 	l.bnf c3d4 <__modsi3+0x4c>
    c3cc:	9d 67 00 00 	l.addi r11,r7,0x0
    c3d0:	e1 60 58 02 	l.sub r11,r0,r11
    c3d4:	85 21 00 00 	l.lwz r9,0x0(r1)
    c3d8:	85 c1 00 04 	l.lwz r14,0x4(r1)
    c3dc:	44 00 48 00 	l.jr r9
    c3e0:	9c 21 00 08 	l.addi r1,r1,0x8

0000c3e4 <cpu_exception_handler_entry_c>:
    c3e4:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    c3e8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    c3ec:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    c3f0:	a9 c5 00 00 	l.ori r14,r5,0x0
    c3f4:	bc 23 00 08 	l.sfnei r3,0x8
    c3f8:	10 00 00 07 	l.bf c414 <cpu_exception_handler_entry_c+0x30>
    c3fc:	9c 21 ff e8 	l.addi r1,r1,0xffffffe8
    c400:	9c 21 00 18 	l.addi r1,r1,0x18
    c404:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    c408:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    c40c:	03 ff e0 b4 	l.j 46dc <interrupt_entry>
    c410:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)
    c414:	18 40 00 01 	l.movhi r2,0x1
    c418:	d4 01 18 00 	l.sw 0x0(r1),r3
    c41c:	b8 63 00 02 	l.slli r3,r3,0x2
    c420:	a8 42 33 e4 	l.ori r2,r2,0x33e4
    c424:	e0 63 10 00 	l.add r3,r3,r2
    c428:	84 43 00 00 	l.lwz r2,0x0(r3)
    c42c:	d4 01 20 08 	l.sw 0x8(r1),r4
    c430:	18 80 00 01 	l.movhi r4,0x1
    c434:	9c 60 00 0f 	l.addi r3,r0,0xf
    c438:	a8 84 2d 06 	l.ori r4,r4,0x2d06
    c43c:	07 ff f6 df 	l.jal 9fb8 <debugger_printf>
    c440:	d4 01 10 04 	l.sw 0x4(r1),r2
    c444:	18 80 00 01 	l.movhi r4,0x1
    c448:	9c 60 00 0f 	l.addi r3,r0,0xf
    c44c:	a8 84 2d 2d 	l.ori r4,r4,0x2d2d
    c450:	07 ff f6 da 	l.jal 9fb8 <debugger_printf>
    c454:	9c 40 00 02 	l.addi r2,r0,0x2
    c458:	d4 01 10 00 	l.sw 0x0(r1),r2
    c45c:	18 80 00 01 	l.movhi r4,0x1
    c460:	84 6e 00 00 	l.lwz r3,0x0(r14)
    c464:	a8 84 2d 3d 	l.ori r4,r4,0x2d3d
    c468:	d4 01 18 04 	l.sw 0x4(r1),r3
    c46c:	9c 60 00 0f 	l.addi r3,r0,0xf
    c470:	07 ff f6 d2 	l.jal 9fb8 <debugger_printf>
    c474:	9c 42 00 01 	l.addi r2,r2,0x1
    c478:	bc 22 00 20 	l.sfnei r2,0x20
    c47c:	13 ff ff f7 	l.bf c458 <cpu_exception_handler_entry_c+0x74>
    c480:	9d ce 00 04 	l.addi r14,r14,0x4
    c484:	18 80 00 01 	l.movhi r4,0x1
    c488:	9c 60 00 0f 	l.addi r3,r0,0xf
    c48c:	07 ff f6 cb 	l.jal 9fb8 <debugger_printf>
    c490:	a8 84 2d 4d 	l.ori r4,r4,0x2d4d
    c494:	15 00 00 00 	l.nop 0x0
    c498:	00 00 00 00 	l.j c498 <cpu_exception_handler_entry_c+0xb4>
    c49c:	15 00 00 00 	l.nop 0x0

0000c4a0 <timer_tick_server>:
    c4a0:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    c4a4:	18 40 00 01 	l.movhi r2,0x1
    c4a8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    c4ac:	a8 42 35 d4 	l.ori r2,r2,0x35d4
    c4b0:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    c4b4:	84 62 00 00 	l.lwz r3,0x0(r2)
    c4b8:	9c 63 00 01 	l.addi r3,r3,0x1
    c4bc:	d4 02 18 00 	l.sw 0x0(r2),r3
    c4c0:	18 40 00 01 	l.movhi r2,0x1
    c4c4:	00 00 00 1c 	l.j c534 <timer_tick_server+0x94>
    c4c8:	a8 42 35 d8 	l.ori r2,r2,0x35d8
    c4cc:	84 83 00 10 	l.lwz r4,0x10(r3)
    c4d0:	bc 04 00 00 	l.sfeqi r4,0x0
    c4d4:	10 00 00 12 	l.bf c51c <timer_tick_server+0x7c>
    c4d8:	15 00 00 00 	l.nop 0x0
    c4dc:	84 83 00 04 	l.lwz r4,0x4(r3)
    c4e0:	bd a4 00 00 	l.sflesi r4,0x0
    c4e4:	10 00 00 05 	l.bf c4f8 <timer_tick_server+0x58>
    c4e8:	bc 24 00 00 	l.sfnei r4,0x0
    c4ec:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    c4f0:	00 00 00 0b 	l.j c51c <timer_tick_server+0x7c>
    c4f4:	d4 03 20 04 	l.sw 0x4(r3),r4
    c4f8:	10 00 00 09 	l.bf c51c <timer_tick_server+0x7c>
    c4fc:	15 00 00 00 	l.nop 0x0
    c500:	84 83 00 00 	l.lwz r4,0x0(r3)
    c504:	85 63 00 08 	l.lwz r11,0x8(r3)
    c508:	bc 0b 00 00 	l.sfeqi r11,0x0
    c50c:	10 00 00 04 	l.bf c51c <timer_tick_server+0x7c>
    c510:	d4 03 20 04 	l.sw 0x4(r3),r4
    c514:	48 00 58 00 	l.jalr r11
    c518:	84 63 00 0c 	l.lwz r3,0xc(r3)
    c51c:	18 60 00 01 	l.movhi r3,0x1
    c520:	9c 42 00 04 	l.addi r2,r2,0x4
    c524:	a8 63 35 e0 	l.ori r3,r3,0x35e0
    c528:	e4 02 18 00 	l.sfeq r2,r3
    c52c:	10 00 00 06 	l.bf c544 <timer_tick_server+0xa4>
    c530:	15 00 00 00 	l.nop 0x0
    c534:	84 62 00 00 	l.lwz r3,0x0(r2)
    c538:	bc 23 00 00 	l.sfnei r3,0x0
    c53c:	13 ff ff e4 	l.bf c4cc <timer_tick_server+0x2c>
    c540:	15 00 00 00 	l.nop 0x0
    c544:	9c 21 00 08 	l.addi r1,r1,0x8
    c548:	9d 60 00 00 	l.addi r11,r0,0x0
    c54c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    c550:	44 00 48 00 	l.jr r9
    c554:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000c558 <start_softtimer>:
    c558:	84 83 00 00 	l.lwz r4,0x0(r3)
    c55c:	d4 03 20 04 	l.sw 0x4(r3),r4
    c560:	9c 80 00 01 	l.addi r4,r0,0x1
    c564:	44 00 48 00 	l.jr r9
    c568:	d4 03 20 10 	l.sw 0x10(r3),r4

0000c56c <stop_softtimer>:
    c56c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    c570:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    c574:	9c 40 00 00 	l.addi r2,r0,0x0
    c578:	9c 21 00 04 	l.addi r1,r1,0x4
    c57c:	d4 03 10 04 	l.sw 0x4(r3),r2
    c580:	d4 03 10 10 	l.sw 0x10(r3),r2
    c584:	44 00 48 00 	l.jr r9
    c588:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000c58c <add_softtimer>:
    c58c:	18 80 00 01 	l.movhi r4,0x1
    c590:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    c594:	a8 84 32 f4 	l.ori r4,r4,0x32f4
    c598:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    c59c:	84 a4 00 00 	l.lwz r5,0x0(r4)
    c5a0:	bc 25 00 00 	l.sfnei r5,0x0
    c5a4:	10 00 00 10 	l.bf c5e4 <add_softtimer+0x58>
    c5a8:	9d 60 ff f3 	l.addi r11,r0,0xfffffff3
    c5ac:	18 c0 00 01 	l.movhi r6,0x1
    c5b0:	a8 c6 35 e0 	l.ori r6,r6,0x35e0
    c5b4:	84 86 00 00 	l.lwz r4,0x0(r6)
    c5b8:	bc 44 00 01 	l.sfgtui r4,0x1
    c5bc:	10 00 00 0a 	l.bf c5e4 <add_softtimer+0x58>
    c5c0:	9d 60 ff ea 	l.addi r11,r0,0xffffffea
    c5c4:	18 40 00 01 	l.movhi r2,0x1
    c5c8:	b8 e4 00 02 	l.slli r7,r4,0x2
    c5cc:	a8 42 35 d8 	l.ori r2,r2,0x35d8
    c5d0:	9c 84 00 01 	l.addi r4,r4,0x1
    c5d4:	e0 e7 10 00 	l.add r7,r7,r2
    c5d8:	d4 06 20 00 	l.sw 0x0(r6),r4
    c5dc:	d4 07 18 00 	l.sw 0x0(r7),r3
    c5e0:	a9 65 00 00 	l.ori r11,r5,0x0
    c5e4:	9c 21 00 04 	l.addi r1,r1,0x4
    c5e8:	44 00 48 00 	l.jr r9
    c5ec:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000c5f0 <current_time_tick>:
    c5f0:	18 60 00 01 	l.movhi r3,0x1
    c5f4:	a8 63 35 d4 	l.ori r3,r3,0x35d4
    c5f8:	85 63 00 00 	l.lwz r11,0x0(r3)
    c5fc:	44 00 48 00 	l.jr r9
    c600:	15 00 00 00 	l.nop 0x0

0000c604 <msec_to_ticks>:
    c604:	e0 83 18 00 	l.add r4,r3,r3
    c608:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    c60c:	e0 84 18 00 	l.add r4,r4,r3
    c610:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    c614:	b8 a4 00 05 	l.slli r5,r4,0x5
    c618:	e0 84 28 00 	l.add r4,r4,r5
    c61c:	e0 64 18 00 	l.add r3,r4,r3
    c620:	07 ff fe fa 	l.jal c208 <__udivsi3>
    c624:	9c 80 03 e8 	l.addi r4,r0,0x3e8
    c628:	9c 21 00 04 	l.addi r1,r1,0x4
    c62c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    c630:	44 00 48 00 	l.jr r9
    c634:	15 00 00 00 	l.nop 0x0

0000c638 <time_ticks_init>:
    c638:	18 60 00 00 	l.movhi r3,0x0
    c63c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    c640:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    c644:	a8 63 c4 a0 	l.ori r3,r3,0xc4a0
    c648:	9c 80 00 00 	l.addi r4,r0,0x0
    c64c:	07 ff e2 0e 	l.jal 4e84 <timer_request>
    c650:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    c654:	18 80 00 01 	l.movhi r4,0x1
    c658:	a8 6b 00 00 	l.ori r3,r11,0x0
    c65c:	a8 84 35 d0 	l.ori r4,r4,0x35d0
    c660:	bc 03 00 00 	l.sfeqi r3,0x0
    c664:	d4 04 58 00 	l.sw 0x0(r4),r11
    c668:	10 00 00 0a 	l.bf c690 <time_ticks_init+0x58>
    c66c:	9d 60 ff dc 	l.addi r11,r0,0xffffffdc
    c670:	18 80 00 01 	l.movhi r4,0x1
    c674:	9c 40 00 00 	l.addi r2,r0,0x0
    c678:	a8 84 35 d4 	l.ori r4,r4,0x35d4
    c67c:	a8 a2 00 00 	l.ori r5,r2,0x0
    c680:	d4 04 10 00 	l.sw 0x0(r4),r2
    c684:	07 ff e2 43 	l.jal 4f90 <timer_start>
    c688:	9c 80 00 0a 	l.addi r4,r0,0xa
    c68c:	a9 62 00 00 	l.ori r11,r2,0x0
    c690:	9c 21 00 08 	l.addi r1,r1,0x8
    c694:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    c698:	44 00 48 00 	l.jr r9
    c69c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000c6a0 <cpu_power_switch_set>:
    c6a0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    c6a4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    c6a8:	bc 05 00 00 	l.sfeqi r5,0x0
    c6ac:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    c6b0:	b8 63 00 04 	l.slli r3,r3,0x4
    c6b4:	10 00 00 36 	l.bf c78c <cpu_power_switch_set+0xec>
    c6b8:	b8 a4 00 02 	l.slli r5,r4,0x2
    c6bc:	18 c0 07 00 	l.movhi r6,0x700
    c6c0:	a8 c6 04 50 	l.ori r6,r6,0x450
    c6c4:	e0 43 30 00 	l.add r2,r3,r6
    c6c8:	e0 42 28 00 	l.add r2,r2,r5
    c6cc:	84 62 00 00 	l.lwz r3,0x0(r2)
    c6d0:	bc 23 00 00 	l.sfnei r3,0x0
    c6d4:	10 00 00 07 	l.bf c6f0 <cpu_power_switch_set+0x50>
    c6d8:	15 00 00 00 	l.nop 0x0
    c6dc:	d4 01 20 00 	l.sw 0x0(r1),r4
    c6e0:	18 80 00 01 	l.movhi r4,0x1
    c6e4:	9c 60 00 04 	l.addi r3,r0,0x4
    c6e8:	00 00 00 35 	l.j c7bc <cpu_power_switch_set+0x11c>
    c6ec:	a8 84 2e 47 	l.ori r4,r4,0x2e47
    c6f0:	9c 60 00 fe 	l.addi r3,r0,0xfe
    c6f4:	d4 02 18 00 	l.sw 0x0(r2),r3
    c6f8:	07 ff e2 d3 	l.jal 5244 <time_udelay>
    c6fc:	9c 60 00 14 	l.addi r3,r0,0x14
    c700:	9c 60 00 f8 	l.addi r3,r0,0xf8
    c704:	d4 02 18 00 	l.sw 0x0(r2),r3
    c708:	07 ff e2 cf 	l.jal 5244 <time_udelay>
    c70c:	9c 60 00 0a 	l.addi r3,r0,0xa
    c710:	9c 60 00 e0 	l.addi r3,r0,0xe0
    c714:	d4 02 18 00 	l.sw 0x0(r2),r3
    c718:	07 ff e2 cb 	l.jal 5244 <time_udelay>
    c71c:	9c 60 00 0a 	l.addi r3,r0,0xa
    c720:	9c 60 00 c0 	l.addi r3,r0,0xc0
    c724:	d4 02 18 00 	l.sw 0x0(r2),r3
    c728:	07 ff e2 c7 	l.jal 5244 <time_udelay>
    c72c:	9c 60 00 0a 	l.addi r3,r0,0xa
    c730:	9c 60 00 80 	l.addi r3,r0,0x80
    c734:	d4 02 18 00 	l.sw 0x0(r2),r3
    c738:	07 ff e2 c3 	l.jal 5244 <time_udelay>
    c73c:	9c 60 00 0a 	l.addi r3,r0,0xa
    c740:	9c 60 00 40 	l.addi r3,r0,0x40
    c744:	d4 02 18 00 	l.sw 0x0(r2),r3
    c748:	07 ff e2 bf 	l.jal 5244 <time_udelay>
    c74c:	9c 60 00 0a 	l.addi r3,r0,0xa
    c750:	9c 60 00 00 	l.addi r3,r0,0x0
    c754:	d4 02 18 00 	l.sw 0x0(r2),r3
    c758:	9c 60 00 0a 	l.addi r3,r0,0xa
    c75c:	07 ff e2 ba 	l.jal 5244 <time_udelay>
    c760:	15 00 00 00 	l.nop 0x0
    c764:	84 62 00 00 	l.lwz r3,0x0(r2)
    c768:	bc 23 00 00 	l.sfnei r3,0x0
    c76c:	13 ff ff fc 	l.bf c75c <cpu_power_switch_set+0xbc>
    c770:	9c 60 00 14 	l.addi r3,r0,0x14
    c774:	84 62 00 00 	l.lwz r3,0x0(r2)
    c778:	bc 23 00 00 	l.sfnei r3,0x0
    c77c:	13 ff ff fe 	l.bf c774 <cpu_power_switch_set+0xd4>
    c780:	15 00 00 00 	l.nop 0x0
    c784:	00 00 00 1a 	l.j c7ec <cpu_power_switch_set+0x14c>
    c788:	9c 21 00 0c 	l.addi r1,r1,0xc
    c78c:	18 c0 07 00 	l.movhi r6,0x700
    c790:	a8 c6 04 50 	l.ori r6,r6,0x450
    c794:	e0 43 30 00 	l.add r2,r3,r6
    c798:	e0 42 28 00 	l.add r2,r2,r5
    c79c:	84 62 00 00 	l.lwz r3,0x0(r2)
    c7a0:	bc 23 00 ff 	l.sfnei r3,0xff
    c7a4:	10 00 00 0a 	l.bf c7cc <cpu_power_switch_set+0x12c>
    c7a8:	9c 60 00 ff 	l.addi r3,r0,0xff
    c7ac:	d4 01 20 00 	l.sw 0x0(r1),r4
    c7b0:	18 80 00 01 	l.movhi r4,0x1
    c7b4:	9c 60 00 04 	l.addi r3,r0,0x4
    c7b8:	a8 84 2e 6e 	l.ori r4,r4,0x2e6e
    c7bc:	07 ff f5 ff 	l.jal 9fb8 <debugger_printf>
    c7c0:	15 00 00 00 	l.nop 0x0
    c7c4:	00 00 00 0a 	l.j c7ec <cpu_power_switch_set+0x14c>
    c7c8:	9c 21 00 0c 	l.addi r1,r1,0xc
    c7cc:	d4 02 18 00 	l.sw 0x0(r2),r3
    c7d0:	07 ff e2 9d 	l.jal 5244 <time_udelay>
    c7d4:	9c 60 00 1e 	l.addi r3,r0,0x1e
    c7d8:	84 62 00 00 	l.lwz r3,0x0(r2)
    c7dc:	bc 23 00 ff 	l.sfnei r3,0xff
    c7e0:	13 ff ff fe 	l.bf c7d8 <cpu_power_switch_set+0x138>
    c7e4:	15 00 00 00 	l.nop 0x0
    c7e8:	9c 21 00 0c 	l.addi r1,r1,0xc
    c7ec:	9d 60 00 00 	l.addi r11,r0,0x0
    c7f0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    c7f4:	44 00 48 00 	l.jr r9
    c7f8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000c7fc <is_old_cpureg_layout>:
    c7fc:	18 60 03 00 	l.movhi r3,0x300
    c800:	a8 63 00 24 	l.ori r3,r3,0x24
    c804:	84 63 00 00 	l.lwz r3,0x0(r3)
    c808:	a4 63 00 07 	l.andi r3,r3,0x7
    c80c:	bc 03 00 03 	l.sfeqi r3,0x3
    c810:	10 00 00 09 	l.bf c834 <is_old_cpureg_layout+0x38>
    c814:	bc 03 00 00 	l.sfeqi r3,0x0
    c818:	10 00 00 07 	l.bf c834 <is_old_cpureg_layout+0x38>
    c81c:	ac 63 00 04 	l.xori r3,r3,0x4
    c820:	e1 60 18 02 	l.sub r11,r0,r3
    c824:	e0 6b 18 04 	l.or r3,r11,r3
    c828:	ad 63 ff ff 	l.xori r11,r3,0xffffffff
    c82c:	00 00 00 03 	l.j c838 <is_old_cpureg_layout+0x3c>
    c830:	b9 6b 00 5f 	l.srli r11,r11,0x1f
    c834:	9d 60 00 01 	l.addi r11,r0,0x1
    c838:	44 00 48 00 	l.jr r9
    c83c:	15 00 00 00 	l.nop 0x0

0000c840 <cpucfg_init>:
    c840:	18 80 01 6e 	l.movhi r4,0x16e
    c844:	18 60 08 12 	l.movhi r3,0x812
    c848:	a8 84 36 00 	l.ori r4,r4,0x3600
    c84c:	a8 63 00 20 	l.ori r3,r3,0x20
    c850:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    c854:	d4 03 20 00 	l.sw 0x0(r3),r4
    c858:	18 60 00 01 	l.movhi r3,0x1
    c85c:	9c 40 00 00 	l.addi r2,r0,0x0
    c860:	a8 63 37 c0 	l.ori r3,r3,0x37c0
    c864:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    c868:	d4 03 10 00 	l.sw 0x0(r3),r2
    c86c:	9c 21 00 04 	l.addi r1,r1,0x4
    c870:	a9 62 00 00 	l.ori r11,r2,0x0
    c874:	44 00 48 00 	l.jr r9
    c878:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000c87c <cpucfg_exit>:
    c87c:	18 60 00 01 	l.movhi r3,0x1
    c880:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    c884:	a8 63 37 c0 	l.ori r3,r3,0x37c0
    c888:	9c 40 00 00 	l.addi r2,r0,0x0
    c88c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    c890:	d4 03 10 00 	l.sw 0x0(r3),r2
    c894:	9c 21 00 04 	l.addi r1,r1,0x4
    c898:	a9 62 00 00 	l.ori r11,r2,0x0
    c89c:	44 00 48 00 	l.jr r9
    c8a0:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000c8a4 <cpucfg_set_little_endian_address>:
    c8a4:	18 a0 00 01 	l.movhi r5,0x1
    c8a8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    c8ac:	a8 a5 37 c0 	l.ori r5,r5,0x37c0
    c8b0:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    c8b4:	84 c5 00 00 	l.lwz r6,0x0(r5)
    c8b8:	bd a6 00 03 	l.sflesi r6,0x3
    c8bc:	10 00 00 08 	l.bf c8dc <cpucfg_set_little_endian_address+0x38>
    c8c0:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    c8c4:	18 80 00 01 	l.movhi r4,0x1
    c8c8:	9c 60 00 04 	l.addi r3,r0,0x4
    c8cc:	07 ff f5 bb 	l.jal 9fb8 <debugger_printf>
    c8d0:	a8 84 2e 96 	l.ori r4,r4,0x2e96
    c8d4:	00 00 00 1e 	l.j c94c <cpucfg_set_little_endian_address+0xa8>
    c8d8:	9d 60 ff e4 	l.addi r11,r0,0xffffffe4
    c8dc:	18 c0 07 00 	l.movhi r6,0x700
    c8e0:	9d 60 00 01 	l.addi r11,r0,0x1
    c8e4:	a8 c6 04 0c 	l.ori r6,r6,0x40c
    c8e8:	18 40 00 e0 	l.movhi r2,0xe0
    c8ec:	84 e6 00 00 	l.lwz r7,0x0(r6)
    c8f0:	a8 42 00 82 	l.ori r2,r2,0x82
    c8f4:	d4 01 38 00 	l.sw 0x0(r1),r7
    c8f8:	85 01 00 00 	l.lwz r8,0x0(r1)
    c8fc:	84 e5 00 00 	l.lwz r7,0x0(r5)
    c900:	e0 eb 38 08 	l.sll r7,r11,r7
    c904:	e0 e7 40 04 	l.or r7,r7,r8
    c908:	d4 01 38 00 	l.sw 0x0(r1),r7
    c90c:	84 e1 00 00 	l.lwz r7,0x0(r1)
    c910:	d4 06 38 00 	l.sw 0x0(r6),r7
    c914:	84 c5 00 00 	l.lwz r6,0x0(r5)
    c918:	e0 c6 10 00 	l.add r6,r6,r2
    c91c:	18 40 07 00 	l.movhi r2,0x700
    c920:	b8 c6 00 03 	l.slli r6,r6,0x3
    c924:	a8 42 04 14 	l.ori r2,r2,0x414
    c928:	d4 06 18 00 	l.sw 0x0(r6),r3
    c92c:	84 65 00 00 	l.lwz r3,0x0(r5)
    c930:	b8 63 00 03 	l.slli r3,r3,0x3
    c934:	e0 63 10 00 	l.add r3,r3,r2
    c938:	d4 03 20 00 	l.sw 0x0(r3),r4
    c93c:	84 65 00 00 	l.lwz r3,0x0(r5)
    c940:	e0 63 58 00 	l.add r3,r3,r11
    c944:	9d 60 00 00 	l.addi r11,r0,0x0
    c948:	d4 05 18 00 	l.sw 0x0(r5),r3
    c94c:	9c 21 00 0c 	l.addi r1,r1,0xc
    c950:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    c954:	44 00 48 00 	l.jr r9
    c958:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000c95c <cpucfg_remove_little_endian_address>:
    c95c:	18 80 00 01 	l.movhi r4,0x1
    c960:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    c964:	a8 84 37 c0 	l.ori r4,r4,0x37c0
    c968:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    c96c:	84 a4 00 00 	l.lwz r5,0x0(r4)
    c970:	bd 45 00 00 	l.sfgtsi r5,0x0
    c974:	10 00 00 08 	l.bf c994 <cpucfg_remove_little_endian_address+0x38>
    c978:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    c97c:	18 80 00 01 	l.movhi r4,0x1
    c980:	9c 60 00 04 	l.addi r3,r0,0x4
    c984:	07 ff f5 8d 	l.jal 9fb8 <debugger_printf>
    c988:	a8 84 2e bd 	l.ori r4,r4,0x2ebd
    c98c:	00 00 00 30 	l.j ca4c <cpucfg_remove_little_endian_address+0xf0>
    c990:	9d 60 ff ed 	l.addi r11,r0,0xffffffed
    c994:	18 40 00 e0 	l.movhi r2,0xe0
    c998:	84 84 00 00 	l.lwz r4,0x0(r4)
    c99c:	a8 42 00 82 	l.ori r2,r2,0x82
    c9a0:	b8 63 00 89 	l.srai r3,r3,0x9
    c9a4:	e0 a4 10 00 	l.add r5,r4,r2
    c9a8:	00 00 00 08 	l.j c9c8 <cpucfg_remove_little_endian_address+0x6c>
    c9ac:	b8 a5 00 03 	l.slli r5,r5,0x3
    c9b0:	84 c5 00 00 	l.lwz r6,0x0(r5)
    c9b4:	b8 c6 00 49 	l.srli r6,r6,0x9
    c9b8:	e4 06 18 00 	l.sfeq r6,r3
    c9bc:	10 00 00 06 	l.bf c9d4 <cpucfg_remove_little_endian_address+0x78>
    c9c0:	9c a5 ff f8 	l.addi r5,r5,0xfffffff8
    c9c4:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    c9c8:	bc 24 00 00 	l.sfnei r4,0x0
    c9cc:	13 ff ff f9 	l.bf c9b0 <cpucfg_remove_little_endian_address+0x54>
    c9d0:	15 00 00 00 	l.nop 0x0
    c9d4:	18 60 07 00 	l.movhi r3,0x700
    c9d8:	18 40 00 e0 	l.movhi r2,0xe0
    c9dc:	a8 63 04 0c 	l.ori r3,r3,0x40c
    c9e0:	a8 42 00 82 	l.ori r2,r2,0x82
    c9e4:	84 a3 00 00 	l.lwz r5,0x0(r3)
    c9e8:	d4 01 28 00 	l.sw 0x0(r1),r5
    c9ec:	9c a0 00 01 	l.addi r5,r0,0x1
    c9f0:	84 c1 00 00 	l.lwz r6,0x0(r1)
    c9f4:	e0 a5 20 08 	l.sll r5,r5,r4
    c9f8:	ac a5 ff ff 	l.xori r5,r5,0xffffffff
    c9fc:	e0 a5 30 03 	l.and r5,r5,r6
    ca00:	d4 01 28 00 	l.sw 0x0(r1),r5
    ca04:	84 a1 00 00 	l.lwz r5,0x0(r1)
    ca08:	d4 03 28 00 	l.sw 0x0(r3),r5
    ca0c:	e0 64 10 00 	l.add r3,r4,r2
    ca10:	9c 40 00 00 	l.addi r2,r0,0x0
    ca14:	b8 63 00 03 	l.slli r3,r3,0x3
    ca18:	b8 84 00 03 	l.slli r4,r4,0x3
    ca1c:	d4 03 10 00 	l.sw 0x0(r3),r2
    ca20:	18 40 07 00 	l.movhi r2,0x700
    ca24:	18 60 00 01 	l.movhi r3,0x1
    ca28:	a8 42 04 14 	l.ori r2,r2,0x414
    ca2c:	a8 63 37 c0 	l.ori r3,r3,0x37c0
    ca30:	e0 84 10 00 	l.add r4,r4,r2
    ca34:	9c 40 00 00 	l.addi r2,r0,0x0
    ca38:	d4 04 10 00 	l.sw 0x0(r4),r2
    ca3c:	a9 62 00 00 	l.ori r11,r2,0x0
    ca40:	84 83 00 00 	l.lwz r4,0x0(r3)
    ca44:	9c 84 ff ff 	l.addi r4,r4,0xffffffff
    ca48:	d4 03 20 00 	l.sw 0x0(r3),r4
    ca4c:	9c 21 00 0c 	l.addi r1,r1,0xc
    ca50:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    ca54:	44 00 48 00 	l.jr r9
    ca58:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000ca5c <cpucfg_set_cpu_reset_state>:
    ca5c:	18 a0 09 01 	l.movhi r5,0x901
    ca60:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    ca64:	84 c5 00 00 	l.lwz r6,0x0(r5)
    ca68:	a4 84 00 01 	l.andi r4,r4,0x1
    ca6c:	d4 01 30 00 	l.sw 0x0(r1),r6
    ca70:	9c c0 00 01 	l.addi r6,r0,0x1
    ca74:	84 e1 00 00 	l.lwz r7,0x0(r1)
    ca78:	e0 c6 18 08 	l.sll r6,r6,r3
    ca7c:	e0 64 18 08 	l.sll r3,r4,r3
    ca80:	9d 60 00 00 	l.addi r11,r0,0x0
    ca84:	ac c6 ff ff 	l.xori r6,r6,0xffffffff
    ca88:	e0 c6 38 03 	l.and r6,r6,r7
    ca8c:	d4 01 30 00 	l.sw 0x0(r1),r6
    ca90:	84 c1 00 00 	l.lwz r6,0x0(r1)
    ca94:	e0 63 30 04 	l.or r3,r3,r6
    ca98:	d4 01 18 00 	l.sw 0x0(r1),r3
    ca9c:	84 61 00 00 	l.lwz r3,0x0(r1)
    caa0:	d4 05 18 00 	l.sw 0x0(r5),r3
    caa4:	44 00 48 00 	l.jr r9
    caa8:	9c 21 00 04 	l.addi r1,r1,0x4

0000caac <cpucfg_set_cpu_reset_state_ext>:
    caac:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    cab0:	18 40 02 40 	l.movhi r2,0x240
    cab4:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    cab8:	a8 42 40 18 	l.ori r2,r2,0x4018
    cabc:	a4 84 00 01 	l.andi r4,r4,0x1
    cac0:	e0 63 10 00 	l.add r3,r3,r2
    cac4:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    cac8:	b8 63 00 02 	l.slli r3,r3,0x2
    cacc:	9d 60 00 00 	l.addi r11,r0,0x0
    cad0:	84 a3 00 00 	l.lwz r5,0x0(r3)
    cad4:	d4 01 28 00 	l.sw 0x0(r1),r5
    cad8:	84 a1 00 00 	l.lwz r5,0x0(r1)
    cadc:	e0 a5 10 03 	l.and r5,r5,r2
    cae0:	d4 01 28 00 	l.sw 0x0(r1),r5
    cae4:	84 a1 00 00 	l.lwz r5,0x0(r1)
    cae8:	e0 84 28 04 	l.or r4,r4,r5
    caec:	d4 01 20 00 	l.sw 0x0(r1),r4
    caf0:	84 81 00 00 	l.lwz r4,0x0(r1)
    caf4:	d4 03 20 00 	l.sw 0x0(r3),r4
    caf8:	9c 21 00 08 	l.addi r1,r1,0x8
    cafc:	44 00 48 00 	l.jr r9
    cb00:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000cb04 <cpucfg_counter_clear>:
    cb04:	18 60 08 12 	l.movhi r3,0x812
    cb08:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    cb0c:	a8 83 00 08 	l.ori r4,r3,0x8
    cb10:	9c 40 00 00 	l.addi r2,r0,0x0
    cb14:	a8 63 00 0c 	l.ori r3,r3,0xc
    cb18:	d4 04 10 00 	l.sw 0x0(r4),r2
    cb1c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    cb20:	d4 03 10 00 	l.sw 0x0(r3),r2
    cb24:	9c 21 00 04 	l.addi r1,r1,0x4
    cb28:	a9 62 00 00 	l.ori r11,r2,0x0
    cb2c:	44 00 48 00 	l.jr r9
    cb30:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000cb34 <cpucfg_counter_read>:
    cb34:	18 60 08 11 	l.movhi r3,0x811
    cb38:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    cb3c:	a8 83 00 04 	l.ori r4,r3,0x4
    cb40:	84 a3 00 00 	l.lwz r5,0x0(r3)
    cb44:	d4 01 28 00 	l.sw 0x0(r1),r5
    cb48:	84 a4 00 00 	l.lwz r5,0x0(r4)
    cb4c:	d4 01 28 04 	l.sw 0x4(r1),r5
    cb50:	84 c1 00 04 	l.lwz r6,0x4(r1)
    cb54:	84 a4 00 00 	l.lwz r5,0x0(r4)
    cb58:	e4 26 28 00 	l.sfne r6,r5
    cb5c:	13 ff ff f9 	l.bf cb40 <cpucfg_counter_read+0xc>
    cb60:	15 00 00 00 	l.nop 0x0
    cb64:	84 c1 00 00 	l.lwz r6,0x0(r1)
    cb68:	84 a3 00 00 	l.lwz r5,0x0(r3)
    cb6c:	e4 46 28 00 	l.sfgtu r6,r5
    cb70:	13 ff ff f4 	l.bf cb40 <cpucfg_counter_read+0xc>
    cb74:	15 00 00 00 	l.nop 0x0
    cb78:	85 61 00 04 	l.lwz r11,0x4(r1)
    cb7c:	85 81 00 00 	l.lwz r12,0x0(r1)
    cb80:	44 00 48 00 	l.jr r9
    cb84:	9c 21 00 08 	l.addi r1,r1,0x8

0000cb88 <cpucfg_counter_ctrl>:
    cb88:	b8 63 00 18 	l.slli r3,r3,0x18
    cb8c:	18 80 08 12 	l.movhi r4,0x812
    cb90:	b8 63 00 98 	l.srai r3,r3,0x18
    cb94:	d4 04 18 00 	l.sw 0x0(r4),r3
    cb98:	44 00 48 00 	l.jr r9
    cb9c:	15 00 00 00 	l.nop 0x0

0000cba0 <cpucfg_set_cpux_jump_addr>:
    cba0:	18 80 07 00 	l.movhi r4,0x700
    cba4:	9d 60 00 00 	l.addi r11,r0,0x0
    cba8:	a8 84 01 fc 	l.ori r4,r4,0x1fc
    cbac:	d4 04 18 00 	l.sw 0x0(r4),r3
    cbb0:	44 00 48 00 	l.jr r9
    cbb4:	15 00 00 00 	l.nop 0x0

0000cbb8 <cpucfg_acinactm_process>:
    cbb8:	18 80 09 01 	l.movhi r4,0x901
    cbbc:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    cbc0:	a8 84 00 14 	l.ori r4,r4,0x14
    cbc4:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    cbc8:	84 a4 00 00 	l.lwz r5,0x0(r4)
    cbcc:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    cbd0:	d4 01 28 00 	l.sw 0x0(r1),r5
    cbd4:	a4 63 00 01 	l.andi r3,r3,0x1
    cbd8:	84 a1 00 00 	l.lwz r5,0x0(r1)
    cbdc:	e0 a5 10 03 	l.and r5,r5,r2
    cbe0:	d4 01 28 00 	l.sw 0x0(r1),r5
    cbe4:	84 a1 00 00 	l.lwz r5,0x0(r1)
    cbe8:	e0 63 28 04 	l.or r3,r3,r5
    cbec:	d4 01 18 00 	l.sw 0x0(r1),r3
    cbf0:	84 61 00 00 	l.lwz r3,0x0(r1)
    cbf4:	d4 04 18 00 	l.sw 0x0(r4),r3
    cbf8:	9c 21 00 08 	l.addi r1,r1,0x8
    cbfc:	44 00 48 00 	l.jr r9
    cc00:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000cc04 <cpucfg_wait_l2_enter_wfi>:
    cc04:	18 60 09 01 	l.movhi r3,0x901
    cc08:	a8 63 00 80 	l.ori r3,r3,0x80
    cc0c:	84 83 00 00 	l.lwz r4,0x0(r3)
    cc10:	a4 84 00 01 	l.andi r4,r4,0x1
    cc14:	bc 04 00 00 	l.sfeqi r4,0x0
    cc18:	13 ff ff fd 	l.bf cc0c <cpucfg_wait_l2_enter_wfi+0x8>
    cc1c:	15 00 00 00 	l.nop 0x0
    cc20:	44 00 48 00 	l.jr r9
    cc24:	15 00 00 00 	l.nop 0x0

0000cc28 <cpucfg_l1l2_reset_by_hardware>:
    cc28:	18 80 09 01 	l.movhi r4,0x901
    cc2c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    cc30:	a8 84 00 10 	l.ori r4,r4,0x10
    cc34:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    cc38:	84 a4 00 00 	l.lwz r5,0x0(r4)
    cc3c:	9c 40 ff e0 	l.addi r2,r0,0xffffffe0
    cc40:	d4 01 28 00 	l.sw 0x0(r1),r5
    cc44:	a4 63 00 1f 	l.andi r3,r3,0x1f
    cc48:	84 a1 00 00 	l.lwz r5,0x0(r1)
    cc4c:	e0 a5 10 03 	l.and r5,r5,r2
    cc50:	d4 01 28 00 	l.sw 0x0(r1),r5
    cc54:	84 a1 00 00 	l.lwz r5,0x0(r1)
    cc58:	e0 63 28 04 	l.or r3,r3,r5
    cc5c:	d4 01 18 00 	l.sw 0x0(r1),r3
    cc60:	84 61 00 00 	l.lwz r3,0x0(r1)
    cc64:	d4 04 18 00 	l.sw 0x0(r4),r3
    cc68:	9c 21 00 08 	l.addi r1,r1,0x8
    cc6c:	44 00 48 00 	l.jr r9
    cc70:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000cc74 <cpucfg_l1l2_reset_by_hardware_ext>:
    cc74:	18 80 09 01 	l.movhi r4,0x901
    cc78:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    cc7c:	a8 a4 00 10 	l.ori r5,r4,0x10
    cc80:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    cc84:	84 c5 00 00 	l.lwz r6,0x0(r5)
    cc88:	9c 40 ff ef 	l.addi r2,r0,0xffffffef
    cc8c:	d4 01 30 00 	l.sw 0x0(r1),r6
    cc90:	a4 63 00 10 	l.andi r3,r3,0x10
    cc94:	84 c1 00 00 	l.lwz r6,0x0(r1)
    cc98:	e0 c6 10 03 	l.and r6,r6,r2
    cc9c:	d4 01 30 00 	l.sw 0x0(r1),r6
    cca0:	84 c1 00 00 	l.lwz r6,0x0(r1)
    cca4:	e0 c3 30 04 	l.or r6,r3,r6
    cca8:	d4 01 30 00 	l.sw 0x0(r1),r6
    ccac:	84 c1 00 00 	l.lwz r6,0x0(r1)
    ccb0:	d4 05 30 00 	l.sw 0x0(r5),r6
    ccb4:	a8 a4 00 6c 	l.ori r5,r4,0x6c
    ccb8:	84 c5 00 00 	l.lwz r6,0x0(r5)
    ccbc:	e0 c6 10 03 	l.and r6,r6,r2
    ccc0:	e0 c3 30 04 	l.or r6,r3,r6
    ccc4:	d4 05 30 00 	l.sw 0x0(r5),r6
    ccc8:	a8 a4 00 68 	l.ori r5,r4,0x68
    cccc:	84 c5 00 00 	l.lwz r6,0x0(r5)
    ccd0:	e0 c6 10 03 	l.and r6,r6,r2
    ccd4:	e0 c3 30 04 	l.or r6,r3,r6
    ccd8:	d4 05 30 00 	l.sw 0x0(r5),r6
    ccdc:	a8 a4 00 64 	l.ori r5,r4,0x64
    cce0:	a8 84 00 60 	l.ori r4,r4,0x60
    cce4:	84 c5 00 00 	l.lwz r6,0x0(r5)
    cce8:	e0 c6 10 03 	l.and r6,r6,r2
    ccec:	e0 c3 30 04 	l.or r6,r3,r6
    ccf0:	d4 05 30 00 	l.sw 0x0(r5),r6
    ccf4:	84 a4 00 00 	l.lwz r5,0x0(r4)
    ccf8:	e0 a5 10 03 	l.and r5,r5,r2
    ccfc:	e0 63 28 04 	l.or r3,r3,r5
    cd00:	d4 04 18 00 	l.sw 0x0(r4),r3
    cd04:	9c 21 00 08 	l.addi r1,r1,0x8
    cd08:	44 00 48 00 	l.jr r9
    cd0c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000cd10 <cpucfg_cluster0_process>:
    cd10:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    cd14:	bc 03 00 00 	l.sfeqi r3,0x0
    cd18:	10 00 00 07 	l.bf cd34 <cpucfg_cluster0_process+0x24>
    cd1c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    cd20:	bc 03 00 01 	l.sfeqi r3,0x1
    cd24:	0c 00 00 10 	l.bnf cd64 <cpucfg_cluster0_process+0x54>
    cd28:	9c 60 00 04 	l.addi r3,r0,0x4
    cd2c:	00 00 00 06 	l.j cd44 <cpucfg_cluster0_process+0x34>
    cd30:	18 80 13 ff 	l.movhi r4,0x13ff
    cd34:	18 80 09 01 	l.movhi r4,0x901
    cd38:	d4 04 18 00 	l.sw 0x0(r4),r3
    cd3c:	00 00 00 0f 	l.j cd78 <cpucfg_cluster0_process+0x68>
    cd40:	9c 21 00 04 	l.addi r1,r1,0x4
    cd44:	18 60 09 01 	l.movhi r3,0x901
    cd48:	a8 84 01 00 	l.ori r4,r4,0x100
    cd4c:	d4 03 20 00 	l.sw 0x0(r3),r4
    cd50:	a8 63 00 c0 	l.ori r3,r3,0xc0
    cd54:	9c 80 00 0f 	l.addi r4,r0,0xf
    cd58:	d4 03 20 00 	l.sw 0x0(r3),r4
    cd5c:	00 00 00 07 	l.j cd78 <cpucfg_cluster0_process+0x68>
    cd60:	9c 21 00 04 	l.addi r1,r1,0x4
    cd64:	18 80 00 01 	l.movhi r4,0x1
    cd68:	9c 21 00 04 	l.addi r1,r1,0x4
    cd6c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    cd70:	03 ff f4 92 	l.j 9fb8 <debugger_printf>
    cd74:	a8 84 2e e4 	l.ori r4,r4,0x2ee4
    cd78:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    cd7c:	44 00 48 00 	l.jr r9
    cd80:	15 00 00 00 	l.nop 0x0

0000cd84 <cpucfg_cluster0_process_ext>:
    cd84:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    cd88:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    cd8c:	bc 03 00 00 	l.sfeqi r3,0x0
    cd90:	10 00 00 07 	l.bf cdac <cpucfg_cluster0_process_ext+0x28>
    cd94:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    cd98:	bc 03 00 01 	l.sfeqi r3,0x1
    cd9c:	0c 00 00 2e 	l.bnf ce54 <cpucfg_cluster0_process_ext+0xd0>
    cda0:	9c 60 00 04 	l.addi r3,r0,0x4
    cda4:	00 00 00 17 	l.j ce00 <cpucfg_cluster0_process_ext+0x7c>
    cda8:	18 80 13 00 	l.movhi r4,0x1300
    cdac:	18 80 09 01 	l.movhi r4,0x901
    cdb0:	9c 40 ff f8 	l.addi r2,r0,0xfffffff8
    cdb4:	a8 a4 00 6c 	l.ori r5,r4,0x6c
    cdb8:	84 c5 00 00 	l.lwz r6,0x0(r5)
    cdbc:	e0 c6 10 03 	l.and r6,r6,r2
    cdc0:	d4 05 30 00 	l.sw 0x0(r5),r6
    cdc4:	a8 a4 00 68 	l.ori r5,r4,0x68
    cdc8:	84 c5 00 00 	l.lwz r6,0x0(r5)
    cdcc:	e0 c6 10 03 	l.and r6,r6,r2
    cdd0:	d4 05 30 00 	l.sw 0x0(r5),r6
    cdd4:	a8 a4 00 64 	l.ori r5,r4,0x64
    cdd8:	84 c5 00 00 	l.lwz r6,0x0(r5)
    cddc:	e0 c6 10 03 	l.and r6,r6,r2
    cde0:	d4 05 30 00 	l.sw 0x0(r5),r6
    cde4:	a8 a4 00 60 	l.ori r5,r4,0x60
    cde8:	84 c5 00 00 	l.lwz r6,0x0(r5)
    cdec:	e0 c6 10 03 	l.and r6,r6,r2
    cdf0:	d4 05 30 00 	l.sw 0x0(r5),r6
    cdf4:	d4 04 18 00 	l.sw 0x0(r4),r3
    cdf8:	00 00 00 1d 	l.j ce6c <cpucfg_cluster0_process_ext+0xe8>
    cdfc:	9c 21 00 08 	l.addi r1,r1,0x8
    ce00:	18 60 09 01 	l.movhi r3,0x901
    ce04:	a8 84 01 00 	l.ori r4,r4,0x100
    ce08:	d4 03 20 00 	l.sw 0x0(r3),r4
    ce0c:	a8 83 00 60 	l.ori r4,r3,0x60
    ce10:	84 a4 00 00 	l.lwz r5,0x0(r4)
    ce14:	a8 a5 01 06 	l.ori r5,r5,0x106
    ce18:	d4 04 28 00 	l.sw 0x0(r4),r5
    ce1c:	a8 83 00 64 	l.ori r4,r3,0x64
    ce20:	84 a4 00 00 	l.lwz r5,0x0(r4)
    ce24:	a8 a5 01 06 	l.ori r5,r5,0x106
    ce28:	d4 04 28 00 	l.sw 0x0(r4),r5
    ce2c:	a8 83 00 68 	l.ori r4,r3,0x68
    ce30:	a8 63 00 6c 	l.ori r3,r3,0x6c
    ce34:	84 a4 00 00 	l.lwz r5,0x0(r4)
    ce38:	a8 a5 01 06 	l.ori r5,r5,0x106
    ce3c:	d4 04 28 00 	l.sw 0x0(r4),r5
    ce40:	84 83 00 00 	l.lwz r4,0x0(r3)
    ce44:	a8 84 01 06 	l.ori r4,r4,0x106
    ce48:	d4 03 20 00 	l.sw 0x0(r3),r4
    ce4c:	00 00 00 08 	l.j ce6c <cpucfg_cluster0_process_ext+0xe8>
    ce50:	9c 21 00 08 	l.addi r1,r1,0x8
    ce54:	9c 21 00 08 	l.addi r1,r1,0x8
    ce58:	18 80 00 01 	l.movhi r4,0x1
    ce5c:	a8 84 2e e4 	l.ori r4,r4,0x2ee4
    ce60:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    ce64:	03 ff f4 55 	l.j 9fb8 <debugger_printf>
    ce68:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)
    ce6c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    ce70:	44 00 48 00 	l.jr r9
    ce74:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000ce78 <cpucfg_cpu_suspend>:
    ce78:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    ce7c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    ce80:	9c 60 00 01 	l.addi r3,r0,0x1
    ce84:	07 ff ff 4d 	l.jal cbb8 <cpucfg_acinactm_process>
    ce88:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    ce8c:	04 00 13 00 	l.jal 11a8c <save_state_flag>
    ce90:	a8 60 b0 00 	l.ori r3,r0,0xb000
    ce94:	07 ff ff 5c 	l.jal cc04 <cpucfg_wait_l2_enter_wfi>
    ce98:	15 00 00 00 	l.nop 0x0
    ce9c:	04 00 12 fc 	l.jal 11a8c <save_state_flag>
    cea0:	a8 60 b0 01 	l.ori r3,r0,0xb001
    cea4:	07 ff fe 56 	l.jal c7fc <is_old_cpureg_layout>
    cea8:	15 00 00 00 	l.nop 0x0
    ceac:	bc 0b 00 00 	l.sfeqi r11,0x0
    ceb0:	10 00 00 27 	l.bf cf4c <cpucfg_cpu_suspend+0xd4>
    ceb4:	a8 4b 00 00 	l.ori r2,r11,0x0
    ceb8:	18 40 09 01 	l.movhi r2,0x901
    cebc:	9c 80 ff fe 	l.addi r4,r0,0xfffffffe
    cec0:	a8 42 00 c0 	l.ori r2,r2,0xc0
    cec4:	84 62 00 00 	l.lwz r3,0x0(r2)
    cec8:	d4 01 18 00 	l.sw 0x0(r1),r3
    cecc:	84 61 00 00 	l.lwz r3,0x0(r1)
    ced0:	e0 63 20 03 	l.and r3,r3,r4
    ced4:	d4 01 18 00 	l.sw 0x0(r1),r3
    ced8:	84 61 00 00 	l.lwz r3,0x0(r1)
    cedc:	d4 02 18 00 	l.sw 0x0(r2),r3
    cee0:	9c 60 00 00 	l.addi r3,r0,0x0
    cee4:	18 40 07 00 	l.movhi r2,0x700
    cee8:	a8 83 00 00 	l.ori r4,r3,0x0
    ceec:	07 ff fe dc 	l.jal ca5c <cpucfg_set_cpu_reset_state>
    cef0:	a8 42 04 40 	l.ori r2,r2,0x440
    cef4:	84 62 00 00 	l.lwz r3,0x0(r2)
    cef8:	9c a0 ff fe 	l.addi r5,r0,0xfffffffe
    cefc:	d4 01 18 00 	l.sw 0x0(r1),r3
    cf00:	84 61 00 00 	l.lwz r3,0x0(r1)
    cf04:	e0 63 28 03 	l.and r3,r3,r5
    cf08:	d4 01 18 00 	l.sw 0x0(r1),r3
    cf0c:	84 61 00 00 	l.lwz r3,0x0(r1)
    cf10:	d4 02 18 00 	l.sw 0x0(r2),r3
    cf14:	9c 60 00 00 	l.addi r3,r0,0x0
    cf18:	07 ff fe d1 	l.jal ca5c <cpucfg_set_cpu_reset_state>
    cf1c:	a8 83 00 00 	l.ori r4,r3,0x0
    cf20:	9c 60 00 01 	l.addi r3,r0,0x1
    cf24:	07 ff fe ce 	l.jal ca5c <cpucfg_set_cpu_reset_state>
    cf28:	9c 80 00 00 	l.addi r4,r0,0x0
    cf2c:	9c 60 00 02 	l.addi r3,r0,0x2
    cf30:	07 ff fe cb 	l.jal ca5c <cpucfg_set_cpu_reset_state>
    cf34:	9c 80 00 00 	l.addi r4,r0,0x0
    cf38:	9c 60 00 03 	l.addi r3,r0,0x3
    cf3c:	07 ff fe c8 	l.jal ca5c <cpucfg_set_cpu_reset_state>
    cf40:	9c 80 00 00 	l.addi r4,r0,0x0
    cf44:	00 00 00 26 	l.j cfdc <cpucfg_cpu_suspend+0x164>
    cf48:	9c 21 00 0c 	l.addi r1,r1,0xc
    cf4c:	18 60 09 01 	l.movhi r3,0x901
    cf50:	9c a0 fe ff 	l.addi r5,r0,0xfffffeff
    cf54:	a8 63 00 60 	l.ori r3,r3,0x60
    cf58:	84 83 00 00 	l.lwz r4,0x0(r3)
    cf5c:	d4 01 20 00 	l.sw 0x0(r1),r4
    cf60:	84 81 00 00 	l.lwz r4,0x0(r1)
    cf64:	e0 84 28 03 	l.and r4,r4,r5
    cf68:	d4 01 20 00 	l.sw 0x0(r1),r4
    cf6c:	84 81 00 00 	l.lwz r4,0x0(r1)
    cf70:	d4 03 20 00 	l.sw 0x0(r3),r4
    cf74:	a8 6b 00 00 	l.ori r3,r11,0x0
    cf78:	07 ff fe cd 	l.jal caac <cpucfg_set_cpu_reset_state_ext>
    cf7c:	a8 8b 00 00 	l.ori r4,r11,0x0
    cf80:	18 60 07 00 	l.movhi r3,0x700
    cf84:	9c a0 ff fe 	l.addi r5,r0,0xfffffffe
    cf88:	a8 63 04 70 	l.ori r3,r3,0x470
    cf8c:	84 83 00 00 	l.lwz r4,0x0(r3)
    cf90:	d4 01 20 00 	l.sw 0x0(r1),r4
    cf94:	84 81 00 00 	l.lwz r4,0x0(r1)
    cf98:	e0 84 28 03 	l.and r4,r4,r5
    cf9c:	d4 01 20 00 	l.sw 0x0(r1),r4
    cfa0:	84 81 00 00 	l.lwz r4,0x0(r1)
    cfa4:	d4 03 20 00 	l.sw 0x0(r3),r4
    cfa8:	a8 62 00 00 	l.ori r3,r2,0x0
    cfac:	07 ff fe c0 	l.jal caac <cpucfg_set_cpu_reset_state_ext>
    cfb0:	a8 82 00 00 	l.ori r4,r2,0x0
    cfb4:	9c 60 00 01 	l.addi r3,r0,0x1
    cfb8:	07 ff fe bd 	l.jal caac <cpucfg_set_cpu_reset_state_ext>
    cfbc:	a8 82 00 00 	l.ori r4,r2,0x0
    cfc0:	9c 60 00 02 	l.addi r3,r0,0x2
    cfc4:	07 ff fe ba 	l.jal caac <cpucfg_set_cpu_reset_state_ext>
    cfc8:	a8 82 00 00 	l.ori r4,r2,0x0
    cfcc:	9c 60 00 03 	l.addi r3,r0,0x3
    cfd0:	07 ff fe b7 	l.jal caac <cpucfg_set_cpu_reset_state_ext>
    cfd4:	a8 82 00 00 	l.ori r4,r2,0x0
    cfd8:	9c 21 00 0c 	l.addi r1,r1,0xc
    cfdc:	a8 60 b0 02 	l.ori r3,r0,0xb002
    cfe0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    cfe4:	00 00 12 aa 	l.j 11a8c <save_state_flag>
    cfe8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000cfec <cpucfg_cpu_suspend_late>:
    cfec:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
    cff0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    cff4:	07 ff fe 02 	l.jal c7fc <is_old_cpureg_layout>
    cff8:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
    cffc:	bc 0b 00 00 	l.sfeqi r11,0x0
    d000:	10 00 00 15 	l.bf d054 <cpucfg_cpu_suspend_late+0x68>
    d004:	a8 4b 00 00 	l.ori r2,r11,0x0
    d008:	9c 60 00 00 	l.addi r3,r0,0x0
    d00c:	07 ff ff 41 	l.jal cd10 <cpucfg_cluster0_process>
    d010:	18 40 07 00 	l.movhi r2,0x700
    d014:	04 00 12 9e 	l.jal 11a8c <save_state_flag>
    d018:	a8 60 b0 03 	l.ori r3,r0,0xb003
    d01c:	9c 80 00 00 	l.addi r4,r0,0x0
    d020:	a8 62 04 40 	l.ori r3,r2,0x440
    d024:	a8 42 04 a0 	l.ori r2,r2,0x4a0
    d028:	d4 03 20 00 	l.sw 0x0(r3),r4
    d02c:	d4 02 20 00 	l.sw 0x0(r2),r4
    d030:	07 ff e0 37 	l.jal 510c <time_mdelay>
    d034:	9c 60 00 01 	l.addi r3,r0,0x1
    d038:	9c 60 00 01 	l.addi r3,r0,0x1
    d03c:	04 00 12 f0 	l.jal 11bfc <ccu_set_poweroff_gating_state>
    d040:	a8 83 00 00 	l.ori r4,r3,0x0
    d044:	04 00 12 92 	l.jal 11a8c <save_state_flag>
    d048:	a8 60 b0 04 	l.ori r3,r0,0xb004
    d04c:	00 00 00 24 	l.j d0dc <cpucfg_cpu_suspend_late+0xf0>
    d050:	9c 60 00 00 	l.addi r3,r0,0x0
    d054:	07 ff ff 4c 	l.jal cd84 <cpucfg_cluster0_process_ext>
    d058:	a8 6b 00 00 	l.ori r3,r11,0x0
    d05c:	04 00 12 8c 	l.jal 11a8c <save_state_flag>
    d060:	a8 60 b0 03 	l.ori r3,r0,0xb003
    d064:	18 80 07 00 	l.movhi r4,0x700
    d068:	9c c0 ff fe 	l.addi r6,r0,0xfffffffe
    d06c:	a8 64 04 40 	l.ori r3,r4,0x440
    d070:	d4 03 10 00 	l.sw 0x0(r3),r2
    d074:	a8 64 04 7c 	l.ori r3,r4,0x47c
    d078:	84 a3 00 00 	l.lwz r5,0x0(r3)
    d07c:	e0 a5 30 03 	l.and r5,r5,r6
    d080:	d4 03 28 00 	l.sw 0x0(r3),r5
    d084:	a8 64 04 78 	l.ori r3,r4,0x478
    d088:	84 a3 00 00 	l.lwz r5,0x0(r3)
    d08c:	e0 a5 30 03 	l.and r5,r5,r6
    d090:	d4 03 28 00 	l.sw 0x0(r3),r5
    d094:	a8 64 04 74 	l.ori r3,r4,0x474
    d098:	84 a3 00 00 	l.lwz r5,0x0(r3)
    d09c:	e0 a5 30 03 	l.and r5,r5,r6
    d0a0:	d4 03 28 00 	l.sw 0x0(r3),r5
    d0a4:	a8 64 04 70 	l.ori r3,r4,0x470
    d0a8:	a8 84 04 a0 	l.ori r4,r4,0x4a0
    d0ac:	84 a3 00 00 	l.lwz r5,0x0(r3)
    d0b0:	e0 a5 30 03 	l.and r5,r5,r6
    d0b4:	d4 03 28 00 	l.sw 0x0(r3),r5
    d0b8:	d4 04 10 00 	l.sw 0x0(r4),r2
    d0bc:	07 ff e0 14 	l.jal 510c <time_mdelay>
    d0c0:	9c 60 00 01 	l.addi r3,r0,0x1
    d0c4:	9c 60 00 01 	l.addi r3,r0,0x1
    d0c8:	04 00 13 3e 	l.jal 11dc0 <ccu_set_poweroff_gating_state_ext>
    d0cc:	a8 83 00 00 	l.ori r4,r3,0x0
    d0d0:	04 00 12 6f 	l.jal 11a8c <save_state_flag>
    d0d4:	a8 60 b0 04 	l.ori r3,r0,0xb004
    d0d8:	a8 62 00 00 	l.ori r3,r2,0x0
    d0dc:	a8 83 00 00 	l.ori r4,r3,0x0
    d0e0:	07 ff fd 70 	l.jal c6a0 <cpu_power_switch_set>
    d0e4:	a8 a3 00 00 	l.ori r5,r3,0x0
    d0e8:	9c 21 00 08 	l.addi r1,r1,0x8
    d0ec:	a8 60 b0 05 	l.ori r3,r0,0xb005
    d0f0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d0f4:	00 00 12 66 	l.j 11a8c <save_state_flag>
    d0f8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

0000d0fc <cpucfg_cpu_resume>:
    d0fc:	a8 60 b0 0c 	l.ori r3,r0,0xb00c
    d100:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d104:	04 00 12 62 	l.jal 11a8c <save_state_flag>
    d108:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    d10c:	07 ff fd bc 	l.jal c7fc <is_old_cpureg_layout>
    d110:	15 00 00 00 	l.nop 0x0
    d114:	bc 0b 00 00 	l.sfeqi r11,0x0
    d118:	10 00 00 0c 	l.bf d148 <cpucfg_cpu_resume+0x4c>
    d11c:	a8 6b 00 00 	l.ori r3,r11,0x0
    d120:	18 60 07 00 	l.movhi r3,0x700
    d124:	a8 63 04 40 	l.ori r3,r3,0x440
    d128:	84 83 00 00 	l.lwz r4,0x0(r3)
    d12c:	a8 84 00 01 	l.ori r4,r4,0x1
    d130:	d4 03 20 00 	l.sw 0x0(r3),r4
    d134:	9c 60 00 00 	l.addi r3,r0,0x0
    d138:	07 ff fe 49 	l.jal ca5c <cpucfg_set_cpu_reset_state>
    d13c:	9c 80 00 03 	l.addi r4,r0,0x3
    d140:	00 00 00 09 	l.j d164 <cpucfg_cpu_resume+0x68>
    d144:	15 00 00 00 	l.nop 0x0
    d148:	18 80 07 00 	l.movhi r4,0x700
    d14c:	a8 84 04 70 	l.ori r4,r4,0x470
    d150:	84 a4 00 00 	l.lwz r5,0x0(r4)
    d154:	a8 a5 00 01 	l.ori r5,r5,0x1
    d158:	d4 04 28 00 	l.sw 0x0(r4),r5
    d15c:	07 ff fe 54 	l.jal caac <cpucfg_set_cpu_reset_state_ext>
    d160:	9c 80 00 03 	l.addi r4,r0,0x3
    d164:	04 00 12 4a 	l.jal 11a8c <save_state_flag>
    d168:	a8 60 b0 0d 	l.ori r3,r0,0xb00d
    d16c:	9c 21 00 04 	l.addi r1,r1,0x4
    d170:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d174:	44 00 48 00 	l.jr r9
    d178:	9d 60 00 00 	l.addi r11,r0,0x0

0000d17c <set_secondary_entry>:
    d17c:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    d180:	18 40 01 02 	l.movhi r2,0x102
    d184:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    d188:	a8 42 00 08 	l.ori r2,r2,0x8
    d18c:	e0 a4 10 00 	l.add r5,r4,r2
    d190:	18 40 08 10 	l.movhi r2,0x810
    d194:	b8 84 00 03 	l.slli r4,r4,0x3
    d198:	a8 42 00 44 	l.ori r2,r2,0x44
    d19c:	b8 a5 00 03 	l.slli r5,r5,0x3
    d1a0:	e0 84 10 00 	l.add r4,r4,r2
    d1a4:	9c 40 00 00 	l.addi r2,r0,0x0
    d1a8:	d4 05 18 00 	l.sw 0x0(r5),r3
    d1ac:	d4 04 10 00 	l.sw 0x0(r4),r2
    d1b0:	9c 21 00 04 	l.addi r1,r1,0x4
    d1b4:	44 00 48 00 	l.jr r9
    d1b8:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000d1bc <sun50i_set_AA32nAA64>:
    d1bc:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    d1c0:	b8 45 00 18 	l.slli r2,r5,0x18
    d1c4:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    d1c8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d1cc:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    d1d0:	a9 c4 00 00 	l.ori r14,r4,0x0
    d1d4:	07 ff fd 8a 	l.jal c7fc <is_old_cpureg_layout>
    d1d8:	b8 42 00 98 	l.srai r2,r2,0x18
    d1dc:	bc 0b 00 00 	l.sfeqi r11,0x0
    d1e0:	10 00 00 14 	l.bf d230 <sun50i_set_AA32nAA64+0x74>
    d1e4:	18 60 02 04 	l.movhi r3,0x204
    d1e8:	18 60 08 10 	l.movhi r3,0x810
    d1ec:	9d ce 00 04 	l.addi r14,r14,0x4
    d1f0:	84 83 00 00 	l.lwz r4,0x0(r3)
    d1f4:	d4 01 20 00 	l.sw 0x0(r1),r4
    d1f8:	9c 80 00 01 	l.addi r4,r0,0x1
    d1fc:	84 a1 00 00 	l.lwz r5,0x0(r1)
    d200:	e0 84 70 08 	l.sll r4,r4,r14
    d204:	e1 c2 70 08 	l.sll r14,r2,r14
    d208:	ac 84 ff ff 	l.xori r4,r4,0xffffffff
    d20c:	e0 84 28 03 	l.and r4,r4,r5
    d210:	d4 01 20 00 	l.sw 0x0(r1),r4
    d214:	84 a1 00 00 	l.lwz r5,0x0(r1)
    d218:	e1 ce 28 04 	l.or r14,r14,r5
    d21c:	d4 01 70 00 	l.sw 0x0(r1),r14
    d220:	84 41 00 00 	l.lwz r2,0x0(r1)
    d224:	d4 03 10 00 	l.sw 0x0(r3),r2
    d228:	00 00 00 11 	l.j d26c <sun50i_set_AA32nAA64+0xb0>
    d22c:	9c 21 00 10 	l.addi r1,r1,0x10
    d230:	9c a0 ff fe 	l.addi r5,r0,0xfffffffe
    d234:	a8 63 00 08 	l.ori r3,r3,0x8
    d238:	e0 8e 18 00 	l.add r4,r14,r3
    d23c:	b8 84 00 02 	l.slli r4,r4,0x2
    d240:	84 64 00 00 	l.lwz r3,0x0(r4)
    d244:	d4 01 18 00 	l.sw 0x0(r1),r3
    d248:	84 61 00 00 	l.lwz r3,0x0(r1)
    d24c:	e0 63 28 03 	l.and r3,r3,r5
    d250:	d4 01 18 00 	l.sw 0x0(r1),r3
    d254:	84 61 00 00 	l.lwz r3,0x0(r1)
    d258:	e0 42 18 04 	l.or r2,r2,r3
    d25c:	d4 01 10 00 	l.sw 0x0(r1),r2
    d260:	84 41 00 00 	l.lwz r2,0x0(r1)
    d264:	d4 04 10 00 	l.sw 0x0(r4),r2
    d268:	9c 21 00 10 	l.addi r1,r1,0x10
    d26c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d270:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    d274:	44 00 48 00 	l.jr r9
    d278:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

0000d27c <cpucfg_cpu_resume_early>:
    d27c:	d7 e1 87 f8 	l.sw 0xfffffff8(r1),r16
    d280:	aa 03 00 00 	l.ori r16,r3,0x0
    d284:	9c 60 00 00 	l.addi r3,r0,0x0
    d288:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d28c:	a8 83 00 00 	l.ori r4,r3,0x0
    d290:	d7 e1 17 f0 	l.sw 0xfffffff0(r1),r2
    d294:	9c a0 00 01 	l.addi r5,r0,0x1
    d298:	d7 e1 77 f4 	l.sw 0xfffffff4(r1),r14
    d29c:	07 ff fd 01 	l.jal c6a0 <cpu_power_switch_set>
    d2a0:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
    d2a4:	04 00 11 fa 	l.jal 11a8c <save_state_flag>
    d2a8:	a8 60 b0 06 	l.ori r3,r0,0xb006
    d2ac:	07 ff fd 54 	l.jal c7fc <is_old_cpureg_layout>
    d2b0:	15 00 00 00 	l.nop 0x0
    d2b4:	bc 0b 00 00 	l.sfeqi r11,0x0
    d2b8:	10 00 00 21 	l.bf d33c <cpucfg_cpu_resume_early+0xc0>
    d2bc:	a8 4b 00 00 	l.ori r2,r11,0x0
    d2c0:	9c 80 00 00 	l.addi r4,r0,0x0
    d2c4:	9c 60 00 01 	l.addi r3,r0,0x1
    d2c8:	04 00 12 4d 	l.jal 11bfc <ccu_set_poweroff_gating_state>
    d2cc:	9c 40 00 01 	l.addi r2,r0,0x1
    d2d0:	04 00 11 ef 	l.jal 11a8c <save_state_flag>
    d2d4:	a8 60 b0 07 	l.ori r3,r0,0xb007
    d2d8:	18 80 07 00 	l.movhi r4,0x700
    d2dc:	a8 64 04 a0 	l.ori r3,r4,0x4a0
    d2e0:	a8 84 04 40 	l.ori r4,r4,0x440
    d2e4:	d4 03 10 00 	l.sw 0x0(r3),r2
    d2e8:	18 60 00 01 	l.movhi r3,0x1
    d2ec:	d4 04 18 00 	l.sw 0x0(r4),r3
    d2f0:	9c 60 00 00 	l.addi r3,r0,0x0
    d2f4:	07 ff fd da 	l.jal ca5c <cpucfg_set_cpu_reset_state>
    d2f8:	a8 83 00 00 	l.ori r4,r3,0x0
    d2fc:	07 ff fe 85 	l.jal cd10 <cpucfg_cluster0_process>
    d300:	9c 60 00 00 	l.addi r3,r0,0x0
    d304:	04 00 11 e2 	l.jal 11a8c <save_state_flag>
    d308:	a8 60 b0 08 	l.ori r3,r0,0xb008
    d30c:	07 ff fe 47 	l.jal cc28 <cpucfg_l1l2_reset_by_hardware>
    d310:	9c 60 00 00 	l.addi r3,r0,0x0
    d314:	04 00 11 de 	l.jal 11a8c <save_state_flag>
    d318:	a8 60 b0 09 	l.ori r3,r0,0xb009
    d31c:	07 ff fe 27 	l.jal cbb8 <cpucfg_acinactm_process>
    d320:	9c 60 00 00 	l.addi r3,r0,0x0
    d324:	04 00 11 da 	l.jal 11a8c <save_state_flag>
    d328:	a8 60 b0 0a 	l.ori r3,r0,0xb00a
    d32c:	07 ff fe 79 	l.jal cd10 <cpucfg_cluster0_process>
    d330:	a8 62 00 00 	l.ori r3,r2,0x0
    d334:	00 00 00 20 	l.j d3b4 <cpucfg_cpu_resume_early+0x138>
    d338:	a8 70 00 00 	l.ori r3,r16,0x0
    d33c:	a8 8b 00 00 	l.ori r4,r11,0x0
    d340:	9c 60 00 01 	l.addi r3,r0,0x1
    d344:	04 00 12 9f 	l.jal 11dc0 <ccu_set_poweroff_gating_state_ext>
    d348:	9d c0 00 01 	l.addi r14,r0,0x1
    d34c:	04 00 11 d0 	l.jal 11a8c <save_state_flag>
    d350:	a8 60 b0 07 	l.ori r3,r0,0xb007
    d354:	18 80 07 00 	l.movhi r4,0x700
    d358:	a8 64 04 a0 	l.ori r3,r4,0x4a0
    d35c:	a8 84 04 40 	l.ori r4,r4,0x440
    d360:	d4 03 70 00 	l.sw 0x0(r3),r14
    d364:	18 60 00 01 	l.movhi r3,0x1
    d368:	d4 04 18 00 	l.sw 0x0(r4),r3
    d36c:	a8 82 00 00 	l.ori r4,r2,0x0
    d370:	07 ff fd cf 	l.jal caac <cpucfg_set_cpu_reset_state_ext>
    d374:	a8 62 00 00 	l.ori r3,r2,0x0
    d378:	07 ff fe 83 	l.jal cd84 <cpucfg_cluster0_process_ext>
    d37c:	a8 62 00 00 	l.ori r3,r2,0x0
    d380:	04 00 11 c3 	l.jal 11a8c <save_state_flag>
    d384:	a8 60 b0 08 	l.ori r3,r0,0xb008
    d388:	07 ff fe 3b 	l.jal cc74 <cpucfg_l1l2_reset_by_hardware_ext>
    d38c:	a8 62 00 00 	l.ori r3,r2,0x0
    d390:	04 00 11 bf 	l.jal 11a8c <save_state_flag>
    d394:	a8 60 b0 09 	l.ori r3,r0,0xb009
    d398:	07 ff fe 08 	l.jal cbb8 <cpucfg_acinactm_process>
    d39c:	a8 62 00 00 	l.ori r3,r2,0x0
    d3a0:	04 00 11 bb 	l.jal 11a8c <save_state_flag>
    d3a4:	a8 60 b0 0a 	l.ori r3,r0,0xb00a
    d3a8:	07 ff fe 77 	l.jal cd84 <cpucfg_cluster0_process_ext>
    d3ac:	a8 6e 00 00 	l.ori r3,r14,0x0
    d3b0:	a8 70 00 00 	l.ori r3,r16,0x0
    d3b4:	07 ff ff 72 	l.jal d17c <set_secondary_entry>
    d3b8:	9c 80 00 00 	l.addi r4,r0,0x0
    d3bc:	9c 60 00 00 	l.addi r3,r0,0x0
    d3c0:	9c a0 00 01 	l.addi r5,r0,0x1
    d3c4:	07 ff ff 7e 	l.jal d1bc <sun50i_set_AA32nAA64>
    d3c8:	a8 83 00 00 	l.ori r4,r3,0x0
    d3cc:	04 00 11 b0 	l.jal 11a8c <save_state_flag>
    d3d0:	a8 60 b0 0b 	l.ori r3,r0,0xb00b
    d3d4:	9c 21 00 10 	l.addi r1,r1,0x10
    d3d8:	9d 60 00 00 	l.addi r11,r0,0x0
    d3dc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d3e0:	84 41 ff f0 	l.lwz r2,0xfffffff0(r1)
    d3e4:	85 c1 ff f4 	l.lwz r14,0xfffffff4(r1)
    d3e8:	44 00 48 00 	l.jr r9
    d3ec:	86 01 ff f8 	l.lwz r16,0xfffffff8(r1)

0000d3f0 <cpu_power_up>:
    d3f0:	d7 e1 77 e0 	l.sw 0xffffffe0(r1),r14
    d3f4:	d7 e1 87 e4 	l.sw 0xffffffe4(r1),r16
    d3f8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d3fc:	d7 e1 17 dc 	l.sw 0xffffffdc(r1),r2
    d400:	d7 e1 97 e8 	l.sw 0xffffffe8(r1),r18
    d404:	d7 e1 a7 ec 	l.sw 0xffffffec(r1),r20
    d408:	d7 e1 b7 f0 	l.sw 0xfffffff0(r1),r22
    d40c:	d7 e1 c7 f4 	l.sw 0xfffffff4(r1),r24
    d410:	d7 e1 d7 f8 	l.sw 0xfffffff8(r1),r26
    d414:	9c 21 ff dc 	l.addi r1,r1,0xffffffdc
    d418:	aa 03 00 00 	l.ori r16,r3,0x0
    d41c:	07 ff fc f8 	l.jal c7fc <is_old_cpureg_layout>
    d420:	a9 c4 00 00 	l.ori r14,r4,0x0
    d424:	bc 0b 00 00 	l.sfeqi r11,0x0
    d428:	10 00 00 37 	l.bf d504 <cpu_power_up+0x114>
    d42c:	18 40 02 40 	l.movhi r2,0x240
    d430:	bb 10 00 02 	l.slli r24,r16,0x2
    d434:	9e c0 00 01 	l.addi r22,r0,0x1
    d438:	18 40 09 01 	l.movhi r2,0x901
    d43c:	a8 8e 00 00 	l.ori r4,r14,0x0
    d440:	e2 58 10 00 	l.add r18,r24,r2
    d444:	e0 56 70 08 	l.sll r2,r22,r14
    d448:	84 72 00 00 	l.lwz r3,0x0(r18)
    d44c:	a8 b6 00 00 	l.ori r5,r22,0x0
    d450:	af 42 ff ff 	l.xori r26,r2,0xffffffff
    d454:	e0 7a 18 03 	l.and r3,r26,r3
    d458:	d4 12 18 00 	l.sw 0x0(r18),r3
    d45c:	18 60 07 00 	l.movhi r3,0x700
    d460:	a8 63 04 40 	l.ori r3,r3,0x440
    d464:	e2 98 18 00 	l.add r20,r24,r3
    d468:	84 74 00 00 	l.lwz r3,0x0(r20)
    d46c:	e0 7a 18 03 	l.and r3,r26,r3
    d470:	d4 14 18 00 	l.sw 0x0(r20),r3
    d474:	07 ff ff 52 	l.jal d1bc <sun50i_set_AA32nAA64>
    d478:	a8 70 00 00 	l.ori r3,r16,0x0
    d47c:	18 80 07 00 	l.movhi r4,0x700
    d480:	a8 b6 00 00 	l.ori r5,r22,0x0
    d484:	a8 84 04 44 	l.ori r4,r4,0x444
    d488:	e3 18 20 00 	l.add r24,r24,r4
    d48c:	a8 8e 00 00 	l.ori r4,r14,0x0
    d490:	84 78 00 00 	l.lwz r3,0x0(r24)
    d494:	e0 62 18 04 	l.or r3,r2,r3
    d498:	d4 18 18 00 	l.sw 0x0(r24),r3
    d49c:	07 ff fc 81 	l.jal c6a0 <cpu_power_switch_set>
    d4a0:	a8 70 00 00 	l.ori r3,r16,0x0
    d4a4:	84 78 00 00 	l.lwz r3,0x0(r24)
    d4a8:	e3 5a 18 03 	l.and r26,r26,r3
    d4ac:	a8 76 00 00 	l.ori r3,r22,0x0
    d4b0:	d4 18 d0 00 	l.sw 0x0(r24),r26
    d4b4:	07 ff df 64 	l.jal 5244 <time_udelay>
    d4b8:	15 00 00 00 	l.nop 0x0
    d4bc:	84 74 00 00 	l.lwz r3,0x0(r20)
    d4c0:	e0 63 10 04 	l.or r3,r3,r2
    d4c4:	d4 14 18 00 	l.sw 0x0(r20),r3
    d4c8:	84 72 00 00 	l.lwz r3,0x0(r18)
    d4cc:	e0 63 10 04 	l.or r3,r3,r2
    d4d0:	d4 12 18 00 	l.sw 0x0(r18),r3
    d4d4:	18 60 09 01 	l.movhi r3,0x901
    d4d8:	a8 63 00 c0 	l.ori r3,r3,0xc0
    d4dc:	84 83 00 00 	l.lwz r4,0x0(r3)
    d4e0:	e0 82 20 04 	l.or r4,r2,r4
    d4e4:	d4 03 20 00 	l.sw 0x0(r3),r4
    d4e8:	18 60 07 00 	l.movhi r3,0x700
    d4ec:	a8 63 05 0c 	l.ori r3,r3,0x50c
    d4f0:	84 83 00 00 	l.lwz r4,0x0(r3)
    d4f4:	e0 42 20 04 	l.or r2,r2,r4
    d4f8:	d4 03 10 00 	l.sw 0x0(r3),r2
    d4fc:	00 00 00 2f 	l.j d5b8 <cpu_power_up+0x1c8>
    d500:	9c 21 00 24 	l.addi r1,r1,0x24
    d504:	9c 60 ff fe 	l.addi r3,r0,0xfffffffe
    d508:	a8 42 40 18 	l.ori r2,r2,0x4018
    d50c:	18 80 01 c0 	l.movhi r4,0x1c0
    d510:	e2 4e 10 00 	l.add r18,r14,r2
    d514:	a8 84 01 1c 	l.ori r4,r4,0x11c
    d518:	ba 52 00 02 	l.slli r18,r18,0x2
    d51c:	9c a0 00 01 	l.addi r5,r0,0x1
    d520:	84 52 00 00 	l.lwz r2,0x0(r18)
    d524:	e0 42 18 03 	l.and r2,r2,r3
    d528:	d4 12 10 00 	l.sw 0x0(r18),r2
    d52c:	e0 4e 20 00 	l.add r2,r14,r4
    d530:	9c 80 ff fe 	l.addi r4,r0,0xfffffffe
    d534:	b8 42 00 02 	l.slli r2,r2,0x2
    d538:	84 62 00 00 	l.lwz r3,0x0(r2)
    d53c:	e0 63 20 03 	l.and r3,r3,r4
    d540:	a8 8e 00 00 	l.ori r4,r14,0x0
    d544:	d4 02 18 00 	l.sw 0x0(r2),r3
    d548:	07 ff ff 1d 	l.jal d1bc <sun50i_set_AA32nAA64>
    d54c:	a8 70 00 00 	l.ori r3,r16,0x0
    d550:	84 62 00 00 	l.lwz r3,0x0(r2)
    d554:	a8 8e 00 00 	l.ori r4,r14,0x0
    d558:	a8 63 00 02 	l.ori r3,r3,0x2
    d55c:	9c a0 00 01 	l.addi r5,r0,0x1
    d560:	d4 02 18 00 	l.sw 0x0(r2),r3
    d564:	07 ff fc 4f 	l.jal c6a0 <cpu_power_switch_set>
    d568:	a8 70 00 00 	l.ori r3,r16,0x0
    d56c:	84 62 00 00 	l.lwz r3,0x0(r2)
    d570:	9c 80 ff fd 	l.addi r4,r0,0xfffffffd
    d574:	e0 63 20 03 	l.and r3,r3,r4
    d578:	d4 02 18 00 	l.sw 0x0(r2),r3
    d57c:	07 ff df 32 	l.jal 5244 <time_udelay>
    d580:	9c 60 00 01 	l.addi r3,r0,0x1
    d584:	84 62 00 00 	l.lwz r3,0x0(r2)
    d588:	a8 63 00 01 	l.ori r3,r3,0x1
    d58c:	d4 02 18 00 	l.sw 0x0(r2),r3
    d590:	84 72 00 00 	l.lwz r3,0x0(r18)
    d594:	a8 63 00 01 	l.ori r3,r3,0x1
    d598:	d4 12 18 00 	l.sw 0x0(r18),r3
    d59c:	84 72 00 00 	l.lwz r3,0x0(r18)
    d5a0:	a8 63 01 00 	l.ori r3,r3,0x100
    d5a4:	d4 12 18 00 	l.sw 0x0(r18),r3
    d5a8:	84 62 00 00 	l.lwz r3,0x0(r2)
    d5ac:	a8 63 00 10 	l.ori r3,r3,0x10
    d5b0:	d4 02 18 00 	l.sw 0x0(r2),r3
    d5b4:	9c 21 00 24 	l.addi r1,r1,0x24
    d5b8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d5bc:	84 41 ff dc 	l.lwz r2,0xffffffdc(r1)
    d5c0:	85 c1 ff e0 	l.lwz r14,0xffffffe0(r1)
    d5c4:	86 01 ff e4 	l.lwz r16,0xffffffe4(r1)
    d5c8:	86 41 ff e8 	l.lwz r18,0xffffffe8(r1)
    d5cc:	86 81 ff ec 	l.lwz r20,0xffffffec(r1)
    d5d0:	86 c1 ff f0 	l.lwz r22,0xfffffff0(r1)
    d5d4:	87 01 ff f4 	l.lwz r24,0xfffffff4(r1)
    d5d8:	44 00 48 00 	l.jr r9
    d5dc:	87 41 ff f8 	l.lwz r26,0xfffffff8(r1)

0000d5e0 <cpu_power_down>:
    d5e0:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
    d5e4:	18 40 09 01 	l.movhi r2,0x901
    d5e8:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
    d5ec:	ba 03 00 02 	l.slli r16,r3,0x2
    d5f0:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
    d5f4:	a8 42 00 80 	l.ori r2,r2,0x80
    d5f8:	a9 c4 00 00 	l.ori r14,r4,0x0
    d5fc:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
    d600:	e0 90 10 00 	l.add r4,r16,r2
    d604:	aa 43 00 00 	l.ori r18,r3,0x0
    d608:	9c 4e 00 10 	l.addi r2,r14,0x10
    d60c:	9c 60 00 01 	l.addi r3,r0,0x1
    d610:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d614:	e0 43 10 08 	l.sll r2,r3,r2
    d618:	9c 21 ff ec 	l.addi r1,r1,0xffffffec
    d61c:	84 64 00 00 	l.lwz r3,0x0(r4)
    d620:	e0 62 18 03 	l.and r3,r2,r3
    d624:	bc 03 00 00 	l.sfeqi r3,0x0
    d628:	13 ff ff fd 	l.bf d61c <cpu_power_down+0x3c>
    d62c:	15 00 00 00 	l.nop 0x0
    d630:	07 ff fc 73 	l.jal c7fc <is_old_cpureg_layout>
    d634:	15 00 00 00 	l.nop 0x0
    d638:	bc 0b 00 00 	l.sfeqi r11,0x0
    d63c:	10 00 00 25 	l.bf d6d0 <cpu_power_down+0xf0>
    d640:	18 c0 02 40 	l.movhi r6,0x240
    d644:	9c 80 00 01 	l.addi r4,r0,0x1
    d648:	18 60 07 00 	l.movhi r3,0x700
    d64c:	e0 a4 70 08 	l.sll r5,r4,r14
    d650:	a8 63 05 0c 	l.ori r3,r3,0x50c
    d654:	ac 45 ff ff 	l.xori r2,r5,0xffffffff
    d658:	84 c3 00 00 	l.lwz r6,0x0(r3)
    d65c:	e0 c2 30 03 	l.and r6,r2,r6
    d660:	d4 03 30 00 	l.sw 0x0(r3),r6
    d664:	18 60 09 01 	l.movhi r3,0x901
    d668:	a8 63 00 c0 	l.ori r3,r3,0xc0
    d66c:	84 c3 00 00 	l.lwz r6,0x0(r3)
    d670:	e0 c2 30 03 	l.and r6,r2,r6
    d674:	d4 03 30 00 	l.sw 0x0(r3),r6
    d678:	18 c0 07 00 	l.movhi r6,0x700
    d67c:	a8 c6 04 44 	l.ori r6,r6,0x444
    d680:	e0 70 30 00 	l.add r3,r16,r6
    d684:	84 c3 00 00 	l.lwz r6,0x0(r3)
    d688:	e0 a6 28 04 	l.or r5,r6,r5
    d68c:	d4 03 28 00 	l.sw 0x0(r3),r5
    d690:	23 00 00 00 	l.csync 
    d694:	07 ff de ec 	l.jal 5244 <time_udelay>
    d698:	a8 64 00 00 	l.ori r3,r4,0x0
    d69c:	18 80 09 01 	l.movhi r4,0x901
    d6a0:	18 c0 07 00 	l.movhi r6,0x700
    d6a4:	e0 70 20 00 	l.add r3,r16,r4
    d6a8:	a8 c6 04 40 	l.ori r6,r6,0x440
    d6ac:	84 83 00 00 	l.lwz r4,0x0(r3)
    d6b0:	e2 10 30 00 	l.add r16,r16,r6
    d6b4:	e0 84 10 03 	l.and r4,r4,r2
    d6b8:	d4 03 20 00 	l.sw 0x0(r3),r4
    d6bc:	84 70 00 00 	l.lwz r3,0x0(r16)
    d6c0:	e0 43 10 03 	l.and r2,r3,r2
    d6c4:	d4 10 10 00 	l.sw 0x0(r16),r2
    d6c8:	00 00 00 1f 	l.j d744 <cpu_power_down+0x164>
    d6cc:	9c 21 00 14 	l.addi r1,r1,0x14
    d6d0:	18 60 01 c0 	l.movhi r3,0x1c0
    d6d4:	a8 63 01 1c 	l.ori r3,r3,0x11c
    d6d8:	a8 c6 40 18 	l.ori r6,r6,0x4018
    d6dc:	e0 4e 18 00 	l.add r2,r14,r3
    d6e0:	9c 80 ff ef 	l.addi r4,r0,0xffffffef
    d6e4:	b8 42 00 02 	l.slli r2,r2,0x2
    d6e8:	e2 0e 30 00 	l.add r16,r14,r6
    d6ec:	84 62 00 00 	l.lwz r3,0x0(r2)
    d6f0:	ba 10 00 02 	l.slli r16,r16,0x2
    d6f4:	e0 63 20 03 	l.and r3,r3,r4
    d6f8:	9c 80 fe ff 	l.addi r4,r0,0xfffffeff
    d6fc:	d4 02 18 00 	l.sw 0x0(r2),r3
    d700:	84 70 00 00 	l.lwz r3,0x0(r16)
    d704:	e0 63 20 03 	l.and r3,r3,r4
    d708:	d4 10 18 00 	l.sw 0x0(r16),r3
    d70c:	84 62 00 00 	l.lwz r3,0x0(r2)
    d710:	a8 63 00 02 	l.ori r3,r3,0x2
    d714:	d4 02 18 00 	l.sw 0x0(r2),r3
    d718:	23 00 00 00 	l.csync 
    d71c:	07 ff de ca 	l.jal 5244 <time_udelay>
    d720:	9c 60 00 01 	l.addi r3,r0,0x1
    d724:	84 70 00 00 	l.lwz r3,0x0(r16)
    d728:	9c c0 ff fe 	l.addi r6,r0,0xfffffffe
    d72c:	e0 63 30 03 	l.and r3,r3,r6
    d730:	d4 10 18 00 	l.sw 0x0(r16),r3
    d734:	84 62 00 00 	l.lwz r3,0x0(r2)
    d738:	e0 63 30 03 	l.and r3,r3,r6
    d73c:	d4 02 18 00 	l.sw 0x0(r2),r3
    d740:	9c 21 00 14 	l.addi r1,r1,0x14
    d744:	a8 72 00 00 	l.ori r3,r18,0x0
    d748:	a8 8e 00 00 	l.ori r4,r14,0x0
    d74c:	9c a0 00 00 	l.addi r5,r0,0x0
    d750:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d754:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
    d758:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
    d75c:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
    d760:	03 ff fb d0 	l.j c6a0 <cpu_power_switch_set>
    d764:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

0000d768 <auto_cal_timing_standby>:
    d768:	d7 e1 17 f4 	l.sw 0xfffffff4(r1),r2
    d76c:	e0 44 1b 06 	l.mul r2,r4,r3
    d770:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    d774:	d7 e1 77 f8 	l.sw 0xfffffff8(r1),r14
    d778:	a8 62 00 00 	l.ori r3,r2,0x0
    d77c:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
    d780:	07 ff fa fa 	l.jal c368 <__umodsi3>
    d784:	9c 80 03 e8 	l.addi r4,r0,0x3e8
    d788:	e0 60 58 02 	l.sub r3,r0,r11
    d78c:	9c 80 03 e8 	l.addi r4,r0,0x3e8
    d790:	e1 63 58 04 	l.or r11,r3,r11
    d794:	a8 62 00 00 	l.ori r3,r2,0x0
    d798:	07 ff fa 9c 	l.jal c208 <__udivsi3>
    d79c:	b9 cb 00 5f 	l.srli r14,r11,0x1f
    d7a0:	9c 21 00 0c 	l.addi r1,r1,0xc
    d7a4:	e1 6e 58 00 	l.add r11,r14,r11
    d7a8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
    d7ac:	84 41 ff f4 	l.lwz r2,0xfffffff4(r1)
    d7b0:	44 00 48 00 	l.jr r9
    d7b4:	85 c1 ff f8 	l.lwz r14,0xfffffff8(r1)

0000d7b8 <phy_write_leveling_standby>:
    d7b8:	18 80 04 83 	l.movhi r4,0x483
    d7bc:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    d7c0:	a8 c4 00 08 	l.ori r6,r4,0x8
    d7c4:	9c 40 ff 3f 	l.addi r2,r0,0xffffff3f
    d7c8:	84 e6 00 00 	l.lwz r7,0x0(r6)
    d7cc:	84 a3 00 04 	l.lwz r5,0x4(r3)
    d7d0:	e0 e7 10 03 	l.and r7,r7,r2
    d7d4:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    d7d8:	a8 e7 00 80 	l.ori r7,r7,0x80
    d7dc:	bc 25 00 04 	l.sfnei r5,0x4
    d7e0:	d4 06 38 00 	l.sw 0x0(r6),r7
    d7e4:	10 00 00 09 	l.bf d808 <phy_write_leveling_standby+0x50>
    d7e8:	15 00 00 00 	l.nop 0x0
    d7ec:	8c c3 00 27 	l.lbz r6,0x27(r3)
    d7f0:	a8 a4 00 0c 	l.ori r5,r4,0xc
    d7f4:	a8 84 00 10 	l.ori r4,r4,0x10
    d7f8:	d4 05 30 00 	l.sw 0x0(r5),r6
    d7fc:	8c a3 00 26 	l.lbz r5,0x26(r3)
    d800:	00 00 00 0e 	l.j d838 <phy_write_leveling_standby+0x80>
    d804:	a8 a5 00 40 	l.ori r5,r5,0x40
    d808:	9c a5 ff fa 	l.addi r5,r5,0xfffffffa
    d80c:	bc 45 00 02 	l.sfgtui r5,0x2
    d810:	a8 a4 00 0c 	l.ori r5,r4,0xc
    d814:	10 00 00 06 	l.bf d82c <phy_write_leveling_standby+0x74>
    d818:	a8 84 00 10 	l.ori r4,r4,0x10
    d81c:	8c c3 00 2b 	l.lbz r6,0x2b(r3)
    d820:	d4 05 30 00 	l.sw 0x0(r5),r6
    d824:	00 00 00 05 	l.j d838 <phy_write_leveling_standby+0x80>
    d828:	8c a3 00 2a 	l.lbz r5,0x2a(r3)
    d82c:	9c c0 00 04 	l.addi r6,r0,0x4
    d830:	d4 05 30 00 	l.sw 0x0(r5),r6
    d834:	9c a0 00 40 	l.addi r5,r0,0x40
    d838:	d4 04 28 00 	l.sw 0x0(r4),r5
    d83c:	18 80 04 83 	l.movhi r4,0x483
    d840:	a8 a4 00 08 	l.ori r5,r4,0x8
    d844:	84 c5 00 00 	l.lwz r6,0x0(r5)
    d848:	a8 c6 00 04 	l.ori r6,r6,0x4
    d84c:	d4 05 30 00 	l.sw 0x0(r5),r6
    d850:	84 a3 00 1c 	l.lwz r5,0x1c(r3)
    d854:	a4 a5 00 01 	l.andi r5,r5,0x1
    d858:	bc 05 00 00 	l.sfeqi r5,0x0
    d85c:	10 00 00 0a 	l.bf d884 <phy_write_leveling_standby+0xcc>
    d860:	15 00 00 00 	l.nop 0x0
    d864:	a8 84 01 88 	l.ori r4,r4,0x188
    d868:	84 a4 00 00 	l.lwz r5,0x0(r4)
    d86c:	a4 a5 00 03 	l.andi r5,r5,0x3
    d870:	bc 25 00 03 	l.sfnei r5,0x3
    d874:	13 ff ff fd 	l.bf d868 <phy_write_leveling_standby+0xb0>
    d878:	15 00 00 00 	l.nop 0x0
    d87c:	00 00 00 09 	l.j d8a0 <phy_write_leveling_standby+0xe8>
    d880:	18 80 04 83 	l.movhi r4,0x483
    d884:	a8 84 01 88 	l.ori r4,r4,0x188
    d888:	84 a4 00 00 	l.lwz r5,0x0(r4)
    d88c:	a4 a5 00 0f 	l.andi r5,r5,0xf
    d890:	bc 25 00 0f 	l.sfnei r5,0xf
    d894:	13 ff ff fd 	l.bf d888 <phy_write_leveling_standby+0xd0>
    d898:	15 00 00 00 	l.nop 0x0
    d89c:	18 80 04 83 	l.movhi r4,0x483
    d8a0:	9c 40 ff fb 	l.addi r2,r0,0xfffffffb
    d8a4:	a8 84 00 08 	l.ori r4,r4,0x8
    d8a8:	9d 60 00 00 	l.addi r11,r0,0x0
    d8ac:	84 a4 00 00 	l.lwz r5,0x0(r4)
    d8b0:	e0 a5 10 03 	l.and r5,r5,r2
    d8b4:	d4 04 28 00 	l.sw 0x0(r4),r5
    d8b8:	a8 8b 00 00 	l.ori r4,r11,0x0
    d8bc:	00 00 00 05 	l.j d8d0 <phy_write_leveling_standby+0x118>
    d8c0:	a8 ab 00 00 	l.ori r5,r11,0x0
    d8c4:	10 00 00 03 	l.bf d8d0 <phy_write_leveling_standby+0x118>
    d8c8:	a8 a4 00 00 	l.ori r5,r4,0x0
    d8cc:	9c a4 00 2e 	l.addi r5,r4,0x2e
    d8d0:	18 40 01 20 	l.movhi r2,0x120
    d8d4:	a8 42 c0 96 	l.ori r2,r2,0xc096
    d8d8:	e0 a5 10 00 	l.add r5,r5,r2
    d8dc:	b8 a5 00 02 	l.slli r5,r5,0x2
    d8e0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    d8e4:	ac c5 00 3f 	l.xori r6,r5,0x3f
    d8e8:	e0 e0 30 02 	l.sub r7,r0,r6
    d8ec:	e0 c7 30 04 	l.or r6,r7,r6
    d8f0:	bd 66 00 00 	l.sfgesi r6,0x0
    d8f4:	10 00 00 06 	l.bf d90c <phy_write_leveling_standby+0x154>
    d8f8:	e0 c0 28 02 	l.sub r6,r0,r5
    d8fc:	e0 a6 28 04 	l.or r5,r6,r5
    d900:	bd 65 00 00 	l.sfgesi r5,0x0
    d904:	0c 00 00 03 	l.bnf d910 <phy_write_leveling_standby+0x158>
    d908:	15 00 00 00 	l.nop 0x0
    d90c:	9d 60 00 01 	l.addi r11,r0,0x1
    d910:	9c 84 00 01 	l.addi r4,r4,0x1
    d914:	bc 24 00 04 	l.sfnei r4,0x4
    d918:	13 ff ff eb 	l.bf d8c4 <phy_write_leveling_standby+0x10c>
    d91c:	bc a4 00 01 	l.sfleui r4,0x1
    d920:	18 a0 04 83 	l.movhi r5,0x483
    d924:	9c 40 ff 3f 	l.addi r2,r0,0xffffff3f
    d928:	a8 85 00 08 	l.ori r4,r5,0x8
    d92c:	84 c4 00 00 	l.lwz r6,0x0(r4)
    d930:	e0 c6 10 03 	l.and r6,r6,r2
    d934:	d4 04 30 00 	l.sw 0x0(r4),r6
    d938:	84 c3 00 1c 	l.lwz r6,0x1c(r3)
    d93c:	a4 c6 10 00 	l.andi r6,r6,0x1000
    d940:	bc 06 00 00 	l.sfeqi r6,0x0
    d944:	10 00 00 21 	l.bf d9c8 <phy_write_leveling_standby+0x210>
    d948:	15 00 00 00 	l.nop 0x0
    d94c:	84 c4 00 00 	l.lwz r6,0x0(r4)
    d950:	e0 c6 10 03 	l.and r6,r6,r2
    d954:	a8 c6 00 40 	l.ori r6,r6,0x40
    d958:	d4 04 30 00 	l.sw 0x0(r4),r6
    d95c:	84 c4 00 00 	l.lwz r6,0x0(r4)
    d960:	a8 c6 00 04 	l.ori r6,r6,0x4
    d964:	d4 04 30 00 	l.sw 0x0(r4),r6
    d968:	84 63 00 1c 	l.lwz r3,0x1c(r3)
    d96c:	a4 63 00 01 	l.andi r3,r3,0x1
    d970:	bc 03 00 00 	l.sfeqi r3,0x0
    d974:	10 00 00 0a 	l.bf d99c <phy_write_leveling_standby+0x1e4>
    d978:	15 00 00 00 	l.nop 0x0
    d97c:	a8 a5 01 88 	l.ori r5,r5,0x188
    d980:	84 65 00 00 	l.lwz r3,0x0(r5)
    d984:	a4 63 00 03 	l.andi r3,r3,0x3
    d988:	bc 23 00 03 	l.sfnei r3,0x3
    d98c:	13 ff ff fd 	l.bf d980 <phy_write_leveling_standby+0x1c8>
    d990:	18 60 04 83 	l.movhi r3,0x483
    d994:	00 00 00 09 	l.j d9b8 <phy_write_leveling_standby+0x200>
    d998:	9c 40 ff fb 	l.addi r2,r0,0xfffffffb
    d99c:	a8 a5 01 88 	l.ori r5,r5,0x188
    d9a0:	84 65 00 00 	l.lwz r3,0x0(r5)
    d9a4:	a4 63 00 0f 	l.andi r3,r3,0xf
    d9a8:	bc 23 00 0f 	l.sfnei r3,0xf
    d9ac:	13 ff ff fd 	l.bf d9a0 <phy_write_leveling_standby+0x1e8>
    d9b0:	18 60 04 83 	l.movhi r3,0x483
    d9b4:	9c 40 ff fb 	l.addi r2,r0,0xfffffffb
    d9b8:	a8 63 00 08 	l.ori r3,r3,0x8
    d9bc:	84 83 00 00 	l.lwz r4,0x0(r3)
    d9c0:	e0 84 10 03 	l.and r4,r4,r2
    d9c4:	d4 03 20 00 	l.sw 0x0(r3),r4
    d9c8:	18 60 04 83 	l.movhi r3,0x483
    d9cc:	9c 40 ff 3f 	l.addi r2,r0,0xffffff3f
    d9d0:	a8 63 00 08 	l.ori r3,r3,0x8
    d9d4:	ad 6b 00 01 	l.xori r11,r11,0x1
    d9d8:	84 83 00 00 	l.lwz r4,0x0(r3)
    d9dc:	e0 84 10 03 	l.and r4,r4,r2
    d9e0:	d4 03 20 00 	l.sw 0x0(r3),r4
    d9e4:	9c 21 00 04 	l.addi r1,r1,0x4
    d9e8:	44 00 48 00 	l.jr r9
    d9ec:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000d9f0 <phy_read_calibration_standby>:
    d9f0:	18 80 04 83 	l.movhi r4,0x483
    d9f4:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    d9f8:	a8 a4 00 08 	l.ori r5,r4,0x8
    d9fc:	9c 40 ff cf 	l.addi r2,r0,0xffffffcf
    da00:	84 c5 00 00 	l.lwz r6,0x0(r5)
    da04:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    da08:	e0 c6 10 03 	l.and r6,r6,r2
    da0c:	a8 c6 00 20 	l.ori r6,r6,0x20
    da10:	d4 05 30 00 	l.sw 0x0(r5),r6
    da14:	84 a3 00 04 	l.lwz r5,0x4(r3)
    da18:	bc 25 00 04 	l.sfnei r5,0x4
    da1c:	10 00 00 05 	l.bf da30 <phy_read_calibration_standby+0x40>
    da20:	a8 84 00 54 	l.ori r4,r4,0x54
    da24:	84 a4 00 00 	l.lwz r5,0x0(r4)
    da28:	a8 a5 00 02 	l.ori r5,r5,0x2
    da2c:	d4 04 28 00 	l.sw 0x0(r4),r5
    da30:	18 80 04 83 	l.movhi r4,0x483
    da34:	a8 a4 00 08 	l.ori r5,r4,0x8
    da38:	84 c5 00 00 	l.lwz r6,0x0(r5)
    da3c:	a8 c6 00 01 	l.ori r6,r6,0x1
    da40:	d4 05 30 00 	l.sw 0x0(r5),r6
    da44:	84 a3 00 1c 	l.lwz r5,0x1c(r3)
    da48:	a4 a5 00 01 	l.andi r5,r5,0x1
    da4c:	bc 25 00 00 	l.sfnei r5,0x0
    da50:	10 00 00 0b 	l.bf da7c <phy_read_calibration_standby+0x8c>
    da54:	15 00 00 00 	l.nop 0x0
    da58:	00 00 00 16 	l.j dab0 <phy_read_calibration_standby+0xc0>
    da5c:	a8 84 01 84 	l.ori r4,r4,0x184
    da60:	84 a4 00 00 	l.lwz r5,0x0(r4)
    da64:	a4 a5 00 20 	l.andi r5,r5,0x20
    da68:	bc 25 00 00 	l.sfnei r5,0x0
    da6c:	0c 00 00 05 	l.bnf da80 <phy_read_calibration_standby+0x90>
    da70:	9d 60 00 01 	l.addi r11,r0,0x1
    da74:	00 00 00 15 	l.j dac8 <phy_read_calibration_standby+0xd8>
    da78:	18 a0 04 83 	l.movhi r5,0x483
    da7c:	a8 84 01 84 	l.ori r4,r4,0x184
    da80:	84 a4 00 00 	l.lwz r5,0x0(r4)
    da84:	a4 a5 00 03 	l.andi r5,r5,0x3
    da88:	bc 25 00 03 	l.sfnei r5,0x3
    da8c:	13 ff ff f5 	l.bf da60 <phy_read_calibration_standby+0x70>
    da90:	9d 60 00 00 	l.addi r11,r0,0x0
    da94:	00 00 00 0d 	l.j dac8 <phy_read_calibration_standby+0xd8>
    da98:	18 a0 04 83 	l.movhi r5,0x483
    da9c:	84 a4 00 00 	l.lwz r5,0x0(r4)
    daa0:	a4 a5 00 20 	l.andi r5,r5,0x20
    daa4:	bc 25 00 00 	l.sfnei r5,0x0
    daa8:	10 00 00 07 	l.bf dac4 <phy_read_calibration_standby+0xd4>
    daac:	9d 60 00 01 	l.addi r11,r0,0x1
    dab0:	84 a4 00 00 	l.lwz r5,0x0(r4)
    dab4:	a4 a5 00 0f 	l.andi r5,r5,0xf
    dab8:	bc 25 00 0f 	l.sfnei r5,0xf
    dabc:	13 ff ff f8 	l.bf da9c <phy_read_calibration_standby+0xac>
    dac0:	9d 60 00 00 	l.addi r11,r0,0x0
    dac4:	18 a0 04 83 	l.movhi r5,0x483
    dac8:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    dacc:	a8 85 00 08 	l.ori r4,r5,0x8
    dad0:	84 c4 00 00 	l.lwz r6,0x0(r4)
    dad4:	e0 c6 10 03 	l.and r6,r6,r2
    dad8:	9c 40 ff cf 	l.addi r2,r0,0xffffffcf
    dadc:	d4 04 30 00 	l.sw 0x0(r4),r6
    dae0:	84 c4 00 00 	l.lwz r6,0x0(r4)
    dae4:	e0 c6 10 03 	l.and r6,r6,r2
    dae8:	d4 04 30 00 	l.sw 0x0(r4),r6
    daec:	84 c3 00 1c 	l.lwz r6,0x1c(r3)
    daf0:	a4 c6 10 00 	l.andi r6,r6,0x1000
    daf4:	bc 06 00 00 	l.sfeqi r6,0x0
    daf8:	10 00 00 33 	l.bf dbc4 <phy_read_calibration_standby+0x1d4>
    dafc:	15 00 00 00 	l.nop 0x0
    db00:	84 c4 00 00 	l.lwz r6,0x0(r4)
    db04:	e0 c6 10 03 	l.and r6,r6,r2
    db08:	a8 c6 00 10 	l.ori r6,r6,0x10
    db0c:	d4 04 30 00 	l.sw 0x0(r4),r6
    db10:	84 c4 00 00 	l.lwz r6,0x0(r4)
    db14:	a8 c6 00 01 	l.ori r6,r6,0x1
    db18:	d4 04 30 00 	l.sw 0x0(r4),r6
    db1c:	84 63 00 1c 	l.lwz r3,0x1c(r3)
    db20:	a4 63 00 01 	l.andi r3,r3,0x1
    db24:	bc 23 00 00 	l.sfnei r3,0x0
    db28:	10 00 00 0b 	l.bf db54 <phy_read_calibration_standby+0x164>
    db2c:	15 00 00 00 	l.nop 0x0
    db30:	00 00 00 18 	l.j db90 <phy_read_calibration_standby+0x1a0>
    db34:	a8 a5 01 84 	l.ori r5,r5,0x184
    db38:	84 65 00 00 	l.lwz r3,0x0(r5)
    db3c:	a4 63 00 20 	l.andi r3,r3,0x20
    db40:	bc 23 00 00 	l.sfnei r3,0x0
    db44:	0c 00 00 05 	l.bnf db58 <phy_read_calibration_standby+0x168>
    db48:	15 00 00 00 	l.nop 0x0
    db4c:	00 00 00 18 	l.j dbac <phy_read_calibration_standby+0x1bc>
    db50:	9d 60 00 01 	l.addi r11,r0,0x1
    db54:	a8 a5 01 84 	l.ori r5,r5,0x184
    db58:	84 65 00 00 	l.lwz r3,0x0(r5)
    db5c:	a4 63 00 03 	l.andi r3,r3,0x3
    db60:	bc 23 00 03 	l.sfnei r3,0x3
    db64:	13 ff ff f5 	l.bf db38 <phy_read_calibration_standby+0x148>
    db68:	18 60 04 83 	l.movhi r3,0x483
    db6c:	00 00 00 12 	l.j dbb4 <phy_read_calibration_standby+0x1c4>
    db70:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    db74:	84 65 00 00 	l.lwz r3,0x0(r5)
    db78:	a4 63 00 20 	l.andi r3,r3,0x20
    db7c:	bc 23 00 00 	l.sfnei r3,0x0
    db80:	0c 00 00 04 	l.bnf db90 <phy_read_calibration_standby+0x1a0>
    db84:	15 00 00 00 	l.nop 0x0
    db88:	00 00 00 09 	l.j dbac <phy_read_calibration_standby+0x1bc>
    db8c:	9d 60 00 01 	l.addi r11,r0,0x1
    db90:	84 65 00 00 	l.lwz r3,0x0(r5)
    db94:	a4 63 00 0f 	l.andi r3,r3,0xf
    db98:	bc 23 00 0f 	l.sfnei r3,0xf
    db9c:	13 ff ff f6 	l.bf db74 <phy_read_calibration_standby+0x184>
    dba0:	18 60 04 83 	l.movhi r3,0x483
    dba4:	00 00 00 04 	l.j dbb4 <phy_read_calibration_standby+0x1c4>
    dba8:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    dbac:	18 60 04 83 	l.movhi r3,0x483
    dbb0:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    dbb4:	a8 63 00 08 	l.ori r3,r3,0x8
    dbb8:	84 83 00 00 	l.lwz r4,0x0(r3)
    dbbc:	e0 84 10 03 	l.and r4,r4,r2
    dbc0:	d4 03 20 00 	l.sw 0x0(r3),r4
    dbc4:	18 60 04 83 	l.movhi r3,0x483
    dbc8:	9c 40 ff cf 	l.addi r2,r0,0xffffffcf
    dbcc:	a8 63 00 08 	l.ori r3,r3,0x8
    dbd0:	ad 6b 00 01 	l.xori r11,r11,0x1
    dbd4:	84 83 00 00 	l.lwz r4,0x0(r3)
    dbd8:	e0 84 10 03 	l.and r4,r4,r2
    dbdc:	d4 03 20 00 	l.sw 0x0(r3),r4
    dbe0:	9c 21 00 04 	l.addi r1,r1,0x4
    dbe4:	44 00 48 00 	l.jr r9
    dbe8:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000dbec <phy_read_training_standby>:
    dbec:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    dbf0:	84 83 00 04 	l.lwz r4,0x4(r3)
    dbf4:	bc 24 00 08 	l.sfnei r4,0x8
    dbf8:	10 00 00 08 	l.bf dc18 <phy_read_training_standby+0x2c>
    dbfc:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    dc00:	18 80 04 83 	l.movhi r4,0x483
    dc04:	9c 40 00 00 	l.addi r2,r0,0x0
    dc08:	a8 a4 08 00 	l.ori r5,r4,0x800
    dc0c:	a8 84 08 1c 	l.ori r4,r4,0x81c
    dc10:	d4 05 10 00 	l.sw 0x0(r5),r2
    dc14:	d4 04 10 00 	l.sw 0x0(r4),r2
    dc18:	94 a3 00 18 	l.lhz r5,0x18(r3)
    dc1c:	a4 a5 00 0f 	l.andi r5,r5,0xf
    dc20:	e0 a5 28 00 	l.add r5,r5,r5
    dc24:	bc 05 00 00 	l.sfeqi r5,0x0
    dc28:	0c 00 00 03 	l.bnf dc34 <phy_read_training_standby+0x48>
    dc2c:	18 80 04 83 	l.movhi r4,0x483
    dc30:	9c a0 00 0f 	l.addi r5,r0,0xf
    dc34:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
    dc38:	a8 c4 01 98 	l.ori r6,r4,0x198
    dc3c:	84 e6 00 00 	l.lwz r7,0x0(r6)
    dc40:	e0 e7 10 03 	l.and r7,r7,r2
    dc44:	9c 40 ff c0 	l.addi r2,r0,0xffffffc0
    dc48:	a8 e7 00 02 	l.ori r7,r7,0x2
    dc4c:	d4 06 38 00 	l.sw 0x0(r6),r7
    dc50:	a8 c4 08 04 	l.ori r6,r4,0x804
    dc54:	84 e6 00 00 	l.lwz r7,0x0(r6)
    dc58:	e0 e7 10 03 	l.and r7,r7,r2
    dc5c:	e0 e5 38 04 	l.or r7,r5,r7
    dc60:	d4 06 38 00 	l.sw 0x0(r6),r7
    dc64:	a8 c4 08 08 	l.ori r6,r4,0x808
    dc68:	84 e6 00 00 	l.lwz r7,0x0(r6)
    dc6c:	e0 e7 10 03 	l.and r7,r7,r2
    dc70:	e0 e5 38 04 	l.or r7,r5,r7
    dc74:	d4 06 38 00 	l.sw 0x0(r6),r7
    dc78:	a8 c4 0a 04 	l.ori r6,r4,0xa04
    dc7c:	84 e6 00 00 	l.lwz r7,0x0(r6)
    dc80:	e0 e7 10 03 	l.and r7,r7,r2
    dc84:	e0 e5 38 04 	l.or r7,r5,r7
    dc88:	d4 06 38 00 	l.sw 0x0(r6),r7
    dc8c:	a8 c4 0a 08 	l.ori r6,r4,0xa08
    dc90:	84 e6 00 00 	l.lwz r7,0x0(r6)
    dc94:	e0 e7 10 03 	l.and r7,r7,r2
    dc98:	e0 a5 38 04 	l.or r5,r5,r7
    dc9c:	d4 06 28 00 	l.sw 0x0(r6),r5
    dca0:	a8 a4 01 90 	l.ori r5,r4,0x190
    dca4:	a8 84 08 40 	l.ori r4,r4,0x840
    dca8:	84 c5 00 00 	l.lwz r6,0x0(r5)
    dcac:	a8 c6 00 06 	l.ori r6,r6,0x6
    dcb0:	d4 05 30 00 	l.sw 0x0(r5),r6
    dcb4:	84 c5 00 00 	l.lwz r6,0x0(r5)
    dcb8:	a8 c6 00 01 	l.ori r6,r6,0x1
    dcbc:	d4 05 30 00 	l.sw 0x0(r5),r6
    dcc0:	84 a4 00 00 	l.lwz r5,0x0(r4)
    dcc4:	a4 a5 00 0c 	l.andi r5,r5,0xc
    dcc8:	bc 25 00 0c 	l.sfnei r5,0xc
    dccc:	13 ff ff fd 	l.bf dcc0 <phy_read_training_standby+0xd4>
    dcd0:	15 00 00 00 	l.nop 0x0
    dcd4:	85 64 00 00 	l.lwz r11,0x0(r4)
    dcd8:	84 c3 00 1c 	l.lwz r6,0x1c(r3)
    dcdc:	a5 6b 00 03 	l.andi r11,r11,0x3
    dce0:	a4 c6 00 01 	l.andi r6,r6,0x1
    dce4:	e1 60 58 02 	l.sub r11,r0,r11
    dce8:	bc 26 00 00 	l.sfnei r6,0x0
    dcec:	10 00 00 0f 	l.bf dd28 <phy_read_training_standby+0x13c>
    dcf0:	b9 6b 00 5f 	l.srli r11,r11,0x1f
    dcf4:	18 80 04 83 	l.movhi r4,0x483
    dcf8:	a8 84 0a 40 	l.ori r4,r4,0xa40
    dcfc:	84 a4 00 00 	l.lwz r5,0x0(r4)
    dd00:	a4 a5 00 0c 	l.andi r5,r5,0xc
    dd04:	bc 25 00 0c 	l.sfnei r5,0xc
    dd08:	13 ff ff fd 	l.bf dcfc <phy_read_training_standby+0x110>
    dd0c:	15 00 00 00 	l.nop 0x0
    dd10:	84 84 00 00 	l.lwz r4,0x0(r4)
    dd14:	a4 84 00 03 	l.andi r4,r4,0x3
    dd18:	bc 24 00 00 	l.sfnei r4,0x0
    dd1c:	0c 00 00 04 	l.bnf dd2c <phy_read_training_standby+0x140>
    dd20:	18 80 04 83 	l.movhi r4,0x483
    dd24:	9d 60 00 01 	l.addi r11,r0,0x1
    dd28:	18 80 04 83 	l.movhi r4,0x483
    dd2c:	a8 a4 08 50 	l.ori r5,r4,0x850
    dd30:	84 a5 00 00 	l.lwz r5,0x0(r5)
    dd34:	a8 a4 08 54 	l.ori r5,r4,0x854
    dd38:	84 a5 00 00 	l.lwz r5,0x0(r5)
    dd3c:	a8 a4 08 58 	l.ori r5,r4,0x858
    dd40:	84 a5 00 00 	l.lwz r5,0x0(r5)
    dd44:	a8 a4 08 5c 	l.ori r5,r4,0x85c
    dd48:	84 a5 00 00 	l.lwz r5,0x0(r5)
    dd4c:	a8 a4 08 60 	l.ori r5,r4,0x860
    dd50:	84 a5 00 00 	l.lwz r5,0x0(r5)
    dd54:	a8 a4 08 64 	l.ori r5,r4,0x864
    dd58:	84 a5 00 00 	l.lwz r5,0x0(r5)
    dd5c:	a8 a4 08 68 	l.ori r5,r4,0x868
    dd60:	84 a5 00 00 	l.lwz r5,0x0(r5)
    dd64:	a8 a4 08 6c 	l.ori r5,r4,0x86c
    dd68:	84 a5 00 00 	l.lwz r5,0x0(r5)
    dd6c:	a8 a4 08 70 	l.ori r5,r4,0x870
    dd70:	a8 84 08 98 	l.ori r4,r4,0x898
    dd74:	84 a5 00 00 	l.lwz r5,0x0(r5)
    dd78:	84 a4 00 00 	l.lwz r5,0x0(r4)
    dd7c:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    dd80:	84 e4 00 00 	l.lwz r7,0x0(r4)
    dd84:	e0 a7 28 02 	l.sub r5,r7,r5
    dd88:	bc 45 00 06 	l.sfgtui r5,0x6
    dd8c:	10 00 00 09 	l.bf ddb0 <phy_read_training_standby+0x1c4>
    dd90:	18 40 04 83 	l.movhi r2,0x483
    dd94:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    dd98:	18 40 10 00 	l.movhi r2,0x1000
    dd9c:	e0 a5 10 03 	l.and r5,r5,r2
    dda0:	bc 05 00 00 	l.sfeqi r5,0x0
    dda4:	0c 00 00 03 	l.bnf ddb0 <phy_read_training_standby+0x1c4>
    dda8:	18 40 04 83 	l.movhi r2,0x483
    ddac:	9d 60 00 01 	l.addi r11,r0,0x1
    ddb0:	9c 84 00 04 	l.addi r4,r4,0x4
    ddb4:	a8 42 08 bc 	l.ori r2,r2,0x8bc
    ddb8:	e4 24 10 00 	l.sfne r4,r2
    ddbc:	13 ff ff ef 	l.bf dd78 <phy_read_training_standby+0x18c>
    ddc0:	18 a0 04 83 	l.movhi r5,0x483
    ddc4:	a8 e5 08 74 	l.ori r7,r5,0x874
    ddc8:	84 e7 00 00 	l.lwz r7,0x0(r7)
    ddcc:	a8 e5 08 78 	l.ori r7,r5,0x878
    ddd0:	84 e7 00 00 	l.lwz r7,0x0(r7)
    ddd4:	a8 e5 08 7c 	l.ori r7,r5,0x87c
    ddd8:	84 e7 00 00 	l.lwz r7,0x0(r7)
    dddc:	a8 e5 08 80 	l.ori r7,r5,0x880
    dde0:	84 e7 00 00 	l.lwz r7,0x0(r7)
    dde4:	a8 e5 08 84 	l.ori r7,r5,0x884
    dde8:	84 e7 00 00 	l.lwz r7,0x0(r7)
    ddec:	a8 e5 08 88 	l.ori r7,r5,0x888
    ddf0:	84 e7 00 00 	l.lwz r7,0x0(r7)
    ddf4:	a8 e5 08 8c 	l.ori r7,r5,0x88c
    ddf8:	84 e7 00 00 	l.lwz r7,0x0(r7)
    ddfc:	a8 e5 08 90 	l.ori r7,r5,0x890
    de00:	a8 a5 08 94 	l.ori r5,r5,0x894
    de04:	84 e7 00 00 	l.lwz r7,0x0(r7)
    de08:	84 a5 00 00 	l.lwz r5,0x0(r5)
    de0c:	84 a4 00 00 	l.lwz r5,0x0(r4)
    de10:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    de14:	84 e4 00 00 	l.lwz r7,0x0(r4)
    de18:	e0 a7 28 02 	l.sub r5,r7,r5
    de1c:	bc 45 00 06 	l.sfgtui r5,0x6
    de20:	10 00 00 09 	l.bf de44 <phy_read_training_standby+0x258>
    de24:	18 40 04 83 	l.movhi r2,0x483
    de28:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    de2c:	18 40 10 00 	l.movhi r2,0x1000
    de30:	e0 a5 10 03 	l.and r5,r5,r2
    de34:	bc 05 00 00 	l.sfeqi r5,0x0
    de38:	0c 00 00 03 	l.bnf de44 <phy_read_training_standby+0x258>
    de3c:	18 40 04 83 	l.movhi r2,0x483
    de40:	9d 60 00 01 	l.addi r11,r0,0x1
    de44:	9c 84 00 04 	l.addi r4,r4,0x4
    de48:	a8 42 08 e0 	l.ori r2,r2,0x8e0
    de4c:	e4 24 10 00 	l.sfne r4,r2
    de50:	13 ff ff ef 	l.bf de0c <phy_read_training_standby+0x220>
    de54:	bc 26 00 00 	l.sfnei r6,0x0
    de58:	10 00 00 4e 	l.bf df90 <phy_read_training_standby+0x3a4>
    de5c:	18 a0 04 83 	l.movhi r5,0x483
    de60:	18 80 04 83 	l.movhi r4,0x483
    de64:	a8 a4 0a 50 	l.ori r5,r4,0xa50
    de68:	84 a5 00 00 	l.lwz r5,0x0(r5)
    de6c:	a8 a4 0a 54 	l.ori r5,r4,0xa54
    de70:	84 a5 00 00 	l.lwz r5,0x0(r5)
    de74:	a8 a4 0a 58 	l.ori r5,r4,0xa58
    de78:	84 a5 00 00 	l.lwz r5,0x0(r5)
    de7c:	a8 a4 0a 5c 	l.ori r5,r4,0xa5c
    de80:	84 a5 00 00 	l.lwz r5,0x0(r5)
    de84:	a8 a4 0a 60 	l.ori r5,r4,0xa60
    de88:	84 a5 00 00 	l.lwz r5,0x0(r5)
    de8c:	a8 a4 0a 64 	l.ori r5,r4,0xa64
    de90:	84 a5 00 00 	l.lwz r5,0x0(r5)
    de94:	a8 a4 0a 68 	l.ori r5,r4,0xa68
    de98:	84 a5 00 00 	l.lwz r5,0x0(r5)
    de9c:	a8 a4 0a 6c 	l.ori r5,r4,0xa6c
    dea0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    dea4:	a8 a4 0a 70 	l.ori r5,r4,0xa70
    dea8:	a8 84 0a 98 	l.ori r4,r4,0xa98
    deac:	84 a5 00 00 	l.lwz r5,0x0(r5)
    deb0:	84 a4 00 00 	l.lwz r5,0x0(r4)
    deb4:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    deb8:	84 c4 00 00 	l.lwz r6,0x0(r4)
    debc:	e0 a6 28 02 	l.sub r5,r6,r5
    dec0:	bc 45 00 06 	l.sfgtui r5,0x6
    dec4:	10 00 00 09 	l.bf dee8 <phy_read_training_standby+0x2fc>
    dec8:	18 40 04 83 	l.movhi r2,0x483
    decc:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    ded0:	18 40 10 00 	l.movhi r2,0x1000
    ded4:	e0 a5 10 03 	l.and r5,r5,r2
    ded8:	bc 05 00 00 	l.sfeqi r5,0x0
    dedc:	0c 00 00 03 	l.bnf dee8 <phy_read_training_standby+0x2fc>
    dee0:	18 40 04 83 	l.movhi r2,0x483
    dee4:	9d 60 00 01 	l.addi r11,r0,0x1
    dee8:	9c 84 00 04 	l.addi r4,r4,0x4
    deec:	a8 42 0a bc 	l.ori r2,r2,0xabc
    def0:	e4 24 10 00 	l.sfne r4,r2
    def4:	13 ff ff ef 	l.bf deb0 <phy_read_training_standby+0x2c4>
    def8:	18 a0 04 83 	l.movhi r5,0x483
    defc:	a8 c5 0a 74 	l.ori r6,r5,0xa74
    df00:	84 c6 00 00 	l.lwz r6,0x0(r6)
    df04:	a8 c5 0a 78 	l.ori r6,r5,0xa78
    df08:	84 c6 00 00 	l.lwz r6,0x0(r6)
    df0c:	a8 c5 0a 7c 	l.ori r6,r5,0xa7c
    df10:	84 c6 00 00 	l.lwz r6,0x0(r6)
    df14:	a8 c5 0a 80 	l.ori r6,r5,0xa80
    df18:	84 c6 00 00 	l.lwz r6,0x0(r6)
    df1c:	a8 c5 0a 84 	l.ori r6,r5,0xa84
    df20:	84 c6 00 00 	l.lwz r6,0x0(r6)
    df24:	a8 c5 0a 88 	l.ori r6,r5,0xa88
    df28:	84 c6 00 00 	l.lwz r6,0x0(r6)
    df2c:	a8 c5 0a 8c 	l.ori r6,r5,0xa8c
    df30:	84 c6 00 00 	l.lwz r6,0x0(r6)
    df34:	a8 c5 0a 90 	l.ori r6,r5,0xa90
    df38:	a8 a5 0a 94 	l.ori r5,r5,0xa94
    df3c:	84 c6 00 00 	l.lwz r6,0x0(r6)
    df40:	84 a5 00 00 	l.lwz r5,0x0(r5)
    df44:	84 a4 00 00 	l.lwz r5,0x0(r4)
    df48:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    df4c:	84 c4 00 00 	l.lwz r6,0x0(r4)
    df50:	e0 a6 28 02 	l.sub r5,r6,r5
    df54:	bc 45 00 06 	l.sfgtui r5,0x6
    df58:	10 00 00 09 	l.bf df7c <phy_read_training_standby+0x390>
    df5c:	18 40 04 83 	l.movhi r2,0x483
    df60:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    df64:	18 40 10 00 	l.movhi r2,0x1000
    df68:	e0 a5 10 03 	l.and r5,r5,r2
    df6c:	bc 05 00 00 	l.sfeqi r5,0x0
    df70:	0c 00 00 03 	l.bnf df7c <phy_read_training_standby+0x390>
    df74:	18 40 04 83 	l.movhi r2,0x483
    df78:	9d 60 00 01 	l.addi r11,r0,0x1
    df7c:	9c 84 00 04 	l.addi r4,r4,0x4
    df80:	a8 42 0a e0 	l.ori r2,r2,0xae0
    df84:	e4 24 10 00 	l.sfne r4,r2
    df88:	13 ff ff ef 	l.bf df44 <phy_read_training_standby+0x358>
    df8c:	18 a0 04 83 	l.movhi r5,0x483
    df90:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
    df94:	a8 85 01 90 	l.ori r4,r5,0x190
    df98:	84 c4 00 00 	l.lwz r6,0x0(r4)
    df9c:	e0 c6 10 03 	l.and r6,r6,r2
    dfa0:	d4 04 30 00 	l.sw 0x0(r4),r6
    dfa4:	84 c3 00 1c 	l.lwz r6,0x1c(r3)
    dfa8:	a4 c6 10 00 	l.andi r6,r6,0x1000
    dfac:	bc 06 00 00 	l.sfeqi r6,0x0
    dfb0:	10 00 00 2e 	l.bf e068 <phy_read_training_standby+0x47c>
    dfb4:	a8 c5 01 98 	l.ori r6,r5,0x198
    dfb8:	a8 a5 08 40 	l.ori r5,r5,0x840
    dfbc:	84 e6 00 00 	l.lwz r7,0x0(r6)
    dfc0:	e0 e7 10 03 	l.and r7,r7,r2
    dfc4:	a8 e7 00 02 	l.ori r7,r7,0x2
    dfc8:	d4 06 38 00 	l.sw 0x0(r6),r7
    dfcc:	84 c4 00 00 	l.lwz r6,0x0(r4)
    dfd0:	a8 c6 00 06 	l.ori r6,r6,0x6
    dfd4:	d4 04 30 00 	l.sw 0x0(r4),r6
    dfd8:	84 c4 00 00 	l.lwz r6,0x0(r4)
    dfdc:	a8 c6 00 01 	l.ori r6,r6,0x1
    dfe0:	d4 04 30 00 	l.sw 0x0(r4),r6
    dfe4:	84 85 00 00 	l.lwz r4,0x0(r5)
    dfe8:	a4 84 00 0c 	l.andi r4,r4,0xc
    dfec:	bc 24 00 0c 	l.sfnei r4,0xc
    dff0:	13 ff ff fd 	l.bf dfe4 <phy_read_training_standby+0x3f8>
    dff4:	15 00 00 00 	l.nop 0x0
    dff8:	84 85 00 00 	l.lwz r4,0x0(r5)
    dffc:	a4 84 00 03 	l.andi r4,r4,0x3
    e000:	bc 24 00 00 	l.sfnei r4,0x0
    e004:	0c 00 00 03 	l.bnf e010 <phy_read_training_standby+0x424>
    e008:	15 00 00 00 	l.nop 0x0
    e00c:	9d 60 00 01 	l.addi r11,r0,0x1
    e010:	84 63 00 1c 	l.lwz r3,0x1c(r3)
    e014:	a4 63 00 01 	l.andi r3,r3,0x1
    e018:	bc 23 00 00 	l.sfnei r3,0x0
    e01c:	10 00 00 0e 	l.bf e054 <phy_read_training_standby+0x468>
    e020:	18 60 04 83 	l.movhi r3,0x483
    e024:	a8 63 0a 40 	l.ori r3,r3,0xa40
    e028:	84 83 00 00 	l.lwz r4,0x0(r3)
    e02c:	a4 84 00 0c 	l.andi r4,r4,0xc
    e030:	bc 24 00 0c 	l.sfnei r4,0xc
    e034:	13 ff ff fd 	l.bf e028 <phy_read_training_standby+0x43c>
    e038:	15 00 00 00 	l.nop 0x0
    e03c:	84 63 00 00 	l.lwz r3,0x0(r3)
    e040:	a4 63 00 03 	l.andi r3,r3,0x3
    e044:	bc 23 00 00 	l.sfnei r3,0x0
    e048:	0c 00 00 03 	l.bnf e054 <phy_read_training_standby+0x468>
    e04c:	18 60 04 83 	l.movhi r3,0x483
    e050:	9d 60 00 01 	l.addi r11,r0,0x1
    e054:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
    e058:	a8 63 01 90 	l.ori r3,r3,0x190
    e05c:	84 83 00 00 	l.lwz r4,0x0(r3)
    e060:	e0 84 10 03 	l.and r4,r4,r2
    e064:	d4 03 20 00 	l.sw 0x0(r3),r4
    e068:	18 60 04 83 	l.movhi r3,0x483
    e06c:	9c 40 ff fc 	l.addi r2,r0,0xfffffffc
    e070:	a8 63 01 98 	l.ori r3,r3,0x198
    e074:	ad 6b 00 01 	l.xori r11,r11,0x1
    e078:	84 83 00 00 	l.lwz r4,0x0(r3)
    e07c:	e0 84 10 03 	l.and r4,r4,r2
    e080:	d4 03 20 00 	l.sw 0x0(r3),r4
    e084:	9c 21 00 04 	l.addi r1,r1,0x4
    e088:	44 00 48 00 	l.jr r9
    e08c:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000e090 <phy_write_training_standby>:
    e090:	18 80 04 83 	l.movhi r4,0x483
    e094:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    e098:	a8 a4 01 34 	l.ori r5,r4,0x134
    e09c:	9c 40 00 00 	l.addi r2,r0,0x0
    e0a0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    e0a4:	d4 05 10 00 	l.sw 0x0(r5),r2
    e0a8:	a8 a4 01 38 	l.ori r5,r4,0x138
    e0ac:	d4 05 10 00 	l.sw 0x0(r5),r2
    e0b0:	a8 a4 01 9c 	l.ori r5,r4,0x19c
    e0b4:	d4 05 10 00 	l.sw 0x0(r5),r2
    e0b8:	a8 a4 01 a0 	l.ori r5,r4,0x1a0
    e0bc:	d4 05 10 00 	l.sw 0x0(r5),r2
    e0c0:	a8 a4 01 98 	l.ori r5,r4,0x198
    e0c4:	9c 40 ff f3 	l.addi r2,r0,0xfffffff3
    e0c8:	84 c5 00 00 	l.lwz r6,0x0(r5)
    e0cc:	e0 c6 10 03 	l.and r6,r6,r2
    e0d0:	a8 c6 00 08 	l.ori r6,r6,0x8
    e0d4:	d4 05 30 00 	l.sw 0x0(r5),r6
    e0d8:	a8 a4 01 90 	l.ori r5,r4,0x190
    e0dc:	a8 84 08 e0 	l.ori r4,r4,0x8e0
    e0e0:	84 c5 00 00 	l.lwz r6,0x0(r5)
    e0e4:	a8 c6 00 10 	l.ori r6,r6,0x10
    e0e8:	d4 05 30 00 	l.sw 0x0(r5),r6
    e0ec:	84 c5 00 00 	l.lwz r6,0x0(r5)
    e0f0:	a8 c6 00 20 	l.ori r6,r6,0x20
    e0f4:	d4 05 30 00 	l.sw 0x0(r5),r6
    e0f8:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e0fc:	a4 a5 00 03 	l.andi r5,r5,0x3
    e100:	bc 25 00 03 	l.sfnei r5,0x3
    e104:	13 ff ff fd 	l.bf e0f8 <phy_write_training_standby+0x68>
    e108:	15 00 00 00 	l.nop 0x0
    e10c:	85 64 00 00 	l.lwz r11,0x0(r4)
    e110:	84 c3 00 1c 	l.lwz r6,0x1c(r3)
    e114:	a5 6b 00 0c 	l.andi r11,r11,0xc
    e118:	a4 c6 00 01 	l.andi r6,r6,0x1
    e11c:	e1 60 58 02 	l.sub r11,r0,r11
    e120:	bc 26 00 00 	l.sfnei r6,0x0
    e124:	10 00 00 0f 	l.bf e160 <phy_write_training_standby+0xd0>
    e128:	b9 6b 00 5f 	l.srli r11,r11,0x1f
    e12c:	18 80 04 83 	l.movhi r4,0x483
    e130:	a8 84 0a e0 	l.ori r4,r4,0xae0
    e134:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e138:	a4 a5 00 03 	l.andi r5,r5,0x3
    e13c:	bc 25 00 03 	l.sfnei r5,0x3
    e140:	13 ff ff fd 	l.bf e134 <phy_write_training_standby+0xa4>
    e144:	15 00 00 00 	l.nop 0x0
    e148:	84 84 00 00 	l.lwz r4,0x0(r4)
    e14c:	a4 84 00 0c 	l.andi r4,r4,0xc
    e150:	bc 24 00 00 	l.sfnei r4,0x0
    e154:	0c 00 00 04 	l.bnf e164 <phy_write_training_standby+0xd4>
    e158:	18 80 04 83 	l.movhi r4,0x483
    e15c:	9d 60 00 01 	l.addi r11,r0,0x1
    e160:	18 80 04 83 	l.movhi r4,0x483
    e164:	a8 a4 08 f0 	l.ori r5,r4,0x8f0
    e168:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e16c:	a8 a4 08 f4 	l.ori r5,r4,0x8f4
    e170:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e174:	a8 a4 08 f8 	l.ori r5,r4,0x8f8
    e178:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e17c:	a8 a4 08 fc 	l.ori r5,r4,0x8fc
    e180:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e184:	a8 a4 09 00 	l.ori r5,r4,0x900
    e188:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e18c:	a8 a4 09 04 	l.ori r5,r4,0x904
    e190:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e194:	a8 a4 09 08 	l.ori r5,r4,0x908
    e198:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e19c:	a8 a4 09 0c 	l.ori r5,r4,0x90c
    e1a0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e1a4:	a8 a4 09 10 	l.ori r5,r4,0x910
    e1a8:	a8 84 09 38 	l.ori r4,r4,0x938
    e1ac:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e1b0:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e1b4:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    e1b8:	84 e4 00 00 	l.lwz r7,0x0(r4)
    e1bc:	e0 a7 28 02 	l.sub r5,r7,r5
    e1c0:	bc 45 00 06 	l.sfgtui r5,0x6
    e1c4:	10 00 00 09 	l.bf e1e8 <phy_write_training_standby+0x158>
    e1c8:	18 40 04 83 	l.movhi r2,0x483
    e1cc:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    e1d0:	18 40 10 00 	l.movhi r2,0x1000
    e1d4:	e0 a5 10 03 	l.and r5,r5,r2
    e1d8:	bc 05 00 00 	l.sfeqi r5,0x0
    e1dc:	0c 00 00 03 	l.bnf e1e8 <phy_write_training_standby+0x158>
    e1e0:	18 40 04 83 	l.movhi r2,0x483
    e1e4:	9d 60 00 01 	l.addi r11,r0,0x1
    e1e8:	9c 84 00 04 	l.addi r4,r4,0x4
    e1ec:	a8 42 09 5c 	l.ori r2,r2,0x95c
    e1f0:	e4 24 10 00 	l.sfne r4,r2
    e1f4:	13 ff ff ef 	l.bf e1b0 <phy_write_training_standby+0x120>
    e1f8:	18 a0 04 83 	l.movhi r5,0x483
    e1fc:	a8 e5 09 14 	l.ori r7,r5,0x914
    e200:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e204:	a8 e5 09 18 	l.ori r7,r5,0x918
    e208:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e20c:	a8 e5 09 1c 	l.ori r7,r5,0x91c
    e210:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e214:	a8 e5 09 20 	l.ori r7,r5,0x920
    e218:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e21c:	a8 e5 09 24 	l.ori r7,r5,0x924
    e220:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e224:	a8 e5 09 28 	l.ori r7,r5,0x928
    e228:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e22c:	a8 e5 09 2c 	l.ori r7,r5,0x92c
    e230:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e234:	a8 e5 09 30 	l.ori r7,r5,0x930
    e238:	a8 a5 09 34 	l.ori r5,r5,0x934
    e23c:	84 e7 00 00 	l.lwz r7,0x0(r7)
    e240:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e244:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e248:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    e24c:	84 e4 00 00 	l.lwz r7,0x0(r4)
    e250:	e0 a7 28 02 	l.sub r5,r7,r5
    e254:	bc 45 00 06 	l.sfgtui r5,0x6
    e258:	10 00 00 09 	l.bf e27c <phy_write_training_standby+0x1ec>
    e25c:	18 40 04 83 	l.movhi r2,0x483
    e260:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    e264:	18 40 10 00 	l.movhi r2,0x1000
    e268:	e0 a5 10 03 	l.and r5,r5,r2
    e26c:	bc 05 00 00 	l.sfeqi r5,0x0
    e270:	0c 00 00 03 	l.bnf e27c <phy_write_training_standby+0x1ec>
    e274:	18 40 04 83 	l.movhi r2,0x483
    e278:	9d 60 00 01 	l.addi r11,r0,0x1
    e27c:	9c 84 00 04 	l.addi r4,r4,0x4
    e280:	a8 42 09 80 	l.ori r2,r2,0x980
    e284:	e4 24 10 00 	l.sfne r4,r2
    e288:	13 ff ff ef 	l.bf e244 <phy_write_training_standby+0x1b4>
    e28c:	bc 26 00 00 	l.sfnei r6,0x0
    e290:	10 00 00 4e 	l.bf e3c8 <phy_write_training_standby+0x338>
    e294:	18 a0 04 83 	l.movhi r5,0x483
    e298:	18 80 04 83 	l.movhi r4,0x483
    e29c:	a8 a4 0a f0 	l.ori r5,r4,0xaf0
    e2a0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e2a4:	a8 a4 0a f4 	l.ori r5,r4,0xaf4
    e2a8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e2ac:	a8 a4 0a f8 	l.ori r5,r4,0xaf8
    e2b0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e2b4:	a8 a4 0a fc 	l.ori r5,r4,0xafc
    e2b8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e2bc:	a8 a4 0b 00 	l.ori r5,r4,0xb00
    e2c0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e2c4:	a8 a4 0b 04 	l.ori r5,r4,0xb04
    e2c8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e2cc:	a8 a4 0b 08 	l.ori r5,r4,0xb08
    e2d0:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e2d4:	a8 a4 0b 0c 	l.ori r5,r4,0xb0c
    e2d8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e2dc:	a8 a4 0b 10 	l.ori r5,r4,0xb10
    e2e0:	a8 84 0b 38 	l.ori r4,r4,0xb38
    e2e4:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e2e8:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e2ec:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    e2f0:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e2f4:	e0 a6 28 02 	l.sub r5,r6,r5
    e2f8:	bc 45 00 06 	l.sfgtui r5,0x6
    e2fc:	10 00 00 09 	l.bf e320 <phy_write_training_standby+0x290>
    e300:	18 40 04 83 	l.movhi r2,0x483
    e304:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    e308:	18 40 10 00 	l.movhi r2,0x1000
    e30c:	e0 a5 10 03 	l.and r5,r5,r2
    e310:	bc 05 00 00 	l.sfeqi r5,0x0
    e314:	0c 00 00 03 	l.bnf e320 <phy_write_training_standby+0x290>
    e318:	18 40 04 83 	l.movhi r2,0x483
    e31c:	9d 60 00 01 	l.addi r11,r0,0x1
    e320:	9c 84 00 04 	l.addi r4,r4,0x4
    e324:	a8 42 0b 5c 	l.ori r2,r2,0xb5c
    e328:	e4 24 10 00 	l.sfne r4,r2
    e32c:	13 ff ff ef 	l.bf e2e8 <phy_write_training_standby+0x258>
    e330:	18 a0 04 83 	l.movhi r5,0x483
    e334:	a8 c5 0b 14 	l.ori r6,r5,0xb14
    e338:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e33c:	a8 c5 0b 18 	l.ori r6,r5,0xb18
    e340:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e344:	a8 c5 0b 1c 	l.ori r6,r5,0xb1c
    e348:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e34c:	a8 c5 0b 20 	l.ori r6,r5,0xb20
    e350:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e354:	a8 c5 0b 24 	l.ori r6,r5,0xb24
    e358:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e35c:	a8 c5 0b 28 	l.ori r6,r5,0xb28
    e360:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e364:	a8 c5 0b 2c 	l.ori r6,r5,0xb2c
    e368:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e36c:	a8 c5 0b 30 	l.ori r6,r5,0xb30
    e370:	a8 a5 0b 34 	l.ori r5,r5,0xb34
    e374:	84 c6 00 00 	l.lwz r6,0x0(r6)
    e378:	84 a5 00 00 	l.lwz r5,0x0(r5)
    e37c:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e380:	84 a4 ff b8 	l.lwz r5,0xffffffb8(r4)
    e384:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e388:	e0 a6 28 02 	l.sub r5,r6,r5
    e38c:	bc 45 00 06 	l.sfgtui r5,0x6
    e390:	10 00 00 09 	l.bf e3b4 <phy_write_training_standby+0x324>
    e394:	18 40 04 83 	l.movhi r2,0x483
    e398:	84 a3 00 6c 	l.lwz r5,0x6c(r3)
    e39c:	18 40 10 00 	l.movhi r2,0x1000
    e3a0:	e0 a5 10 03 	l.and r5,r5,r2
    e3a4:	bc 05 00 00 	l.sfeqi r5,0x0
    e3a8:	0c 00 00 03 	l.bnf e3b4 <phy_write_training_standby+0x324>
    e3ac:	18 40 04 83 	l.movhi r2,0x483
    e3b0:	9d 60 00 01 	l.addi r11,r0,0x1
    e3b4:	9c 84 00 04 	l.addi r4,r4,0x4
    e3b8:	a8 42 0b 80 	l.ori r2,r2,0xb80
    e3bc:	e4 24 10 00 	l.sfne r4,r2
    e3c0:	13 ff ff ef 	l.bf e37c <phy_write_training_standby+0x2ec>
    e3c4:	18 a0 04 83 	l.movhi r5,0x483
    e3c8:	9c 40 ff 9f 	l.addi r2,r0,0xffffff9f
    e3cc:	a8 85 01 90 	l.ori r4,r5,0x190
    e3d0:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e3d4:	e0 c6 10 03 	l.and r6,r6,r2
    e3d8:	d4 04 30 00 	l.sw 0x0(r4),r6
    e3dc:	84 c3 00 1c 	l.lwz r6,0x1c(r3)
    e3e0:	a4 c6 10 00 	l.andi r6,r6,0x1000
    e3e4:	bc 06 00 00 	l.sfeqi r6,0x0
    e3e8:	10 00 00 2f 	l.bf e4a4 <phy_write_training_standby+0x414>
    e3ec:	a8 c5 01 98 	l.ori r6,r5,0x198
    e3f0:	9c 40 ff f3 	l.addi r2,r0,0xfffffff3
    e3f4:	84 e6 00 00 	l.lwz r7,0x0(r6)
    e3f8:	a8 a5 08 e0 	l.ori r5,r5,0x8e0
    e3fc:	e0 e7 10 03 	l.and r7,r7,r2
    e400:	a8 e7 00 04 	l.ori r7,r7,0x4
    e404:	d4 06 38 00 	l.sw 0x0(r6),r7
    e408:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e40c:	a8 c6 00 10 	l.ori r6,r6,0x10
    e410:	d4 04 30 00 	l.sw 0x0(r4),r6
    e414:	84 c4 00 00 	l.lwz r6,0x0(r4)
    e418:	a8 c6 00 20 	l.ori r6,r6,0x20
    e41c:	d4 04 30 00 	l.sw 0x0(r4),r6
    e420:	84 85 00 00 	l.lwz r4,0x0(r5)
    e424:	a4 84 00 03 	l.andi r4,r4,0x3
    e428:	bc 24 00 03 	l.sfnei r4,0x3
    e42c:	13 ff ff fd 	l.bf e420 <phy_write_training_standby+0x390>
    e430:	15 00 00 00 	l.nop 0x0
    e434:	84 85 00 00 	l.lwz r4,0x0(r5)
    e438:	a4 84 00 0c 	l.andi r4,r4,0xc
    e43c:	bc 24 00 00 	l.sfnei r4,0x0
    e440:	0c 00 00 03 	l.bnf e44c <phy_write_training_standby+0x3bc>
    e444:	15 00 00 00 	l.nop 0x0
    e448:	9d 60 00 01 	l.addi r11,r0,0x1
    e44c:	84 63 00 1c 	l.lwz r3,0x1c(r3)
    e450:	a4 63 00 01 	l.andi r3,r3,0x1
    e454:	bc 23 00 00 	l.sfnei r3,0x0
    e458:	10 00 00 0e 	l.bf e490 <phy_write_training_standby+0x400>
    e45c:	18 60 04 83 	l.movhi r3,0x483
    e460:	a8 63 0a e0 	l.ori r3,r3,0xae0
    e464:	84 83 00 00 	l.lwz r4,0x0(r3)
    e468:	a4 84 00 03 	l.andi r4,r4,0x3
    e46c:	bc 24 00 03 	l.sfnei r4,0x3
    e470:	13 ff ff fd 	l.bf e464 <phy_write_training_standby+0x3d4>
    e474:	15 00 00 00 	l.nop 0x0
    e478:	84 63 00 00 	l.lwz r3,0x0(r3)
    e47c:	a4 63 00 0c 	l.andi r3,r3,0xc
    e480:	bc 23 00 00 	l.sfnei r3,0x0
    e484:	0c 00 00 03 	l.bnf e490 <phy_write_training_standby+0x400>
    e488:	18 60 04 83 	l.movhi r3,0x483
    e48c:	9d 60 00 01 	l.addi r11,r0,0x1
    e490:	9c 40 ff 9f 	l.addi r2,r0,0xffffff9f
    e494:	a8 63 01 90 	l.ori r3,r3,0x190
    e498:	84 83 00 00 	l.lwz r4,0x0(r3)
    e49c:	e0 84 10 03 	l.and r4,r4,r2
    e4a0:	d4 03 20 00 	l.sw 0x0(r3),r4
    e4a4:	18 60 04 83 	l.movhi r3,0x483
    e4a8:	9c 40 ff f3 	l.addi r2,r0,0xfffffff3
    e4ac:	a8 63 01 98 	l.ori r3,r3,0x198
    e4b0:	ad 6b 00 01 	l.xori r11,r11,0x1
    e4b4:	84 83 00 00 	l.lwz r4,0x0(r3)
    e4b8:	e0 84 10 03 	l.and r4,r4,r2
    e4bc:	d4 03 20 00 	l.sw 0x0(r3),r4
    e4c0:	9c 21 00 04 	l.addi r1,r1,0x4
    e4c4:	44 00 48 00 	l.jr r9
    e4c8:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000e4cc <mctl_com_set_controller_refresh_standby.clone.1>:
    e4cc:	18 80 04 82 	l.movhi r4,0x482
    e4d0:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    e4d4:	a8 84 00 60 	l.ori r4,r4,0x60
    e4d8:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    e4dc:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e4e0:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    e4e4:	e0 a5 10 03 	l.and r5,r5,r2
    e4e8:	e0 63 28 04 	l.or r3,r3,r5
    e4ec:	d4 04 18 00 	l.sw 0x0(r4),r3
    e4f0:	9c 21 00 04 	l.addi r1,r1,0x4
    e4f4:	44 00 48 00 	l.jr r9
    e4f8:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000e4fc <dramc_data_cal_standby.clone.12>:
    e4fc:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    e500:	18 60 40 00 	l.movhi r3,0x4000
    e504:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    e508:	9d 60 00 00 	l.addi r11,r0,0x0
    e50c:	18 40 40 00 	l.movhi r2,0x4000
    e510:	84 83 00 00 	l.lwz r4,0x0(r3)
    e514:	a8 42 01 00 	l.ori r2,r2,0x100
    e518:	9c 63 00 04 	l.addi r3,r3,0x4
    e51c:	e4 23 10 00 	l.sfne r3,r2
    e520:	13 ff ff fb 	l.bf e50c <dramc_data_cal_standby.clone.12+0x10>
    e524:	e1 6b 20 00 	l.add r11,r11,r4
    e528:	9c 21 00 04 	l.addi r1,r1,0x4
    e52c:	44 00 48 00 	l.jr r9
    e530:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000e534 <mctl_phy_dx0_bit_delay_compensation_standby>:
    e534:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
    e538:	84 83 00 6c 	l.lwz r4,0x6c(r3)
    e53c:	18 40 01 00 	l.movhi r2,0x100
    e540:	e0 84 10 03 	l.and r4,r4,r2
    e544:	bc 04 00 00 	l.sfeqi r4,0x0
    e548:	10 00 00 42 	l.bf e650 <mctl_phy_dx0_bit_delay_compensation_standby+0x11c>
    e54c:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
    e550:	18 80 04 83 	l.movhi r4,0x483
    e554:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
    e558:	a8 a4 00 60 	l.ori r5,r4,0x60
    e55c:	84 c5 00 00 	l.lwz r6,0x0(r5)
    e560:	e0 c6 10 03 	l.and r6,r6,r2
    e564:	9c 40 ff ef 	l.addi r2,r0,0xffffffef
    e568:	d4 05 30 00 	l.sw 0x0(r5),r6
    e56c:	a8 a4 00 08 	l.ori r5,r4,0x8
    e570:	84 c5 00 00 	l.lwz r6,0x0(r5)
    e574:	a8 c6 00 08 	l.ori r6,r6,0x8
    e578:	d4 05 30 00 	l.sw 0x0(r5),r6
    e57c:	a8 a4 01 90 	l.ori r5,r4,0x190
    e580:	84 c5 00 00 	l.lwz r6,0x0(r5)
    e584:	e0 c6 10 03 	l.and r6,r6,r2
    e588:	d4 05 30 00 	l.sw 0x0(r5),r6
    e58c:	84 a3 00 04 	l.lwz r5,0x4(r3)
    e590:	bc 25 00 08 	l.sfnei r5,0x8
    e594:	10 00 00 06 	l.bf e5ac <mctl_phy_dx0_bit_delay_compensation_standby+0x78>
    e598:	a8 84 00 04 	l.ori r4,r4,0x4
    e59c:	9c 40 ff 7f 	l.addi r2,r0,0xffffff7f
    e5a0:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e5a4:	e0 a5 10 03 	l.and r5,r5,r2
    e5a8:	d4 04 28 00 	l.sw 0x0(r4),r5
    e5ac:	84 c3 00 5c 	l.lwz r6,0x5c(r3)
    e5b0:	18 80 04 83 	l.movhi r4,0x483
    e5b4:	a4 c6 00 3f 	l.andi r6,r6,0x3f
    e5b8:	a8 a4 04 8c 	l.ori r5,r4,0x48c
    e5bc:	d4 05 30 00 	l.sw 0x0(r5),r6
    e5c0:	a8 a4 04 94 	l.ori r5,r4,0x494
    e5c4:	84 c3 00 5c 	l.lwz r6,0x5c(r3)
    e5c8:	b8 c6 00 48 	l.srli r6,r6,0x8
    e5cc:	a4 c6 00 3f 	l.andi r6,r6,0x3f
    e5d0:	d4 05 30 00 	l.sw 0x0(r5),r6
    e5d4:	a8 a4 04 9c 	l.ori r5,r4,0x49c
    e5d8:	94 c3 00 5c 	l.lhz r6,0x5c(r3)
    e5dc:	a4 c6 00 3f 	l.andi r6,r6,0x3f
    e5e0:	d4 05 30 00 	l.sw 0x0(r5),r6
    e5e4:	a8 a4 04 a4 	l.ori r5,r4,0x4a4
    e5e8:	8c c3 00 5c 	l.lbz r6,0x5c(r3)
    e5ec:	a4 c6 00 3f 	l.andi r6,r6,0x3f
    e5f0:	d4 05 30 00 	l.sw 0x0(r5),r6
    e5f4:	a8 c4 04 ac 	l.ori r6,r4,0x4ac
    e5f8:	84 a3 00 60 	l.lwz r5,0x60(r3)
    e5fc:	a4 a5 00 3f 	l.andi r5,r5,0x3f
    e600:	d4 06 28 00 	l.sw 0x0(r6),r5
    e604:	a8 c4 04 84 	l.ori r6,r4,0x484
    e608:	d4 06 28 00 	l.sw 0x0(r6),r5
    e60c:	a8 a4 04 b4 	l.ori r5,r4,0x4b4
    e610:	84 c3 00 60 	l.lwz r6,0x60(r3)
    e614:	b8 c6 00 48 	l.srli r6,r6,0x8
    e618:	a4 c6 00 3f 	l.andi r6,r6,0x3f
    e61c:	d4 05 30 00 	l.sw 0x0(r5),r6
    e620:	a8 a4 04 bc 	l.ori r5,r4,0x4bc
    e624:	94 c3 00 60 	l.lhz r6,0x60(r3)
    e628:	a4 c6 00 3f 	l.andi r6,r6,0x3f
    e62c:	d4 05 30 00 	l.sw 0x0(r5),r6
    e630:	8c a3 00 60 	l.lbz r5,0x60(r3)
    e634:	a8 64 04 c4 	l.ori r3,r4,0x4c4
    e638:	a4 a5 00 3f 	l.andi r5,r5,0x3f
    e63c:	a8 84 00 60 	l.ori r4,r4,0x60
    e640:	d4 03 28 00 	l.sw 0x0(r3),r5
    e644:	84 64 00 00 	l.lwz r3,0x0(r4)
    e648:	a8 63 00 01 	l.ori r3,r3,0x1
    e64c:	d4 04 18 00 	l.sw 0x0(r4),r3
    e650:	9c 21 00 04 	l.addi r1,r1,0x4
    e654:	44 00 48 00 	l.jr r9
    e658:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

0000e65c <mctl_core_init_standby>:
    e65c:	d7 e1 87 dc 	l.sw 0xffffffdc(r1),r16
    e660:	aa 03 00 00 	l.ori r16,r3,0x0
    e664:	18 60 03 00 	l.movhi r3,0x300
    e668:	d7 e1 17 d4 	l.sw 0xffffffd4(r1),r2
    e66c:	18 a0 7f ff 	l.movhi r5,0x7fff
    e670:	a8 43 15 40 	l.ori r2,r3,0x1540
    e674:	a8 a5 ff ff 	l.ori r5,r5,0xffff
    e678:	84 82 00 00 	l.lwz r4,0x0(r2)
    e67c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
    e680:	e0 84 28 03 	l.and r4,r4,r5
    e684:	d7 e1 77 d8 	l.sw 0xffffffd8(r1),r14
    e688:	d7 e1 97 e0 	l.sw 0xffffffe0(r1),r18
    e68c:	d7 e1 a7 e4 	l.sw 0xffffffe4(r1),r20
    e690:	d7 e1 b7 e8 	l.sw 0xffffffe8(r1),r22
    e694:	d7 e1 c7 ec 	l.sw 0xffffffec(r1),r24
    e698:	d7 e1 d7 f0 	l.sw 0xfffffff0(r1),r26
    e69c:	d7 e1 e7 f4 	l.sw 0xfffffff4(r1),r28
    e6a0:	d7 e1 f7 f8 	l.sw 0xfffffff8(r1),r30
    e6a4:	d4 02 20 00 	l.sw 0x0(r2),r4
    e6a8:	18 c0 bf ff 	l.movhi r6,0xbfff
    e6ac:	84 82 00 00 	l.lwz r4,0x0(r2)
    e6b0:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    e6b4:	9c e0 ff fe 	l.addi r7,r0,0xfffffffe
    e6b8:	e0 84 30 03 	l.and r4,r4,r6
    e6bc:	19 00 ff fe 	l.movhi r8,0xfffe
    e6c0:	d4 02 20 00 	l.sw 0x0(r2),r4
    e6c4:	a8 43 18 0c 	l.ori r2,r3,0x180c
    e6c8:	a9 08 ff ff 	l.ori r8,r8,0xffff
    e6cc:	84 82 00 00 	l.lwz r4,0x0(r2)
    e6d0:	9c 21 ff 88 	l.addi r1,r1,0xffffff88
    e6d4:	e0 84 38 03 	l.and r4,r4,r7
    e6d8:	d4 02 20 00 	l.sw 0x0(r2),r4
    e6dc:	84 82 00 00 	l.lwz r4,0x0(r2)
    e6e0:	e0 84 40 03 	l.and r4,r4,r8
    e6e4:	d4 02 20 00 	l.sw 0x0(r2),r4
    e6e8:	a8 43 10 10 	l.ori r2,r3,0x1010
    e6ec:	a8 63 18 00 	l.ori r3,r3,0x1800
    e6f0:	84 82 00 00 	l.lwz r4,0x0(r2)
    e6f4:	e0 84 28 03 	l.and r4,r4,r5
    e6f8:	d4 02 20 00 	l.sw 0x0(r2),r4
    e6fc:	84 83 00 00 	l.lwz r4,0x0(r3)
    e700:	e0 84 30 03 	l.and r4,r4,r6
    e704:	d4 03 20 00 	l.sw 0x0(r3),r4
    e708:	07 ff da cf 	l.jal 5244 <time_udelay>
    e70c:	9c 60 00 05 	l.addi r3,r0,0x5
    e710:	18 c0 ff ff 	l.movhi r6,0xffff
    e714:	85 c2 00 00 	l.lwz r14,0x0(r2)
    e718:	84 70 00 00 	l.lwz r3,0x0(r16)
    e71c:	a8 c6 00 fc 	l.ori r6,r6,0xfc
    e720:	18 e0 80 00 	l.movhi r7,0x8000
    e724:	e1 ce 30 03 	l.and r14,r14,r6
    e728:	e0 63 18 00 	l.add r3,r3,r3
    e72c:	9c 80 00 18 	l.addi r4,r0,0x18
    e730:	07 ff f6 b6 	l.jal c208 <__udivsi3>
    e734:	e1 ce 38 04 	l.or r14,r14,r7
    e738:	9d 6b ff ff 	l.addi r11,r11,0xffffffff
    e73c:	19 00 60 00 	l.movhi r8,0x6000
    e740:	b9 6b 00 08 	l.slli r11,r11,0x8
    e744:	e0 6e 58 04 	l.or r3,r14,r11
    e748:	19 60 20 00 	l.movhi r11,0x2000
    e74c:	e0 83 40 04 	l.or r4,r3,r8
    e750:	d4 02 18 00 	l.sw 0x0(r2),r3
    e754:	e0 63 58 04 	l.or r3,r3,r11
    e758:	d4 02 20 00 	l.sw 0x0(r2),r4
    e75c:	d4 02 18 00 	l.sw 0x0(r2),r3
    e760:	84 82 00 00 	l.lwz r4,0x0(r2)
    e764:	18 a0 10 00 	l.movhi r5,0x1000
    e768:	e0 84 28 03 	l.and r4,r4,r5
    e76c:	bc 04 00 00 	l.sfeqi r4,0x0
    e770:	13 ff ff fc 	l.bf e760 <mctl_core_init_standby+0x104>
    e774:	18 60 03 00 	l.movhi r3,0x300
    e778:	a8 43 18 00 	l.ori r2,r3,0x1800
    e77c:	18 c0 fc ff 	l.movhi r6,0xfcff
    e780:	84 82 00 00 	l.lwz r4,0x0(r2)
    e784:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    e788:	9c e0 ff e0 	l.addi r7,r0,0xffffffe0
    e78c:	e0 84 30 03 	l.and r4,r4,r6
    e790:	19 00 08 00 	l.movhi r8,0x800
    e794:	d4 02 20 00 	l.sw 0x0(r2),r4
    e798:	a9 08 00 03 	l.ori r8,r8,0x3
    e79c:	84 82 00 00 	l.lwz r4,0x0(r2)
    e7a0:	19 60 00 01 	l.movhi r11,0x1
    e7a4:	e0 84 38 03 	l.and r4,r4,r7
    e7a8:	18 c0 80 00 	l.movhi r6,0x8000
    e7ac:	a8 a4 00 03 	l.ori r5,r4,0x3
    e7b0:	e0 84 40 04 	l.or r4,r4,r8
    e7b4:	d4 02 28 00 	l.sw 0x0(r2),r5
    e7b8:	d4 02 20 00 	l.sw 0x0(r2),r4
    e7bc:	a8 83 18 0c 	l.ori r4,r3,0x180c
    e7c0:	a8 63 15 40 	l.ori r3,r3,0x1540
    e7c4:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e7c8:	e0 a5 58 04 	l.or r5,r5,r11
    e7cc:	d4 04 28 00 	l.sw 0x0(r4),r5
    e7d0:	84 a4 00 00 	l.lwz r5,0x0(r4)
    e7d4:	a8 a5 00 01 	l.ori r5,r5,0x1
    e7d8:	d4 04 28 00 	l.sw 0x0(r4),r5
    e7dc:	18 a0 40 00 	l.movhi r5,0x4000
    e7e0:	84 83 00 00 	l.lwz r4,0x0(r3)
    e7e4:	e0 84 28 04 	l.or r4,r4,r5
    e7e8:	d4 03 20 00 	l.sw 0x0(r3),r4
    e7ec:	84 83 00 00 	l.lwz r4,0x0(r3)
    e7f0:	e0 84 30 04 	l.or r4,r4,r6
    e7f4:	d4 03 20 00 	l.sw 0x0(r3),r4
    e7f8:	84 62 00 00 	l.lwz r3,0x0(r2)
    e7fc:	e0 63 28 04 	l.or r3,r3,r5
    e800:	d4 02 18 00 	l.sw 0x0(r2),r3
    e804:	9c 60 00 05 	l.addi r3,r0,0x5
    e808:	07 ff da 8f 	l.jal 5244 <time_udelay>
    e80c:	18 40 04 81 	l.movhi r2,0x481
    e810:	a8 62 00 08 	l.ori r3,r2,0x8
    e814:	18 e0 fe ff 	l.movhi r7,0xfeff
    e818:	84 83 00 00 	l.lwz r4,0x0(r3)
    e81c:	a8 e7 ff ff 	l.ori r7,r7,0xffff
    e820:	19 00 02 00 	l.movhi r8,0x200
    e824:	e0 84 38 03 	l.and r4,r4,r7
    e828:	a9 08 02 00 	l.ori r8,r8,0x200
    e82c:	a8 42 00 20 	l.ori r2,r2,0x20
    e830:	e0 84 40 04 	l.or r4,r4,r8
    e834:	d4 03 20 00 	l.sw 0x0(r3),r4
    e838:	84 62 00 00 	l.lwz r3,0x0(r2)
    e83c:	a8 63 80 00 	l.ori r3,r3,0x8000
    e840:	d4 02 18 00 	l.sw 0x0(r2),r3
    e844:	84 50 00 04 	l.lwz r2,0x4(r16)
    e848:	bc 22 00 08 	l.sfnei r2,0x8
    e84c:	10 00 00 08 	l.bf e86c <mctl_core_init_standby+0x210>
    e850:	18 40 04 82 	l.movhi r2,0x482
    e854:	18 40 03 10 	l.movhi r2,0x310
    e858:	a8 42 2e a8 	l.ori r2,r2,0x2ea8
    e85c:	84 62 00 00 	l.lwz r3,0x0(r2)
    e860:	a8 63 00 01 	l.ori r3,r3,0x1
    e864:	d4 02 18 00 	l.sw 0x0(r2),r3
    e868:	18 40 04 82 	l.movhi r2,0x482
    e86c:	19 60 ff ff 	l.movhi r11,0xffff
    e870:	a8 62 02 50 	l.ori r3,r2,0x250
    e874:	a9 6b 00 ff 	l.ori r11,r11,0xff
    e878:	84 83 00 00 	l.lwz r4,0x0(r3)
    e87c:	a8 42 00 38 	l.ori r2,r2,0x38
    e880:	e0 84 58 03 	l.and r4,r4,r11
    e884:	a8 84 30 00 	l.ori r4,r4,0x3000
    e888:	d4 03 20 00 	l.sw 0x0(r3),r4
    e88c:	9c 60 00 00 	l.addi r3,r0,0x0
    e890:	d4 02 18 00 	l.sw 0x0(r2),r3
    e894:	84 50 00 04 	l.lwz r2,0x4(r16)
    e898:	a4 42 00 0f 	l.andi r2,r2,0xf
    e89c:	9c 42 ff fd 	l.addi r2,r2,0xfffffffd
    e8a0:	bc 42 00 05 	l.sfgtui r2,0x5
    e8a4:	10 00 00 07 	l.bf e8c0 <mctl_core_init_standby+0x264>
    e8a8:	18 80 00 01 	l.movhi r4,0x1
    e8ac:	b8 42 00 02 	l.slli r2,r2,0x2
    e8b0:	a8 84 32 44 	l.ori r4,r4,0x3244
    e8b4:	e0 42 20 00 	l.add r2,r2,r4
    e8b8:	00 00 00 04 	l.j e8c8 <mctl_core_init_standby+0x26c>
    e8bc:	84 42 00 00 	l.lwz r2,0x0(r2)
    e8c0:	18 40 00 04 	l.movhi r2,0x4
    e8c4:	a8 42 00 01 	l.ori r2,r2,0x1
    e8c8:	84 70 00 1c 	l.lwz r3,0x1c(r16)
    e8cc:	18 a0 c0 00 	l.movhi r5,0xc000
    e8d0:	a4 83 00 01 	l.andi r4,r3,0x1
    e8d4:	b8 63 00 4b 	l.srli r3,r3,0xb
    e8d8:	b8 84 00 0c 	l.slli r4,r4,0xc
    e8dc:	a4 63 00 06 	l.andi r3,r3,0x6
    e8e0:	e0 84 28 04 	l.or r4,r4,r5
    e8e4:	9c 63 00 01 	l.addi r3,r3,0x1
    e8e8:	b8 63 00 18 	l.slli r3,r3,0x18
    e8ec:	e0 64 18 04 	l.or r3,r4,r3
    e8f0:	e0 63 10 04 	l.or r3,r3,r2
    e8f4:	18 40 04 82 	l.movhi r2,0x482
    e8f8:	d4 02 18 00 	l.sw 0x0(r2),r3
    e8fc:	84 70 00 04 	l.lwz r3,0x4(r16)
    e900:	bc 23 00 04 	l.sfnei r3,0x4
    e904:	10 00 00 08 	l.bf e924 <mctl_core_init_standby+0x2c8>
    e908:	15 00 00 00 	l.nop 0x0
    e90c:	84 70 00 78 	l.lwz r3,0x78(r16)
    e910:	84 82 00 00 	l.lwz r4,0x0(r2)
    e914:	b8 63 00 5e 	l.srli r3,r3,0x1e
    e918:	a4 63 00 01 	l.andi r3,r3,0x1
    e91c:	e0 63 20 04 	l.or r3,r3,r4
    e920:	d4 02 18 00 	l.sw 0x0(r2),r3
    e924:	84 50 00 04 	l.lwz r2,0x4(r16)
    e928:	9c 42 ff fd 	l.addi r2,r2,0xfffffffd
    e92c:	bc 42 00 01 	l.sfgtui r2,0x1
    e930:	10 00 00 13 	l.bf e97c <mctl_core_init_standby+0x320>
    e934:	18 40 04 82 	l.movhi r2,0x482
    e938:	84 42 00 00 	l.lwz r2,0x0(r2)
    e93c:	a4 62 08 00 	l.andi r3,r2,0x800
    e940:	bc 03 00 00 	l.sfeqi r3,0x0
    e944:	10 00 00 04 	l.bf e954 <mctl_core_init_standby+0x2f8>
    e948:	9c c0 fb ff 	l.addi r6,r0,0xfffffbff
    e94c:	00 00 00 0a 	l.j e974 <mctl_core_init_standby+0x318>
    e950:	e0 42 30 03 	l.and r2,r2,r6
    e954:	84 70 00 78 	l.lwz r3,0x78(r16)
    e958:	a4 63 00 20 	l.andi r3,r3,0x20
    e95c:	bc 03 00 00 	l.sfeqi r3,0x0
    e960:	10 00 00 04 	l.bf e970 <mctl_core_init_standby+0x314>
    e964:	9c e0 fb ff 	l.addi r7,r0,0xfffffbff
    e968:	00 00 00 03 	l.j e974 <mctl_core_init_standby+0x318>
    e96c:	e0 42 38 03 	l.and r2,r2,r7
    e970:	a8 42 04 00 	l.ori r2,r2,0x400
    e974:	18 60 04 82 	l.movhi r3,0x482
    e978:	d4 03 10 00 	l.sw 0x0(r3),r2
    e97c:	84 70 00 1c 	l.lwz r3,0x1c(r16)
    e980:	a4 63 10 00 	l.andi r3,r3,0x1000
    e984:	bc 03 00 00 	l.sfeqi r3,0x0
    e988:	10 00 00 03 	l.bf e994 <mctl_core_init_standby+0x338>
    e98c:	9c 40 02 01 	l.addi r2,r0,0x201
    e990:	9c 40 03 03 	l.addi r2,r0,0x303
    e994:	18 60 04 82 	l.movhi r3,0x482
    e998:	a8 63 02 44 	l.ori r3,r3,0x244
    e99c:	d4 03 10 00 	l.sw 0x0(r3),r2
    e9a0:	84 50 00 04 	l.lwz r2,0x4(r16)
    e9a4:	a4 42 00 07 	l.andi r2,r2,0x7
    e9a8:	bc 02 00 04 	l.sfeqi r2,0x4
    e9ac:	10 00 00 08 	l.bf e9cc <mctl_core_init_standby+0x370>
    e9b0:	bc 02 00 07 	l.sfeqi r2,0x7
    e9b4:	10 00 00 11 	l.bf e9f8 <mctl_core_init_standby+0x39c>
    e9b8:	bc 02 00 03 	l.sfeqi r2,0x3
    e9bc:	0c 00 00 1f 	l.bnf ea38 <mctl_core_init_standby+0x3dc>
    e9c0:	19 60 04 00 	l.movhi r11,0x400
    e9c4:	00 00 00 1d 	l.j ea38 <mctl_core_init_standby+0x3dc>
    e9c8:	19 60 06 00 	l.movhi r11,0x600
    e9cc:	84 50 00 30 	l.lwz r2,0x30(r16)
    e9d0:	19 00 00 07 	l.movhi r8,0x7
    e9d4:	b9 62 00 4c 	l.srli r11,r2,0xc
    e9d8:	b8 42 00 0a 	l.slli r2,r2,0xa
    e9dc:	a5 6b 00 01 	l.andi r11,r11,0x1
    e9e0:	e0 42 40 03 	l.and r2,r2,r8
    e9e4:	9d 6b 00 06 	l.addi r11,r11,0x6
    e9e8:	b9 6b 00 18 	l.slli r11,r11,0x18
    e9ec:	a9 6b 04 00 	l.ori r11,r11,0x400
    e9f0:	00 00 00 13 	l.j ea3c <mctl_core_init_standby+0x3e0>
    e9f4:	e1 6b 10 04 	l.or r11,r11,r2
    e9f8:	84 50 00 00 	l.lwz r2,0x0(r16)
    e9fc:	9c 80 07 d0 	l.addi r4,r0,0x7d0
    ea00:	b8 62 00 03 	l.slli r3,r2,0x3
    ea04:	07 ff f6 40 	l.jal c304 <__divsi3>
    ea08:	e0 63 10 02 	l.sub r3,r3,r2
    ea0c:	9c 8b 00 07 	l.addi r4,r11,0x7
    ea10:	9c 60 00 04 	l.addi r3,r0,0x4
    ea14:	b8 84 00 18 	l.slli r4,r4,0x18
    ea18:	bc 42 01 8f 	l.sfgtui r2,0x18f
    ea1c:	10 00 00 03 	l.bf ea28 <mctl_core_init_standby+0x3cc>
    ea20:	a8 84 04 00 	l.ori r4,r4,0x400
    ea24:	9c 60 00 03 	l.addi r3,r0,0x3
    ea28:	e1 63 58 02 	l.sub r11,r3,r11
    ea2c:	b9 6b 00 10 	l.slli r11,r11,0x10
    ea30:	00 00 00 03 	l.j ea3c <mctl_core_init_standby+0x3e0>
    ea34:	e1 6b 20 04 	l.or r11,r11,r4
    ea38:	a9 6b 04 00 	l.ori r11,r11,0x400
    ea3c:	18 40 04 82 	l.movhi r2,0x482
    ea40:	a8 62 02 40 	l.ori r3,r2,0x240
    ea44:	d4 03 58 00 	l.sw 0x0(r3),r11
    ea48:	a8 62 22 40 	l.ori r3,r2,0x2240
    ea4c:	d4 03 58 00 	l.sw 0x0(r3),r11
    ea50:	a8 62 32 40 	l.ori r3,r2,0x3240
    ea54:	a8 42 42 40 	l.ori r2,r2,0x4240
    ea58:	d4 03 58 00 	l.sw 0x0(r3),r11
    ea5c:	d4 02 58 00 	l.sw 0x0(r2),r11
    ea60:	84 70 00 18 	l.lwz r3,0x18(r16)
    ea64:	b8 c3 00 44 	l.srli r6,r3,0x4
    ea68:	b9 83 00 4c 	l.srli r12,r3,0xc
    ea6c:	b8 83 00 4e 	l.srli r4,r3,0xe
    ea70:	a4 43 00 0f 	l.andi r2,r3,0xf
    ea74:	84 70 00 1c 	l.lwz r3,0x1c(r16)
    ea78:	a4 c6 00 ff 	l.andi r6,r6,0xff
    ea7c:	a4 63 00 0f 	l.andi r3,r3,0xf
    ea80:	a5 8c 00 03 	l.andi r12,r12,0x3
    ea84:	bc 03 00 00 	l.sfeqi r3,0x0
    ea88:	10 00 00 03 	l.bf ea94 <mctl_core_init_standby+0x438>
    ea8c:	a4 84 00 03 	l.andi r4,r4,0x3
    ea90:	9c 42 ff ff 	l.addi r2,r2,0xffffffff
    ea94:	b8 e4 00 08 	l.slli r7,r4,0x8
    ea98:	b9 04 00 10 	l.slli r8,r4,0x10
    ea9c:	b8 64 00 18 	l.slli r3,r4,0x18
    eaa0:	18 a0 04 82 	l.movhi r5,0x482
    eaa4:	e1 68 38 04 	l.or r11,r8,r7
    eaa8:	a9 a5 02 08 	l.ori r13,r5,0x208
    eaac:	e1 cb 18 04 	l.or r14,r11,r3
    eab0:	bc 02 00 09 	l.sfeqi r2,0x9
    eab4:	d4 0d 70 00 	l.sw 0x0(r13),r14
    eab8:	10 00 00 14 	l.bf eb08 <mctl_core_init_standby+0x4ac>
    eabc:	bc 42 00 09 	l.sfgtui r2,0x9
    eac0:	10 00 00 07 	l.bf eadc <mctl_core_init_standby+0x480>
    eac4:	bc 02 00 0a 	l.sfeqi r2,0xa
    eac8:	bc 02 00 08 	l.sfeqi r2,0x8
    eacc:	0c 00 00 26 	l.bnf eb64 <mctl_core_init_standby+0x508>
    ead0:	19 60 1f 1f 	l.movhi r11,0x1f1f
    ead4:	00 00 00 08 	l.j eaf4 <mctl_core_init_standby+0x498>
    ead8:	e0 64 58 04 	l.or r3,r4,r11
    eadc:	10 00 00 16 	l.bf eb34 <mctl_core_init_standby+0x4d8>
    eae0:	bc 02 00 0b 	l.sfeqi r2,0xb
    eae4:	0c 00 00 21 	l.bnf eb68 <mctl_core_init_standby+0x50c>
    eae8:	e0 e7 20 04 	l.or r7,r7,r4
    eaec:	00 00 00 18 	l.j eb4c <mctl_core_init_standby+0x4f0>
    eaf0:	e1 6b 20 04 	l.or r11,r11,r4
    eaf4:	e0 e3 38 04 	l.or r7,r3,r7
    eaf8:	a8 65 02 0c 	l.ori r3,r5,0x20c
    eafc:	d4 03 38 00 	l.sw 0x0(r3),r7
    eb00:	00 00 00 09 	l.j eb24 <mctl_core_init_standby+0x4c8>
    eb04:	a8 a5 02 10 	l.ori r5,r5,0x210
    eb08:	19 60 1f 00 	l.movhi r11,0x1f00
    eb0c:	e0 64 58 04 	l.or r3,r4,r11
    eb10:	a9 65 02 0c 	l.ori r11,r5,0x20c
    eb14:	e0 e3 38 04 	l.or r7,r3,r7
    eb18:	e1 07 40 04 	l.or r8,r7,r8
    eb1c:	d4 0b 40 00 	l.sw 0x0(r11),r8
    eb20:	a8 a5 02 10 	l.ori r5,r5,0x210
    eb24:	9c 60 1f 1f 	l.addi r3,r0,0x1f1f
    eb28:	d4 05 18 00 	l.sw 0x0(r5),r3
    eb2c:	00 00 00 17 	l.j eb88 <mctl_core_init_standby+0x52c>
    eb30:	9c 60 01 01 	l.addi r3,r0,0x101
    eb34:	e1 6b 20 04 	l.or r11,r11,r4
    eb38:	a8 e5 02 0c 	l.ori r7,r5,0x20c
    eb3c:	e0 6b 18 04 	l.or r3,r11,r3
    eb40:	d4 07 18 00 	l.sw 0x0(r7),r3
    eb44:	03 ff ff f8 	l.j eb24 <mctl_core_init_standby+0x4c8>
    eb48:	a8 a5 02 10 	l.ori r5,r5,0x210
    eb4c:	a8 e5 02 0c 	l.ori r7,r5,0x20c
    eb50:	e0 6b 18 04 	l.or r3,r11,r3
    eb54:	a8 a5 02 10 	l.ori r5,r5,0x210
    eb58:	d4 07 18 00 	l.sw 0x0(r7),r3
    eb5c:	03 ff ff f3 	l.j eb28 <mctl_core_init_standby+0x4cc>
    eb60:	a8 64 1f 00 	l.ori r3,r4,0x1f00
    eb64:	e0 e7 20 04 	l.or r7,r7,r4
    eb68:	18 a0 04 82 	l.movhi r5,0x482
    eb6c:	e0 63 40 04 	l.or r3,r3,r8
    eb70:	a9 65 02 0c 	l.ori r11,r5,0x20c
    eb74:	e0 63 38 04 	l.or r3,r3,r7
    eb78:	a8 a5 02 10 	l.ori r5,r5,0x210
    eb7c:	d4 0b 18 00 	l.sw 0x0(r11),r3
    eb80:	d4 05 38 00 	l.sw 0x0(r5),r7
    eb84:	9c 60 01 01 	l.addi r3,r0,0x101
    eb88:	bc 04 00 02 	l.sfeqi r4,0x2
    eb8c:	10 00 00 05 	l.bf eba0 <mctl_core_init_standby+0x544>
    eb90:	bc 24 00 01 	l.sfnei r4,0x1
    eb94:	10 00 00 03 	l.bf eba0 <mctl_core_init_standby+0x544>
    eb98:	9c 60 3f 3f 	l.addi r3,r0,0x3f3f
    eb9c:	9c 60 3f 01 	l.addi r3,r0,0x3f01
    eba0:	18 a0 04 82 	l.movhi r5,0x482
    eba4:	bc 2c 00 03 	l.sfnei r12,0x3
    eba8:	a8 e5 02 20 	l.ori r7,r5,0x220
    ebac:	a8 a5 02 04 	l.ori r5,r5,0x204
    ebb0:	d4 07 18 00 	l.sw 0x0(r7),r3
    ebb4:	10 00 00 07 	l.bf ebd0 <mctl_core_init_standby+0x574>
    ebb8:	9c 64 ff fe 	l.addi r3,r4,0xfffffffe
    ebbc:	e0 63 10 00 	l.add r3,r3,r2
    ebc0:	b9 03 00 08 	l.slli r8,r3,0x8
    ebc4:	b8 e3 00 10 	l.slli r7,r3,0x10
    ebc8:	00 00 00 06 	l.j ebe0 <mctl_core_init_standby+0x584>
    ebcc:	e0 e8 38 04 	l.or r7,r8,r7
    ebd0:	e0 63 10 00 	l.add r3,r3,r2
    ebd4:	19 00 00 3f 	l.movhi r8,0x3f
    ebd8:	e0 e3 40 04 	l.or r7,r3,r8
    ebdc:	b8 63 00 08 	l.slli r3,r3,0x8
    ebe0:	e0 84 60 00 	l.add r4,r4,r12
    ebe4:	e0 67 18 04 	l.or r3,r7,r3
    ebe8:	e0 84 10 00 	l.add r4,r4,r2
    ebec:	d4 05 18 00 	l.sw 0x0(r5),r3
    ebf0:	9c a4 ff fa 	l.addi r5,r4,0xfffffffa
    ebf4:	18 60 04 82 	l.movhi r3,0x482
    ebf8:	b8 e5 00 08 	l.slli r7,r5,0x8
    ebfc:	b9 65 00 10 	l.slli r11,r5,0x10
    ec00:	b9 05 00 18 	l.slli r8,r5,0x18
    ec04:	e0 e7 28 04 	l.or r7,r7,r5
    ec08:	a9 83 02 14 	l.ori r12,r3,0x214
    ec0c:	e1 67 58 04 	l.or r11,r7,r11
    ec10:	bc 06 00 0f 	l.sfeqi r6,0xf
    ec14:	e1 0b 40 04 	l.or r8,r11,r8
    ec18:	d4 0c 40 00 	l.sw 0x0(r12),r8
    ec1c:	10 00 00 3d 	l.bf ed10 <mctl_core_init_standby+0x6b4>
    ec20:	bc 46 00 0f 	l.sfgtui r6,0xf
    ec24:	10 00 00 07 	l.bf ec40 <mctl_core_init_standby+0x5e4>
    ec28:	bc 06 00 10 	l.sfeqi r6,0x10
    ec2c:	bc 06 00 0e 	l.sfeqi r6,0xe
    ec30:	0c 00 00 88 	l.bnf ee50 <mctl_core_init_standby+0x7f4>
    ec34:	ac a2 00 0c 	l.xori r5,r2,0xc
    ec38:	00 00 00 08 	l.j ec58 <mctl_core_init_standby+0x5fc>
    ec3c:	e1 00 28 02 	l.sub r8,r0,r5
    ec40:	10 00 00 5f 	l.bf edbc <mctl_core_init_standby+0x760>
    ec44:	bc 06 00 11 	l.sfeqi r6,0x11
    ec48:	0c 00 00 82 	l.bnf ee50 <mctl_core_init_standby+0x7f4>
    ec4c:	a8 43 02 18 	l.ori r2,r3,0x218
    ec50:	00 00 00 7b 	l.j ee3c <mctl_core_init_standby+0x7e0>
    ec54:	a8 a5 0f 00 	l.ori r5,r5,0xf00
    ec58:	e0 a8 28 04 	l.or r5,r8,r5
    ec5c:	bd 85 00 00 	l.sfltsi r5,0x0
    ec60:	10 00 00 07 	l.bf ec7c <mctl_core_init_standby+0x620>
    ec64:	84 70 00 78 	l.lwz r3,0x78(r16)
    ec68:	b8 a3 00 50 	l.srli r5,r3,0x10
    ec6c:	a4 a5 00 01 	l.andi r5,r5,0x1
    ec70:	bc 25 00 00 	l.sfnei r5,0x0
    ec74:	10 00 00 17 	l.bf ecd0 <mctl_core_init_standby+0x674>
    ec78:	15 00 00 00 	l.nop 0x0
    ec7c:	ac a2 00 0b 	l.xori r5,r2,0xb
    ec80:	e1 00 28 02 	l.sub r8,r0,r5
    ec84:	e0 a8 28 04 	l.or r5,r8,r5
    ec88:	bd 85 00 00 	l.sfltsi r5,0x0
    ec8c:	10 00 00 06 	l.bf eca4 <mctl_core_init_standby+0x648>
    ec90:	b8 a3 00 51 	l.srli r5,r3,0x11
    ec94:	a4 a5 00 01 	l.andi r5,r5,0x1
    ec98:	bc 25 00 00 	l.sfnei r5,0x0
    ec9c:	10 00 00 0d 	l.bf ecd0 <mctl_core_init_standby+0x674>
    eca0:	15 00 00 00 	l.nop 0x0
    eca4:	ac 42 00 0a 	l.xori r2,r2,0xa
    eca8:	e0 a0 10 02 	l.sub r5,r0,r2
    ecac:	e0 45 10 04 	l.or r2,r5,r2
    ecb0:	bd 82 00 00 	l.sfltsi r2,0x0
    ecb4:	10 00 00 11 	l.bf ecf8 <mctl_core_init_standby+0x69c>
    ecb8:	18 40 0f 0f 	l.movhi r2,0xf0f
    ecbc:	b8 63 00 50 	l.srli r3,r3,0x10
    ecc0:	a4 63 00 03 	l.andi r3,r3,0x3
    ecc4:	bc 23 00 03 	l.sfnei r3,0x3
    ecc8:	10 00 00 0c 	l.bf ecf8 <mctl_core_init_standby+0x69c>
    eccc:	15 00 00 00 	l.nop 0x0
    ecd0:	9c 44 ff fb 	l.addi r2,r4,0xfffffffb
    ecd4:	19 60 0f 0f 	l.movhi r11,0xf0f
    ecd8:	e0 a2 58 04 	l.or r5,r2,r11
    ecdc:	b8 42 00 08 	l.slli r2,r2,0x8
    ece0:	e0 a5 10 04 	l.or r5,r5,r2
    ece4:	18 40 04 82 	l.movhi r2,0x482
    ece8:	a8 62 02 18 	l.ori r3,r2,0x218
    ecec:	d4 03 28 00 	l.sw 0x0(r3),r5
    ecf0:	00 00 00 28 	l.j ed90 <mctl_core_init_standby+0x734>
    ecf4:	9c 64 00 06 	l.addi r3,r4,0x6
    ecf8:	e0 e7 10 04 	l.or r7,r7,r2
    ecfc:	18 40 04 82 	l.movhi r2,0x482
    ed00:	a8 42 02 18 	l.ori r2,r2,0x218
    ed04:	d4 02 38 00 	l.sw 0x0(r2),r7
    ed08:	00 00 00 48 	l.j ee28 <mctl_core_init_standby+0x7cc>
    ed0c:	18 40 04 82 	l.movhi r2,0x482
    ed10:	ac e2 00 0b 	l.xori r7,r2,0xb
    ed14:	e1 00 38 02 	l.sub r8,r0,r7
    ed18:	e0 e8 38 04 	l.or r7,r8,r7
    ed1c:	bd 87 00 00 	l.sfltsi r7,0x0
    ed20:	10 00 00 07 	l.bf ed3c <mctl_core_init_standby+0x6e0>
    ed24:	84 70 00 78 	l.lwz r3,0x78(r16)
    ed28:	b8 e3 00 50 	l.srli r7,r3,0x10
    ed2c:	a4 e7 00 01 	l.andi r7,r7,0x1
    ed30:	bc 27 00 00 	l.sfnei r7,0x0
    ed34:	10 00 00 0c 	l.bf ed64 <mctl_core_init_standby+0x708>
    ed38:	15 00 00 00 	l.nop 0x0
    ed3c:	ac 42 00 0a 	l.xori r2,r2,0xa
    ed40:	e0 e0 10 02 	l.sub r7,r0,r2
    ed44:	e0 47 10 04 	l.or r2,r7,r2
    ed48:	bd 82 00 00 	l.sfltsi r2,0x0
    ed4c:	10 00 00 15 	l.bf eda0 <mctl_core_init_standby+0x744>
    ed50:	b8 63 00 51 	l.srli r3,r3,0x11
    ed54:	a4 63 00 01 	l.andi r3,r3,0x1
    ed58:	bc 03 00 00 	l.sfeqi r3,0x0
    ed5c:	10 00 00 11 	l.bf eda0 <mctl_core_init_standby+0x744>
    ed60:	15 00 00 00 	l.nop 0x0
    ed64:	9c 44 ff fb 	l.addi r2,r4,0xfffffffb
    ed68:	18 60 0f 00 	l.movhi r3,0xf00
    ed6c:	e0 a5 18 04 	l.or r5,r5,r3
    ed70:	b8 62 00 08 	l.slli r3,r2,0x8
    ed74:	b8 42 00 10 	l.slli r2,r2,0x10
    ed78:	e0 a5 18 04 	l.or r5,r5,r3
    ed7c:	e0 a5 10 04 	l.or r5,r5,r2
    ed80:	18 40 04 82 	l.movhi r2,0x482
    ed84:	a8 62 02 18 	l.ori r3,r2,0x218
    ed88:	d4 03 28 00 	l.sw 0x0(r3),r5
    ed8c:	9c 64 00 07 	l.addi r3,r4,0x7
    ed90:	a8 42 02 00 	l.ori r2,r2,0x200
    ed94:	d4 02 18 00 	l.sw 0x0(r2),r3
    ed98:	00 00 00 24 	l.j ee28 <mctl_core_init_standby+0x7cc>
    ed9c:	18 40 04 82 	l.movhi r2,0x482
    eda0:	18 a0 0f 00 	l.movhi r5,0xf00
    eda4:	18 40 04 82 	l.movhi r2,0x482
    eda8:	e1 6b 28 04 	l.or r11,r11,r5
    edac:	a8 42 02 18 	l.ori r2,r2,0x218
    edb0:	d4 02 58 00 	l.sw 0x0(r2),r11
    edb4:	00 00 00 1d 	l.j ee28 <mctl_core_init_standby+0x7cc>
    edb8:	18 40 04 82 	l.movhi r2,0x482
    edbc:	ac 42 00 0a 	l.xori r2,r2,0xa
    edc0:	e0 a0 10 02 	l.sub r5,r0,r2
    edc4:	e0 45 10 04 	l.or r2,r5,r2
    edc8:	bd 82 00 00 	l.sfltsi r2,0x0
    edcc:	10 00 00 14 	l.bf ee1c <mctl_core_init_standby+0x7c0>
    edd0:	18 40 04 82 	l.movhi r2,0x482
    edd4:	94 50 00 78 	l.lhz r2,0x78(r16)
    edd8:	a4 42 00 01 	l.andi r2,r2,0x1
    eddc:	bc 02 00 00 	l.sfeqi r2,0x0
    ede0:	10 00 00 0e 	l.bf ee18 <mctl_core_init_standby+0x7bc>
    ede4:	15 00 00 00 	l.nop 0x0
    ede8:	9c 44 ff fb 	l.addi r2,r4,0xfffffffb
    edec:	b8 a2 00 18 	l.slli r5,r2,0x18
    edf0:	b8 42 00 10 	l.slli r2,r2,0x10
    edf4:	e0 45 10 04 	l.or r2,r5,r2
    edf8:	a8 a3 02 18 	l.ori r5,r3,0x218
    edfc:	e0 e2 38 04 	l.or r7,r2,r7
    ee00:	a8 63 02 00 	l.ori r3,r3,0x200
    ee04:	9c 44 00 08 	l.addi r2,r4,0x8
    ee08:	d4 05 38 00 	l.sw 0x0(r5),r7
    ee0c:	d4 03 10 00 	l.sw 0x0(r3),r2
    ee10:	00 00 00 06 	l.j ee28 <mctl_core_init_standby+0x7cc>
    ee14:	18 40 04 82 	l.movhi r2,0x482
    ee18:	18 40 04 82 	l.movhi r2,0x482
    ee1c:	a8 42 02 18 	l.ori r2,r2,0x218
    ee20:	d4 02 40 00 	l.sw 0x0(r2),r8
    ee24:	18 40 04 82 	l.movhi r2,0x482
    ee28:	9c 60 0f 0f 	l.addi r3,r0,0xf0f
    ee2c:	a8 42 02 1c 	l.ori r2,r2,0x21c
    ee30:	d4 02 18 00 	l.sw 0x0(r2),r3
    ee34:	00 00 00 0d 	l.j ee68 <mctl_core_init_standby+0x80c>
    ee38:	84 50 00 1c 	l.lwz r2,0x1c(r16)
    ee3c:	a8 63 02 1c 	l.ori r3,r3,0x21c
    ee40:	d4 02 40 00 	l.sw 0x0(r2),r8
    ee44:	d4 03 28 00 	l.sw 0x0(r3),r5
    ee48:	00 00 00 08 	l.j ee68 <mctl_core_init_standby+0x80c>
    ee4c:	84 50 00 1c 	l.lwz r2,0x1c(r16)
    ee50:	18 40 04 82 	l.movhi r2,0x482
    ee54:	a8 62 02 18 	l.ori r3,r2,0x218
    ee58:	a8 42 02 1c 	l.ori r2,r2,0x21c
    ee5c:	d4 03 40 00 	l.sw 0x0(r3),r8
    ee60:	d4 02 38 00 	l.sw 0x0(r2),r7
    ee64:	84 50 00 1c 	l.lwz r2,0x1c(r16)
    ee68:	a4 42 10 00 	l.andi r2,r2,0x1000
    ee6c:	bc 02 00 00 	l.sfeqi r2,0x0
    ee70:	10 00 00 0d 	l.bf eea4 <mctl_core_init_standby+0x848>
    ee74:	18 40 04 82 	l.movhi r2,0x482
    ee78:	94 50 00 78 	l.lhz r2,0x78(r16)
    ee7c:	a4 42 00 07 	l.andi r2,r2,0x7
    ee80:	bc 22 00 00 	l.sfnei r2,0x0
    ee84:	10 00 00 0b 	l.bf eeb0 <mctl_core_init_standby+0x854>
    ee88:	9c c6 ff fa 	l.addi r6,r6,0xfffffffa
    ee8c:	18 40 04 82 	l.movhi r2,0x482
    ee90:	e0 86 20 00 	l.add r4,r6,r4
    ee94:	a8 42 02 00 	l.ori r2,r2,0x200
    ee98:	d4 02 20 00 	l.sw 0x0(r2),r4
    ee9c:	00 00 00 06 	l.j eeb4 <mctl_core_init_standby+0x858>
    eea0:	84 d0 00 04 	l.lwz r6,0x4(r16)
    eea4:	9c 60 00 1f 	l.addi r3,r0,0x1f
    eea8:	a8 42 02 00 	l.ori r2,r2,0x200
    eeac:	d4 02 18 00 	l.sw 0x0(r2),r3
    eeb0:	84 d0 00 04 	l.lwz r6,0x4(r16)
    eeb4:	84 50 00 00 	l.lwz r2,0x0(r16)
    eeb8:	d4 01 30 00 	l.sw 0x0(r1),r6
    eebc:	bc 26 00 03 	l.sfnei r6,0x3
    eec0:	10 00 00 41 	l.bf efc4 <mctl_core_init_standby+0x968>
    eec4:	b8 42 00 41 	l.srli r2,r2,0x1
    eec8:	9c 60 00 32 	l.addi r3,r0,0x32
    eecc:	07 ff fa 27 	l.jal d768 <auto_cal_timing_standby>
    eed0:	a8 82 00 00 	l.ori r4,r2,0x0
    eed4:	9c 60 00 0a 	l.addi r3,r0,0xa
    eed8:	a8 82 00 00 	l.ori r4,r2,0x0
    eedc:	07 ff fa 23 	l.jal d768 <auto_cal_timing_standby>
    eee0:	a7 cb 00 ff 	l.andi r30,r11,0xff
    eee4:	a5 6b 00 ff 	l.andi r11,r11,0xff
    eee8:	bc ab 00 01 	l.sfleui r11,0x1
    eeec:	0c 00 00 04 	l.bnf eefc <mctl_core_init_standby+0x8a0>
    eef0:	d4 01 58 18 	l.sw 0x18(r1),r11
    eef4:	9c e0 00 02 	l.addi r7,r0,0x2
    eef8:	d4 01 38 18 	l.sw 0x18(r1),r7
    eefc:	9c 60 00 0f 	l.addi r3,r0,0xf
    ef00:	07 ff fa 1a 	l.jal d768 <auto_cal_timing_standby>
    ef04:	a8 82 00 00 	l.ori r4,r2,0x0
    ef08:	9c 60 00 35 	l.addi r3,r0,0x35
    ef0c:	a8 82 00 00 	l.ori r4,r2,0x0
    ef10:	07 ff fa 16 	l.jal d768 <auto_cal_timing_standby>
    ef14:	a6 8b 00 ff 	l.andi r20,r11,0xff
    ef18:	9c 60 00 08 	l.addi r3,r0,0x8
    ef1c:	a5 6b 00 ff 	l.andi r11,r11,0xff
    ef20:	a8 82 00 00 	l.ori r4,r2,0x0
    ef24:	07 ff fa 11 	l.jal d768 <auto_cal_timing_standby>
    ef28:	d4 01 58 3c 	l.sw 0x3c(r1),r11
    ef2c:	a5 cb 00 ff 	l.andi r14,r11,0xff
    ef30:	bc 4e 00 01 	l.sfgtui r14,0x1
    ef34:	10 00 00 03 	l.bf ef40 <mctl_core_init_standby+0x8e4>
    ef38:	15 00 00 00 	l.nop 0x0
    ef3c:	9d c0 00 02 	l.addi r14,r0,0x2
    ef40:	9c 60 00 26 	l.addi r3,r0,0x26
    ef44:	a8 82 00 00 	l.ori r4,r2,0x0
    ef48:	07 ff fa 08 	l.jal d768 <auto_cal_timing_standby>
    ef4c:	aa ce 00 00 	l.ori r22,r14,0x0
    ef50:	9c 60 1e 78 	l.addi r3,r0,0x1e78
    ef54:	a5 6b 00 ff 	l.andi r11,r11,0xff
    ef58:	a8 82 00 00 	l.ori r4,r2,0x0
    ef5c:	07 ff fa 03 	l.jal d768 <auto_cal_timing_standby>
    ef60:	d4 01 58 38 	l.sw 0x38(r1),r11
    ef64:	b8 6b 00 45 	l.srli r3,r11,0x5
    ef68:	a8 82 00 00 	l.ori r4,r2,0x0
    ef6c:	a4 63 ff ff 	l.andi r3,r3,0xffff
    ef70:	d4 01 18 2c 	l.sw 0x2c(r1),r3
    ef74:	07 ff f9 fd 	l.jal d768 <auto_cal_timing_standby>
    ef78:	9c 60 01 5e 	l.addi r3,r0,0x15e
    ef7c:	9c 60 01 68 	l.addi r3,r0,0x168
    ef80:	a5 6b ff ff 	l.andi r11,r11,0xffff
    ef84:	a8 82 00 00 	l.ori r4,r2,0x0
    ef88:	07 ff f9 f8 	l.jal d768 <auto_cal_timing_standby>
    ef8c:	d4 01 58 48 	l.sw 0x48(r1),r11
    ef90:	b8 8b 00 45 	l.srli r4,r11,0x5
    ef94:	9c 60 00 02 	l.addi r3,r0,0x2
    ef98:	9d 00 00 04 	l.addi r8,r0,0x4
    ef9c:	a4 84 00 ff 	l.andi r4,r4,0xff
    efa0:	9d 60 00 08 	l.addi r11,r0,0x8
    efa4:	d4 01 20 30 	l.sw 0x30(r1),r4
    efa8:	d4 01 70 14 	l.sw 0x14(r1),r14
    efac:	d4 01 a0 1c 	l.sw 0x1c(r1),r20
    efb0:	d4 01 40 44 	l.sw 0x44(r1),r8
    efb4:	d4 01 58 28 	l.sw 0x28(r1),r11
    efb8:	d4 01 18 20 	l.sw 0x20(r1),r3
    efbc:	00 00 01 5f 	l.j f538 <mctl_core_init_standby+0xedc>
    efc0:	d4 01 18 40 	l.sw 0x40(r1),r3
    efc4:	84 81 00 00 	l.lwz r4,0x0(r1)
    efc8:	bc 24 00 04 	l.sfnei r4,0x4
    efcc:	10 00 00 57 	l.bf f128 <mctl_core_init_standby+0xacc>
    efd0:	84 a1 00 00 	l.lwz r5,0x0(r1)
    efd4:	9c 60 00 23 	l.addi r3,r0,0x23
    efd8:	07 ff f9 e4 	l.jal d768 <auto_cal_timing_standby>
    efdc:	a8 82 00 00 	l.ori r4,r2,0x0
    efe0:	9c 60 00 08 	l.addi r3,r0,0x8
    efe4:	a8 82 00 00 	l.ori r4,r2,0x0
    efe8:	07 ff f9 e0 	l.jal d768 <auto_cal_timing_standby>
    efec:	a7 cb 00 ff 	l.andi r30,r11,0xff
    eff0:	9c a0 00 02 	l.addi r5,r0,0x2
    eff4:	a5 cb 00 ff 	l.andi r14,r11,0xff
    eff8:	bc ae 00 01 	l.sfleui r14,0x1
    effc:	10 00 00 03 	l.bf f008 <mctl_core_init_standby+0x9ac>
    f000:	d4 01 28 18 	l.sw 0x18(r1),r5
    f004:	d4 01 70 18 	l.sw 0x18(r1),r14
    f008:	9c 60 00 06 	l.addi r3,r0,0x6
    f00c:	07 ff f9 d7 	l.jal d768 <auto_cal_timing_standby>
    f010:	a8 82 00 00 	l.ori r4,r2,0x0
    f014:	9c c0 00 02 	l.addi r6,r0,0x2
    f018:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f01c:	d4 01 30 20 	l.sw 0x20(r1),r6
    f020:	bc ab 00 01 	l.sfleui r11,0x1
    f024:	10 00 00 03 	l.bf f030 <mctl_core_init_standby+0x9d4>
    f028:	d4 01 58 14 	l.sw 0x14(r1),r11
    f02c:	d4 01 58 20 	l.sw 0x20(r1),r11
    f030:	9c 60 00 0a 	l.addi r3,r0,0xa
    f034:	07 ff f9 cd 	l.jal d768 <auto_cal_timing_standby>
    f038:	a8 82 00 00 	l.ori r4,r2,0x0
    f03c:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f040:	bc ab 00 07 	l.sfleui r11,0x7
    f044:	0c 00 00 04 	l.bnf f054 <mctl_core_init_standby+0x9f8>
    f048:	d4 01 58 28 	l.sw 0x28(r1),r11
    f04c:	9c e0 00 08 	l.addi r7,r0,0x8
    f050:	d4 01 38 28 	l.sw 0x28(r1),r7
    f054:	9c 60 00 0f 	l.addi r3,r0,0xf
    f058:	07 ff f9 c4 	l.jal d768 <auto_cal_timing_standby>
    f05c:	a8 82 00 00 	l.ori r4,r2,0x0
    f060:	9c 60 00 31 	l.addi r3,r0,0x31
    f064:	a8 82 00 00 	l.ori r4,r2,0x0
    f068:	07 ff f9 c0 	l.jal d768 <auto_cal_timing_standby>
    f06c:	a6 8b 00 ff 	l.andi r20,r11,0xff
    f070:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f074:	85 01 00 14 	l.lwz r8,0x14(r1)
    f078:	bc a8 00 01 	l.sfleui r8,0x1
    f07c:	0c 00 00 04 	l.bnf f08c <mctl_core_init_standby+0xa30>
    f080:	d4 01 58 3c 	l.sw 0x3c(r1),r11
    f084:	9d 60 00 02 	l.addi r11,r0,0x2
    f088:	d4 01 58 14 	l.sw 0x14(r1),r11
    f08c:	bc ae 00 01 	l.sfleui r14,0x1
    f090:	0c 00 00 03 	l.bnf f09c <mctl_core_init_standby+0xa40>
    f094:	9c 60 00 03 	l.addi r3,r0,0x3
    f098:	9d c0 00 02 	l.addi r14,r0,0x2
    f09c:	07 ff f9 b3 	l.jal d768 <auto_cal_timing_standby>
    f0a0:	a8 82 00 00 	l.ori r4,r2,0x0
    f0a4:	a6 4b 00 ff 	l.andi r18,r11,0xff
    f0a8:	bc 12 00 00 	l.sfeqi r18,0x0
    f0ac:	0c 00 00 03 	l.bnf f0b8 <mctl_core_init_standby+0xa5c>
    f0b0:	15 00 00 00 	l.nop 0x0
    f0b4:	9e 40 00 01 	l.addi r18,r0,0x1
    f0b8:	9c 60 00 22 	l.addi r3,r0,0x22
    f0bc:	07 ff f9 ab 	l.jal d768 <auto_cal_timing_standby>
    f0c0:	a8 82 00 00 	l.ori r4,r2,0x0
    f0c4:	9c 60 1e 78 	l.addi r3,r0,0x1e78
    f0c8:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f0cc:	a8 82 00 00 	l.ori r4,r2,0x0
    f0d0:	07 ff f9 a6 	l.jal d768 <auto_cal_timing_standby>
    f0d4:	d4 01 58 38 	l.sw 0x38(r1),r11
    f0d8:	b8 6b 00 45 	l.srli r3,r11,0x5
    f0dc:	a8 82 00 00 	l.ori r4,r2,0x0
    f0e0:	a4 63 ff ff 	l.andi r3,r3,0xffff
    f0e4:	d4 01 18 2c 	l.sw 0x2c(r1),r3
    f0e8:	07 ff f9 a0 	l.jal d768 <auto_cal_timing_standby>
    f0ec:	9c 60 01 5e 	l.addi r3,r0,0x15e
    f0f0:	9c 60 01 68 	l.addi r3,r0,0x168
    f0f4:	a5 6b ff ff 	l.andi r11,r11,0xffff
    f0f8:	a8 82 00 00 	l.ori r4,r2,0x0
    f0fc:	07 ff f9 9b 	l.jal d768 <auto_cal_timing_standby>
    f100:	d4 01 58 48 	l.sw 0x48(r1),r11
    f104:	b8 8b 00 45 	l.srli r4,r11,0x5
    f108:	9c 60 00 04 	l.addi r3,r0,0x4
    f10c:	d4 01 a0 1c 	l.sw 0x1c(r1),r20
    f110:	a4 84 00 ff 	l.andi r4,r4,0xff
    f114:	d4 01 18 44 	l.sw 0x44(r1),r3
    f118:	d4 01 20 30 	l.sw 0x30(r1),r4
    f11c:	9c 80 00 03 	l.addi r4,r0,0x3
    f120:	00 00 00 c4 	l.j f430 <mctl_core_init_standby+0xdd4>
    f124:	d4 01 20 40 	l.sw 0x40(r1),r4
    f128:	bc 25 00 07 	l.sfnei r5,0x7
    f12c:	10 00 00 4b 	l.bf f258 <mctl_core_init_standby+0xbfc>
    f130:	84 61 00 00 	l.lwz r3,0x0(r1)
    f134:	9c 60 00 32 	l.addi r3,r0,0x32
    f138:	07 ff f9 8c 	l.jal d768 <auto_cal_timing_standby>
    f13c:	a8 82 00 00 	l.ori r4,r2,0x0
    f140:	a7 cb 00 ff 	l.andi r30,r11,0xff
    f144:	bc be 00 03 	l.sfleui r30,0x3
    f148:	0c 00 00 03 	l.bnf f154 <mctl_core_init_standby+0xaf8>
    f14c:	9c 60 00 0a 	l.addi r3,r0,0xa
    f150:	9f c0 00 04 	l.addi r30,r0,0x4
    f154:	07 ff f9 85 	l.jal d768 <auto_cal_timing_standby>
    f158:	a8 82 00 00 	l.ori r4,r2,0x0
    f15c:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f160:	bc 0b 00 00 	l.sfeqi r11,0x0
    f164:	0c 00 00 04 	l.bnf f174 <mctl_core_init_standby+0xb18>
    f168:	d4 01 58 18 	l.sw 0x18(r1),r11
    f16c:	9c c0 00 01 	l.addi r6,r0,0x1
    f170:	d4 01 30 18 	l.sw 0x18(r1),r6
    f174:	9c 60 00 18 	l.addi r3,r0,0x18
    f178:	07 ff f9 7c 	l.jal d768 <auto_cal_timing_standby>
    f17c:	a8 82 00 00 	l.ori r4,r2,0x0
    f180:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f184:	bc ab 00 01 	l.sfleui r11,0x1
    f188:	0c 00 00 04 	l.bnf f198 <mctl_core_init_standby+0xb3c>
    f18c:	d4 01 58 1c 	l.sw 0x1c(r1),r11
    f190:	9c e0 00 02 	l.addi r7,r0,0x2
    f194:	d4 01 38 1c 	l.sw 0x1c(r1),r7
    f198:	9c 60 00 46 	l.addi r3,r0,0x46
    f19c:	07 ff f9 73 	l.jal d768 <auto_cal_timing_standby>
    f1a0:	a8 82 00 00 	l.ori r4,r2,0x0
    f1a4:	9c 60 00 08 	l.addi r3,r0,0x8
    f1a8:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f1ac:	a8 82 00 00 	l.ori r4,r2,0x0
    f1b0:	07 ff f9 6e 	l.jal d768 <auto_cal_timing_standby>
    f1b4:	d4 01 58 3c 	l.sw 0x3c(r1),r11
    f1b8:	a5 cb 00 ff 	l.andi r14,r11,0xff
    f1bc:	bc 4e 00 01 	l.sfgtui r14,0x1
    f1c0:	10 00 00 03 	l.bf f1cc <mctl_core_init_standby+0xb70>
    f1c4:	15 00 00 00 	l.nop 0x0
    f1c8:	9d c0 00 02 	l.addi r14,r0,0x2
    f1cc:	a8 82 00 00 	l.ori r4,r2,0x0
    f1d0:	9c 60 00 1b 	l.addi r3,r0,0x1b
    f1d4:	07 ff f9 65 	l.jal d768 <auto_cal_timing_standby>
    f1d8:	aa ce 00 00 	l.ori r22,r14,0x0
    f1dc:	a8 82 00 00 	l.ori r4,r2,0x0
    f1e0:	9c 60 00 2a 	l.addi r3,r0,0x2a
    f1e4:	07 ff f9 61 	l.jal d768 <auto_cal_timing_standby>
    f1e8:	a6 8b 00 ff 	l.andi r20,r11,0xff
    f1ec:	a8 82 00 00 	l.ori r4,r2,0x0
    f1f0:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f1f4:	9c 60 0f 3c 	l.addi r3,r0,0xf3c
    f1f8:	07 ff f9 5c 	l.jal d768 <auto_cal_timing_standby>
    f1fc:	d4 01 58 38 	l.sw 0x38(r1),r11
    f200:	b8 6b 00 45 	l.srli r3,r11,0x5
    f204:	a8 82 00 00 	l.ori r4,r2,0x0
    f208:	a4 63 ff ff 	l.andi r3,r3,0xffff
    f20c:	d4 01 18 2c 	l.sw 0x2c(r1),r3
    f210:	07 ff f9 56 	l.jal d768 <auto_cal_timing_standby>
    f214:	9c 60 00 d2 	l.addi r3,r0,0xd2
    f218:	a8 82 00 00 	l.ori r4,r2,0x0
    f21c:	a5 6b ff ff 	l.andi r11,r11,0xffff
    f220:	9c 60 00 dc 	l.addi r3,r0,0xdc
    f224:	07 ff f9 51 	l.jal d768 <auto_cal_timing_standby>
    f228:	d4 01 58 48 	l.sw 0x48(r1),r11
    f22c:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f230:	9c 40 00 02 	l.addi r2,r0,0x2
    f234:	d4 01 58 44 	l.sw 0x44(r1),r11
    f238:	9d 00 00 04 	l.addi r8,r0,0x4
    f23c:	9d 60 00 08 	l.addi r11,r0,0x8
    f240:	d4 01 70 14 	l.sw 0x14(r1),r14
    f244:	d4 01 40 30 	l.sw 0x30(r1),r8
    f248:	d4 01 58 28 	l.sw 0x28(r1),r11
    f24c:	d4 01 10 20 	l.sw 0x20(r1),r2
    f250:	00 00 00 f5 	l.j f624 <mctl_core_init_standby+0xfc8>
    f254:	d4 01 10 40 	l.sw 0x40(r1),r2
    f258:	bc 23 00 08 	l.sfnei r3,0x8
    f25c:	10 00 00 4b 	l.bf f388 <mctl_core_init_standby+0xd2c>
    f260:	9c 60 00 04 	l.addi r3,r0,0x4
    f264:	9c 60 00 28 	l.addi r3,r0,0x28
    f268:	07 ff f9 40 	l.jal d768 <auto_cal_timing_standby>
    f26c:	a8 82 00 00 	l.ori r4,r2,0x0
    f270:	a8 82 00 00 	l.ori r4,r2,0x0
    f274:	9c 60 00 0a 	l.addi r3,r0,0xa
    f278:	07 ff f9 3c 	l.jal d768 <auto_cal_timing_standby>
    f27c:	a7 cb 00 ff 	l.andi r30,r11,0xff
    f280:	9c 80 00 02 	l.addi r4,r0,0x2
    f284:	a5 cb 00 ff 	l.andi r14,r11,0xff
    f288:	bc ae 00 01 	l.sfleui r14,0x1
    f28c:	10 00 00 03 	l.bf f298 <mctl_core_init_standby+0xc3c>
    f290:	d4 01 20 18 	l.sw 0x18(r1),r4
    f294:	d4 01 70 18 	l.sw 0x18(r1),r14
    f298:	9c 60 00 12 	l.addi r3,r0,0x12
    f29c:	07 ff f9 33 	l.jal d768 <auto_cal_timing_standby>
    f2a0:	a8 82 00 00 	l.ori r4,r2,0x0
    f2a4:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f2a8:	bc ab 00 01 	l.sfleui r11,0x1
    f2ac:	0c 00 00 04 	l.bnf f2bc <mctl_core_init_standby+0xc60>
    f2b0:	d4 01 58 1c 	l.sw 0x1c(r1),r11
    f2b4:	9c a0 00 02 	l.addi r5,r0,0x2
    f2b8:	d4 01 28 1c 	l.sw 0x1c(r1),r5
    f2bc:	9c 60 00 41 	l.addi r3,r0,0x41
    f2c0:	07 ff f9 2a 	l.jal d768 <auto_cal_timing_standby>
    f2c4:	a8 82 00 00 	l.ori r4,r2,0x0
    f2c8:	9c 60 00 08 	l.addi r3,r0,0x8
    f2cc:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f2d0:	a8 82 00 00 	l.ori r4,r2,0x0
    f2d4:	07 ff f9 25 	l.jal d768 <auto_cal_timing_standby>
    f2d8:	d4 01 58 3c 	l.sw 0x3c(r1),r11
    f2dc:	9c c0 00 02 	l.addi r6,r0,0x2
    f2e0:	a6 cb 00 ff 	l.andi r22,r11,0xff
    f2e4:	bc b6 00 01 	l.sfleui r22,0x1
    f2e8:	10 00 00 03 	l.bf f2f4 <mctl_core_init_standby+0xc98>
    f2ec:	d4 01 30 14 	l.sw 0x14(r1),r6
    f2f0:	d4 01 b0 14 	l.sw 0x14(r1),r22
    f2f4:	bc ae 00 03 	l.sfleui r14,0x3
    f2f8:	0c 00 00 03 	l.bnf f304 <mctl_core_init_standby+0xca8>
    f2fc:	15 00 00 00 	l.nop 0x0
    f300:	9d c0 00 04 	l.addi r14,r0,0x4
    f304:	9c 60 00 15 	l.addi r3,r0,0x15
    f308:	07 ff f9 18 	l.jal d768 <auto_cal_timing_standby>
    f30c:	a8 82 00 00 	l.ori r4,r2,0x0
    f310:	9c 60 00 2a 	l.addi r3,r0,0x2a
    f314:	a8 82 00 00 	l.ori r4,r2,0x0
    f318:	07 ff f9 14 	l.jal d768 <auto_cal_timing_standby>
    f31c:	a6 8b 00 ff 	l.andi r20,r11,0xff
    f320:	9c 60 0f 40 	l.addi r3,r0,0xf40
    f324:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f328:	a8 82 00 00 	l.ori r4,r2,0x0
    f32c:	07 ff f9 0f 	l.jal d768 <auto_cal_timing_standby>
    f330:	d4 01 58 38 	l.sw 0x38(r1),r11
    f334:	b8 6b 00 45 	l.srli r3,r11,0x5
    f338:	a8 82 00 00 	l.ori r4,r2,0x0
    f33c:	a4 63 ff ff 	l.andi r3,r3,0xffff
    f340:	d4 01 18 2c 	l.sw 0x2c(r1),r3
    f344:	07 ff f9 09 	l.jal d768 <auto_cal_timing_standby>
    f348:	9c 60 00 b4 	l.addi r3,r0,0xb4
    f34c:	9c 60 00 be 	l.addi r3,r0,0xbe
    f350:	a5 6b ff ff 	l.andi r11,r11,0xffff
    f354:	a8 82 00 00 	l.ori r4,r2,0x0
    f358:	07 ff f9 04 	l.jal d768 <auto_cal_timing_standby>
    f35c:	d4 01 58 48 	l.sw 0x48(r1),r11
    f360:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f364:	9c e0 00 04 	l.addi r7,r0,0x4
    f368:	d4 01 58 44 	l.sw 0x44(r1),r11
    f36c:	9d 00 00 08 	l.addi r8,r0,0x8
    f370:	9d 60 00 02 	l.addi r11,r0,0x2
    f374:	d4 01 38 30 	l.sw 0x30(r1),r7
    f378:	d4 01 40 28 	l.sw 0x28(r1),r8
    f37c:	d4 01 58 20 	l.sw 0x20(r1),r11
    f380:	00 00 00 c6 	l.j f698 <mctl_core_init_standby+0x103c>
    f384:	d4 01 38 40 	l.sw 0x40(r1),r7
    f388:	9c 80 00 08 	l.addi r4,r0,0x8
    f38c:	9c a0 00 02 	l.addi r5,r0,0x2
    f390:	9e c0 00 03 	l.addi r22,r0,0x3
    f394:	d4 01 18 30 	l.sw 0x30(r1),r3
    f398:	d4 01 18 44 	l.sw 0x44(r1),r3
    f39c:	9c c0 00 80 	l.addi r6,r0,0x80
    f3a0:	9c e0 00 62 	l.addi r7,r0,0x62
    f3a4:	9d 00 00 0a 	l.addi r8,r0,0xa
    f3a8:	9e 80 00 06 	l.addi r20,r0,0x6
    f3ac:	9d 60 00 0e 	l.addi r11,r0,0xe
    f3b0:	9c 60 00 14 	l.addi r3,r0,0x14
    f3b4:	d4 01 20 28 	l.sw 0x28(r1),r4
    f3b8:	d4 01 28 20 	l.sw 0x20(r1),r5
    f3bc:	84 81 00 00 	l.lwz r4,0x0(r1)
    f3c0:	d4 01 30 48 	l.sw 0x48(r1),r6
    f3c4:	d4 01 38 2c 	l.sw 0x2c(r1),r7
    f3c8:	d4 01 40 14 	l.sw 0x14(r1),r8
    f3cc:	d4 01 58 38 	l.sw 0x38(r1),r11
    f3d0:	d4 01 18 3c 	l.sw 0x3c(r1),r3
    f3d4:	d4 01 a0 1c 	l.sw 0x1c(r1),r20
    f3d8:	d4 01 b0 18 	l.sw 0x18(r1),r22
    f3dc:	d4 01 28 40 	l.sw 0x40(r1),r5
    f3e0:	9e 40 00 01 	l.addi r18,r0,0x1
    f3e4:	a9 d6 00 00 	l.ori r14,r22,0x0
    f3e8:	bc 04 00 04 	l.sfeqi r4,0x4
    f3ec:	10 00 00 11 	l.bf f430 <mctl_core_init_standby+0xdd4>
    f3f0:	9f c0 00 10 	l.addi r30,r0,0x10
    f3f4:	bc 44 00 04 	l.sfgtui r4,0x4
    f3f8:	10 00 00 07 	l.bf f414 <mctl_core_init_standby+0xdb8>
    f3fc:	84 a1 00 00 	l.lwz r5,0x0(r1)
    f400:	e4 04 b0 00 	l.sfeq r4,r22
    f404:	0c 00 00 ef 	l.bnf f7c0 <mctl_core_init_standby+0x1164>
    f408:	9c 60 00 08 	l.addi r3,r0,0x8
    f40c:	00 00 00 4c 	l.j f53c <mctl_core_init_standby+0xee0>
    f410:	15 00 00 00 	l.nop 0x0
    f414:	bc 05 00 07 	l.sfeqi r5,0x7
    f418:	10 00 00 83 	l.bf f624 <mctl_core_init_standby+0xfc8>
    f41c:	bc 05 00 08 	l.sfeqi r5,0x8
    f420:	0c 00 00 e8 	l.bnf f7c0 <mctl_core_init_standby+0x1164>
    f424:	9c 60 00 0e 	l.addi r3,r0,0xe
    f428:	00 00 00 9d 	l.j f69c <mctl_core_init_standby+0x1040>
    f42c:	15 00 00 00 	l.nop 0x0
    f430:	9c 60 00 0f 	l.addi r3,r0,0xf
    f434:	07 ff f8 cd 	l.jal d768 <auto_cal_timing_standby>
    f438:	a8 82 00 00 	l.ori r4,r2,0x0
    f43c:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f440:	bc ab 00 0b 	l.sfleui r11,0xb
    f444:	0c 00 00 04 	l.bnf f454 <mctl_core_init_standby+0xdf8>
    f448:	d4 01 58 24 	l.sw 0x24(r1),r11
    f44c:	9c c0 00 0c 	l.addi r6,r0,0xc
    f450:	d4 01 30 24 	l.sw 0x24(r1),r6
    f454:	9c 60 00 05 	l.addi r3,r0,0x5
    f458:	07 ff f8 c4 	l.jal d768 <auto_cal_timing_standby>
    f45c:	a8 82 00 00 	l.ori r4,r2,0x0
    f460:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f464:	bc ab 00 01 	l.sfleui r11,0x1
    f468:	0c 00 00 04 	l.bnf f478 <mctl_core_init_standby+0xe1c>
    f46c:	d4 01 58 04 	l.sw 0x4(r1),r11
    f470:	9c e0 00 02 	l.addi r7,r0,0x2
    f474:	d4 01 38 04 	l.sw 0x4(r1),r7
    f478:	9c 60 00 0a 	l.addi r3,r0,0xa
    f47c:	07 ff f8 bb 	l.jal d768 <auto_cal_timing_standby>
    f480:	a8 82 00 00 	l.ori r4,r2,0x0
    f484:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f488:	bc 4b 00 02 	l.sfgtui r11,0x2
    f48c:	10 00 00 04 	l.bf f49c <mctl_core_init_standby+0xe40>
    f490:	d4 01 58 08 	l.sw 0x8(r1),r11
    f494:	9d 00 00 03 	l.addi r8,r0,0x3
    f498:	d4 01 40 08 	l.sw 0x8(r1),r8
    f49c:	85 61 00 04 	l.lwz r11,0x4(r1)
    f4a0:	a8 82 00 00 	l.ori r4,r2,0x0
    f4a4:	9d 8b 00 01 	l.addi r12,r11,0x1
    f4a8:	9c 60 00 aa 	l.addi r3,r0,0xaa
    f4ac:	a5 8c 00 ff 	l.andi r12,r12,0xff
    f4b0:	9e c0 00 04 	l.addi r22,r0,0x4
    f4b4:	07 ff f8 ad 	l.jal d768 <auto_cal_timing_standby>
    f4b8:	d4 01 60 10 	l.sw 0x10(r1),r12
    f4bc:	b8 6b 00 45 	l.srli r3,r11,0x5
    f4c0:	a8 82 00 00 	l.ori r4,r2,0x0
    f4c4:	a4 63 00 ff 	l.andi r3,r3,0xff
    f4c8:	d4 01 18 0c 	l.sw 0xc(r1),r3
    f4cc:	18 60 00 01 	l.movhi r3,0x1
    f4d0:	07 ff f8 a6 	l.jal d768 <auto_cal_timing_standby>
    f4d4:	a8 63 12 38 	l.ori r3,r3,0x1238
    f4d8:	b8 4b 00 4a 	l.srli r2,r11,0xa
    f4dc:	86 30 00 28 	l.lwz r17,0x28(r16)
    f4e0:	9e e0 05 20 	l.addi r23,r0,0x520
    f4e4:	a4 42 00 ff 	l.andi r2,r2,0xff
    f4e8:	d4 10 b8 20 	l.sw 0x20(r16),r23
    f4ec:	d4 01 10 34 	l.sw 0x34(r1),r2
    f4f0:	9c 40 ff c7 	l.addi r2,r0,0xffffffc7
    f4f4:	e5 54 b0 00 	l.sfgts r20,r22
    f4f8:	e2 31 10 03 	l.and r17,r17,r2
    f4fc:	aa 31 00 08 	l.ori r17,r17,0x8
    f500:	10 00 00 05 	l.bf f514 <mctl_core_init_standby+0xeb8>
    f504:	d4 10 88 28 	l.sw 0x28(r16),r17
    f508:	9e 20 00 09 	l.addi r17,r0,0x9
    f50c:	e2 31 a0 02 	l.sub r17,r17,r20
    f510:	a6 d1 00 ff 	l.andi r22,r17,0xff
    f514:	9e 52 00 07 	l.addi r18,r18,0x7
    f518:	9f 6e 00 07 	l.addi r27,r14,0x7
    f51c:	a4 52 00 ff 	l.andi r2,r18,0xff
    f520:	a7 7b 00 ff 	l.andi r27,r27,0xff
    f524:	86 41 00 08 	l.lwz r18,0x8(r1)
    f528:	9f 20 00 05 	l.addi r25,r0,0x5
    f52c:	9c 80 00 0e 	l.addi r4,r0,0xe
    f530:	00 00 00 37 	l.j f60c <mctl_core_init_standby+0xfb0>
    f534:	9e e0 00 04 	l.addi r23,r0,0x4
    f538:	9c 60 00 08 	l.addi r3,r0,0x8
    f53c:	07 ff f8 8b 	l.jal d768 <auto_cal_timing_standby>
    f540:	a8 82 00 00 	l.ori r4,r2,0x0
    f544:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f548:	bc ab 00 01 	l.sfleui r11,0x1
    f54c:	0c 00 00 04 	l.bnf f55c <mctl_core_init_standby+0xf00>
    f550:	d4 01 58 04 	l.sw 0x4(r1),r11
    f554:	9c 60 00 02 	l.addi r3,r0,0x2
    f558:	d4 01 18 04 	l.sw 0x4(r1),r3
    f55c:	9c 60 00 0a 	l.addi r3,r0,0xa
    f560:	07 ff f8 82 	l.jal d768 <auto_cal_timing_standby>
    f564:	a8 82 00 00 	l.ori r4,r2,0x0
    f568:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f56c:	bc 4b 00 02 	l.sfgtui r11,0x2
    f570:	10 00 00 04 	l.bf f580 <mctl_core_init_standby+0xf24>
    f574:	d4 01 58 08 	l.sw 0x8(r1),r11
    f578:	9c 80 00 06 	l.addi r4,r0,0x6
    f57c:	d4 01 20 04 	l.sw 0x4(r1),r4
    f580:	84 a1 00 04 	l.lwz r5,0x4(r1)
    f584:	a8 62 00 00 	l.ori r3,r2,0x0
    f588:	9d 85 00 01 	l.addi r12,r5,0x1
    f58c:	9c 80 00 0f 	l.addi r4,r0,0xf
    f590:	a5 8c 00 ff 	l.andi r12,r12,0xff
    f594:	07 ff f3 1d 	l.jal c208 <__udivsi3>
    f598:	d4 01 60 10 	l.sw 0x10(r1),r12
    f59c:	86 30 00 28 	l.lwz r17,0x28(r16)
    f5a0:	9c c0 ff c7 	l.addi r6,r0,0xffffffc7
    f5a4:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f5a8:	e2 31 30 03 	l.and r17,r17,r6
    f5ac:	9e e0 1f 14 	l.addi r23,r0,0x1f14
    f5b0:	aa 31 00 20 	l.ori r17,r17,0x20
    f5b4:	9c e0 00 00 	l.addi r7,r0,0x0
    f5b8:	d4 10 88 28 	l.sw 0x28(r16),r17
    f5bc:	d4 01 58 34 	l.sw 0x34(r1),r11
    f5c0:	e2 34 b0 00 	l.add r17,r20,r22
    f5c4:	d4 10 b8 20 	l.sw 0x20(r16),r23
    f5c8:	bd 51 00 08 	l.sfgtsi r17,0x8
    f5cc:	10 00 00 05 	l.bf f5e0 <mctl_core_init_standby+0xf84>
    f5d0:	d4 10 38 2c 	l.sw 0x2c(r16),r7
    f5d4:	9c e0 00 09 	l.addi r7,r0,0x9
    f5d8:	e0 e7 a0 02 	l.sub r7,r7,r20
    f5dc:	a6 c7 00 ff 	l.andi r22,r7,0xff
    f5e0:	9d 00 00 04 	l.addi r8,r0,0x4
    f5e4:	9f 6e 00 07 	l.addi r27,r14,0x7
    f5e8:	9d 60 00 0c 	l.addi r11,r0,0xc
    f5ec:	a7 7b 00 ff 	l.andi r27,r27,0xff
    f5f0:	86 41 00 08 	l.lwz r18,0x8(r1)
    f5f4:	d4 01 40 0c 	l.sw 0xc(r1),r8
    f5f8:	9c 40 00 08 	l.addi r2,r0,0x8
    f5fc:	9f 20 00 05 	l.addi r25,r0,0x5
    f600:	9c 80 00 0e 	l.addi r4,r0,0xe
    f604:	d4 01 58 24 	l.sw 0x24(r1),r11
    f608:	aa e8 00 00 	l.ori r23,r8,0x0
    f60c:	9f 00 00 00 	l.addi r24,r0,0x0
    f610:	ab b9 00 00 	l.ori r29,r25,0x0
    f614:	9f 40 00 07 	l.addi r26,r0,0x7
    f618:	9c 60 00 06 	l.addi r3,r0,0x6
    f61c:	00 00 00 7f 	l.j f818 <mctl_core_init_standby+0x11bc>
    f620:	9d 60 00 0a 	l.addi r11,r0,0xa
    f624:	9c 40 00 83 	l.addi r2,r0,0x83
    f628:	9e 40 00 05 	l.addi r18,r0,0x5
    f62c:	d4 10 10 24 	l.sw 0x24(r16),r2
    f630:	9c 40 00 1c 	l.addi r2,r0,0x1c
    f634:	9c 60 00 04 	l.addi r3,r0,0x4
    f638:	9c 80 00 18 	l.addi r4,r0,0x18
    f63c:	9c c0 00 0c 	l.addi r6,r0,0xc
    f640:	d4 10 10 28 	l.sw 0x28(r16),r2
    f644:	9d ce 00 09 	l.addi r14,r14,0x9
    f648:	9c 40 00 00 	l.addi r2,r0,0x0
    f64c:	9c a0 00 03 	l.addi r5,r0,0x3
    f650:	d4 10 10 20 	l.sw 0x20(r16),r2
    f654:	d4 01 18 0c 	l.sw 0xc(r1),r3
    f658:	d4 01 20 34 	l.sw 0x34(r1),r4
    f65c:	ab a3 00 00 	l.ori r29,r3,0x0
    f660:	a7 6e 00 ff 	l.andi r27,r14,0xff
    f664:	9c 40 00 08 	l.addi r2,r0,0x8
    f668:	d4 01 90 08 	l.sw 0x8(r1),r18
    f66c:	d4 01 90 10 	l.sw 0x10(r1),r18
    f670:	9f 20 00 0d 	l.addi r25,r0,0xd
    f674:	9c 80 00 10 	l.addi r4,r0,0x10
    f678:	d4 01 28 04 	l.sw 0x4(r1),r5
    f67c:	d4 01 30 24 	l.sw 0x24(r1),r6
    f680:	aa f2 00 00 	l.ori r23,r18,0x0
    f684:	ab 12 00 00 	l.ori r24,r18,0x0
    f688:	87 41 00 00 	l.lwz r26,0x0(r1)
    f68c:	9c 60 00 06 	l.addi r3,r0,0x6
    f690:	00 00 00 62 	l.j f818 <mctl_core_init_standby+0x11bc>
    f694:	a9 66 00 00 	l.ori r11,r6,0x0
    f698:	9c 60 00 0e 	l.addi r3,r0,0xe
    f69c:	07 ff f8 33 	l.jal d768 <auto_cal_timing_standby>
    f6a0:	a8 82 00 00 	l.ori r4,r2,0x0
    f6a4:	a7 0b 00 ff 	l.andi r24,r11,0xff
    f6a8:	bc 58 00 04 	l.sfgtui r24,0x4
    f6ac:	10 00 00 03 	l.bf f6b8 <mctl_core_init_standby+0x105c>
    f6b0:	9c 60 00 0f 	l.addi r3,r0,0xf
    f6b4:	9f 00 00 05 	l.addi r24,r0,0x5
    f6b8:	07 ff f8 2c 	l.jal d768 <auto_cal_timing_standby>
    f6bc:	a8 82 00 00 	l.ori r4,r2,0x0
    f6c0:	9c e0 00 02 	l.addi r7,r0,0x2
    f6c4:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f6c8:	d4 01 38 04 	l.sw 0x4(r1),r7
    f6cc:	bc ab 00 01 	l.sfleui r11,0x1
    f6d0:	10 00 00 03 	l.bf f6dc <mctl_core_init_standby+0x1080>
    f6d4:	d4 01 58 10 	l.sw 0x10(r1),r11
    f6d8:	d4 01 58 04 	l.sw 0x4(r1),r11
    f6dc:	9c 60 00 02 	l.addi r3,r0,0x2
    f6e0:	07 ff f8 22 	l.jal d768 <auto_cal_timing_standby>
    f6e4:	a8 82 00 00 	l.ori r4,r2,0x0
    f6e8:	a5 6b 00 ff 	l.andi r11,r11,0xff
    f6ec:	bc ab 00 01 	l.sfleui r11,0x1
    f6f0:	0c 00 00 04 	l.bnf f700 <mctl_core_init_standby+0x10a4>
    f6f4:	d4 01 58 08 	l.sw 0x8(r1),r11
    f6f8:	9d 00 00 02 	l.addi r8,r0,0x2
    f6fc:	d4 01 40 08 	l.sw 0x8(r1),r8
    f700:	9c 60 00 05 	l.addi r3,r0,0x5
    f704:	07 ff f8 19 	l.jal d768 <auto_cal_timing_standby>
    f708:	a8 82 00 00 	l.ori r4,r2,0x0
    f70c:	a6 4b 00 ff 	l.andi r18,r11,0xff
    f710:	bc b2 00 01 	l.sfleui r18,0x1
    f714:	0c 00 00 03 	l.bnf f720 <mctl_core_init_standby+0x10c4>
    f718:	85 61 00 10 	l.lwz r11,0x10(r1)
    f71c:	9e 40 00 02 	l.addi r18,r0,0x2
    f720:	bc ab 00 01 	l.sfleui r11,0x1
    f724:	0c 00 00 04 	l.bnf f734 <mctl_core_init_standby+0x10d8>
    f728:	15 00 00 00 	l.nop 0x0
    f72c:	9c 60 00 02 	l.addi r3,r0,0x2
    f730:	d4 01 18 10 	l.sw 0x10(r1),r3
    f734:	84 81 00 2c 	l.lwz r4,0x2c(r1)
    f738:	9c 60 00 04 	l.addi r3,r0,0x4
    f73c:	b8 a4 00 03 	l.slli r5,r4,0x3
    f740:	e0 a5 20 00 	l.add r5,r5,r4
    f744:	a8 82 00 00 	l.ori r4,r2,0x0
    f748:	b8 a5 00 85 	l.srai r5,r5,0x5
    f74c:	a4 a5 00 ff 	l.andi r5,r5,0xff
    f750:	07 ff f8 06 	l.jal d768 <auto_cal_timing_standby>
    f754:	d4 01 28 34 	l.sw 0x34(r1),r5
    f758:	a8 82 00 00 	l.ori r4,r2,0x0
    f75c:	9c 60 00 01 	l.addi r3,r0,0x1
    f760:	07 ff f8 02 	l.jal d768 <auto_cal_timing_standby>
    f764:	ab 4b 00 00 	l.ori r26,r11,0x0
    f768:	9c a0 00 34 	l.addi r5,r0,0x34
    f76c:	9f 6e 00 0e 	l.addi r27,r14,0xe
    f770:	d4 10 28 24 	l.sw 0x24(r16),r5
    f774:	9c a0 00 1b 	l.addi r5,r0,0x1b
    f778:	9c c0 00 0c 	l.addi r6,r0,0xc
    f77c:	d4 10 28 28 	l.sw 0x28(r16),r5
    f780:	9c ba 00 11 	l.addi r5,r26,0x11
    f784:	9f a0 00 05 	l.addi r29,r0,0x5
    f788:	e0 45 58 02 	l.sub r2,r5,r11
    f78c:	9c a0 00 04 	l.addi r5,r0,0x4
    f790:	a7 22 00 ff 	l.andi r25,r2,0xff
    f794:	a7 7b 00 ff 	l.andi r27,r27,0xff
    f798:	aa f8 00 00 	l.ori r23,r24,0x0
    f79c:	d4 01 28 0c 	l.sw 0xc(r1),r5
    f7a0:	9c 40 00 08 	l.addi r2,r0,0x8
    f7a4:	9c 80 00 18 	l.addi r4,r0,0x18
    f7a8:	aa c5 00 00 	l.ori r22,r5,0x0
    f7ac:	d4 01 30 24 	l.sw 0x24(r1),r6
    f7b0:	9f 40 00 0a 	l.addi r26,r0,0xa
    f7b4:	a8 7d 00 00 	l.ori r3,r29,0x0
    f7b8:	00 00 00 18 	l.j f818 <mctl_core_init_standby+0x11bc>
    f7bc:	9d 60 00 11 	l.addi r11,r0,0x11
    f7c0:	9c 60 00 02 	l.addi r3,r0,0x2
    f7c4:	9c e0 00 04 	l.addi r7,r0,0x4
    f7c8:	9d 00 00 03 	l.addi r8,r0,0x3
    f7cc:	9d 60 00 1b 	l.addi r11,r0,0x1b
    f7d0:	9c 40 00 08 	l.addi r2,r0,0x8
    f7d4:	d4 01 18 04 	l.sw 0x4(r1),r3
    f7d8:	9c a0 00 06 	l.addi r5,r0,0x6
    f7dc:	aa e3 00 00 	l.ori r23,r3,0x0
    f7e0:	9c 60 00 01 	l.addi r3,r0,0x1
    f7e4:	d4 01 58 34 	l.sw 0x34(r1),r11
    f7e8:	d4 01 38 0c 	l.sw 0xc(r1),r7
    f7ec:	aa 47 00 00 	l.ori r18,r7,0x0
    f7f0:	d4 01 38 08 	l.sw 0x8(r1),r7
    f7f4:	d4 01 40 10 	l.sw 0x10(r1),r8
    f7f8:	ab 27 00 00 	l.ori r25,r7,0x0
    f7fc:	ab 62 00 00 	l.ori r27,r2,0x0
    f800:	9c 80 00 0c 	l.addi r4,r0,0xc
    f804:	d4 01 28 24 	l.sw 0x24(r1),r5
    f808:	9f 00 00 00 	l.addi r24,r0,0x0
    f80c:	ab a8 00 00 	l.ori r29,r8,0x0
    f810:	ab 48 00 00 	l.ori r26,r8,0x0
    f814:	a9 63 00 00 	l.ori r11,r3,0x0
    f818:	bb 9e 00 10 	l.slli r28,r30,0x10
    f81c:	84 c1 00 38 	l.lwz r6,0x38(r1)
    f820:	ba f7 00 0c 	l.slli r23,r23,0xc
    f824:	bb 18 00 14 	l.slli r24,r24,0x14
    f828:	84 e1 00 34 	l.lwz r7,0x34(r1)
    f82c:	bb c4 00 18 	l.slli r30,r4,0x18
    f830:	85 01 00 14 	l.lwz r8,0x14(r1)
    f834:	e3 9c 30 04 	l.or r28,r28,r6
    f838:	b8 a7 00 08 	l.slli r5,r7,0x8
    f83c:	84 c1 00 24 	l.lwz r6,0x24(r1)
    f840:	e3 18 b8 04 	l.or r24,r24,r23
    f844:	84 e1 00 1c 	l.lwz r7,0x1c(r1)
    f848:	e3 dc f0 04 	l.or r30,r28,r30
    f84c:	bb bd 00 18 	l.slli r29,r29,0x18
    f850:	bb 88 00 10 	l.slli r28,r8,0x10
    f854:	bb 5a 00 10 	l.slli r26,r26,0x10
    f858:	85 01 00 40 	l.lwz r8,0x40(r1)
    f85c:	e3 18 30 04 	l.or r24,r24,r6
    f860:	84 c1 00 08 	l.lwz r6,0x8(r1)
    f864:	84 81 00 3c 	l.lwz r4,0x3c(r1)
    f868:	e2 7e 28 04 	l.or r19,r30,r5
    f86c:	bb f6 00 08 	l.slli r31,r22,0x8
    f870:	18 a0 04 82 	l.movhi r5,0x482
    f874:	ba a7 00 18 	l.slli r21,r7,0x18
    f878:	ba c8 00 10 	l.slli r22,r8,0x10
    f87c:	b9 e6 00 18 	l.slli r15,r6,0x18
    f880:	ba 32 00 10 	l.slli r17,r18,0x10
    f884:	e3 bd d0 04 	l.or r29,r29,r26
    f888:	ab c5 01 00 	l.ori r30,r5,0x100
    f88c:	e3 9c 20 04 	l.or r28,r28,r4
    f890:	bb 39 00 08 	l.slli r25,r25,0x8
    f894:	84 81 00 18 	l.lwz r4,0x18(r1)
    f898:	85 01 00 10 	l.lwz r8,0x10(r1)
    f89c:	e3 7d d8 04 	l.or r27,r29,r27
    f8a0:	e2 b5 b0 04 	l.or r21,r21,r22
    f8a4:	d4 1e 98 00 	l.sw 0x0(r30),r19
    f8a8:	84 e1 00 04 	l.lwz r7,0x4(r1)
    f8ac:	ba 64 00 08 	l.slli r19,r4,0x8
    f8b0:	e3 9c f8 04 	l.or r28,r28,r31
    f8b4:	e1 ef 88 04 	l.or r15,r15,r17
    f8b8:	ab e5 01 04 	l.ori r31,r5,0x104
    f8bc:	b9 88 00 08 	l.slli r12,r8,0x8
    f8c0:	e3 7b c8 04 	l.or r27,r27,r25
    f8c4:	e2 95 a0 04 	l.or r20,r21,r20
    f8c8:	ab 25 01 08 	l.ori r25,r5,0x108
    f8cc:	d4 1f e0 00 	l.sw 0x0(r31),r28
    f8d0:	84 81 00 14 	l.lwz r4,0x14(r1)
    f8d4:	aa e5 01 0c 	l.ori r23,r5,0x10c
    f8d8:	e1 cf 38 04 	l.or r14,r15,r7
    f8dc:	d4 19 d8 00 	l.sw 0x0(r25),r27
    f8e0:	e2 94 98 04 	l.or r20,r20,r19
    f8e4:	aa 65 01 10 	l.ori r19,r5,0x110
    f8e8:	d4 17 c0 00 	l.sw 0x0(r23),r24
    f8ec:	e1 ce 60 04 	l.or r14,r14,r12
    f8f0:	9d a4 00 02 	l.addi r13,r4,0x2
    f8f4:	a9 85 01 14 	l.ori r12,r5,0x114
    f8f8:	18 c0 02 02 	l.movhi r6,0x202
    f8fc:	d4 13 a0 00 	l.sw 0x0(r19),r20
    f900:	d4 0c 70 00 	l.sw 0x0(r12),r14
    f904:	84 81 00 0c 	l.lwz r4,0xc(r1)
    f908:	a9 85 01 18 	l.ori r12,r5,0x118
    f90c:	e1 ad 30 04 	l.or r13,r13,r6
    f910:	84 e1 00 30 	l.lwz r7,0x30(r1)
    f914:	d4 0c 68 00 	l.sw 0x0(r12),r13
    f918:	b9 84 00 18 	l.slli r12,r4,0x18
    f91c:	a9 07 10 00 	l.ori r8,r7,0x1000
    f920:	b8 e4 00 10 	l.slli r7,r4,0x10
    f924:	e1 08 60 04 	l.or r8,r8,r12
    f928:	84 81 00 44 	l.lwz r4,0x44(r1)
    f92c:	e1 08 38 04 	l.or r8,r8,r7
    f930:	a8 e5 01 20 	l.ori r7,r5,0x120
    f934:	d4 07 40 00 	l.sw 0x0(r7),r8
    f938:	84 e1 00 20 	l.lwz r7,0x20(r1)
    f93c:	19 00 00 02 	l.movhi r8,0x2
    f940:	b8 c7 00 08 	l.slli r6,r7,0x8
    f944:	18 e0 00 0e 	l.movhi r7,0xe
    f948:	e0 c6 40 04 	l.or r6,r6,r8
    f94c:	a8 e7 0c 05 	l.ori r7,r7,0xc05
    f950:	e2 46 10 04 	l.or r18,r6,r2
    f954:	a8 c5 01 24 	l.ori r6,r5,0x124
    f958:	84 41 00 28 	l.lwz r2,0x28(r1)
    f95c:	d4 06 90 00 	l.sw 0x0(r6),r18
    f960:	a8 c5 01 28 	l.ori r6,r5,0x128
    f964:	85 01 00 00 	l.lwz r8,0x0(r1)
    f968:	d4 06 38 00 	l.sw 0x0(r6),r7
    f96c:	18 e0 44 0c 	l.movhi r7,0x440c
    f970:	a8 c5 01 2c 	l.ori r6,r5,0x12c
    f974:	a8 e7 02 1c 	l.ori r7,r7,0x21c
    f978:	bc 28 00 07 	l.sfnei r8,0x7
    f97c:	d4 06 38 00 	l.sw 0x0(r6),r7
    f980:	a8 c5 01 30 	l.ori r6,r5,0x130
    f984:	18 e0 0a 10 	l.movhi r7,0xa10
    f988:	d4 06 10 00 	l.sw 0x0(r6),r2
    f98c:	a8 e7 00 02 	l.ori r7,r7,0x2
    f990:	a8 c5 01 34 	l.ori r6,r5,0x134
    f994:	d4 06 38 00 	l.sw 0x0(r6),r7
    f998:	a8 c5 01 38 	l.ori r6,r5,0x138
    f99c:	a8 a5 00 d0 	l.ori r5,r5,0xd0
    f9a0:	d4 06 20 00 	l.sw 0x0(r6),r4
    f9a4:	18 c0 3f ff 	l.movhi r6,0x3fff
    f9a8:	84 a5 00 00 	l.lwz r5,0x0(r5)
    f9ac:	a8 c6 ff ff 	l.ori r6,r6,0xffff
    f9b0:	18 e0 40 00 	l.movhi r7,0x4000
    f9b4:	e0 a5 30 03 	l.and r5,r5,r6
    f9b8:	10 00 00 08 	l.bf f9d8 <mctl_core_init_standby+0x137c>
    f9bc:	e0 45 38 04 	l.or r2,r5,r7
    f9c0:	18 80 fc 00 	l.movhi r4,0xfc00
    f9c4:	18 c0 00 4f 	l.movhi r6,0x4f
    f9c8:	a8 84 ff ff 	l.ori r4,r4,0xffff
    f9cc:	e0 a2 20 03 	l.and r5,r2,r4
    f9d0:	00 00 00 09 	l.j f9f4 <mctl_core_init_standby+0x1398>
    f9d4:	e0 45 30 04 	l.or r2,r5,r6
    f9d8:	84 e1 00 00 	l.lwz r7,0x0(r1)
    f9dc:	bc 27 00 08 	l.sfnei r7,0x8
    f9e0:	10 00 00 05 	l.bf f9f4 <mctl_core_init_standby+0x1398>
    f9e4:	9d 00 f0 00 	l.addi r8,r0,0xfffff000
    f9e8:	e0 a2 40 03 	l.and r5,r2,r8
    f9ec:	00 00 00 05 	l.j fa00 <mctl_core_init_standby+0x13a4>
    f9f0:	a8 85 03 f0 	l.ori r4,r5,0x3f0
    f9f4:	9c 80 f0 00 	l.addi r4,r0,0xfffff000
    f9f8:	e0 a2 20 03 	l.and r5,r2,r4
    f9fc:	a8 85 00 c8 	l.ori r4,r5,0xc8
    fa00:	18 40 04 82 	l.movhi r2,0x482
    fa04:	18 c0 00 42 	l.movhi r6,0x42
    fa08:	a8 a2 00 d0 	l.ori r5,r2,0xd0
    fa0c:	84 e1 00 00 	l.lwz r7,0x0(r1)
    fa10:	d4 05 20 00 	l.sw 0x0(r5),r4
    fa14:	a8 a2 00 d4 	l.ori r5,r2,0xd4
    fa18:	a8 82 00 e0 	l.ori r4,r2,0xe0
    fa1c:	d4 05 30 00 	l.sw 0x0(r5),r6
    fa20:	a8 a2 00 d8 	l.ori r5,r2,0xd8
    fa24:	9c c0 00 05 	l.addi r6,r0,0x5
    fa28:	d4 05 30 00 	l.sw 0x0(r5),r6
    fa2c:	a8 a2 01 b0 	l.ori r5,r2,0x1b0
    fa30:	9c c0 00 00 	l.addi r6,r0,0x0
    fa34:	d4 05 30 00 	l.sw 0x0(r5),r6
    fa38:	9c a7 ff fa 	l.addi r5,r7,0xfffffffa
    fa3c:	84 d0 00 24 	l.lwz r6,0x24(r16)
    fa40:	bc 45 00 02 	l.sfgtui r5,0x2
    fa44:	10 00 00 0f 	l.bf fa80 <mctl_core_init_standby+0x1424>
    fa48:	a8 a2 00 dc 	l.ori r5,r2,0xdc
    fa4c:	b8 c6 00 10 	l.slli r6,r6,0x10
    fa50:	84 f0 00 28 	l.lwz r7,0x28(r16)
    fa54:	85 01 00 00 	l.lwz r8,0x0(r1)
    fa58:	e0 c6 38 04 	l.or r6,r6,r7
    fa5c:	bc 08 00 08 	l.sfeqi r8,0x8
    fa60:	d4 05 30 00 	l.sw 0x0(r5),r6
    fa64:	84 b0 00 2c 	l.lwz r5,0x2c(r16)
    fa68:	b8 a5 00 10 	l.slli r5,r5,0x10
    fa6c:	d4 04 28 00 	l.sw 0x0(r4),r5
    fa70:	10 00 00 19 	l.bf fad4 <mctl_core_init_standby+0x1478>
    fa74:	18 a0 04 82 	l.movhi r5,0x482
    fa78:	00 00 00 25 	l.j fb0c <mctl_core_init_standby+0x14b0>
    fa7c:	9c c0 f0 0f 	l.addi r6,r0,0xfffff00f
    fa80:	84 f0 00 20 	l.lwz r7,0x20(r16)
    fa84:	b8 e7 00 10 	l.slli r7,r7,0x10
    fa88:	e0 c7 30 04 	l.or r6,r7,r6
    fa8c:	d4 05 30 00 	l.sw 0x0(r5),r6
    fa90:	84 b0 00 28 	l.lwz r5,0x28(r16)
    fa94:	84 d0 00 2c 	l.lwz r6,0x2c(r16)
    fa98:	b8 a5 00 10 	l.slli r5,r5,0x10
    fa9c:	e0 a5 30 04 	l.or r5,r5,r6
    faa0:	d4 04 28 00 	l.sw 0x0(r4),r5
    faa4:	84 81 00 00 	l.lwz r4,0x0(r1)
    faa8:	bc 24 00 04 	l.sfnei r4,0x4
    faac:	10 00 00 17 	l.bf fb08 <mctl_core_init_standby+0x14ac>
    fab0:	18 a0 04 82 	l.movhi r5,0x482
    fab4:	84 d0 00 30 	l.lwz r6,0x30(r16)
    fab8:	84 b0 00 34 	l.lwz r5,0x34(r16)
    fabc:	b8 c6 00 10 	l.slli r6,r6,0x10
    fac0:	e0 c6 28 04 	l.or r6,r6,r5
    fac4:	a8 a2 00 e8 	l.ori r5,r2,0xe8
    fac8:	d4 05 30 00 	l.sw 0x0(r5),r6
    facc:	00 00 00 0c 	l.j fafc <mctl_core_init_standby+0x14a0>
    fad0:	84 d0 00 38 	l.lwz r6,0x38(r16)
    fad4:	84 d0 00 3c 	l.lwz r6,0x3c(r16)
    fad8:	84 b0 00 40 	l.lwz r5,0x40(r16)
    fadc:	b8 c6 00 10 	l.slli r6,r6,0x10
    fae0:	e0 c6 28 04 	l.or r6,r6,r5
    fae4:	a8 a2 00 e8 	l.ori r5,r2,0xe8
    fae8:	d4 05 30 00 	l.sw 0x0(r5),r6
    faec:	84 d0 00 54 	l.lwz r6,0x54(r16)
    faf0:	84 b0 00 48 	l.lwz r5,0x48(r16)
    faf4:	b8 c6 00 10 	l.slli r6,r6,0x10
    faf8:	e0 c6 28 04 	l.or r6,r6,r5
    fafc:	a8 a2 00 ec 	l.ori r5,r2,0xec
    fb00:	d4 05 30 00 	l.sw 0x0(r5),r6
    fb04:	18 a0 04 82 	l.movhi r5,0x482
    fb08:	9c c0 f0 0f 	l.addi r6,r0,0xfffff00f
    fb0c:	a8 45 00 f4 	l.ori r2,r5,0xf4
    fb10:	84 a2 00 00 	l.lwz r5,0x0(r2)
    fb14:	e0 a5 30 03 	l.and r5,r5,r6
    fb18:	a8 a5 06 60 	l.ori r5,r5,0x660
    fb1c:	d4 02 28 00 	l.sw 0x0(r2),r5
    fb20:	84 b0 00 78 	l.lwz r5,0x78(r16)
    fb24:	a4 a5 00 20 	l.andi r5,r5,0x20
    fb28:	bc 25 00 00 	l.sfnei r5,0x0
    fb2c:	10 00 00 0a 	l.bf fb54 <mctl_core_init_standby+0x14f8>
    fb30:	b8 8b 00 10 	l.slli r4,r11,0x10
    fb34:	9c 8b ff ff 	l.addi r4,r11,0xffffffff
    fb38:	9c 43 ff ff 	l.addi r2,r3,0xffffffff
    fb3c:	b8 84 00 10 	l.slli r4,r4,0x10
    fb40:	18 e0 02 80 	l.movhi r7,0x280
    fb44:	e0 42 20 04 	l.or r2,r2,r4
    fb48:	a8 e7 80 00 	l.ori r7,r7,0x8000
    fb4c:	00 00 00 06 	l.j fb64 <mctl_core_init_standby+0x1508>
    fb50:	e0 62 38 04 	l.or r3,r2,r7
    fb54:	19 00 02 80 	l.movhi r8,0x280
    fb58:	e0 43 20 04 	l.or r2,r3,r4
    fb5c:	a9 08 80 00 	l.ori r8,r8,0x8000
    fb60:	e0 62 40 04 	l.or r3,r2,r8
    fb64:	18 40 04 82 	l.movhi r2,0x482
    fb68:	18 a0 00 10 	l.movhi r5,0x10
    fb6c:	a8 82 01 90 	l.ori r4,r2,0x190
    fb70:	85 61 00 2c 	l.lwz r11,0x2c(r1)
    fb74:	d4 04 18 00 	l.sw 0x0(r4),r3
    fb78:	a8 a5 02 02 	l.ori r5,r5,0x202
    fb7c:	a8 82 01 94 	l.ori r4,r2,0x194
    fb80:	b8 6b 00 10 	l.slli r3,r11,0x10
    fb84:	d4 04 28 00 	l.sw 0x0(r4),r5
    fb88:	84 81 00 48 	l.lwz r4,0x48(r1)
    fb8c:	9c a0 00 00 	l.addi r5,r0,0x0
    fb90:	e0 63 20 04 	l.or r3,r3,r4
    fb94:	a8 82 00 64 	l.ori r4,r2,0x64
    fb98:	18 c0 c0 00 	l.movhi r6,0xc000
    fb9c:	d4 04 18 00 	l.sw 0x0(r4),r3
    fba0:	a8 62 00 30 	l.ori r3,r2,0x30
    fba4:	d4 03 28 00 	l.sw 0x0(r3),r5
    fba8:	a8 62 01 a0 	l.ori r3,r2,0x1a0
    fbac:	84 83 00 00 	l.lwz r4,0x0(r3)
    fbb0:	e0 84 30 04 	l.or r4,r4,r6
    fbb4:	d4 03 20 00 	l.sw 0x0(r3),r4
    fbb8:	a8 62 01 80 	l.ori r3,r2,0x180
    fbbc:	84 83 00 00 	l.lwz r4,0x0(r3)
    fbc0:	e0 84 30 04 	l.or r4,r4,r6
    fbc4:	d4 03 20 00 	l.sw 0x0(r3),r4
    fbc8:	a8 62 21 80 	l.ori r3,r2,0x2180
    fbcc:	84 83 00 00 	l.lwz r4,0x0(r3)
    fbd0:	e0 84 30 04 	l.or r4,r4,r6
    fbd4:	d4 03 20 00 	l.sw 0x0(r3),r4
    fbd8:	a8 62 31 80 	l.ori r3,r2,0x3180
    fbdc:	a8 42 41 80 	l.ori r2,r2,0x4180
    fbe0:	84 83 00 00 	l.lwz r4,0x0(r3)
    fbe4:	e0 84 30 04 	l.or r4,r4,r6
    fbe8:	d4 03 20 00 	l.sw 0x0(r3),r4
    fbec:	84 62 00 00 	l.lwz r3,0x0(r2)
    fbf0:	e0 63 30 04 	l.or r3,r3,r6
    fbf4:	d4 02 18 00 	l.sw 0x0(r2),r3
    fbf8:	84 50 00 04 	l.lwz r2,0x4(r16)
    fbfc:	ac 62 00 08 	l.xori r3,r2,0x8
    fc00:	e0 80 18 02 	l.sub r4,r0,r3
    fc04:	e0 64 18 04 	l.or r3,r4,r3
    fc08:	e5 63 28 00 	l.sfges r3,r5
    fc0c:	10 00 00 07 	l.bf fc28 <mctl_core_init_standby+0x15cc>
    fc10:	ac 42 00 04 	l.xori r2,r2,0x4
    fc14:	e0 60 10 02 	l.sub r3,r0,r2
    fc18:	e0 43 10 04 	l.or r2,r3,r2
    fc1c:	e5 82 28 00 	l.sflts r2,r5
    fc20:	10 00 00 0c 	l.bf fc50 <mctl_core_init_standby+0x15f4>
    fc24:	15 00 00 00 	l.nop 0x0
    fc28:	84 50 00 78 	l.lwz r2,0x78(r16)
    fc2c:	18 e0 20 00 	l.movhi r7,0x2000
    fc30:	e0 42 38 03 	l.and r2,r2,r7
    fc34:	bc 02 00 00 	l.sfeqi r2,0x0
    fc38:	10 00 00 06 	l.bf fc50 <mctl_core_init_standby+0x15f4>
    fc3c:	18 40 04 82 	l.movhi r2,0x482
    fc40:	a8 42 01 c0 	l.ori r2,r2,0x1c0
    fc44:	84 62 00 00 	l.lwz r3,0x0(r2)
    fc48:	a8 63 00 04 	l.ori r3,r3,0x4
    fc4c:	d4 02 18 00 	l.sw 0x0(r2),r3
    fc50:	07 ff fa 1f 	l.jal e4cc <mctl_com_set_controller_refresh_standby.clone.1>
    fc54:	9c 60 00 01 	l.addi r3,r0,0x1
    fc58:	18 60 04 82 	l.movhi r3,0x482
    fc5c:	9d 00 00 00 	l.addi r8,r0,0x0
    fc60:	a8 43 00 30 	l.ori r2,r3,0x30
    fc64:	a8 63 01 b0 	l.ori r3,r3,0x1b0
    fc68:	d4 02 40 00 	l.sw 0x0(r2),r8
    fc6c:	9d 60 ff fe 	l.addi r11,r0,0xfffffffe
    fc70:	84 83 00 00 	l.lwz r4,0x0(r3)
    fc74:	e0 84 58 03 	l.and r4,r4,r11
    fc78:	d4 03 20 00 	l.sw 0x0(r3),r4
    fc7c:	84 62 00 00 	l.lwz r3,0x0(r2)
    fc80:	a8 63 00 20 	l.ori r3,r3,0x20
    fc84:	d4 02 18 00 	l.sw 0x0(r2),r3
    fc88:	18 40 04 81 	l.movhi r2,0x481
    fc8c:	a8 62 00 20 	l.ori r3,r2,0x20
    fc90:	a8 42 00 08 	l.ori r2,r2,0x8
    fc94:	84 83 00 00 	l.lwz r4,0x0(r3)
    fc98:	a8 84 01 00 	l.ori r4,r4,0x100
    fc9c:	d4 03 20 00 	l.sw 0x0(r3),r4
    fca0:	18 80 fe ff 	l.movhi r4,0xfeff
    fca4:	84 62 00 00 	l.lwz r3,0x0(r2)
    fca8:	a8 84 ff ff 	l.ori r4,r4,0xffff
    fcac:	e0 63 20 03 	l.and r3,r3,r4
    fcb0:	a8 63 02 00 	l.ori r3,r3,0x200
    fcb4:	d4 02 18 00 	l.sw 0x0(r2),r3
    fcb8:	07 ff d5 63 	l.jal 5244 <time_udelay>
    fcbc:	9c 60 00 01 	l.addi r3,r0,0x1
    fcc0:	84 62 00 00 	l.lwz r3,0x0(r2)
    fcc4:	18 a0 01 00 	l.movhi r5,0x100
    fcc8:	e0 63 28 04 	l.or r3,r3,r5
    fccc:	d4 02 18 00 	l.sw 0x0(r2),r3
    fcd0:	07 ff d5 5d 	l.jal 5244 <time_udelay>
    fcd4:	9c 60 00 01 	l.addi r3,r0,0x1
    fcd8:	84 90 00 04 	l.lwz r4,0x4(r16)
    fcdc:	bc 24 00 08 	l.sfnei r4,0x8
    fce0:	10 00 00 07 	l.bf fcfc <mctl_core_init_standby+0x16a0>
    fce4:	9c c0 ff 7f 	l.addi r6,r0,0xffffff7f
    fce8:	18 40 04 83 	l.movhi r2,0x483
    fcec:	a8 42 00 04 	l.ori r2,r2,0x4
    fcf0:	84 62 00 00 	l.lwz r3,0x0(r2)
    fcf4:	e0 63 30 03 	l.and r3,r3,r6
    fcf8:	d4 02 18 00 	l.sw 0x0(r2),r3
    fcfc:	18 40 04 83 	l.movhi r2,0x483
    fd00:	84 70 00 1c 	l.lwz r3,0x1c(r16)
    fd04:	a8 42 00 3c 	l.ori r2,r2,0x3c
    fd08:	9c e0 ff f0 	l.addi r7,r0,0xfffffff0
    fd0c:	84 42 00 00 	l.lwz r2,0x0(r2)
    fd10:	a4 63 00 01 	l.andi r3,r3,0x1
    fd14:	bc 03 00 00 	l.sfeqi r3,0x0
    fd18:	10 00 00 04 	l.bf fd28 <mctl_core_init_standby+0x16cc>
    fd1c:	e0 42 38 03 	l.and r2,r2,r7
    fd20:	00 00 00 03 	l.j fd2c <mctl_core_init_standby+0x16d0>
    fd24:	a8 42 00 03 	l.ori r2,r2,0x3
    fd28:	a8 42 00 0f 	l.ori r2,r2,0xf
    fd2c:	18 60 04 83 	l.movhi r3,0x483
    fd30:	a8 63 00 3c 	l.ori r3,r3,0x3c
    fd34:	d4 03 10 00 	l.sw 0x0(r3),r2
    fd38:	9c 44 ff fd 	l.addi r2,r4,0xfffffffd
    fd3c:	bc 42 00 05 	l.sfgtui r2,0x5
    fd40:	10 00 00 0b 	l.bf fd6c <mctl_core_init_standby+0x1710>
    fd44:	19 00 00 01 	l.movhi r8,0x1
    fd48:	19 60 00 01 	l.movhi r11,0x1
    fd4c:	b8 42 00 02 	l.slli r2,r2,0x2
    fd50:	a9 08 32 5c 	l.ori r8,r8,0x325c
    fd54:	a9 6b 32 74 	l.ori r11,r11,0x3274
    fd58:	e0 62 40 00 	l.add r3,r2,r8
    fd5c:	e0 42 58 00 	l.add r2,r2,r11
    fd60:	84 a3 00 00 	l.lwz r5,0x0(r3)
    fd64:	00 00 00 04 	l.j fd74 <mctl_core_init_standby+0x1718>
    fd68:	84 62 00 00 	l.lwz r3,0x0(r2)
    fd6c:	9c 60 00 09 	l.addi r3,r0,0x9
    fd70:	9c a0 00 0d 	l.addi r5,r0,0xd
    fd74:	18 40 04 83 	l.movhi r2,0x483
    fd78:	a8 c2 00 14 	l.ori r6,r2,0x14
    fd7c:	d4 06 28 00 	l.sw 0x0(r6),r5
    fd80:	a8 c2 03 5c 	l.ori r6,r2,0x35c
    fd84:	d4 06 28 00 	l.sw 0x0(r6),r5
    fd88:	a8 c2 03 68 	l.ori r6,r2,0x368
    fd8c:	d4 06 28 00 	l.sw 0x0(r6),r5
    fd90:	a8 c2 03 74 	l.ori r6,r2,0x374
    fd94:	d4 06 28 00 	l.sw 0x0(r6),r5
    fd98:	9c c0 00 00 	l.addi r6,r0,0x0
    fd9c:	a8 a2 00 18 	l.ori r5,r2,0x18
    fda0:	d4 05 30 00 	l.sw 0x0(r5),r6
    fda4:	a8 a2 03 60 	l.ori r5,r2,0x360
    fda8:	d4 05 30 00 	l.sw 0x0(r5),r6
    fdac:	a8 a2 03 6c 	l.ori r5,r2,0x36c
    fdb0:	d4 05 30 00 	l.sw 0x0(r5),r6
    fdb4:	a8 a2 03 78 	l.ori r5,r2,0x378
    fdb8:	d4 05 30 00 	l.sw 0x0(r5),r6
    fdbc:	a8 a2 00 1c 	l.ori r5,r2,0x1c
    fdc0:	d4 05 18 00 	l.sw 0x0(r5),r3
    fdc4:	a8 a2 03 64 	l.ori r5,r2,0x364
    fdc8:	d4 05 18 00 	l.sw 0x0(r5),r3
    fdcc:	a8 a2 03 70 	l.ori r5,r2,0x370
    fdd0:	d4 05 18 00 	l.sw 0x0(r5),r3
    fdd4:	a8 a2 03 7c 	l.ori r5,r2,0x37c
    fdd8:	d4 05 18 00 	l.sw 0x0(r5),r3
    fddc:	18 60 03 00 	l.movhi r3,0x300
    fde0:	84 b0 00 04 	l.lwz r5,0x4(r16)
    fde4:	a8 63 62 00 	l.ori r3,r3,0x6200
    fde8:	84 63 00 00 	l.lwz r3,0x0(r3)
    fdec:	a4 63 ff ff 	l.andi r3,r3,0xffff
    fdf0:	bc 03 24 00 	l.sfeqi r3,0x2400
    fdf4:	10 00 00 06 	l.bf fe0c <mctl_core_init_standby+0x17b0>
    fdf8:	bc 05 00 03 	l.sfeqi r5,0x3
    fdfc:	bc 23 08 00 	l.sfnei r3,0x800
    fe00:	10 00 00 24 	l.bf fe90 <mctl_core_init_standby+0x1834>
    fe04:	bc 05 00 04 	l.sfeqi r5,0x4
    fe08:	bc 05 00 03 	l.sfeqi r5,0x3
    fe0c:	10 00 00 06 	l.bf fe24 <mctl_core_init_standby+0x17c8>
    fe10:	bc 05 00 08 	l.sfeqi r5,0x8
    fe14:	0c 00 00 5e 	l.bnf ff8c <mctl_core_init_standby+0x1930>
    fe18:	15 00 00 00 	l.nop 0x0
    fe1c:	00 00 00 10 	l.j fe5c <mctl_core_init_standby+0x1800>
    fe20:	18 60 00 01 	l.movhi r3,0x1
    fe24:	18 60 00 01 	l.movhi r3,0x1
    fe28:	18 40 04 83 	l.movhi r2,0x483
    fe2c:	a8 63 32 0c 	l.ori r3,r3,0x320c
    fe30:	a8 42 00 c0 	l.ori r2,r2,0xc0
    fe34:	8c a3 00 00 	l.lbz r5,0x0(r3)
    fe38:	18 e0 04 83 	l.movhi r7,0x483
    fe3c:	d4 02 28 00 	l.sw 0x0(r2),r5
    fe40:	a8 e7 01 2c 	l.ori r7,r7,0x12c
    fe44:	9c 42 00 04 	l.addi r2,r2,0x4
    fe48:	e4 22 38 00 	l.sfne r2,r7
    fe4c:	13 ff ff fa 	l.bf fe34 <mctl_core_init_standby+0x17d8>
    fe50:	9c 63 00 01 	l.addi r3,r3,0x1
    fe54:	00 00 00 4f 	l.j ff90 <mctl_core_init_standby+0x1934>
    fe58:	84 d0 00 6c 	l.lwz r6,0x6c(r16)
    fe5c:	18 40 04 83 	l.movhi r2,0x483
    fe60:	a8 63 31 9c 	l.ori r3,r3,0x319c
    fe64:	a8 42 00 c0 	l.ori r2,r2,0xc0
    fe68:	8c a3 00 00 	l.lbz r5,0x0(r3)
    fe6c:	19 00 04 83 	l.movhi r8,0x483
    fe70:	d4 02 28 00 	l.sw 0x0(r2),r5
    fe74:	a9 08 01 2c 	l.ori r8,r8,0x12c
    fe78:	9c 42 00 04 	l.addi r2,r2,0x4
    fe7c:	e4 22 40 00 	l.sfne r2,r8
    fe80:	13 ff ff fa 	l.bf fe68 <mctl_core_init_standby+0x180c>
    fe84:	9c 63 00 01 	l.addi r3,r3,0x1
    fe88:	00 00 00 42 	l.j ff90 <mctl_core_init_standby+0x1934>
    fe8c:	84 d0 00 6c 	l.lwz r6,0x6c(r16)
    fe90:	10 00 00 1b 	l.bf fefc <mctl_core_init_standby+0x18a0>
    fe94:	bc 45 00 04 	l.sfgtui r5,0x4
    fe98:	10 00 00 07 	l.bf feb4 <mctl_core_init_standby+0x1858>
    fe9c:	bc 05 00 07 	l.sfeqi r5,0x7
    fea0:	bc 05 00 03 	l.sfeqi r5,0x3
    fea4:	0c 00 00 3a 	l.bnf ff8c <mctl_core_init_standby+0x1930>
    fea8:	15 00 00 00 	l.nop 0x0
    feac:	00 00 00 08 	l.j fecc <mctl_core_init_standby+0x1870>
    feb0:	18 60 00 01 	l.movhi r3,0x1
    feb4:	10 00 00 1f 	l.bf ff30 <mctl_core_init_standby+0x18d4>
    feb8:	bc 05 00 08 	l.sfeqi r5,0x8
    febc:	0c 00 00 34 	l.bnf ff8c <mctl_core_init_standby+0x1930>
    fec0:	15 00 00 00 	l.nop 0x0
    fec4:	00 00 00 28 	l.j ff64 <mctl_core_init_standby+0x1908>
    fec8:	18 60 00 01 	l.movhi r3,0x1
    fecc:	a8 42 00 c0 	l.ori r2,r2,0xc0
    fed0:	a8 63 32 28 	l.ori r3,r3,0x3228
    fed4:	8c a3 00 00 	l.lbz r5,0x0(r3)
    fed8:	19 60 04 83 	l.movhi r11,0x483
    fedc:	d4 02 28 00 	l.sw 0x0(r2),r5
    fee0:	a9 6b 01 2c 	l.ori r11,r11,0x12c
    fee4:	9c 42 00 04 	l.addi r2,r2,0x4
    fee8:	e4 22 58 00 	l.sfne r2,r11
    feec:	13 ff ff fa 	l.bf fed4 <mctl_core_init_standby+0x1878>
    fef0:	9c 63 00 01 	l.addi r3,r3,0x1
    fef4:	00 00 00 27 	l.j ff90 <mctl_core_init_standby+0x1934>
    fef8:	84 d0 00 6c 	l.lwz r6,0x6c(r16)
    fefc:	18 60 00 01 	l.movhi r3,0x1
    ff00:	a8 42 00 c0 	l.ori r2,r2,0xc0
    ff04:	a8 63 31 f0 	l.ori r3,r3,0x31f0
    ff08:	8c a3 00 00 	l.lbz r5,0x0(r3)
    ff0c:	d4 02 28 00 	l.sw 0x0(r2),r5
    ff10:	18 a0 04 83 	l.movhi r5,0x483
    ff14:	9c 42 00 04 	l.addi r2,r2,0x4
    ff18:	a8 a5 01 2c 	l.ori r5,r5,0x12c
    ff1c:	e4 22 28 00 	l.sfne r2,r5
    ff20:	13 ff ff fa 	l.bf ff08 <mctl_core_init_standby+0x18ac>
    ff24:	9c 63 00 01 	l.addi r3,r3,0x1
    ff28:	00 00 00 1a 	l.j ff90 <mctl_core_init_standby+0x1934>
    ff2c:	84 d0 00 6c 	l.lwz r6,0x6c(r16)
    ff30:	18 60 00 01 	l.movhi r3,0x1
    ff34:	a8 42 00 c0 	l.ori r2,r2,0xc0
    ff38:	a8 63 31 d4 	l.ori r3,r3,0x31d4
    ff3c:	8c a3 00 00 	l.lbz r5,0x0(r3)
    ff40:	18 c0 04 83 	l.movhi r6,0x483
    ff44:	d4 02 28 00 	l.sw 0x0(r2),r5
    ff48:	a8 c6 01 2c 	l.ori r6,r6,0x12c
    ff4c:	9c 42 00 04 	l.addi r2,r2,0x4
    ff50:	e4 22 30 00 	l.sfne r2,r6
    ff54:	13 ff ff fa 	l.bf ff3c <mctl_core_init_standby+0x18e0>
    ff58:	9c 63 00 01 	l.addi r3,r3,0x1
    ff5c:	00 00 00 0d 	l.j ff90 <mctl_core_init_standby+0x1934>
    ff60:	84 d0 00 6c 	l.lwz r6,0x6c(r16)
    ff64:	a8 42 00 c0 	l.ori r2,r2,0xc0
    ff68:	a8 63 31 b8 	l.ori r3,r3,0x31b8
    ff6c:	8c a3 00 00 	l.lbz r5,0x0(r3)
    ff70:	18 e0 04 83 	l.movhi r7,0x483
    ff74:	d4 02 28 00 	l.sw 0x0(r2),r5
    ff78:	a8 e7 01 2c 	l.ori r7,r7,0x12c
    ff7c:	9c 42 00 04 	l.addi r2,r2,0x4
    ff80:	e4 22 38 00 	l.sfne r2,r7
    ff84:	13 ff ff fa 	l.bf ff6c <mctl_core_init_standby+0x1910>
    ff88:	9c 63 00 01 	l.addi r3,r3,0x1
    ff8c:	84 d0 00 6c 	l.lwz r6,0x6c(r16)
    ff90:	b8 46 00 50 	l.srli r2,r6,0x10
    ff94:	bc 02 00 00 	l.sfeqi r2,0x0
    ff98:	10 00 00 be 	l.bf 10290 <mctl_core_init_standby+0x1c34>
    ff9c:	18 40 03 00 	l.movhi r2,0x300
    ffa0:	84 b0 00 04 	l.lwz r5,0x4(r16)
    ffa4:	a8 42 62 00 	l.ori r2,r2,0x6200
    ffa8:	bd 66 00 00 	l.sfgesi r6,0x0
    ffac:	84 62 00 00 	l.lwz r3,0x0(r2)
    ffb0:	10 00 00 04 	l.bf ffc0 <mctl_core_init_standby+0x1964>
    ffb4:	a4 63 ff ff 	l.andi r3,r3,0xffff
    ffb8:	00 00 00 13 	l.j 10004 <mctl_core_init_standby+0x19a8>
    ffbc:	84 50 00 58 	l.lwz r2,0x58(r16)
    ffc0:	b8 e6 00 05 	l.slli r7,r6,0x5
    ffc4:	b8 46 00 09 	l.slli r2,r6,0x9
    ffc8:	19 00 00 1e 	l.movhi r8,0x1e
    ffcc:	a4 e7 1e 00 	l.andi r7,r7,0x1e00
    ffd0:	e0 42 40 03 	l.and r2,r2,r8
    ffd4:	b9 06 00 0d 	l.slli r8,r6,0xd
    ffd8:	e0 47 10 04 	l.or r2,r7,r2
    ffdc:	a4 e6 00 0f 	l.andi r7,r6,0xf
    ffe0:	19 60 1e 00 	l.movhi r11,0x1e00
    ffe4:	e0 e7 38 00 	l.add r7,r7,r7
    ffe8:	b8 c6 00 5d 	l.srli r6,r6,0x1d
    ffec:	e0 42 38 04 	l.or r2,r2,r7
    fff0:	e1 08 58 03 	l.and r8,r8,r11
    fff4:	bc 06 00 00 	l.sfeqi r6,0x0
    fff8:	10 00 00 03 	l.bf 10004 <mctl_core_init_standby+0x19a8>
    fffc:	e0 42 40 04 	l.or r2,r2,r8
   10000:	e0 42 10 00 	l.add r2,r2,r2
   10004:	bc 03 24 00 	l.sfeqi r3,0x2400
   10008:	10 00 00 06 	l.bf 10020 <mctl_core_init_standby+0x19c4>
   1000c:	bc 05 00 03 	l.sfeqi r5,0x3
   10010:	bc 23 08 00 	l.sfnei r3,0x800
   10014:	10 00 00 35 	l.bf 100e8 <mctl_core_init_standby+0x1a8c>
   10018:	bc 05 00 04 	l.sfeqi r5,0x4
   1001c:	bc 05 00 03 	l.sfeqi r5,0x3
   10020:	10 00 00 06 	l.bf 10038 <mctl_core_init_standby+0x19dc>
   10024:	bc 05 00 08 	l.sfeqi r5,0x8
   10028:	0c 00 00 9a 	l.bnf 10290 <mctl_core_init_standby+0x1c34>
   1002c:	b8 a2 00 48 	l.srli r5,r2,0x8
   10030:	00 00 00 1b 	l.j 1009c <mctl_core_init_standby+0x1a40>
   10034:	18 60 04 83 	l.movhi r3,0x483
   10038:	b8 a2 00 48 	l.srli r5,r2,0x8
   1003c:	18 60 04 83 	l.movhi r3,0x483
   10040:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   10044:	a8 63 07 80 	l.ori r3,r3,0x780
   10048:	18 c0 04 83 	l.movhi r6,0x483
   1004c:	d4 03 28 00 	l.sw 0x0(r3),r5
   10050:	a8 c6 08 00 	l.ori r6,r6,0x800
   10054:	9c 63 00 04 	l.addi r3,r3,0x4
   10058:	e4 23 30 00 	l.sfne r3,r6
   1005c:	13 ff ff fc 	l.bf 1004c <mctl_core_init_standby+0x19f0>
   10060:	18 c0 04 83 	l.movhi r6,0x483
   10064:	18 60 04 83 	l.movhi r3,0x483
   10068:	a4 a2 00 3f 	l.andi r5,r2,0x3f
   1006c:	a8 c3 07 dc 	l.ori r6,r3,0x7dc
   10070:	d4 06 28 00 	l.sw 0x0(r6),r5
   10074:	a8 c3 07 e0 	l.ori r6,r3,0x7e0
   10078:	d4 06 28 00 	l.sw 0x0(r6),r5
   1007c:	b8 c2 00 50 	l.srli r6,r2,0x10
   10080:	b8 42 00 58 	l.srli r2,r2,0x18
   10084:	a8 a3 07 e4 	l.ori r5,r3,0x7e4
   10088:	a4 c6 00 3f 	l.andi r6,r6,0x3f
   1008c:	a4 42 00 3f 	l.andi r2,r2,0x3f
   10090:	d4 05 30 00 	l.sw 0x0(r5),r6
   10094:	00 00 00 7e 	l.j 1028c <mctl_core_init_standby+0x1c30>
   10098:	a8 63 23 88 	l.ori r3,r3,0x2388
   1009c:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   100a0:	a8 63 07 80 	l.ori r3,r3,0x780
   100a4:	18 e0 04 83 	l.movhi r7,0x483
   100a8:	d4 03 28 00 	l.sw 0x0(r3),r5
   100ac:	a8 e7 08 00 	l.ori r7,r7,0x800
   100b0:	9c 63 00 04 	l.addi r3,r3,0x4
   100b4:	e4 23 38 00 	l.sfne r3,r7
   100b8:	13 ff ff fc 	l.bf 100a8 <mctl_core_init_standby+0x1a4c>
   100bc:	18 e0 04 83 	l.movhi r7,0x483
   100c0:	18 60 04 83 	l.movhi r3,0x483
   100c4:	a4 a2 00 3f 	l.andi r5,r2,0x3f
   100c8:	a8 c3 07 dc 	l.ori r6,r3,0x7dc
   100cc:	d4 06 28 00 	l.sw 0x0(r6),r5
   100d0:	a8 c3 07 e0 	l.ori r6,r3,0x7e0
   100d4:	d4 06 28 00 	l.sw 0x0(r6),r5
   100d8:	b8 c2 00 50 	l.srli r6,r2,0x10
   100dc:	a8 a3 07 e4 	l.ori r5,r3,0x7e4
   100e0:	00 00 00 50 	l.j 10220 <mctl_core_init_standby+0x1bc4>
   100e4:	a4 c6 00 3f 	l.andi r6,r6,0x3f
   100e8:	10 00 00 25 	l.bf 1017c <mctl_core_init_standby+0x1b20>
   100ec:	bc 45 00 04 	l.sfgtui r5,0x4
   100f0:	10 00 00 07 	l.bf 1010c <mctl_core_init_standby+0x1ab0>
   100f4:	bc 05 00 07 	l.sfeqi r5,0x7
   100f8:	bc 05 00 03 	l.sfeqi r5,0x3
   100fc:	0c 00 00 65 	l.bnf 10290 <mctl_core_init_standby+0x1c34>
   10100:	b8 a2 00 48 	l.srli r5,r2,0x8
   10104:	00 00 00 08 	l.j 10124 <mctl_core_init_standby+0x1ac8>
   10108:	18 60 04 83 	l.movhi r3,0x483
   1010c:	10 00 00 31 	l.bf 101d0 <mctl_core_init_standby+0x1b74>
   10110:	bc 05 00 08 	l.sfeqi r5,0x8
   10114:	0c 00 00 5f 	l.bnf 10290 <mctl_core_init_standby+0x1c34>
   10118:	b8 a2 00 48 	l.srli r5,r2,0x8
   1011c:	00 00 00 46 	l.j 10234 <mctl_core_init_standby+0x1bd8>
   10120:	18 60 04 83 	l.movhi r3,0x483
   10124:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   10128:	a8 63 07 80 	l.ori r3,r3,0x780
   1012c:	19 00 04 83 	l.movhi r8,0x483
   10130:	d4 03 28 00 	l.sw 0x0(r3),r5
   10134:	a9 08 08 00 	l.ori r8,r8,0x800
   10138:	9c 63 00 04 	l.addi r3,r3,0x4
   1013c:	e4 23 40 00 	l.sfne r3,r8
   10140:	13 ff ff fc 	l.bf 10130 <mctl_core_init_standby+0x1ad4>
   10144:	19 00 04 83 	l.movhi r8,0x483
   10148:	18 60 04 83 	l.movhi r3,0x483
   1014c:	a4 a2 00 3f 	l.andi r5,r2,0x3f
   10150:	a8 c3 07 dc 	l.ori r6,r3,0x7dc
   10154:	d4 06 28 00 	l.sw 0x0(r6),r5
   10158:	a8 c3 07 e0 	l.ori r6,r3,0x7e0
   1015c:	d4 06 28 00 	l.sw 0x0(r6),r5
   10160:	b8 c2 00 50 	l.srli r6,r2,0x10
   10164:	a8 a3 07 b8 	l.ori r5,r3,0x7b8
   10168:	b8 42 00 58 	l.srli r2,r2,0x18
   1016c:	a4 c6 00 3f 	l.andi r6,r6,0x3f
   10170:	d4 05 30 00 	l.sw 0x0(r5),r6
   10174:	00 00 00 15 	l.j 101c8 <mctl_core_init_standby+0x1b6c>
   10178:	a4 42 00 3f 	l.andi r2,r2,0x3f
   1017c:	b8 a2 00 48 	l.srli r5,r2,0x8
   10180:	18 60 04 83 	l.movhi r3,0x483
   10184:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   10188:	a8 63 07 80 	l.ori r3,r3,0x780
   1018c:	19 60 04 83 	l.movhi r11,0x483
   10190:	d4 03 28 00 	l.sw 0x0(r3),r5
   10194:	a9 6b 08 00 	l.ori r11,r11,0x800
   10198:	9c 63 00 04 	l.addi r3,r3,0x4
   1019c:	e4 23 58 00 	l.sfne r3,r11
   101a0:	13 ff ff fc 	l.bf 10190 <mctl_core_init_standby+0x1b34>
   101a4:	19 60 04 83 	l.movhi r11,0x483
   101a8:	18 60 04 83 	l.movhi r3,0x483
   101ac:	a4 a2 00 3f 	l.andi r5,r2,0x3f
   101b0:	a8 c3 07 dc 	l.ori r6,r3,0x7dc
   101b4:	b8 42 00 50 	l.srli r2,r2,0x10
   101b8:	d4 06 28 00 	l.sw 0x0(r6),r5
   101bc:	a8 c3 07 e0 	l.ori r6,r3,0x7e0
   101c0:	d4 06 28 00 	l.sw 0x0(r6),r5
   101c4:	a4 42 00 3f 	l.andi r2,r2,0x3f
   101c8:	00 00 00 31 	l.j 1028c <mctl_core_init_standby+0x1c30>
   101cc:	a8 63 07 84 	l.ori r3,r3,0x784
   101d0:	b8 a2 00 48 	l.srli r5,r2,0x8
   101d4:	18 60 04 83 	l.movhi r3,0x483
   101d8:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   101dc:	a8 63 07 80 	l.ori r3,r3,0x780
   101e0:	18 c0 04 83 	l.movhi r6,0x483
   101e4:	d4 03 28 00 	l.sw 0x0(r3),r5
   101e8:	a8 c6 08 00 	l.ori r6,r6,0x800
   101ec:	9c 63 00 04 	l.addi r3,r3,0x4
   101f0:	e4 23 30 00 	l.sfne r3,r6
   101f4:	13 ff ff fc 	l.bf 101e4 <mctl_core_init_standby+0x1b88>
   101f8:	18 c0 04 83 	l.movhi r6,0x483
   101fc:	18 60 04 83 	l.movhi r3,0x483
   10200:	a4 a2 00 3f 	l.andi r5,r2,0x3f
   10204:	a8 c3 07 dc 	l.ori r6,r3,0x7dc
   10208:	d4 06 28 00 	l.sw 0x0(r6),r5
   1020c:	a8 c3 07 e0 	l.ori r6,r3,0x7e0
   10210:	d4 06 28 00 	l.sw 0x0(r6),r5
   10214:	b8 c2 00 50 	l.srli r6,r2,0x10
   10218:	a8 a3 07 88 	l.ori r5,r3,0x788
   1021c:	a4 c6 00 3f 	l.andi r6,r6,0x3f
   10220:	b8 42 00 58 	l.srli r2,r2,0x18
   10224:	d4 05 30 00 	l.sw 0x0(r5),r6
   10228:	a8 63 07 90 	l.ori r3,r3,0x790
   1022c:	00 00 00 18 	l.j 1028c <mctl_core_init_standby+0x1c30>
   10230:	a4 42 00 3f 	l.andi r2,r2,0x3f
   10234:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   10238:	a8 63 07 80 	l.ori r3,r3,0x780
   1023c:	18 e0 04 83 	l.movhi r7,0x483
   10240:	d4 03 28 00 	l.sw 0x0(r3),r5
   10244:	a8 e7 08 00 	l.ori r7,r7,0x800
   10248:	9c 63 00 04 	l.addi r3,r3,0x4
   1024c:	e4 23 38 00 	l.sfne r3,r7
   10250:	13 ff ff fc 	l.bf 10240 <mctl_core_init_standby+0x1be4>
   10254:	18 e0 04 83 	l.movhi r7,0x483
   10258:	18 60 04 83 	l.movhi r3,0x483
   1025c:	a4 a2 00 3f 	l.andi r5,r2,0x3f
   10260:	a8 c3 07 dc 	l.ori r6,r3,0x7dc
   10264:	d4 06 28 00 	l.sw 0x0(r6),r5
   10268:	a8 c3 07 e0 	l.ori r6,r3,0x7e0
   1026c:	d4 06 28 00 	l.sw 0x0(r6),r5
   10270:	b8 c2 00 50 	l.srli r6,r2,0x10
   10274:	b8 42 00 58 	l.srli r2,r2,0x18
   10278:	a8 a3 07 90 	l.ori r5,r3,0x790
   1027c:	a4 c6 00 3f 	l.andi r6,r6,0x3f
   10280:	a4 42 00 3f 	l.andi r2,r2,0x3f
   10284:	d4 05 30 00 	l.sw 0x0(r5),r6
   10288:	a8 63 07 8c 	l.ori r3,r3,0x78c
   1028c:	d4 03 10 00 	l.sw 0x0(r3),r2
   10290:	84 50 00 04 	l.lwz r2,0x4(r16)
   10294:	bc 02 00 04 	l.sfeqi r2,0x4
   10298:	10 00 00 11 	l.bf 102dc <mctl_core_init_standby+0x1c80>
   1029c:	bc 42 00 04 	l.sfgtui r2,0x4
   102a0:	10 00 00 07 	l.bf 102bc <mctl_core_init_standby+0x1c60>
   102a4:	bc 02 00 07 	l.sfeqi r2,0x7
   102a8:	bc 02 00 03 	l.sfeqi r2,0x3
   102ac:	0c 00 00 19 	l.bnf 10310 <mctl_core_init_standby+0x1cb4>
   102b0:	15 00 00 00 	l.nop 0x0
   102b4:	00 00 00 08 	l.j 102d4 <mctl_core_init_standby+0x1c78>
   102b8:	8c 50 00 6b 	l.lbz r2,0x6b(r16)
   102bc:	10 00 00 0a 	l.bf 102e4 <mctl_core_init_standby+0x1c88>
   102c0:	bc 02 00 08 	l.sfeqi r2,0x8
   102c4:	0c 00 00 13 	l.bnf 10310 <mctl_core_init_standby+0x1cb4>
   102c8:	15 00 00 00 	l.nop 0x0
   102cc:	00 00 00 0c 	l.j 102fc <mctl_core_init_standby+0x1ca0>
   102d0:	8c 50 00 68 	l.lbz r2,0x68(r16)
   102d4:	00 00 00 06 	l.j 102ec <mctl_core_init_standby+0x1c90>
   102d8:	bc 02 00 00 	l.sfeqi r2,0x0
   102dc:	00 00 00 03 	l.j 102e8 <mctl_core_init_standby+0x1c8c>
   102e0:	8c 50 00 6a 	l.lbz r2,0x6a(r16)
   102e4:	8c 50 00 69 	l.lbz r2,0x69(r16)
   102e8:	bc 02 00 00 	l.sfeqi r2,0x0
   102ec:	10 00 00 0b 	l.bf 10318 <mctl_core_init_standby+0x1cbc>
   102f0:	18 60 04 83 	l.movhi r3,0x483
   102f4:	00 00 00 0e 	l.j 1032c <mctl_core_init_standby+0x1cd0>
   102f8:	a8 a3 03 dc 	l.ori r5,r3,0x3dc
   102fc:	bc 02 00 00 	l.sfeqi r2,0x0
   10300:	10 00 00 08 	l.bf 10320 <mctl_core_init_standby+0x1cc4>
   10304:	18 60 04 83 	l.movhi r3,0x483
   10308:	00 00 00 09 	l.j 1032c <mctl_core_init_standby+0x1cd0>
   1030c:	a8 a3 03 dc 	l.ori r5,r3,0x3dc
   10310:	00 00 00 05 	l.j 10324 <mctl_core_init_standby+0x1cc8>
   10314:	9c 40 00 00 	l.addi r2,r0,0x0
   10318:	00 00 00 03 	l.j 10324 <mctl_core_init_standby+0x1cc8>
   1031c:	9c 40 00 80 	l.addi r2,r0,0x80
   10320:	9c 40 00 33 	l.addi r2,r0,0x33
   10324:	18 60 04 83 	l.movhi r3,0x483
   10328:	a8 a3 03 dc 	l.ori r5,r3,0x3dc
   1032c:	d4 05 10 00 	l.sw 0x0(r5),r2
   10330:	a8 a3 04 5c 	l.ori r5,r3,0x45c
   10334:	d4 05 10 00 	l.sw 0x0(r5),r2
   10338:	a8 a3 03 88 	l.ori r5,r3,0x388
   1033c:	84 50 00 0c 	l.lwz r2,0xc(r16)
   10340:	a8 63 03 8c 	l.ori r3,r3,0x38c
   10344:	a4 42 00 1f 	l.andi r2,r2,0x1f
   10348:	d4 05 10 00 	l.sw 0x0(r5),r2
   1034c:	d4 03 10 00 	l.sw 0x0(r3),r2
   10350:	84 50 00 04 	l.lwz r2,0x4(r16)
   10354:	bc 22 00 08 	l.sfnei r2,0x8
   10358:	10 00 00 0a 	l.bf 10380 <mctl_core_init_standby+0x1d24>
   1035c:	19 00 1f 1f 	l.movhi r8,0x1f1f
   10360:	84 50 00 5c 	l.lwz r2,0x5c(r16)
   10364:	a9 08 1f 1f 	l.ori r8,r8,0x1f1f
   10368:	e0 a2 40 03 	l.and r5,r2,r8
   1036c:	bc 05 00 00 	l.sfeqi r5,0x0
   10370:	0c 00 00 03 	l.bnf 1037c <mctl_core_init_standby+0x1d20>
   10374:	a4 42 00 1f 	l.andi r2,r2,0x1f
   10378:	9c 40 00 04 	l.addi r2,r0,0x4
   1037c:	d4 03 10 00 	l.sw 0x0(r3),r2
   10380:	84 70 00 0c 	l.lwz r3,0xc(r16)
   10384:	18 40 04 83 	l.movhi r2,0x483
   10388:	b8 63 00 48 	l.srli r3,r3,0x8
   1038c:	a8 a2 03 c8 	l.ori r5,r2,0x3c8
   10390:	a8 42 03 cc 	l.ori r2,r2,0x3cc
   10394:	a4 63 00 1f 	l.andi r3,r3,0x1f
   10398:	d4 05 18 00 	l.sw 0x0(r5),r3
   1039c:	d4 02 18 00 	l.sw 0x0(r2),r3
   103a0:	84 70 00 04 	l.lwz r3,0x4(r16)
   103a4:	bc 23 00 08 	l.sfnei r3,0x8
   103a8:	10 00 00 0c 	l.bf 103d8 <mctl_core_init_standby+0x1d7c>
   103ac:	19 60 1f 1f 	l.movhi r11,0x1f1f
   103b0:	84 70 00 5c 	l.lwz r3,0x5c(r16)
   103b4:	a9 6b 1f 1f 	l.ori r11,r11,0x1f1f
   103b8:	e0 a3 58 03 	l.and r5,r3,r11
   103bc:	bc 05 00 00 	l.sfeqi r5,0x0
   103c0:	10 00 00 04 	l.bf 103d0 <mctl_core_init_standby+0x1d74>
   103c4:	b8 63 00 48 	l.srli r3,r3,0x8
   103c8:	00 00 00 03 	l.j 103d4 <mctl_core_init_standby+0x1d78>
   103cc:	a4 63 00 1f 	l.andi r3,r3,0x1f
   103d0:	9c 60 00 04 	l.addi r3,r0,0x4
   103d4:	d4 02 18 00 	l.sw 0x0(r2),r3
   103d8:	94 70 00 0c 	l.lhz r3,0xc(r16)
   103dc:	18 40 04 83 	l.movhi r2,0x483
   103e0:	a4 63 00 1f 	l.andi r3,r3,0x1f
   103e4:	a8 a2 04 08 	l.ori r5,r2,0x408
   103e8:	a8 42 04 0c 	l.ori r2,r2,0x40c
   103ec:	d4 05 18 00 	l.sw 0x0(r5),r3
   103f0:	d4 02 18 00 	l.sw 0x0(r2),r3
   103f4:	84 70 00 04 	l.lwz r3,0x4(r16)
   103f8:	bc 23 00 08 	l.sfnei r3,0x8
   103fc:	10 00 00 0c 	l.bf 1042c <mctl_core_init_standby+0x1dd0>
   10400:	18 c0 1f 1f 	l.movhi r6,0x1f1f
   10404:	84 70 00 5c 	l.lwz r3,0x5c(r16)
   10408:	a8 c6 1f 1f 	l.ori r6,r6,0x1f1f
   1040c:	e0 a3 30 03 	l.and r5,r3,r6
   10410:	bc 05 00 00 	l.sfeqi r5,0x0
   10414:	10 00 00 04 	l.bf 10424 <mctl_core_init_standby+0x1dc8>
   10418:	b8 63 00 50 	l.srli r3,r3,0x10
   1041c:	00 00 00 03 	l.j 10428 <mctl_core_init_standby+0x1dcc>
   10420:	a4 63 00 1f 	l.andi r3,r3,0x1f
   10424:	9c 60 00 04 	l.addi r3,r0,0x4
   10428:	d4 02 18 00 	l.sw 0x0(r2),r3
   1042c:	8c 70 00 0c 	l.lbz r3,0xc(r16)
   10430:	18 40 04 83 	l.movhi r2,0x483
   10434:	a4 63 00 1f 	l.andi r3,r3,0x1f
   10438:	a8 a2 04 48 	l.ori r5,r2,0x448
   1043c:	a8 42 04 4c 	l.ori r2,r2,0x44c
   10440:	d4 05 18 00 	l.sw 0x0(r5),r3
   10444:	d4 02 18 00 	l.sw 0x0(r2),r3
   10448:	84 70 00 04 	l.lwz r3,0x4(r16)
   1044c:	bc 23 00 08 	l.sfnei r3,0x8
   10450:	10 00 00 0c 	l.bf 10480 <mctl_core_init_standby+0x1e24>
   10454:	18 e0 1f 1f 	l.movhi r7,0x1f1f
   10458:	84 70 00 5c 	l.lwz r3,0x5c(r16)
   1045c:	a8 e7 1f 1f 	l.ori r7,r7,0x1f1f
   10460:	e0 a3 38 03 	l.and r5,r3,r7
   10464:	bc 05 00 00 	l.sfeqi r5,0x0
   10468:	10 00 00 04 	l.bf 10478 <mctl_core_init_standby+0x1e1c>
   1046c:	b8 63 00 58 	l.srli r3,r3,0x18
   10470:	00 00 00 03 	l.j 1047c <mctl_core_init_standby+0x1e20>
   10474:	a4 63 00 1f 	l.andi r3,r3,0x1f
   10478:	9c 60 00 04 	l.addi r3,r0,0x4
   1047c:	d4 02 18 00 	l.sw 0x0(r2),r3
   10480:	84 70 00 10 	l.lwz r3,0x10(r16)
   10484:	18 40 04 83 	l.movhi r2,0x483
   10488:	a4 63 00 1f 	l.andi r3,r3,0x1f
   1048c:	a8 a2 03 40 	l.ori r5,r2,0x340
   10490:	d4 05 18 00 	l.sw 0x0(r5),r3
   10494:	a8 a2 03 44 	l.ori r5,r2,0x344
   10498:	d4 05 18 00 	l.sw 0x0(r5),r3
   1049c:	a8 a2 03 48 	l.ori r5,r2,0x348
   104a0:	84 70 00 10 	l.lwz r3,0x10(r16)
   104a4:	b8 63 00 48 	l.srli r3,r3,0x8
   104a8:	a4 63 00 1f 	l.andi r3,r3,0x1f
   104ac:	d4 05 18 00 	l.sw 0x0(r5),r3
   104b0:	a8 a2 03 4c 	l.ori r5,r2,0x34c
   104b4:	a8 42 03 80 	l.ori r2,r2,0x380
   104b8:	d4 05 18 00 	l.sw 0x0(r5),r3
   104bc:	84 70 00 08 	l.lwz r3,0x8(r16)
   104c0:	a4 63 00 1f 	l.andi r3,r3,0x1f
   104c4:	d4 02 18 00 	l.sw 0x0(r2),r3
   104c8:	84 50 00 04 	l.lwz r2,0x4(r16)
   104cc:	ac a2 00 07 	l.xori r5,r2,0x7
   104d0:	e0 c0 28 02 	l.sub r6,r0,r5
   104d4:	e0 a6 28 04 	l.or r5,r6,r5
   104d8:	bd 65 00 00 	l.sfgesi r5,0x0
   104dc:	10 00 00 07 	l.bf 104f8 <mctl_core_init_standby+0x1e9c>
   104e0:	ac 42 00 04 	l.xori r2,r2,0x4
   104e4:	e0 a0 10 02 	l.sub r5,r0,r2
   104e8:	e0 45 10 04 	l.or r2,r5,r2
   104ec:	bd 82 00 00 	l.sfltsi r2,0x0
   104f0:	10 00 00 07 	l.bf 1050c <mctl_core_init_standby+0x1eb0>
   104f4:	18 40 04 83 	l.movhi r2,0x483
   104f8:	18 40 04 83 	l.movhi r2,0x483
   104fc:	9d 00 00 00 	l.addi r8,r0,0x0
   10500:	a8 42 03 80 	l.ori r2,r2,0x380
   10504:	d4 02 40 00 	l.sw 0x0(r2),r8
   10508:	18 40 04 83 	l.movhi r2,0x483
   1050c:	a8 42 03 84 	l.ori r2,r2,0x384
   10510:	d4 02 18 00 	l.sw 0x0(r2),r3
   10514:	84 70 00 04 	l.lwz r3,0x4(r16)
   10518:	bc 23 00 08 	l.sfnei r3,0x8
   1051c:	10 00 00 03 	l.bf 10528 <mctl_core_init_standby+0x1ecc>
   10520:	9d 60 00 00 	l.addi r11,r0,0x0
   10524:	d4 02 58 00 	l.sw 0x0(r2),r11
   10528:	84 70 00 08 	l.lwz r3,0x8(r16)
   1052c:	18 40 04 83 	l.movhi r2,0x483
   10530:	b8 63 00 48 	l.srli r3,r3,0x8
   10534:	a8 42 03 c0 	l.ori r2,r2,0x3c0
   10538:	a4 63 00 1f 	l.andi r3,r3,0x1f
   1053c:	d4 02 18 00 	l.sw 0x0(r2),r3
   10540:	84 50 00 04 	l.lwz r2,0x4(r16)
   10544:	ac a2 00 07 	l.xori r5,r2,0x7
   10548:	e0 c0 28 02 	l.sub r6,r0,r5
   1054c:	e0 a6 28 04 	l.or r5,r6,r5
   10550:	bd 65 00 00 	l.sfgesi r5,0x0
   10554:	10 00 00 07 	l.bf 10570 <mctl_core_init_standby+0x1f14>
   10558:	ac 42 00 04 	l.xori r2,r2,0x4
   1055c:	e0 a0 10 02 	l.sub r5,r0,r2
   10560:	e0 45 10 04 	l.or r2,r5,r2
   10564:	bd 82 00 00 	l.sfltsi r2,0x0
   10568:	10 00 00 07 	l.bf 10584 <mctl_core_init_standby+0x1f28>
   1056c:	18 40 04 83 	l.movhi r2,0x483
   10570:	18 40 04 83 	l.movhi r2,0x483
   10574:	9c a0 00 00 	l.addi r5,r0,0x0
   10578:	a8 42 03 c0 	l.ori r2,r2,0x3c0
   1057c:	d4 02 28 00 	l.sw 0x0(r2),r5
   10580:	18 40 04 83 	l.movhi r2,0x483
   10584:	a8 42 03 c4 	l.ori r2,r2,0x3c4
   10588:	d4 02 18 00 	l.sw 0x0(r2),r3
   1058c:	84 70 00 04 	l.lwz r3,0x4(r16)
   10590:	bc 23 00 08 	l.sfnei r3,0x8
   10594:	10 00 00 03 	l.bf 105a0 <mctl_core_init_standby+0x1f44>
   10598:	9c c0 00 00 	l.addi r6,r0,0x0
   1059c:	d4 02 30 00 	l.sw 0x0(r2),r6
   105a0:	94 70 00 08 	l.lhz r3,0x8(r16)
   105a4:	18 40 04 83 	l.movhi r2,0x483
   105a8:	a4 63 00 1f 	l.andi r3,r3,0x1f
   105ac:	a8 42 04 00 	l.ori r2,r2,0x400
   105b0:	d4 02 18 00 	l.sw 0x0(r2),r3
   105b4:	84 50 00 04 	l.lwz r2,0x4(r16)
   105b8:	ac a2 00 07 	l.xori r5,r2,0x7
   105bc:	e0 c0 28 02 	l.sub r6,r0,r5
   105c0:	e0 a6 28 04 	l.or r5,r6,r5
   105c4:	bd 65 00 00 	l.sfgesi r5,0x0
   105c8:	10 00 00 07 	l.bf 105e4 <mctl_core_init_standby+0x1f88>
   105cc:	ac 42 00 04 	l.xori r2,r2,0x4
   105d0:	e0 a0 10 02 	l.sub r5,r0,r2
   105d4:	e0 45 10 04 	l.or r2,r5,r2
   105d8:	bd 82 00 00 	l.sfltsi r2,0x0
   105dc:	10 00 00 07 	l.bf 105f8 <mctl_core_init_standby+0x1f9c>
   105e0:	18 40 04 83 	l.movhi r2,0x483
   105e4:	18 40 04 83 	l.movhi r2,0x483
   105e8:	9c e0 00 00 	l.addi r7,r0,0x0
   105ec:	a8 42 04 00 	l.ori r2,r2,0x400
   105f0:	d4 02 38 00 	l.sw 0x0(r2),r7
   105f4:	18 40 04 83 	l.movhi r2,0x483
   105f8:	a8 42 04 04 	l.ori r2,r2,0x404
   105fc:	d4 02 18 00 	l.sw 0x0(r2),r3
   10600:	84 70 00 04 	l.lwz r3,0x4(r16)
   10604:	bc 23 00 08 	l.sfnei r3,0x8
   10608:	10 00 00 03 	l.bf 10614 <mctl_core_init_standby+0x1fb8>
   1060c:	9d 00 00 00 	l.addi r8,r0,0x0
   10610:	d4 02 40 00 	l.sw 0x0(r2),r8
   10614:	8c 70 00 08 	l.lbz r3,0x8(r16)
   10618:	18 40 04 83 	l.movhi r2,0x483
   1061c:	a4 63 00 1f 	l.andi r3,r3,0x1f
   10620:	a8 42 04 40 	l.ori r2,r2,0x440
   10624:	d4 02 18 00 	l.sw 0x0(r2),r3
   10628:	84 50 00 04 	l.lwz r2,0x4(r16)
   1062c:	ac a2 00 07 	l.xori r5,r2,0x7
   10630:	e0 c0 28 02 	l.sub r6,r0,r5
   10634:	e0 a6 28 04 	l.or r5,r6,r5
   10638:	bd 65 00 00 	l.sfgesi r5,0x0
   1063c:	10 00 00 07 	l.bf 10658 <mctl_core_init_standby+0x1ffc>
   10640:	ac 42 00 04 	l.xori r2,r2,0x4
   10644:	e0 a0 10 02 	l.sub r5,r0,r2
   10648:	e0 45 10 04 	l.or r2,r5,r2
   1064c:	bd 82 00 00 	l.sfltsi r2,0x0
   10650:	10 00 00 07 	l.bf 1066c <mctl_core_init_standby+0x2010>
   10654:	18 40 04 83 	l.movhi r2,0x483
   10658:	18 40 04 83 	l.movhi r2,0x483
   1065c:	9d 60 00 00 	l.addi r11,r0,0x0
   10660:	a8 42 04 40 	l.ori r2,r2,0x440
   10664:	d4 02 58 00 	l.sw 0x0(r2),r11
   10668:	18 40 04 83 	l.movhi r2,0x483
   1066c:	a8 42 04 44 	l.ori r2,r2,0x444
   10670:	d4 02 18 00 	l.sw 0x0(r2),r3
   10674:	84 70 00 04 	l.lwz r3,0x4(r16)
   10678:	bc 23 00 08 	l.sfnei r3,0x8
   1067c:	10 00 00 03 	l.bf 10688 <mctl_core_init_standby+0x202c>
   10680:	9c 60 00 00 	l.addi r3,r0,0x0
   10684:	d4 02 18 00 	l.sw 0x0(r2),r3
   10688:	18 40 04 83 	l.movhi r2,0x483
   1068c:	9c a0 ff f8 	l.addi r5,r0,0xfffffff8
   10690:	a8 42 00 04 	l.ori r2,r2,0x4
   10694:	bc 04 00 04 	l.sfeqi r4,0x4
   10698:	84 42 00 00 	l.lwz r2,0x0(r2)
   1069c:	10 00 00 0c 	l.bf 106cc <mctl_core_init_standby+0x2070>
   106a0:	e0 42 28 03 	l.and r2,r2,r5
   106a4:	bc 44 00 04 	l.sfgtui r4,0x4
   106a8:	0c 00 00 0f 	l.bnf 106e4 <mctl_core_init_standby+0x2088>
   106ac:	15 00 00 00 	l.nop 0x0
   106b0:	bc 04 00 07 	l.sfeqi r4,0x7
   106b4:	10 00 00 08 	l.bf 106d4 <mctl_core_init_standby+0x2078>
   106b8:	bc 04 00 08 	l.sfeqi r4,0x8
   106bc:	0c 00 00 0a 	l.bnf 106e4 <mctl_core_init_standby+0x2088>
   106c0:	15 00 00 00 	l.nop 0x0
   106c4:	00 00 00 06 	l.j 106dc <mctl_core_init_standby+0x2080>
   106c8:	a8 42 00 05 	l.ori r2,r2,0x5
   106cc:	00 00 00 07 	l.j 106e8 <mctl_core_init_standby+0x208c>
   106d0:	a8 42 00 04 	l.ori r2,r2,0x4
   106d4:	00 00 00 05 	l.j 106e8 <mctl_core_init_standby+0x208c>
   106d8:	a8 42 00 03 	l.ori r2,r2,0x3
   106dc:	00 00 00 04 	l.j 106ec <mctl_core_init_standby+0x2090>
   106e0:	18 60 04 83 	l.movhi r3,0x483
   106e4:	a8 42 00 02 	l.ori r2,r2,0x2
   106e8:	18 60 04 83 	l.movhi r3,0x483
   106ec:	a8 42 00 08 	l.ori r2,r2,0x8
   106f0:	a8 83 00 04 	l.ori r4,r3,0x4
   106f4:	d4 04 10 00 	l.sw 0x0(r4),r2
   106f8:	84 50 00 00 	l.lwz r2,0x0(r16)
   106fc:	bc 42 02 a0 	l.sfgtui r2,0x2a0
   10700:	10 00 00 07 	l.bf 1071c <mctl_core_init_standby+0x20c0>
   10704:	bc 42 01 f4 	l.sfgtui r2,0x1f4
   10708:	a8 63 00 20 	l.ori r3,r3,0x20
   1070c:	9c 40 00 0f 	l.addi r2,r0,0xf
   10710:	d4 03 10 00 	l.sw 0x0(r3),r2
   10714:	84 50 00 00 	l.lwz r2,0x0(r16)
   10718:	bc 42 01 f4 	l.sfgtui r2,0x1f4
   1071c:	10 00 00 0d 	l.bf 10750 <mctl_core_init_standby+0x20f4>
   10720:	9c e0 ff 7f 	l.addi r7,r0,0xffffff7f
   10724:	18 40 04 83 	l.movhi r2,0x483
   10728:	9c c0 ff 1f 	l.addi r6,r0,0xffffff1f
   1072c:	a8 62 01 44 	l.ori r3,r2,0x144
   10730:	a8 42 01 4c 	l.ori r2,r2,0x14c
   10734:	84 83 00 00 	l.lwz r4,0x0(r3)
   10738:	a8 84 00 80 	l.ori r4,r4,0x80
   1073c:	d4 03 20 00 	l.sw 0x0(r3),r4
   10740:	84 62 00 00 	l.lwz r3,0x0(r2)
   10744:	e0 63 30 03 	l.and r3,r3,r6
   10748:	00 00 00 0b 	l.j 10774 <mctl_core_init_standby+0x2118>
   1074c:	a8 63 00 20 	l.ori r3,r3,0x20
   10750:	18 40 04 83 	l.movhi r2,0x483
   10754:	a8 62 01 44 	l.ori r3,r2,0x144
   10758:	a8 42 01 4c 	l.ori r2,r2,0x14c
   1075c:	84 83 00 00 	l.lwz r4,0x0(r3)
   10760:	9d 00 ff 1f 	l.addi r8,r0,0xffffff1f
   10764:	e0 84 38 03 	l.and r4,r4,r7
   10768:	d4 03 20 00 	l.sw 0x0(r3),r4
   1076c:	84 62 00 00 	l.lwz r3,0x0(r2)
   10770:	e0 63 40 03 	l.and r3,r3,r8
   10774:	d4 02 18 00 	l.sw 0x0(r2),r3
   10778:	18 40 04 83 	l.movhi r2,0x483
   1077c:	9d 60 ff f7 	l.addi r11,r0,0xfffffff7
   10780:	a8 62 01 4c 	l.ori r3,r2,0x14c
   10784:	a8 42 01 80 	l.ori r2,r2,0x180
   10788:	84 83 00 00 	l.lwz r4,0x0(r3)
   1078c:	e0 84 58 03 	l.and r4,r4,r11
   10790:	d4 03 20 00 	l.sw 0x0(r3),r4
   10794:	84 62 00 00 	l.lwz r3,0x0(r2)
   10798:	a4 63 00 04 	l.andi r3,r3,0x4
   1079c:	bc 03 00 00 	l.sfeqi r3,0x0
   107a0:	13 ff ff fd 	l.bf 10794 <mctl_core_init_standby+0x2138>
   107a4:	9c 60 03 e8 	l.addi r3,r0,0x3e8
   107a8:	07 ff d2 a7 	l.jal 5244 <time_udelay>
   107ac:	18 40 04 83 	l.movhi r2,0x483
   107b0:	9c 60 00 37 	l.addi r3,r0,0x37
   107b4:	a8 42 00 58 	l.ori r2,r2,0x58
   107b8:	9c 80 fd ff 	l.addi r4,r0,0xfffffdff
   107bc:	d4 02 18 00 	l.sw 0x0(r2),r3
   107c0:	18 40 04 81 	l.movhi r2,0x481
   107c4:	a8 42 00 08 	l.ori r2,r2,0x8
   107c8:	84 62 00 00 	l.lwz r3,0x0(r2)
   107cc:	e0 63 20 03 	l.and r3,r3,r4
   107d0:	d4 02 18 00 	l.sw 0x0(r2),r3
   107d4:	07 ff d2 9c 	l.jal 5244 <time_udelay>
   107d8:	9c 60 00 01 	l.addi r3,r0,0x1
   107dc:	18 60 04 82 	l.movhi r3,0x482
   107e0:	9c a0 00 00 	l.addi r5,r0,0x0
   107e4:	a8 83 03 20 	l.ori r4,r3,0x320
   107e8:	a8 43 01 b0 	l.ori r2,r3,0x1b0
   107ec:	d4 04 28 00 	l.sw 0x0(r4),r5
   107f0:	a8 63 03 24 	l.ori r3,r3,0x324
   107f4:	84 a2 00 00 	l.lwz r5,0x0(r2)
   107f8:	a8 a5 00 01 	l.ori r5,r5,0x1
   107fc:	d4 02 28 00 	l.sw 0x0(r2),r5
   10800:	84 a2 00 00 	l.lwz r5,0x0(r2)
   10804:	a8 a5 00 20 	l.ori r5,r5,0x20
   10808:	d4 02 28 00 	l.sw 0x0(r2),r5
   1080c:	9c 40 00 01 	l.addi r2,r0,0x1
   10810:	d4 04 10 00 	l.sw 0x0(r4),r2
   10814:	84 43 00 00 	l.lwz r2,0x0(r3)
   10818:	a4 42 00 01 	l.andi r2,r2,0x1
   1081c:	bc 02 00 00 	l.sfeqi r2,0x0
   10820:	13 ff ff fd 	l.bf 10814 <mctl_core_init_standby+0x21b8>
   10824:	15 00 00 00 	l.nop 0x0
   10828:	18 60 04 82 	l.movhi r3,0x482
   1082c:	a8 63 01 bc 	l.ori r3,r3,0x1bc
   10830:	84 83 00 00 	l.lwz r4,0x0(r3)
   10834:	a4 84 00 01 	l.andi r4,r4,0x1
   10838:	bc 04 00 00 	l.sfeqi r4,0x0
   1083c:	13 ff ff fd 	l.bf 10830 <mctl_core_init_standby+0x21d4>
   10840:	18 40 04 82 	l.movhi r2,0x482
   10844:	a8 62 03 20 	l.ori r3,r2,0x320
   10848:	9c c0 00 00 	l.addi r6,r0,0x0
   1084c:	a8 82 01 b0 	l.ori r4,r2,0x1b0
   10850:	d4 03 30 00 	l.sw 0x0(r3),r6
   10854:	9c e0 ff df 	l.addi r7,r0,0xffffffdf
   10858:	84 a4 00 00 	l.lwz r5,0x0(r4)
   1085c:	e0 a5 38 03 	l.and r5,r5,r7
   10860:	d4 04 28 00 	l.sw 0x0(r4),r5
   10864:	18 80 07 01 	l.movhi r4,0x701
   10868:	a8 84 02 50 	l.ori r4,r4,0x250
   1086c:	84 a4 00 00 	l.lwz r5,0x0(r4)
   10870:	a8 a5 00 10 	l.ori r5,r5,0x10
   10874:	d4 04 28 00 	l.sw 0x0(r4),r5
   10878:	a8 82 00 30 	l.ori r4,r2,0x30
   1087c:	a8 42 03 24 	l.ori r2,r2,0x324
   10880:	84 a4 00 00 	l.lwz r5,0x0(r4)
   10884:	e0 a5 38 03 	l.and r5,r5,r7
   10888:	d4 04 28 00 	l.sw 0x0(r4),r5
   1088c:	9c 80 00 01 	l.addi r4,r0,0x1
   10890:	d4 03 20 00 	l.sw 0x0(r3),r4
   10894:	84 62 00 00 	l.lwz r3,0x0(r2)
   10898:	a4 63 00 01 	l.andi r3,r3,0x1
   1089c:	bc 03 00 00 	l.sfeqi r3,0x0
   108a0:	13 ff ff fd 	l.bf 10894 <mctl_core_init_standby+0x2238>
   108a4:	18 60 04 82 	l.movhi r3,0x482
   108a8:	a8 63 00 04 	l.ori r3,r3,0x4
   108ac:	85 c3 00 00 	l.lwz r14,0x0(r3)
   108b0:	a5 ce 00 03 	l.andi r14,r14,0x3
   108b4:	bc 2e 00 01 	l.sfnei r14,0x1
   108b8:	13 ff ff fd 	l.bf 108ac <mctl_core_init_standby+0x2250>
   108bc:	18 40 04 82 	l.movhi r2,0x482
   108c0:	07 ff d2 61 	l.jal 5244 <time_udelay>
   108c4:	9c 60 00 c8 	l.addi r3,r0,0xc8
   108c8:	a8 62 03 20 	l.ori r3,r2,0x320
   108cc:	9d 00 00 00 	l.addi r8,r0,0x0
   108d0:	a8 82 01 b0 	l.ori r4,r2,0x1b0
   108d4:	d4 03 40 00 	l.sw 0x0(r3),r8
   108d8:	9d 60 ff fe 	l.addi r11,r0,0xfffffffe
   108dc:	84 a4 00 00 	l.lwz r5,0x0(r4)
   108e0:	e0 a5 58 03 	l.and r5,r5,r11
   108e4:	d4 04 28 00 	l.sw 0x0(r4),r5
   108e8:	d4 03 70 00 	l.sw 0x0(r3),r14
   108ec:	a8 62 03 24 	l.ori r3,r2,0x324
   108f0:	84 83 00 00 	l.lwz r4,0x0(r3)
   108f4:	a4 84 00 01 	l.andi r4,r4,0x1
   108f8:	bc 04 00 00 	l.sfeqi r4,0x0
   108fc:	13 ff ff fd 	l.bf 108f0 <mctl_core_init_standby+0x2294>
   10900:	18 40 04 82 	l.movhi r2,0x482
   10904:	84 70 00 04 	l.lwz r3,0x4(r16)
   10908:	bc 23 00 08 	l.sfnei r3,0x8
   1090c:	10 00 00 6f 	l.bf 10ac8 <mctl_core_init_standby+0x246c>
   10910:	a8 62 00 14 	l.ori r3,r2,0x14
   10914:	84 90 00 20 	l.lwz r4,0x20(r16)
   10918:	a8 42 00 10 	l.ori r2,r2,0x10
   1091c:	d4 03 20 00 	l.sw 0x0(r3),r4
   10920:	18 60 80 00 	l.movhi r3,0x8000
   10924:	a8 63 00 30 	l.ori r3,r3,0x30
   10928:	d4 02 18 00 	l.sw 0x0(r2),r3
   1092c:	84 62 00 00 	l.lwz r3,0x0(r2)
   10930:	bd 83 00 00 	l.sfltsi r3,0x0
   10934:	13 ff ff fe 	l.bf 1092c <mctl_core_init_standby+0x22d0>
   10938:	18 60 04 82 	l.movhi r3,0x482
   1093c:	84 90 00 24 	l.lwz r4,0x24(r16)
   10940:	a8 84 01 00 	l.ori r4,r4,0x100
   10944:	a8 63 00 14 	l.ori r3,r3,0x14
   10948:	d4 03 20 00 	l.sw 0x0(r3),r4
   1094c:	18 60 80 00 	l.movhi r3,0x8000
   10950:	a8 63 00 30 	l.ori r3,r3,0x30
   10954:	d4 02 18 00 	l.sw 0x0(r2),r3
   10958:	84 62 00 00 	l.lwz r3,0x0(r2)
   1095c:	bd 83 00 00 	l.sfltsi r3,0x0
   10960:	13 ff ff fe 	l.bf 10958 <mctl_core_init_standby+0x22fc>
   10964:	18 60 04 82 	l.movhi r3,0x482
   10968:	84 90 00 28 	l.lwz r4,0x28(r16)
   1096c:	a8 84 02 00 	l.ori r4,r4,0x200
   10970:	a8 63 00 14 	l.ori r3,r3,0x14
   10974:	d4 03 20 00 	l.sw 0x0(r3),r4
   10978:	18 60 80 00 	l.movhi r3,0x8000
   1097c:	a8 63 00 30 	l.ori r3,r3,0x30
   10980:	d4 02 18 00 	l.sw 0x0(r2),r3
   10984:	84 62 00 00 	l.lwz r3,0x0(r2)
   10988:	bd 83 00 00 	l.sfltsi r3,0x0
   1098c:	13 ff ff fe 	l.bf 10984 <mctl_core_init_standby+0x2328>
   10990:	18 60 04 82 	l.movhi r3,0x482
   10994:	84 90 00 2c 	l.lwz r4,0x2c(r16)
   10998:	a8 84 03 00 	l.ori r4,r4,0x300
   1099c:	a8 63 00 14 	l.ori r3,r3,0x14
   109a0:	d4 03 20 00 	l.sw 0x0(r3),r4
   109a4:	18 60 80 00 	l.movhi r3,0x8000
   109a8:	a8 63 00 30 	l.ori r3,r3,0x30
   109ac:	d4 02 18 00 	l.sw 0x0(r2),r3
   109b0:	84 62 00 00 	l.lwz r3,0x0(r2)
   109b4:	bd 83 00 00 	l.sfltsi r3,0x0
   109b8:	13 ff ff fe 	l.bf 109b0 <mctl_core_init_standby+0x2354>
   109bc:	18 60 04 82 	l.movhi r3,0x482
   109c0:	84 90 00 30 	l.lwz r4,0x30(r16)
   109c4:	a8 84 04 00 	l.ori r4,r4,0x400
   109c8:	a8 63 00 14 	l.ori r3,r3,0x14
   109cc:	d4 03 20 00 	l.sw 0x0(r3),r4
   109d0:	18 60 80 00 	l.movhi r3,0x8000
   109d4:	a8 63 00 30 	l.ori r3,r3,0x30
   109d8:	d4 02 18 00 	l.sw 0x0(r2),r3
   109dc:	84 62 00 00 	l.lwz r3,0x0(r2)
   109e0:	bd 83 00 00 	l.sfltsi r3,0x0
   109e4:	13 ff ff fe 	l.bf 109dc <mctl_core_init_standby+0x2380>
   109e8:	18 60 04 82 	l.movhi r3,0x482
   109ec:	84 90 00 3c 	l.lwz r4,0x3c(r16)
   109f0:	a8 84 0b 00 	l.ori r4,r4,0xb00
   109f4:	a8 63 00 14 	l.ori r3,r3,0x14
   109f8:	d4 03 20 00 	l.sw 0x0(r3),r4
   109fc:	18 60 80 00 	l.movhi r3,0x8000
   10a00:	a8 63 00 30 	l.ori r3,r3,0x30
   10a04:	d4 02 18 00 	l.sw 0x0(r2),r3
   10a08:	84 62 00 00 	l.lwz r3,0x0(r2)
   10a0c:	bd 83 00 00 	l.sfltsi r3,0x0
   10a10:	13 ff ff fe 	l.bf 10a08 <mctl_core_init_standby+0x23ac>
   10a14:	18 60 04 82 	l.movhi r3,0x482
   10a18:	84 90 00 40 	l.lwz r4,0x40(r16)
   10a1c:	a8 84 0c 00 	l.ori r4,r4,0xc00
   10a20:	a8 63 00 14 	l.ori r3,r3,0x14
   10a24:	d4 03 20 00 	l.sw 0x0(r3),r4
   10a28:	18 60 80 00 	l.movhi r3,0x8000
   10a2c:	a8 63 00 30 	l.ori r3,r3,0x30
   10a30:	d4 02 18 00 	l.sw 0x0(r2),r3
   10a34:	84 62 00 00 	l.lwz r3,0x0(r2)
   10a38:	bd 83 00 00 	l.sfltsi r3,0x0
   10a3c:	13 ff ff fe 	l.bf 10a34 <mctl_core_init_standby+0x23d8>
   10a40:	18 60 04 82 	l.movhi r3,0x482
   10a44:	84 90 00 44 	l.lwz r4,0x44(r16)
   10a48:	a8 84 0d 00 	l.ori r4,r4,0xd00
   10a4c:	a8 63 00 14 	l.ori r3,r3,0x14
   10a50:	d4 03 20 00 	l.sw 0x0(r3),r4
   10a54:	18 60 80 00 	l.movhi r3,0x8000
   10a58:	a8 63 00 30 	l.ori r3,r3,0x30
   10a5c:	d4 02 18 00 	l.sw 0x0(r2),r3
   10a60:	84 62 00 00 	l.lwz r3,0x0(r2)
   10a64:	bd 83 00 00 	l.sfltsi r3,0x0
   10a68:	13 ff ff fe 	l.bf 10a60 <mctl_core_init_standby+0x2404>
   10a6c:	18 60 04 82 	l.movhi r3,0x482
   10a70:	84 90 00 48 	l.lwz r4,0x48(r16)
   10a74:	a8 84 0e 00 	l.ori r4,r4,0xe00
   10a78:	a8 63 00 14 	l.ori r3,r3,0x14
   10a7c:	d4 03 20 00 	l.sw 0x0(r3),r4
   10a80:	18 60 80 00 	l.movhi r3,0x8000
   10a84:	a8 63 00 30 	l.ori r3,r3,0x30
   10a88:	d4 02 18 00 	l.sw 0x0(r2),r3
   10a8c:	84 62 00 00 	l.lwz r3,0x0(r2)
   10a90:	bd 83 00 00 	l.sfltsi r3,0x0
   10a94:	13 ff ff fe 	l.bf 10a8c <mctl_core_init_standby+0x2430>
   10a98:	18 60 04 82 	l.movhi r3,0x482
   10a9c:	84 90 00 54 	l.lwz r4,0x54(r16)
   10aa0:	a8 84 16 00 	l.ori r4,r4,0x1600
   10aa4:	a8 63 00 14 	l.ori r3,r3,0x14
   10aa8:	d4 03 20 00 	l.sw 0x0(r3),r4
   10aac:	18 60 80 00 	l.movhi r3,0x8000
   10ab0:	a8 63 00 30 	l.ori r3,r3,0x30
   10ab4:	d4 02 18 00 	l.sw 0x0(r2),r3
   10ab8:	84 62 00 00 	l.lwz r3,0x0(r2)
   10abc:	bd 83 00 00 	l.sfltsi r3,0x0
   10ac0:	13 ff ff fe 	l.bf 10ab8 <mctl_core_init_standby+0x245c>
   10ac4:	15 00 00 00 	l.nop 0x0
   10ac8:	84 50 00 04 	l.lwz r2,0x4(r16)
   10acc:	bc 22 00 07 	l.sfnei r2,0x7
   10ad0:	10 00 00 32 	l.bf 10b98 <mctl_core_init_standby+0x253c>
   10ad4:	bc 22 00 04 	l.sfnei r2,0x4
   10ad8:	84 90 00 24 	l.lwz r4,0x24(r16)
   10adc:	18 40 04 82 	l.movhi r2,0x482
   10ae0:	a8 84 01 00 	l.ori r4,r4,0x100
   10ae4:	a8 62 00 14 	l.ori r3,r2,0x14
   10ae8:	a8 42 00 10 	l.ori r2,r2,0x10
   10aec:	d4 03 20 00 	l.sw 0x0(r3),r4
   10af0:	18 60 80 00 	l.movhi r3,0x8000
   10af4:	a8 63 00 f0 	l.ori r3,r3,0xf0
   10af8:	d4 02 18 00 	l.sw 0x0(r2),r3
   10afc:	84 62 00 00 	l.lwz r3,0x0(r2)
   10b00:	bd 83 00 00 	l.sfltsi r3,0x0
   10b04:	13 ff ff fe 	l.bf 10afc <mctl_core_init_standby+0x24a0>
   10b08:	18 60 04 82 	l.movhi r3,0x482
   10b0c:	84 90 00 28 	l.lwz r4,0x28(r16)
   10b10:	a8 84 02 00 	l.ori r4,r4,0x200
   10b14:	a8 63 00 14 	l.ori r3,r3,0x14
   10b18:	d4 03 20 00 	l.sw 0x0(r3),r4
   10b1c:	18 60 80 00 	l.movhi r3,0x8000
   10b20:	a8 63 00 f0 	l.ori r3,r3,0xf0
   10b24:	d4 02 18 00 	l.sw 0x0(r2),r3
   10b28:	84 62 00 00 	l.lwz r3,0x0(r2)
   10b2c:	bd 83 00 00 	l.sfltsi r3,0x0
   10b30:	13 ff ff fe 	l.bf 10b28 <mctl_core_init_standby+0x24cc>
   10b34:	18 60 04 82 	l.movhi r3,0x482
   10b38:	84 90 00 2c 	l.lwz r4,0x2c(r16)
   10b3c:	a8 84 03 00 	l.ori r4,r4,0x300
   10b40:	a8 63 00 14 	l.ori r3,r3,0x14
   10b44:	d4 03 20 00 	l.sw 0x0(r3),r4
   10b48:	18 60 80 00 	l.movhi r3,0x8000
   10b4c:	a8 63 00 f0 	l.ori r3,r3,0xf0
   10b50:	d4 02 18 00 	l.sw 0x0(r2),r3
   10b54:	84 62 00 00 	l.lwz r3,0x0(r2)
   10b58:	bd 83 00 00 	l.sfltsi r3,0x0
   10b5c:	13 ff ff fe 	l.bf 10b54 <mctl_core_init_standby+0x24f8>
   10b60:	18 60 04 82 	l.movhi r3,0x482
   10b64:	84 90 00 3c 	l.lwz r4,0x3c(r16)
   10b68:	a8 84 0b 00 	l.ori r4,r4,0xb00
   10b6c:	a8 63 00 14 	l.ori r3,r3,0x14
   10b70:	d4 03 20 00 	l.sw 0x0(r3),r4
   10b74:	18 60 80 00 	l.movhi r3,0x8000
   10b78:	a8 63 00 30 	l.ori r3,r3,0x30
   10b7c:	d4 02 18 00 	l.sw 0x0(r2),r3
   10b80:	84 62 00 00 	l.lwz r3,0x0(r2)
   10b84:	bd 83 00 00 	l.sfltsi r3,0x0
   10b88:	13 ff ff fe 	l.bf 10b80 <mctl_core_init_standby+0x2524>
   10b8c:	15 00 00 00 	l.nop 0x0
   10b90:	84 50 00 04 	l.lwz r2,0x4(r16)
   10b94:	bc 22 00 04 	l.sfnei r2,0x4
   10b98:	10 00 00 49 	l.bf 10cbc <mctl_core_init_standby+0x2660>
   10b9c:	18 40 04 82 	l.movhi r2,0x482
   10ba0:	84 90 00 20 	l.lwz r4,0x20(r16)
   10ba4:	a8 62 00 14 	l.ori r3,r2,0x14
   10ba8:	a8 42 00 10 	l.ori r2,r2,0x10
   10bac:	d4 03 20 00 	l.sw 0x0(r3),r4
   10bb0:	18 60 80 00 	l.movhi r3,0x8000
   10bb4:	a8 63 00 30 	l.ori r3,r3,0x30
   10bb8:	d4 02 18 00 	l.sw 0x0(r2),r3
   10bbc:	84 62 00 00 	l.lwz r3,0x0(r2)
   10bc0:	bd 83 00 00 	l.sfltsi r3,0x0
   10bc4:	13 ff ff fe 	l.bf 10bbc <mctl_core_init_standby+0x2560>
   10bc8:	18 60 04 82 	l.movhi r3,0x482
   10bcc:	84 90 00 24 	l.lwz r4,0x24(r16)
   10bd0:	a8 63 00 14 	l.ori r3,r3,0x14
   10bd4:	d4 03 20 00 	l.sw 0x0(r3),r4
   10bd8:	18 60 80 00 	l.movhi r3,0x8000
   10bdc:	a8 63 10 30 	l.ori r3,r3,0x1030
   10be0:	d4 02 18 00 	l.sw 0x0(r2),r3
   10be4:	84 62 00 00 	l.lwz r3,0x0(r2)
   10be8:	bd 83 00 00 	l.sfltsi r3,0x0
   10bec:	13 ff ff fe 	l.bf 10be4 <mctl_core_init_standby+0x2588>
   10bf0:	18 60 04 82 	l.movhi r3,0x482
   10bf4:	84 90 00 28 	l.lwz r4,0x28(r16)
   10bf8:	a8 63 00 14 	l.ori r3,r3,0x14
   10bfc:	d4 03 20 00 	l.sw 0x0(r3),r4
   10c00:	18 60 80 00 	l.movhi r3,0x8000
   10c04:	a8 63 20 30 	l.ori r3,r3,0x2030
   10c08:	d4 02 18 00 	l.sw 0x0(r2),r3
   10c0c:	84 62 00 00 	l.lwz r3,0x0(r2)
   10c10:	bd 83 00 00 	l.sfltsi r3,0x0
   10c14:	13 ff ff fe 	l.bf 10c0c <mctl_core_init_standby+0x25b0>
   10c18:	18 60 04 82 	l.movhi r3,0x482
   10c1c:	84 90 00 2c 	l.lwz r4,0x2c(r16)
   10c20:	a8 63 00 14 	l.ori r3,r3,0x14
   10c24:	d4 03 20 00 	l.sw 0x0(r3),r4
   10c28:	18 60 80 00 	l.movhi r3,0x8000
   10c2c:	a8 63 30 30 	l.ori r3,r3,0x3030
   10c30:	d4 02 18 00 	l.sw 0x0(r2),r3
   10c34:	84 62 00 00 	l.lwz r3,0x0(r2)
   10c38:	bd 83 00 00 	l.sfltsi r3,0x0
   10c3c:	13 ff ff fe 	l.bf 10c34 <mctl_core_init_standby+0x25d8>
   10c40:	18 60 04 82 	l.movhi r3,0x482
   10c44:	84 90 00 30 	l.lwz r4,0x30(r16)
   10c48:	a8 63 00 14 	l.ori r3,r3,0x14
   10c4c:	d4 03 20 00 	l.sw 0x0(r3),r4
   10c50:	18 60 80 00 	l.movhi r3,0x8000
   10c54:	a8 63 40 30 	l.ori r3,r3,0x4030
   10c58:	d4 02 18 00 	l.sw 0x0(r2),r3
   10c5c:	84 62 00 00 	l.lwz r3,0x0(r2)
   10c60:	bd 83 00 00 	l.sfltsi r3,0x0
   10c64:	13 ff ff fe 	l.bf 10c5c <mctl_core_init_standby+0x2600>
   10c68:	18 60 04 82 	l.movhi r3,0x482
   10c6c:	84 90 00 34 	l.lwz r4,0x34(r16)
   10c70:	a8 63 00 14 	l.ori r3,r3,0x14
   10c74:	d4 03 20 00 	l.sw 0x0(r3),r4
   10c78:	18 60 80 00 	l.movhi r3,0x8000
   10c7c:	a8 63 50 30 	l.ori r3,r3,0x5030
   10c80:	d4 02 18 00 	l.sw 0x0(r2),r3
   10c84:	84 62 00 00 	l.lwz r3,0x0(r2)
   10c88:	bd 83 00 00 	l.sfltsi r3,0x0
   10c8c:	13 ff ff fe 	l.bf 10c84 <mctl_core_init_standby+0x2628>
   10c90:	18 60 04 82 	l.movhi r3,0x482
   10c94:	84 90 00 38 	l.lwz r4,0x38(r16)
   10c98:	a8 63 00 14 	l.ori r3,r3,0x14
   10c9c:	d4 03 20 00 	l.sw 0x0(r3),r4
   10ca0:	18 60 80 00 	l.movhi r3,0x8000
   10ca4:	a8 63 60 30 	l.ori r3,r3,0x6030
   10ca8:	d4 02 18 00 	l.sw 0x0(r2),r3
   10cac:	84 62 00 00 	l.lwz r3,0x0(r2)
   10cb0:	bd 83 00 00 	l.sfltsi r3,0x0
   10cb4:	13 ff ff fe 	l.bf 10cac <mctl_core_init_standby+0x2650>
   10cb8:	15 00 00 00 	l.nop 0x0
   10cbc:	84 50 00 04 	l.lwz r2,0x4(r16)
   10cc0:	bc 22 00 03 	l.sfnei r2,0x3
   10cc4:	10 00 00 2d 	l.bf 10d78 <mctl_core_init_standby+0x271c>
   10cc8:	18 40 04 83 	l.movhi r2,0x483
   10ccc:	18 40 04 82 	l.movhi r2,0x482
   10cd0:	84 90 00 20 	l.lwz r4,0x20(r16)
   10cd4:	a8 62 00 14 	l.ori r3,r2,0x14
   10cd8:	a8 42 00 10 	l.ori r2,r2,0x10
   10cdc:	d4 03 20 00 	l.sw 0x0(r3),r4
   10ce0:	18 60 80 00 	l.movhi r3,0x8000
   10ce4:	a8 63 00 30 	l.ori r3,r3,0x30
   10ce8:	d4 02 18 00 	l.sw 0x0(r2),r3
   10cec:	84 62 00 00 	l.lwz r3,0x0(r2)
   10cf0:	bd 83 00 00 	l.sfltsi r3,0x0
   10cf4:	13 ff ff fe 	l.bf 10cec <mctl_core_init_standby+0x2690>
   10cf8:	18 60 04 82 	l.movhi r3,0x482
   10cfc:	84 90 00 24 	l.lwz r4,0x24(r16)
   10d00:	a8 63 00 14 	l.ori r3,r3,0x14
   10d04:	d4 03 20 00 	l.sw 0x0(r3),r4
   10d08:	18 60 80 00 	l.movhi r3,0x8000
   10d0c:	a8 63 10 30 	l.ori r3,r3,0x1030
   10d10:	d4 02 18 00 	l.sw 0x0(r2),r3
   10d14:	84 62 00 00 	l.lwz r3,0x0(r2)
   10d18:	bd 83 00 00 	l.sfltsi r3,0x0
   10d1c:	13 ff ff fe 	l.bf 10d14 <mctl_core_init_standby+0x26b8>
   10d20:	18 60 04 82 	l.movhi r3,0x482
   10d24:	84 90 00 28 	l.lwz r4,0x28(r16)
   10d28:	a8 63 00 14 	l.ori r3,r3,0x14
   10d2c:	d4 03 20 00 	l.sw 0x0(r3),r4
   10d30:	18 60 80 00 	l.movhi r3,0x8000
   10d34:	a8 63 20 30 	l.ori r3,r3,0x2030
   10d38:	d4 02 18 00 	l.sw 0x0(r2),r3
   10d3c:	84 62 00 00 	l.lwz r3,0x0(r2)
   10d40:	bd 83 00 00 	l.sfltsi r3,0x0
   10d44:	13 ff ff fe 	l.bf 10d3c <mctl_core_init_standby+0x26e0>
   10d48:	18 60 04 82 	l.movhi r3,0x482
   10d4c:	84 90 00 2c 	l.lwz r4,0x2c(r16)
   10d50:	a8 63 00 14 	l.ori r3,r3,0x14
   10d54:	d4 03 20 00 	l.sw 0x0(r3),r4
   10d58:	18 60 80 00 	l.movhi r3,0x8000
   10d5c:	a8 63 30 30 	l.ori r3,r3,0x3030
   10d60:	d4 02 18 00 	l.sw 0x0(r2),r3
   10d64:	84 62 00 00 	l.lwz r3,0x0(r2)
   10d68:	bd 83 00 00 	l.sfltsi r3,0x0
   10d6c:	13 ff ff fe 	l.bf 10d64 <mctl_core_init_standby+0x2708>
   10d70:	15 00 00 00 	l.nop 0x0
   10d74:	18 40 04 83 	l.movhi r2,0x483
   10d78:	19 c0 04 82 	l.movhi r14,0x482
   10d7c:	9c 60 00 00 	l.addi r3,r0,0x0
   10d80:	a8 42 00 54 	l.ori r2,r2,0x54
   10d84:	a9 ce 03 20 	l.ori r14,r14,0x320
   10d88:	d4 02 18 00 	l.sw 0x0(r2),r3
   10d8c:	d4 0e 18 00 	l.sw 0x0(r14),r3
   10d90:	07 ff f5 cf 	l.jal e4cc <mctl_com_set_controller_refresh_standby.clone.1>
   10d94:	9c 40 00 01 	l.addi r2,r0,0x1
   10d98:	d4 0e 10 00 	l.sw 0x0(r14),r2
   10d9c:	18 80 00 10 	l.movhi r4,0x10
   10da0:	84 70 00 6c 	l.lwz r3,0x6c(r16)
   10da4:	e2 c3 20 03 	l.and r22,r3,r4
   10da8:	bc 16 00 00 	l.sfeqi r22,0x0
   10dac:	10 00 00 1d 	l.bf 10e20 <mctl_core_init_standby+0x27c4>
   10db0:	18 c0 00 20 	l.movhi r6,0x20
   10db4:	18 a0 00 08 	l.movhi r5,0x8
   10db8:	e0 63 28 03 	l.and r3,r3,r5
   10dbc:	bc 03 00 00 	l.sfeqi r3,0x0
   10dc0:	10 00 00 0e 	l.bf 10df8 <mctl_core_init_standby+0x279c>
   10dc4:	9d c0 00 00 	l.addi r14,r0,0x0
   10dc8:	07 ff f2 7c 	l.jal d7b8 <phy_write_leveling_standby>
   10dcc:	a8 70 00 00 	l.ori r3,r16,0x0
   10dd0:	bc 2b 00 01 	l.sfnei r11,0x1
   10dd4:	10 00 00 03 	l.bf 10de0 <mctl_core_init_standby+0x2784>
   10dd8:	a8 4b 00 00 	l.ori r2,r11,0x0
   10ddc:	9d c0 00 05 	l.addi r14,r0,0x5
   10de0:	9d ce 00 01 	l.addi r14,r14,0x1
   10de4:	bc ae 00 04 	l.sfleui r14,0x4
   10de8:	13 ff ff f8 	l.bf 10dc8 <mctl_core_init_standby+0x276c>
   10dec:	15 00 00 00 	l.nop 0x0
   10df0:	00 00 00 06 	l.j 10e08 <mctl_core_init_standby+0x27ac>
   10df4:	9e c0 00 01 	l.addi r22,r0,0x1
   10df8:	07 ff f2 70 	l.jal d7b8 <phy_write_leveling_standby>
   10dfc:	a8 70 00 00 	l.ori r3,r16,0x0
   10e00:	a8 4b 00 00 	l.ori r2,r11,0x0
   10e04:	9e c0 00 01 	l.addi r22,r0,0x1
   10e08:	bc 02 00 00 	l.sfeqi r2,0x0
   10e0c:	10 00 00 03 	l.bf 10e18 <mctl_core_init_standby+0x27bc>
   10e10:	15 00 00 00 	l.nop 0x0
   10e14:	9e c0 00 00 	l.addi r22,r0,0x0
   10e18:	84 70 00 6c 	l.lwz r3,0x6c(r16)
   10e1c:	18 c0 00 20 	l.movhi r6,0x20
   10e20:	e1 c3 30 03 	l.and r14,r3,r6
   10e24:	bc 0e 00 00 	l.sfeqi r14,0x0
   10e28:	10 00 00 1c 	l.bf 10e98 <mctl_core_init_standby+0x283c>
   10e2c:	af 0e 00 01 	l.xori r24,r14,0x1
   10e30:	18 e0 00 08 	l.movhi r7,0x8
   10e34:	e0 63 38 03 	l.and r3,r3,r7
   10e38:	bc 03 00 00 	l.sfeqi r3,0x0
   10e3c:	10 00 00 0e 	l.bf 10e74 <mctl_core_init_standby+0x2818>
   10e40:	9e 80 00 00 	l.addi r20,r0,0x0
   10e44:	07 ff f2 eb 	l.jal d9f0 <phy_read_calibration_standby>
   10e48:	a8 70 00 00 	l.ori r3,r16,0x0
   10e4c:	bc 2b 00 01 	l.sfnei r11,0x1
   10e50:	10 00 00 03 	l.bf 10e5c <mctl_core_init_standby+0x2800>
   10e54:	a8 4b 00 00 	l.ori r2,r11,0x0
   10e58:	9e 80 00 05 	l.addi r20,r0,0x5
   10e5c:	9e 94 00 01 	l.addi r20,r20,0x1
   10e60:	bc b4 00 04 	l.sfleui r20,0x4
   10e64:	13 ff ff f8 	l.bf 10e44 <mctl_core_init_standby+0x27e8>
   10e68:	15 00 00 00 	l.nop 0x0
   10e6c:	00 00 00 06 	l.j 10e84 <mctl_core_init_standby+0x2828>
   10e70:	9d c0 00 01 	l.addi r14,r0,0x1
   10e74:	07 ff f2 df 	l.jal d9f0 <phy_read_calibration_standby>
   10e78:	a8 70 00 00 	l.ori r3,r16,0x0
   10e7c:	a8 4b 00 00 	l.ori r2,r11,0x0
   10e80:	9d c0 00 01 	l.addi r14,r0,0x1
   10e84:	bc 02 00 00 	l.sfeqi r2,0x0
   10e88:	10 00 00 04 	l.bf 10e98 <mctl_core_init_standby+0x283c>
   10e8c:	af 0e 00 01 	l.xori r24,r14,0x1
   10e90:	9d c0 00 00 	l.addi r14,r0,0x0
   10e94:	af 0e 00 01 	l.xori r24,r14,0x1
   10e98:	e3 00 c0 02 	l.sub r24,r0,r24
   10e9c:	bb 18 00 5f 	l.srli r24,r24,0x1f
   10ea0:	bc 18 00 00 	l.sfeqi r24,0x0
   10ea4:	10 00 00 1f 	l.bf 10f20 <mctl_core_init_standby+0x28c4>
   10ea8:	84 70 00 6c 	l.lwz r3,0x6c(r16)
   10eac:	b8 83 00 56 	l.srli r4,r3,0x16
   10eb0:	a4 84 00 01 	l.andi r4,r4,0x1
   10eb4:	bc 04 00 00 	l.sfeqi r4,0x0
   10eb8:	10 00 00 1b 	l.bf 10f24 <mctl_core_init_standby+0x28c8>
   10ebc:	9e 40 00 00 	l.addi r18,r0,0x0
   10ec0:	19 00 00 08 	l.movhi r8,0x8
   10ec4:	e0 63 40 03 	l.and r3,r3,r8
   10ec8:	bc 03 00 00 	l.sfeqi r3,0x0
   10ecc:	10 00 00 0e 	l.bf 10f04 <mctl_core_init_standby+0x28a8>
   10ed0:	9e 80 00 00 	l.addi r20,r0,0x0
   10ed4:	07 ff f3 46 	l.jal dbec <phy_read_training_standby>
   10ed8:	a8 70 00 00 	l.ori r3,r16,0x0
   10edc:	bc 2b 00 01 	l.sfnei r11,0x1
   10ee0:	10 00 00 03 	l.bf 10eec <mctl_core_init_standby+0x2890>
   10ee4:	a8 4b 00 00 	l.ori r2,r11,0x0
   10ee8:	9e 80 00 05 	l.addi r20,r0,0x5
   10eec:	9e 94 00 01 	l.addi r20,r20,0x1
   10ef0:	bc b4 00 04 	l.sfleui r20,0x4
   10ef4:	13 ff ff f8 	l.bf 10ed4 <mctl_core_init_standby+0x2878>
   10ef8:	9e 40 00 01 	l.addi r18,r0,0x1
   10efc:	00 00 00 07 	l.j 10f18 <mctl_core_init_standby+0x28bc>
   10f00:	bc 02 00 00 	l.sfeqi r2,0x0
   10f04:	07 ff f3 3a 	l.jal dbec <phy_read_training_standby>
   10f08:	a8 70 00 00 	l.ori r3,r16,0x0
   10f0c:	a8 4b 00 00 	l.ori r2,r11,0x0
   10f10:	9e 40 00 01 	l.addi r18,r0,0x1
   10f14:	bc 02 00 00 	l.sfeqi r2,0x0
   10f18:	10 00 00 04 	l.bf 10f28 <mctl_core_init_standby+0x28cc>
   10f1c:	bc 18 00 00 	l.sfeqi r24,0x0
   10f20:	9e 40 00 00 	l.addi r18,r0,0x0
   10f24:	bc 18 00 00 	l.sfeqi r24,0x0
   10f28:	10 00 00 1e 	l.bf 10fa0 <mctl_core_init_standby+0x2944>
   10f2c:	84 70 00 6c 	l.lwz r3,0x6c(r16)
   10f30:	b8 83 00 57 	l.srli r4,r3,0x17
   10f34:	a4 84 00 01 	l.andi r4,r4,0x1
   10f38:	bc 04 00 00 	l.sfeqi r4,0x0
   10f3c:	10 00 00 19 	l.bf 10fa0 <mctl_core_init_standby+0x2944>
   10f40:	19 60 00 08 	l.movhi r11,0x8
   10f44:	e0 63 58 03 	l.and r3,r3,r11
   10f48:	bc 03 00 00 	l.sfeqi r3,0x0
   10f4c:	10 00 00 0e 	l.bf 10f84 <mctl_core_init_standby+0x2928>
   10f50:	9e 80 00 00 	l.addi r20,r0,0x0
   10f54:	07 ff f4 4f 	l.jal e090 <phy_write_training_standby>
   10f58:	a8 70 00 00 	l.ori r3,r16,0x0
   10f5c:	bc 2b 00 01 	l.sfnei r11,0x1
   10f60:	10 00 00 03 	l.bf 10f6c <mctl_core_init_standby+0x2910>
   10f64:	a8 4b 00 00 	l.ori r2,r11,0x0
   10f68:	9e 80 00 05 	l.addi r20,r0,0x5
   10f6c:	9e 94 00 01 	l.addi r20,r20,0x1
   10f70:	bc b4 00 04 	l.sfleui r20,0x4
   10f74:	13 ff ff f8 	l.bf 10f54 <mctl_core_init_standby+0x28f8>
   10f78:	9c 60 00 01 	l.addi r3,r0,0x1
   10f7c:	00 00 00 07 	l.j 10f98 <mctl_core_init_standby+0x293c>
   10f80:	bc 02 00 00 	l.sfeqi r2,0x0
   10f84:	07 ff f4 43 	l.jal e090 <phy_write_training_standby>
   10f88:	a8 70 00 00 	l.ori r3,r16,0x0
   10f8c:	a8 4b 00 00 	l.ori r2,r11,0x0
   10f90:	9c 60 00 01 	l.addi r3,r0,0x1
   10f94:	bc 02 00 00 	l.sfeqi r2,0x0
   10f98:	10 00 00 03 	l.bf 10fa4 <mctl_core_init_standby+0x2948>
   10f9c:	15 00 00 00 	l.nop 0x0
   10fa0:	9c 60 00 00 	l.addi r3,r0,0x0
   10fa4:	84 90 00 6c 	l.lwz r4,0x6c(r16)
   10fa8:	18 a0 00 08 	l.movhi r5,0x8
   10fac:	e0 84 28 03 	l.and r4,r4,r5
   10fb0:	bc 04 00 00 	l.sfeqi r4,0x0
   10fb4:	10 00 00 14 	l.bf 11004 <mctl_core_init_standby+0x29a8>
   10fb8:	e1 ce b0 04 	l.or r14,r14,r22
   10fbc:	e1 ce 90 04 	l.or r14,r14,r18
   10fc0:	e0 6e 18 04 	l.or r3,r14,r3
   10fc4:	bc 03 00 00 	l.sfeqi r3,0x0
   10fc8:	10 00 00 14 	l.bf 11018 <mctl_core_init_standby+0x29bc>
   10fcc:	19 c0 00 01 	l.movhi r14,0x1
   10fd0:	9c 40 00 00 	l.addi r2,r0,0x0
   10fd4:	a9 ce 35 e8 	l.ori r14,r14,0x35e8
   10fd8:	84 6e 00 00 	l.lwz r3,0x0(r14)
   10fdc:	9c 63 00 01 	l.addi r3,r3,0x1
   10fe0:	bc 03 00 0a 	l.sfeqi r3,0xa
   10fe4:	10 00 00 fb 	l.bf 113d0 <mctl_core_init_standby+0x2d74>
   10fe8:	d4 0e 18 00 	l.sw 0x0(r14),r3
   10fec:	07 ff f5 9c 	l.jal e65c <mctl_core_init_standby>
   10ff0:	a8 70 00 00 	l.ori r3,r16,0x0
   10ff4:	9c c0 00 00 	l.addi r6,r0,0x0
   10ff8:	a8 4b 00 00 	l.ori r2,r11,0x0
   10ffc:	00 00 00 07 	l.j 11018 <mctl_core_init_standby+0x29bc>
   11000:	d4 0e 30 00 	l.sw 0x0(r14),r6
   11004:	e1 ce 90 04 	l.or r14,r14,r18
   11008:	e0 6e 18 04 	l.or r3,r14,r3
   1100c:	bc 23 00 00 	l.sfnei r3,0x0
   11010:	10 00 00 ef 	l.bf 113cc <mctl_core_init_standby+0x2d70>
   11014:	15 00 00 00 	l.nop 0x0
   11018:	84 70 00 6c 	l.lwz r3,0x6c(r16)
   1101c:	18 e0 00 04 	l.movhi r7,0x4
   11020:	e0 63 38 03 	l.and r3,r3,r7
   11024:	bc 03 00 00 	l.sfeqi r3,0x0
   11028:	10 00 00 77 	l.bf 11204 <mctl_core_init_standby+0x2ba8>
   1102c:	18 60 04 83 	l.movhi r3,0x483
   11030:	9d 00 ff fe 	l.addi r8,r0,0xfffffffe
   11034:	a8 83 00 60 	l.ori r4,r3,0x60
   11038:	9d 60 ff ef 	l.addi r11,r0,0xffffffef
   1103c:	84 a4 00 00 	l.lwz r5,0x0(r4)
   11040:	e0 a5 40 03 	l.and r5,r5,r8
   11044:	d4 04 28 00 	l.sw 0x0(r4),r5
   11048:	a8 83 00 08 	l.ori r4,r3,0x8
   1104c:	84 a4 00 00 	l.lwz r5,0x0(r4)
   11050:	a8 a5 00 08 	l.ori r5,r5,0x8
   11054:	d4 04 28 00 	l.sw 0x0(r4),r5
   11058:	a8 83 01 90 	l.ori r4,r3,0x190
   1105c:	84 a4 00 00 	l.lwz r5,0x0(r4)
   11060:	e0 a5 58 03 	l.and r5,r5,r11
   11064:	d4 04 28 00 	l.sw 0x0(r4),r5
   11068:	84 90 00 04 	l.lwz r4,0x4(r16)
   1106c:	bc 24 00 08 	l.sfnei r4,0x8
   11070:	10 00 00 06 	l.bf 11088 <mctl_core_init_standby+0x2a2c>
   11074:	a8 63 00 04 	l.ori r3,r3,0x4
   11078:	9c a0 ff 7f 	l.addi r5,r0,0xffffff7f
   1107c:	84 83 00 00 	l.lwz r4,0x0(r3)
   11080:	e0 84 28 03 	l.and r4,r4,r5
   11084:	d4 03 20 00 	l.sw 0x0(r3),r4
   11088:	84 70 00 70 	l.lwz r3,0x70(r16)
   1108c:	18 a0 04 83 	l.movhi r5,0x483
   11090:	a4 63 00 3f 	l.andi r3,r3,0x3f
   11094:	a8 a5 04 84 	l.ori r5,r5,0x484
   11098:	9c 85 00 c0 	l.addi r4,r5,0xc0
   1109c:	18 c0 04 83 	l.movhi r6,0x483
   110a0:	d4 05 18 00 	l.sw 0x0(r5),r3
   110a4:	a8 c6 04 cc 	l.ori r6,r6,0x4cc
   110a8:	9c a5 00 08 	l.addi r5,r5,0x8
   110ac:	d4 04 18 00 	l.sw 0x0(r4),r3
   110b0:	e4 25 30 00 	l.sfne r5,r6
   110b4:	13 ff ff fa 	l.bf 1109c <mctl_core_init_standby+0x2a40>
   110b8:	9c 85 00 c0 	l.addi r4,r5,0xc0
   110bc:	84 70 00 14 	l.lwz r3,0x14(r16)
   110c0:	18 80 04 83 	l.movhi r4,0x483
   110c4:	a4 63 00 3f 	l.andi r3,r3,0x3f
   110c8:	a8 c4 04 d0 	l.ori r6,r4,0x4d0
   110cc:	d4 06 18 00 	l.sw 0x0(r6),r3
   110d0:	a8 c4 05 90 	l.ori r6,r4,0x590
   110d4:	d4 06 18 00 	l.sw 0x0(r6),r3
   110d8:	d4 05 18 00 	l.sw 0x0(r5),r3
   110dc:	a8 a4 05 8c 	l.ori r5,r4,0x58c
   110e0:	a8 84 04 d8 	l.ori r4,r4,0x4d8
   110e4:	d4 05 18 00 	l.sw 0x0(r5),r3
   110e8:	84 70 00 70 	l.lwz r3,0x70(r16)
   110ec:	b8 63 00 48 	l.srli r3,r3,0x8
   110f0:	a4 63 00 3f 	l.andi r3,r3,0x3f
   110f4:	9c a4 00 c0 	l.addi r5,r4,0xc0
   110f8:	18 e0 04 83 	l.movhi r7,0x483
   110fc:	d4 04 18 00 	l.sw 0x0(r4),r3
   11100:	a8 e7 05 20 	l.ori r7,r7,0x520
   11104:	9c 84 00 08 	l.addi r4,r4,0x8
   11108:	d4 05 18 00 	l.sw 0x0(r5),r3
   1110c:	e4 24 38 00 	l.sfne r4,r7
   11110:	13 ff ff fa 	l.bf 110f8 <mctl_core_init_standby+0x2a9c>
   11114:	9c a4 00 c0 	l.addi r5,r4,0xc0
   11118:	84 70 00 14 	l.lwz r3,0x14(r16)
   1111c:	18 a0 04 83 	l.movhi r5,0x483
   11120:	b8 63 00 48 	l.srli r3,r3,0x8
   11124:	a8 c5 05 24 	l.ori r6,r5,0x524
   11128:	a4 63 00 3f 	l.andi r3,r3,0x3f
   1112c:	d4 06 18 00 	l.sw 0x0(r6),r3
   11130:	a8 c5 05 e4 	l.ori r6,r5,0x5e4
   11134:	d4 06 18 00 	l.sw 0x0(r6),r3
   11138:	d4 04 18 00 	l.sw 0x0(r4),r3
   1113c:	a8 85 05 e0 	l.ori r4,r5,0x5e0
   11140:	a8 a5 06 04 	l.ori r5,r5,0x604
   11144:	d4 04 18 00 	l.sw 0x0(r4),r3
   11148:	94 70 00 70 	l.lhz r3,0x70(r16)
   1114c:	a4 63 00 3f 	l.andi r3,r3,0x3f
   11150:	9c 85 00 c0 	l.addi r4,r5,0xc0
   11154:	19 00 04 83 	l.movhi r8,0x483
   11158:	d4 05 18 00 	l.sw 0x0(r5),r3
   1115c:	a9 08 06 4c 	l.ori r8,r8,0x64c
   11160:	9c a5 00 08 	l.addi r5,r5,0x8
   11164:	d4 04 18 00 	l.sw 0x0(r4),r3
   11168:	e4 25 40 00 	l.sfne r5,r8
   1116c:	13 ff ff fa 	l.bf 11154 <mctl_core_init_standby+0x2af8>
   11170:	9c 85 00 c0 	l.addi r4,r5,0xc0
   11174:	94 70 00 14 	l.lhz r3,0x14(r16)
   11178:	18 80 04 83 	l.movhi r4,0x483
   1117c:	a4 63 00 3f 	l.andi r3,r3,0x3f
   11180:	a8 c4 06 50 	l.ori r6,r4,0x650
   11184:	d4 06 18 00 	l.sw 0x0(r6),r3
   11188:	a8 c4 07 10 	l.ori r6,r4,0x710
   1118c:	d4 06 18 00 	l.sw 0x0(r6),r3
   11190:	d4 05 18 00 	l.sw 0x0(r5),r3
   11194:	a8 a4 07 0c 	l.ori r5,r4,0x70c
   11198:	a8 84 06 58 	l.ori r4,r4,0x658
   1119c:	d4 05 18 00 	l.sw 0x0(r5),r3
   111a0:	8c 70 00 70 	l.lbz r3,0x70(r16)
   111a4:	a4 63 00 3f 	l.andi r3,r3,0x3f
   111a8:	9c a4 00 c0 	l.addi r5,r4,0xc0
   111ac:	19 60 04 83 	l.movhi r11,0x483
   111b0:	d4 04 18 00 	l.sw 0x0(r4),r3
   111b4:	a9 6b 06 a0 	l.ori r11,r11,0x6a0
   111b8:	9c 84 00 08 	l.addi r4,r4,0x8
   111bc:	d4 05 18 00 	l.sw 0x0(r5),r3
   111c0:	e4 24 58 00 	l.sfne r4,r11
   111c4:	13 ff ff fa 	l.bf 111ac <mctl_core_init_standby+0x2b50>
   111c8:	9c a4 00 c0 	l.addi r5,r4,0xc0
   111cc:	8c b0 00 14 	l.lbz r5,0x14(r16)
   111d0:	18 60 04 83 	l.movhi r3,0x483
   111d4:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   111d8:	a8 c3 06 a4 	l.ori r6,r3,0x6a4
   111dc:	d4 06 28 00 	l.sw 0x0(r6),r5
   111e0:	a8 c3 07 64 	l.ori r6,r3,0x764
   111e4:	d4 06 28 00 	l.sw 0x0(r6),r5
   111e8:	d4 04 28 00 	l.sw 0x0(r4),r5
   111ec:	a8 83 07 60 	l.ori r4,r3,0x760
   111f0:	a8 63 00 60 	l.ori r3,r3,0x60
   111f4:	d4 04 28 00 	l.sw 0x0(r4),r5
   111f8:	84 83 00 00 	l.lwz r4,0x0(r3)
   111fc:	a8 84 00 01 	l.ori r4,r4,0x1
   11200:	d4 03 20 00 	l.sw 0x0(r3),r4
   11204:	84 70 00 6c 	l.lwz r3,0x6c(r16)
   11208:	18 80 00 02 	l.movhi r4,0x2
   1120c:	e0 63 20 03 	l.and r3,r3,r4
   11210:	bc 03 00 00 	l.sfeqi r3,0x0
   11214:	10 00 00 6a 	l.bf 113bc <mctl_core_init_standby+0x2d60>
   11218:	18 a0 04 83 	l.movhi r5,0x483
   1121c:	9c c0 ff 7f 	l.addi r6,r0,0xffffff7f
   11220:	a8 65 00 54 	l.ori r3,r5,0x54
   11224:	9c e0 ff fb 	l.addi r7,r0,0xfffffffb
   11228:	84 83 00 00 	l.lwz r4,0x0(r3)
   1122c:	e0 84 30 03 	l.and r4,r4,r6
   11230:	d4 03 20 00 	l.sw 0x0(r3),r4
   11234:	a8 65 01 90 	l.ori r3,r5,0x190
   11238:	a8 a5 04 80 	l.ori r5,r5,0x480
   1123c:	84 83 00 00 	l.lwz r4,0x0(r3)
   11240:	e0 84 38 03 	l.and r4,r4,r7
   11244:	d4 03 20 00 	l.sw 0x0(r3),r4
   11248:	84 70 00 74 	l.lwz r3,0x74(r16)
   1124c:	a4 63 00 3f 	l.andi r3,r3,0x3f
   11250:	9c 85 00 c0 	l.addi r4,r5,0xc0
   11254:	19 00 04 83 	l.movhi r8,0x483
   11258:	d4 05 18 00 	l.sw 0x0(r5),r3
   1125c:	a9 08 04 c8 	l.ori r8,r8,0x4c8
   11260:	9c a5 00 08 	l.addi r5,r5,0x8
   11264:	d4 04 18 00 	l.sw 0x0(r4),r3
   11268:	e4 25 40 00 	l.sfne r5,r8
   1126c:	13 ff ff fa 	l.bf 11254 <mctl_core_init_standby+0x2bf8>
   11270:	9c 85 00 c0 	l.addi r4,r5,0xc0
   11274:	84 70 00 7c 	l.lwz r3,0x7c(r16)
   11278:	18 80 04 83 	l.movhi r4,0x483
   1127c:	a4 63 00 3f 	l.andi r3,r3,0x3f
   11280:	a8 c4 05 28 	l.ori r6,r4,0x528
   11284:	d4 06 18 00 	l.sw 0x0(r6),r3
   11288:	a8 c4 05 e8 	l.ori r6,r4,0x5e8
   1128c:	d4 06 18 00 	l.sw 0x0(r6),r3
   11290:	d4 05 18 00 	l.sw 0x0(r5),r3
   11294:	a8 a4 05 88 	l.ori r5,r4,0x588
   11298:	a8 84 04 d4 	l.ori r4,r4,0x4d4
   1129c:	d4 05 18 00 	l.sw 0x0(r5),r3
   112a0:	84 70 00 74 	l.lwz r3,0x74(r16)
   112a4:	b8 63 00 48 	l.srli r3,r3,0x8
   112a8:	a4 63 00 3f 	l.andi r3,r3,0x3f
   112ac:	9c a4 00 c0 	l.addi r5,r4,0xc0
   112b0:	19 60 04 83 	l.movhi r11,0x483
   112b4:	d4 04 18 00 	l.sw 0x0(r4),r3
   112b8:	a9 6b 05 1c 	l.ori r11,r11,0x51c
   112bc:	9c 84 00 08 	l.addi r4,r4,0x8
   112c0:	d4 05 18 00 	l.sw 0x0(r5),r3
   112c4:	e4 24 58 00 	l.sfne r4,r11
   112c8:	13 ff ff fa 	l.bf 112b0 <mctl_core_init_standby+0x2c54>
   112cc:	9c a4 00 c0 	l.addi r5,r4,0xc0
   112d0:	84 70 00 7c 	l.lwz r3,0x7c(r16)
   112d4:	18 a0 04 83 	l.movhi r5,0x483
   112d8:	b8 63 00 48 	l.srli r3,r3,0x8
   112dc:	a8 c5 05 2c 	l.ori r6,r5,0x52c
   112e0:	a4 63 00 3f 	l.andi r3,r3,0x3f
   112e4:	d4 06 18 00 	l.sw 0x0(r6),r3
   112e8:	a8 c5 05 ec 	l.ori r6,r5,0x5ec
   112ec:	d4 06 18 00 	l.sw 0x0(r6),r3
   112f0:	d4 04 18 00 	l.sw 0x0(r4),r3
   112f4:	a8 85 05 dc 	l.ori r4,r5,0x5dc
   112f8:	a8 a5 06 00 	l.ori r5,r5,0x600
   112fc:	d4 04 18 00 	l.sw 0x0(r4),r3
   11300:	94 70 00 74 	l.lhz r3,0x74(r16)
   11304:	a4 63 00 3f 	l.andi r3,r3,0x3f
   11308:	9c 85 00 c0 	l.addi r4,r5,0xc0
   1130c:	d4 05 18 00 	l.sw 0x0(r5),r3
   11310:	d4 04 18 00 	l.sw 0x0(r4),r3
   11314:	18 80 04 83 	l.movhi r4,0x483
   11318:	9c a5 00 08 	l.addi r5,r5,0x8
   1131c:	a8 84 06 48 	l.ori r4,r4,0x648
   11320:	e4 25 20 00 	l.sfne r5,r4
   11324:	13 ff ff fa 	l.bf 1130c <mctl_core_init_standby+0x2cb0>
   11328:	9c 85 00 c0 	l.addi r4,r5,0xc0
   1132c:	94 70 00 7c 	l.lhz r3,0x7c(r16)
   11330:	18 80 04 83 	l.movhi r4,0x483
   11334:	a4 63 00 3f 	l.andi r3,r3,0x3f
   11338:	a8 c4 06 a8 	l.ori r6,r4,0x6a8
   1133c:	d4 06 18 00 	l.sw 0x0(r6),r3
   11340:	a8 c4 07 68 	l.ori r6,r4,0x768
   11344:	d4 06 18 00 	l.sw 0x0(r6),r3
   11348:	d4 05 18 00 	l.sw 0x0(r5),r3
   1134c:	a8 a4 07 08 	l.ori r5,r4,0x708
   11350:	a8 84 06 54 	l.ori r4,r4,0x654
   11354:	d4 05 18 00 	l.sw 0x0(r5),r3
   11358:	8c 70 00 74 	l.lbz r3,0x74(r16)
   1135c:	a4 63 00 3f 	l.andi r3,r3,0x3f
   11360:	9c a4 00 c0 	l.addi r5,r4,0xc0
   11364:	d4 04 18 00 	l.sw 0x0(r4),r3
   11368:	d4 05 18 00 	l.sw 0x0(r5),r3
   1136c:	18 a0 04 83 	l.movhi r5,0x483
   11370:	9c 84 00 08 	l.addi r4,r4,0x8
   11374:	a8 a5 06 9c 	l.ori r5,r5,0x69c
   11378:	e4 24 28 00 	l.sfne r4,r5
   1137c:	13 ff ff fa 	l.bf 11364 <mctl_core_init_standby+0x2d08>
   11380:	9c a4 00 c0 	l.addi r5,r4,0xc0
   11384:	8c b0 00 7c 	l.lbz r5,0x7c(r16)
   11388:	18 60 04 83 	l.movhi r3,0x483
   1138c:	a4 a5 00 3f 	l.andi r5,r5,0x3f
   11390:	a8 c3 06 ac 	l.ori r6,r3,0x6ac
   11394:	d4 06 28 00 	l.sw 0x0(r6),r5
   11398:	a8 c3 07 6c 	l.ori r6,r3,0x76c
   1139c:	d4 06 28 00 	l.sw 0x0(r6),r5
   113a0:	d4 04 28 00 	l.sw 0x0(r4),r5
   113a4:	a8 83 07 5c 	l.ori r4,r3,0x75c
   113a8:	a8 63 00 54 	l.ori r3,r3,0x54
   113ac:	d4 04 28 00 	l.sw 0x0(r4),r5
   113b0:	84 83 00 00 	l.lwz r4,0x0(r3)
   113b4:	a8 84 00 80 	l.ori r4,r4,0x80
   113b8:	d4 03 20 00 	l.sw 0x0(r3),r4
   113bc:	07 ff f4 5e 	l.jal e534 <mctl_phy_dx0_bit_delay_compensation_standby>
   113c0:	a8 70 00 00 	l.ori r3,r16,0x0
   113c4:	00 00 00 04 	l.j 113d4 <mctl_core_init_standby+0x2d78>
   113c8:	19 c0 04 82 	l.movhi r14,0x482
   113cc:	a8 44 00 00 	l.ori r2,r4,0x0
   113d0:	19 c0 04 82 	l.movhi r14,0x482
   113d4:	9c c0 00 00 	l.addi r6,r0,0x0
   113d8:	aa 4e 03 20 	l.ori r18,r14,0x320
   113dc:	a8 66 00 00 	l.ori r3,r6,0x0
   113e0:	d4 12 30 00 	l.sw 0x0(r18),r6
   113e4:	07 ff f4 3a 	l.jal e4cc <mctl_com_set_controller_refresh_standby.clone.1>
   113e8:	a9 ce 03 24 	l.ori r14,r14,0x324
   113ec:	9c 60 00 01 	l.addi r3,r0,0x1
   113f0:	d4 12 18 00 	l.sw 0x0(r18),r3
   113f4:	84 6e 00 00 	l.lwz r3,0x0(r14)
   113f8:	a4 63 00 01 	l.andi r3,r3,0x1
   113fc:	bc 03 00 00 	l.sfeqi r3,0x0
   11400:	13 ff ff fd 	l.bf 113f4 <mctl_core_init_standby+0x2d98>
   11404:	15 00 00 00 	l.nop 0x0
   11408:	84 70 00 04 	l.lwz r3,0x4(r16)
   1140c:	bc 23 00 04 	l.sfnei r3,0x4
   11410:	10 00 00 03 	l.bf 1141c <mctl_core_init_standby+0x2dc0>
   11414:	18 60 40 00 	l.movhi r3,0x4000
   11418:	84 63 00 00 	l.lwz r3,0x0(r3)
   1141c:	9c 21 00 78 	l.addi r1,r1,0x78
   11420:	a9 62 00 00 	l.ori r11,r2,0x0
   11424:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11428:	84 41 ff d4 	l.lwz r2,0xffffffd4(r1)
   1142c:	85 c1 ff d8 	l.lwz r14,0xffffffd8(r1)
   11430:	86 01 ff dc 	l.lwz r16,0xffffffdc(r1)
   11434:	86 41 ff e0 	l.lwz r18,0xffffffe0(r1)
   11438:	86 81 ff e4 	l.lwz r20,0xffffffe4(r1)
   1143c:	86 c1 ff e8 	l.lwz r22,0xffffffe8(r1)
   11440:	87 01 ff ec 	l.lwz r24,0xffffffec(r1)
   11444:	87 41 ff f0 	l.lwz r26,0xfffffff0(r1)
   11448:	87 81 ff f4 	l.lwz r28,0xfffffff4(r1)
   1144c:	44 00 48 00 	l.jr r9
   11450:	87 c1 ff f8 	l.lwz r30,0xfffffff8(r1)

00011454 <dram_power_save_process>:
   11454:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   11458:	84 43 00 78 	l.lwz r2,0x78(r3)
   1145c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11460:	a4 42 00 80 	l.andi r2,r2,0x80
   11464:	bc 22 00 00 	l.sfnei r2,0x0
   11468:	10 00 00 06 	l.bf 11480 <dram_power_save_process+0x2c>
   1146c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
   11470:	07 ff f4 23 	l.jal e4fc <dramc_data_cal_standby.clone.12>
   11474:	18 40 00 01 	l.movhi r2,0x1
   11478:	a8 42 35 e4 	l.ori r2,r2,0x35e4
   1147c:	d4 02 58 00 	l.sw 0x0(r2),r11
   11480:	18 40 04 82 	l.movhi r2,0x482
   11484:	a8 62 00 30 	l.ori r3,r2,0x30
   11488:	84 83 00 00 	l.lwz r4,0x0(r3)
   1148c:	a8 84 00 21 	l.ori r4,r4,0x21
   11490:	d4 03 20 00 	l.sw 0x0(r3),r4
   11494:	a8 62 00 04 	l.ori r3,r2,0x4
   11498:	84 83 00 00 	l.lwz r4,0x0(r3)
   1149c:	a4 84 00 07 	l.andi r4,r4,0x7
   114a0:	bc 24 00 03 	l.sfnei r4,0x3
   114a4:	13 ff ff fd 	l.bf 11498 <dram_power_save_process+0x44>
   114a8:	18 40 04 82 	l.movhi r2,0x482
   114ac:	07 ff cf 66 	l.jal 5244 <time_udelay>
   114b0:	9c 60 00 01 	l.addi r3,r0,0x1
   114b4:	18 60 07 01 	l.movhi r3,0x701
   114b8:	9c a0 ff ef 	l.addi r5,r0,0xffffffef
   114bc:	a8 63 02 50 	l.ori r3,r3,0x250
   114c0:	9c c0 00 00 	l.addi r6,r0,0x0
   114c4:	84 83 00 00 	l.lwz r4,0x0(r3)
   114c8:	e0 84 28 03 	l.and r4,r4,r5
   114cc:	d4 03 20 00 	l.sw 0x0(r3),r4
   114d0:	a8 82 03 20 	l.ori r4,r2,0x320
   114d4:	a8 62 01 b0 	l.ori r3,r2,0x1b0
   114d8:	d4 04 30 00 	l.sw 0x0(r4),r6
   114dc:	9c c0 ff fe 	l.addi r6,r0,0xfffffffe
   114e0:	84 a3 00 00 	l.lwz r5,0x0(r3)
   114e4:	a8 a5 1f 00 	l.ori r5,r5,0x1f00
   114e8:	e0 a5 30 03 	l.and r5,r5,r6
   114ec:	d4 03 28 00 	l.sw 0x0(r3),r5
   114f0:	84 a3 00 00 	l.lwz r5,0x0(r3)
   114f4:	a8 a5 00 20 	l.ori r5,r5,0x20
   114f8:	d4 03 28 00 	l.sw 0x0(r3),r5
   114fc:	9c 60 00 01 	l.addi r3,r0,0x1
   11500:	d4 04 18 00 	l.sw 0x0(r4),r3
   11504:	a8 62 01 bc 	l.ori r3,r2,0x1bc
   11508:	84 43 00 00 	l.lwz r2,0x0(r3)
   1150c:	a4 42 00 01 	l.andi r2,r2,0x1
   11510:	bc 22 00 00 	l.sfnei r2,0x0
   11514:	13 ff ff fd 	l.bf 11508 <dram_power_save_process+0xb4>
   11518:	15 00 00 00 	l.nop 0x0
   1151c:	07 ff cf 4a 	l.jal 5244 <time_udelay>
   11520:	9c 60 00 0a 	l.addi r3,r0,0xa
   11524:	18 60 04 82 	l.movhi r3,0x482
   11528:	18 c0 7f ff 	l.movhi r6,0x7fff
   1152c:	a8 63 00 0c 	l.ori r3,r3,0xc
   11530:	a8 c6 ff ff 	l.ori r6,r6,0xffff
   11534:	d4 03 10 00 	l.sw 0x0(r3),r2
   11538:	18 60 03 00 	l.movhi r3,0x300
   1153c:	a9 62 00 00 	l.ori r11,r2,0x0
   11540:	a8 83 10 10 	l.ori r4,r3,0x1010
   11544:	84 a4 00 00 	l.lwz r5,0x0(r4)
   11548:	e0 a5 30 03 	l.and r5,r5,r6
   1154c:	18 c0 bf ff 	l.movhi r6,0xbfff
   11550:	d4 04 28 00 	l.sw 0x0(r4),r5
   11554:	a8 83 18 00 	l.ori r4,r3,0x1800
   11558:	a8 c6 ff ff 	l.ori r6,r6,0xffff
   1155c:	84 a4 00 00 	l.lwz r5,0x0(r4)
   11560:	e0 a5 30 03 	l.and r5,r5,r6
   11564:	9c c0 ff fe 	l.addi r6,r0,0xfffffffe
   11568:	d4 04 28 00 	l.sw 0x0(r4),r5
   1156c:	a8 83 18 0c 	l.ori r4,r3,0x180c
   11570:	a8 63 15 40 	l.ori r3,r3,0x1540
   11574:	84 a4 00 00 	l.lwz r5,0x0(r4)
   11578:	e0 a5 30 03 	l.and r5,r5,r6
   1157c:	18 c0 ff fe 	l.movhi r6,0xfffe
   11580:	d4 04 28 00 	l.sw 0x0(r4),r5
   11584:	a8 c6 ff ff 	l.ori r6,r6,0xffff
   11588:	84 a4 00 00 	l.lwz r5,0x0(r4)
   1158c:	e0 a5 30 03 	l.and r5,r5,r6
   11590:	18 c0 bf ff 	l.movhi r6,0xbfff
   11594:	d4 04 28 00 	l.sw 0x0(r4),r5
   11598:	18 a0 7f ff 	l.movhi r5,0x7fff
   1159c:	84 83 00 00 	l.lwz r4,0x0(r3)
   115a0:	a8 a5 ff ff 	l.ori r5,r5,0xffff
   115a4:	a8 c6 ff ff 	l.ori r6,r6,0xffff
   115a8:	e0 84 28 03 	l.and r4,r4,r5
   115ac:	d4 03 20 00 	l.sw 0x0(r3),r4
   115b0:	84 83 00 00 	l.lwz r4,0x0(r3)
   115b4:	e0 84 30 03 	l.and r4,r4,r6
   115b8:	d4 03 20 00 	l.sw 0x0(r3),r4
   115bc:	9c 21 00 08 	l.addi r1,r1,0x8
   115c0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   115c4:	44 00 48 00 	l.jr r9
   115c8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000115cc <dram_power_up_process>:
   115cc:	d7 e1 17 ec 	l.sw 0xffffffec(r1),r2
   115d0:	a8 43 00 00 	l.ori r2,r3,0x0
   115d4:	18 60 00 01 	l.movhi r3,0x1
   115d8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   115dc:	d7 e1 77 f0 	l.sw 0xfffffff0(r1),r14
   115e0:	d7 e1 87 f4 	l.sw 0xfffffff4(r1),r16
   115e4:	d7 e1 97 f8 	l.sw 0xfffffff8(r1),r18
   115e8:	a8 63 2f 23 	l.ori r3,r3,0x2f23
   115ec:	9c 21 ff dc 	l.addi r1,r1,0xffffffdc
   115f0:	18 80 00 01 	l.movhi r4,0x1
   115f4:	d4 01 18 00 	l.sw 0x0(r1),r3
   115f8:	a8 84 2f 06 	l.ori r4,r4,0x2f06
   115fc:	07 ff e2 6f 	l.jal 9fb8 <debugger_printf>
   11600:	9c 60 00 02 	l.addi r3,r0,0x2
   11604:	18 60 03 00 	l.movhi r3,0x300
   11608:	a8 83 01 60 	l.ori r4,r3,0x160
   1160c:	a8 63 01 68 	l.ori r3,r3,0x168
   11610:	84 a4 00 00 	l.lwz r5,0x0(r4)
   11614:	a8 a5 01 00 	l.ori r5,r5,0x100
   11618:	d4 04 28 00 	l.sw 0x0(r4),r5
   1161c:	9c a0 ff c0 	l.addi r5,r0,0xffffffc0
   11620:	84 83 00 00 	l.lwz r4,0x0(r3)
   11624:	e0 84 28 03 	l.and r4,r4,r5
   11628:	d4 03 20 00 	l.sw 0x0(r3),r4
   1162c:	07 ff f4 0c 	l.jal e65c <mctl_core_init_standby>
   11630:	a8 62 00 00 	l.ori r3,r2,0x0
   11634:	bc 2b 00 00 	l.sfnei r11,0x0
   11638:	10 00 00 06 	l.bf 11650 <dram_power_up_process+0x84>
   1163c:	a9 cb 00 00 	l.ori r14,r11,0x0
   11640:	18 80 00 01 	l.movhi r4,0x1
   11644:	9c 60 00 02 	l.addi r3,r0,0x2
   11648:	00 00 00 78 	l.j 11828 <dram_power_up_process+0x25c>
   1164c:	a8 84 2f 29 	l.ori r4,r4,0x2f29
   11650:	84 62 00 1c 	l.lwz r3,0x1c(r2)
   11654:	bd 63 00 00 	l.sfgesi r3,0x0
   11658:	10 00 00 05 	l.bf 1166c <dram_power_up_process+0xa0>
   1165c:	15 00 00 00 	l.nop 0x0
   11660:	b9 c3 00 50 	l.srli r14,r3,0x10
   11664:	00 00 00 18 	l.j 116c4 <dram_power_up_process+0xf8>
   11668:	a5 ce 7f ff 	l.andi r14,r14,0x7fff
   1166c:	84 82 00 18 	l.lwz r4,0x18(r2)
   11670:	b9 c4 00 44 	l.srli r14,r4,0x4
   11674:	b8 c4 00 4c 	l.srli r6,r4,0xc
   11678:	a4 a4 00 0f 	l.andi r5,r4,0xf
   1167c:	a5 ce 00 ff 	l.andi r14,r14,0xff
   11680:	a4 c6 00 03 	l.andi r6,r6,0x3
   11684:	b8 84 00 4e 	l.srli r4,r4,0xe
   11688:	e1 ce 30 00 	l.add r14,r14,r6
   1168c:	e1 ce 28 00 	l.add r14,r14,r5
   11690:	b8 a3 00 4c 	l.srli r5,r3,0xc
   11694:	a4 84 00 03 	l.andi r4,r4,0x3
   11698:	a4 a5 00 0f 	l.andi r5,r5,0xf
   1169c:	e1 ce 20 00 	l.add r14,r14,r4
   116a0:	a4 83 00 0f 	l.andi r4,r3,0xf
   116a4:	bc 24 00 00 	l.sfnei r4,0x0
   116a8:	10 00 00 04 	l.bf 116b8 <dram_power_up_process+0xec>
   116ac:	e1 ce 28 00 	l.add r14,r14,r5
   116b0:	00 00 00 03 	l.j 116bc <dram_power_up_process+0xf0>
   116b4:	9d ce ff ee 	l.addi r14,r14,0xffffffee
   116b8:	9d ce ff ed 	l.addi r14,r14,0xffffffed
   116bc:	9c 80 00 01 	l.addi r4,r0,0x1
   116c0:	e1 c4 70 08 	l.sll r14,r4,r14
   116c4:	84 82 00 18 	l.lwz r4,0x18(r2)
   116c8:	bd 84 00 00 	l.sfltsi r4,0x0
   116cc:	10 00 00 0b 	l.bf 116f8 <dram_power_up_process+0x12c>
   116d0:	18 a0 03 00 	l.movhi r5,0x300
   116d4:	a8 a5 62 00 	l.ori r5,r5,0x6200
   116d8:	84 a5 00 00 	l.lwz r5,0x0(r5)
   116dc:	a4 a5 ff ff 	l.andi r5,r5,0xffff
   116e0:	bc 25 04 00 	l.sfnei r5,0x400
   116e4:	10 00 00 05 	l.bf 116f8 <dram_power_up_process+0x12c>
   116e8:	bc ae 08 00 	l.sfleui r14,0x800
   116ec:	10 00 00 03 	l.bf 116f8 <dram_power_up_process+0x12c>
   116f0:	15 00 00 00 	l.nop 0x0
   116f4:	9d c0 08 00 	l.addi r14,r0,0x800
   116f8:	84 a2 00 78 	l.lwz r5,0x78(r2)
   116fc:	b8 c5 00 50 	l.srli r6,r5,0x10
   11700:	a4 c6 00 07 	l.andi r6,r6,0x7
   11704:	bc 06 00 00 	l.sfeqi r6,0x0
   11708:	10 00 00 05 	l.bf 1171c <dram_power_up_process+0x150>
   1170c:	bd 64 00 00 	l.sfgesi r4,0x0
   11710:	e0 ce 70 00 	l.add r6,r14,r14
   11714:	e1 c6 70 00 	l.add r14,r6,r14
   11718:	b9 ce 00 42 	l.srli r14,r14,0x2
   1171c:	10 00 00 07 	l.bf 11738 <dram_power_up_process+0x16c>
   11720:	b8 ce 00 10 	l.slli r6,r14,0x10
   11724:	bc ae 0c 00 	l.sfleui r14,0xc00
   11728:	10 00 00 04 	l.bf 11738 <dram_power_up_process+0x16c>
   1172c:	15 00 00 00 	l.nop 0x0
   11730:	9d c0 0c 00 	l.addi r14,r0,0xc00
   11734:	b8 ce 00 10 	l.slli r6,r14,0x10
   11738:	a4 63 ff ff 	l.andi r3,r3,0xffff
   1173c:	e0 66 18 04 	l.or r3,r6,r3
   11740:	d4 02 18 1c 	l.sw 0x1c(r2),r3
   11744:	d4 01 20 04 	l.sw 0x4(r1),r4
   11748:	18 80 00 01 	l.movhi r4,0x1
   1174c:	d4 01 18 08 	l.sw 0x8(r1),r3
   11750:	a8 84 2f 43 	l.ori r4,r4,0x2f43
   11754:	9c 60 00 02 	l.addi r3,r0,0x2
   11758:	d4 01 28 0c 	l.sw 0xc(r1),r5
   1175c:	07 ff e2 17 	l.jal 9fb8 <debugger_printf>
   11760:	d4 01 70 00 	l.sw 0x0(r1),r14
   11764:	84 62 00 70 	l.lwz r3,0x70(r2)
   11768:	18 80 00 01 	l.movhi r4,0x1
   1176c:	d4 01 18 00 	l.sw 0x0(r1),r3
   11770:	a8 84 2f 82 	l.ori r4,r4,0x2f82
   11774:	84 62 00 74 	l.lwz r3,0x74(r2)
   11778:	d4 01 18 04 	l.sw 0x4(r1),r3
   1177c:	07 ff e2 0f 	l.jal 9fb8 <debugger_printf>
   11780:	9c 60 00 02 	l.addi r3,r0,0x2
   11784:	84 62 00 78 	l.lwz r3,0x78(r2)
   11788:	18 80 01 00 	l.movhi r4,0x100
   1178c:	e0 63 20 03 	l.and r3,r3,r4
   11790:	bc 03 00 00 	l.sfeqi r3,0x0
   11794:	10 00 00 06 	l.bf 117ac <dram_power_up_process+0x1e0>
   11798:	18 60 04 82 	l.movhi r3,0x482
   1179c:	a8 63 00 30 	l.ori r3,r3,0x30
   117a0:	84 83 00 00 	l.lwz r4,0x0(r3)
   117a4:	a8 84 00 09 	l.ori r4,r4,0x9
   117a8:	d4 03 20 00 	l.sw 0x0(r3),r4
   117ac:	86 02 00 78 	l.lwz r16,0x78(r2)
   117b0:	a6 10 00 80 	l.andi r16,r16,0x80
   117b4:	bc 30 00 00 	l.sfnei r16,0x0
   117b8:	10 00 00 1e 	l.bf 11830 <dram_power_up_process+0x264>
   117bc:	15 00 00 00 	l.nop 0x0
   117c0:	07 ff f3 4f 	l.jal e4fc <dramc_data_cal_standby.clone.12>
   117c4:	1a 40 00 01 	l.movhi r18,0x1
   117c8:	00 00 00 11 	l.j 1180c <dram_power_up_process+0x240>
   117cc:	aa 52 35 e4 	l.ori r18,r18,0x35e4
   117d0:	9e 10 00 01 	l.addi r16,r16,0x1
   117d4:	9c 60 00 02 	l.addi r3,r0,0x2
   117d8:	a8 84 2f a4 	l.ori r4,r4,0x2fa4
   117dc:	07 ff e1 f7 	l.jal 9fb8 <debugger_printf>
   117e0:	d4 01 80 00 	l.sw 0x0(r1),r16
   117e4:	bc 10 00 03 	l.sfeqi r16,0x3
   117e8:	10 00 00 13 	l.bf 11834 <dram_power_up_process+0x268>
   117ec:	9d 60 00 00 	l.addi r11,r0,0x0
   117f0:	07 ff f3 9b 	l.jal e65c <mctl_core_init_standby>
   117f4:	a8 62 00 00 	l.ori r3,r2,0x0
   117f8:	bc 0b 00 00 	l.sfeqi r11,0x0
   117fc:	10 00 00 0e 	l.bf 11834 <dram_power_up_process+0x268>
   11800:	15 00 00 00 	l.nop 0x0
   11804:	07 ff f3 3e 	l.jal e4fc <dramc_data_cal_standby.clone.12>
   11808:	15 00 00 00 	l.nop 0x0
   1180c:	84 72 00 00 	l.lwz r3,0x0(r18)
   11810:	e4 2b 18 00 	l.sfne r11,r3
   11814:	13 ff ff ef 	l.bf 117d0 <dram_power_up_process+0x204>
   11818:	18 80 00 01 	l.movhi r4,0x1
   1181c:	18 80 00 01 	l.movhi r4,0x1
   11820:	9c 60 00 02 	l.addi r3,r0,0x2
   11824:	a8 84 2f d3 	l.ori r4,r4,0x2fd3
   11828:	07 ff e1 e4 	l.jal 9fb8 <debugger_printf>
   1182c:	15 00 00 00 	l.nop 0x0
   11830:	a9 6e 00 00 	l.ori r11,r14,0x0
   11834:	9c 21 00 24 	l.addi r1,r1,0x24
   11838:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   1183c:	84 41 ff ec 	l.lwz r2,0xffffffec(r1)
   11840:	85 c1 ff f0 	l.lwz r14,0xfffffff0(r1)
   11844:	86 01 ff f4 	l.lwz r16,0xfffffff4(r1)
   11848:	44 00 48 00 	l.jr r9
   1184c:	86 41 ff f8 	l.lwz r18,0xfffffff8(r1)

00011850 <iosc_freq_init>:
   11850:	d7 e1 77 e4 	l.sw 0xffffffe4(r1),r14
   11854:	19 c0 00 01 	l.movhi r14,0x1
   11858:	d7 e1 17 e0 	l.sw 0xffffffe0(r1),r2
   1185c:	a9 ce 35 ec 	l.ori r14,r14,0x35ec
   11860:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11864:	d7 e1 87 e8 	l.sw 0xffffffe8(r1),r16
   11868:	d7 e1 97 ec 	l.sw 0xffffffec(r1),r18
   1186c:	d7 e1 a7 f0 	l.sw 0xfffffff0(r1),r20
   11870:	d7 e1 b7 f4 	l.sw 0xfffffff4(r1),r22
   11874:	d7 e1 c7 f8 	l.sw 0xfffffff8(r1),r24
   11878:	84 4e 00 00 	l.lwz r2,0x0(r14)
   1187c:	bc 22 00 00 	l.sfnei r2,0x0
   11880:	10 00 00 48 	l.bf 119a0 <iosc_freq_init+0x150>
   11884:	9c 21 ff dc 	l.addi r1,r1,0xffffffdc
   11888:	18 40 07 01 	l.movhi r2,0x701
   1188c:	18 80 f8 ff 	l.movhi r4,0xf8ff
   11890:	87 02 00 00 	l.lwz r24,0x0(r2)
   11894:	a8 84 ff ff 	l.ori r4,r4,0xffff
   11898:	84 62 00 00 	l.lwz r3,0x0(r2)
   1189c:	1a 00 00 0f 	l.movhi r16,0xf
   118a0:	e0 63 20 03 	l.and r3,r3,r4
   118a4:	d4 02 18 00 	l.sw 0x0(r2),r3
   118a8:	07 ff ce 8d 	l.jal 52dc <time_cdelay>
   118ac:	9c 60 06 40 	l.addi r3,r0,0x640
   118b0:	07 ff ec a1 	l.jal cb34 <cpucfg_counter_read>
   118b4:	15 00 00 00 	l.nop 0x0
   118b8:	a8 70 42 40 	l.ori r3,r16,0x4240
   118bc:	07 ff ce 88 	l.jal 52dc <time_cdelay>
   118c0:	aa 8c 00 00 	l.ori r20,r12,0x0
   118c4:	07 ff ec 9c 	l.jal cb34 <cpucfg_counter_read>
   118c8:	15 00 00 00 	l.nop 0x0
   118cc:	18 a0 f8 ff 	l.movhi r5,0xf8ff
   118d0:	84 62 00 00 	l.lwz r3,0x0(r2)
   118d4:	a8 a5 ff ff 	l.ori r5,r5,0xffff
   118d8:	18 80 02 00 	l.movhi r4,0x200
   118dc:	e0 63 28 03 	l.and r3,r3,r5
   118e0:	aa cc 00 00 	l.ori r22,r12,0x0
   118e4:	e0 63 20 04 	l.or r3,r3,r4
   118e8:	d4 02 18 00 	l.sw 0x0(r2),r3
   118ec:	07 ff ce 7c 	l.jal 52dc <time_cdelay>
   118f0:	9c 60 06 40 	l.addi r3,r0,0x640
   118f4:	07 ff ec 90 	l.jal cb34 <cpucfg_counter_read>
   118f8:	15 00 00 00 	l.nop 0x0
   118fc:	a8 70 42 40 	l.ori r3,r16,0x4240
   11900:	07 ff ce 77 	l.jal 52dc <time_cdelay>
   11904:	aa 4c 00 00 	l.ori r18,r12,0x0
   11908:	07 ff ec 8b 	l.jal cb34 <cpucfg_counter_read>
   1190c:	15 00 00 00 	l.nop 0x0
   11910:	18 a0 f8 ff 	l.movhi r5,0xf8ff
   11914:	84 82 00 00 	l.lwz r4,0x0(r2)
   11918:	a8 a5 ff ff 	l.ori r5,r5,0xffff
   1191c:	aa 0c 00 00 	l.ori r16,r12,0x0
   11920:	e0 84 28 03 	l.and r4,r4,r5
   11924:	18 a0 07 00 	l.movhi r5,0x700
   11928:	e0 78 28 03 	l.and r3,r24,r5
   1192c:	e0 64 18 04 	l.or r3,r4,r3
   11930:	9c 80 5d c0 	l.addi r4,r0,0x5dc0
   11934:	d4 02 18 00 	l.sw 0x0(r2),r3
   11938:	07 ff ea 34 	l.jal c208 <__udivsi3>
   1193c:	e0 76 a0 02 	l.sub r3,r22,r20
   11940:	9c 80 5d c0 	l.addi r4,r0,0x5dc0
   11944:	e0 70 90 02 	l.sub r3,r16,r18
   11948:	07 ff ea 30 	l.jal c208 <__udivsi3>
   1194c:	e0 4b 23 06 	l.mul r2,r11,r4
   11950:	a8 62 00 00 	l.ori r3,r2,0x0
   11954:	a8 8b 00 00 	l.ori r4,r11,0x0
   11958:	07 ff ea 2c 	l.jal c208 <__udivsi3>
   1195c:	9c 40 03 e8 	l.addi r2,r0,0x3e8
   11960:	e1 6b 13 06 	l.mul r11,r11,r2
   11964:	18 40 00 01 	l.movhi r2,0x1
   11968:	18 80 00 01 	l.movhi r4,0x1
   1196c:	a8 42 34 28 	l.ori r2,r2,0x3428
   11970:	9c 60 00 02 	l.addi r3,r0,0x2
   11974:	d4 02 58 00 	l.sw 0x0(r2),r11
   11978:	a8 84 2f f7 	l.ori r4,r4,0x2ff7
   1197c:	07 ff e1 8f 	l.jal 9fb8 <debugger_printf>
   11980:	d4 01 58 00 	l.sw 0x0(r1),r11
   11984:	84 62 00 00 	l.lwz r3,0x0(r2)
   11988:	18 40 00 01 	l.movhi r2,0x1
   1198c:	b8 63 00 49 	l.srli r3,r3,0x9
   11990:	a8 42 34 2c 	l.ori r2,r2,0x342c
   11994:	d4 02 18 00 	l.sw 0x0(r2),r3
   11998:	9c 40 00 01 	l.addi r2,r0,0x1
   1199c:	d4 0e 10 00 	l.sw 0x0(r14),r2
   119a0:	9c 21 00 24 	l.addi r1,r1,0x24
   119a4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   119a8:	84 41 ff e0 	l.lwz r2,0xffffffe0(r1)
   119ac:	85 c1 ff e4 	l.lwz r14,0xffffffe4(r1)
   119b0:	86 01 ff e8 	l.lwz r16,0xffffffe8(r1)
   119b4:	86 41 ff ec 	l.lwz r18,0xffffffec(r1)
   119b8:	86 81 ff f0 	l.lwz r20,0xfffffff0(r1)
   119bc:	86 c1 ff f4 	l.lwz r22,0xfffffff4(r1)
   119c0:	44 00 48 00 	l.jr r9
   119c4:	87 01 ff f8 	l.lwz r24,0xfffffff8(r1)

000119c8 <ccu_init>:
   119c8:	18 80 00 01 	l.movhi r4,0x1
   119cc:	18 60 07 01 	l.movhi r3,0x701
   119d0:	a8 84 37 d8 	l.ori r4,r4,0x37d8
   119d4:	d7 e1 17 fc 	l.sw 0xfffffffc(r1),r2
   119d8:	d4 04 18 00 	l.sw 0x0(r4),r3
   119dc:	18 a0 00 01 	l.movhi r5,0x1
   119e0:	18 80 03 00 	l.movhi r4,0x300
   119e4:	a8 a5 37 d4 	l.ori r5,r5,0x37d4
   119e8:	a8 c4 10 00 	l.ori r6,r4,0x1000
   119ec:	9c 40 ff e0 	l.addi r2,r0,0xffffffe0
   119f0:	d4 05 30 00 	l.sw 0x0(r5),r6
   119f4:	18 a0 00 01 	l.movhi r5,0x1
   119f8:	a8 c4 10 10 	l.ori r6,r4,0x1010
   119fc:	a8 a5 37 c8 	l.ori r5,r5,0x37c8
   11a00:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
   11a04:	d4 05 30 00 	l.sw 0x0(r5),r6
   11a08:	18 a0 00 01 	l.movhi r5,0x1
   11a0c:	a8 c4 10 20 	l.ori r6,r4,0x1020
   11a10:	a8 a5 37 d0 	l.ori r5,r5,0x37d0
   11a14:	a8 84 10 28 	l.ori r4,r4,0x1028
   11a18:	d4 05 30 00 	l.sw 0x0(r5),r6
   11a1c:	18 a0 00 01 	l.movhi r5,0x1
   11a20:	a8 a5 37 c4 	l.ori r5,r5,0x37c4
   11a24:	d4 05 20 00 	l.sw 0x0(r5),r4
   11a28:	84 83 00 00 	l.lwz r4,0x0(r3)
   11a2c:	e0 84 10 03 	l.and r4,r4,r2
   11a30:	9c 40 fc ff 	l.addi r2,r0,0xfffffcff
   11a34:	a8 84 00 02 	l.ori r4,r4,0x2
   11a38:	d4 03 20 00 	l.sw 0x0(r3),r4
   11a3c:	84 83 00 00 	l.lwz r4,0x0(r3)
   11a40:	e0 84 10 03 	l.and r4,r4,r2
   11a44:	18 40 f8 ff 	l.movhi r2,0xf8ff
   11a48:	d4 03 20 00 	l.sw 0x0(r3),r4
   11a4c:	a8 42 ff ff 	l.ori r2,r2,0xffff
   11a50:	84 83 00 00 	l.lwz r4,0x0(r3)
   11a54:	e0 84 10 03 	l.and r4,r4,r2
   11a58:	18 40 03 00 	l.movhi r2,0x300
   11a5c:	e0 84 10 04 	l.or r4,r4,r2
   11a60:	9c 40 00 00 	l.addi r2,r0,0x0
   11a64:	d4 03 20 00 	l.sw 0x0(r3),r4
   11a68:	18 60 00 01 	l.movhi r3,0x1
   11a6c:	a9 62 00 00 	l.ori r11,r2,0x0
   11a70:	a8 63 37 cc 	l.ori r3,r3,0x37cc
   11a74:	d4 03 10 00 	l.sw 0x0(r3),r2
   11a78:	9c 21 00 04 	l.addi r1,r1,0x4
   11a7c:	44 00 48 00 	l.jr r9
   11a80:	84 41 ff fc 	l.lwz r2,0xfffffffc(r1)

00011a84 <ccu_exit>:
   11a84:	44 00 48 00 	l.jr r9
   11a88:	9d 60 00 00 	l.addi r11,r0,0x0

00011a8c <save_state_flag>:
   11a8c:	18 80 07 00 	l.movhi r4,0x700
   11a90:	a8 84 01 0c 	l.ori r4,r4,0x10c
   11a94:	d4 04 18 00 	l.sw 0x0(r4),r3
   11a98:	44 00 48 00 	l.jr r9
   11a9c:	15 00 00 00 	l.nop 0x0

00011aa0 <read_state_flag>:
   11aa0:	18 60 07 00 	l.movhi r3,0x700
   11aa4:	a8 63 01 0c 	l.ori r3,r3,0x10c
   11aa8:	85 63 00 00 	l.lwz r11,0x0(r3)
   11aac:	44 00 48 00 	l.jr r9
   11ab0:	15 00 00 00 	l.nop 0x0

00011ab4 <ccu_set_mclk_onoff>:
   11ab4:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11ab8:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   11abc:	bc 03 00 1f 	l.sfeqi r3,0x1f
   11ac0:	10 00 00 27 	l.bf 11b5c <ccu_set_mclk_onoff+0xa8>
   11ac4:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
   11ac8:	bc 43 00 1f 	l.sfgtui r3,0x1f
   11acc:	10 00 00 09 	l.bf 11af0 <ccu_set_mclk_onoff+0x3c>
   11ad0:	bc 03 00 22 	l.sfeqi r3,0x22
   11ad4:	bc 03 00 11 	l.sfeqi r3,0x11
   11ad8:	10 00 00 36 	l.bf 11bb0 <ccu_set_mclk_onoff+0xfc>
   11adc:	bc 03 00 1a 	l.sfeqi r3,0x1a
   11ae0:	0c 00 00 3d 	l.bnf 11bd4 <ccu_set_mclk_onoff+0x120>
   11ae4:	15 00 00 00 	l.nop 0x0
   11ae8:	00 00 00 13 	l.j 11b34 <ccu_set_mclk_onoff+0x80>
   11aec:	18 60 00 01 	l.movhi r3,0x1
   11af0:	10 00 00 06 	l.bf 11b08 <ccu_set_mclk_onoff+0x54>
   11af4:	bc 03 00 33 	l.sfeqi r3,0x33
   11af8:	0c 00 00 37 	l.bnf 11bd4 <ccu_set_mclk_onoff+0x120>
   11afc:	15 00 00 00 	l.nop 0x0
   11b00:	00 00 00 22 	l.j 11b88 <ccu_set_mclk_onoff+0xd4>
   11b04:	18 60 00 01 	l.movhi r3,0x1
   11b08:	18 60 00 01 	l.movhi r3,0x1
   11b0c:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11b10:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   11b14:	a4 84 00 01 	l.andi r4,r4,0x1
   11b18:	84 63 00 00 	l.lwz r3,0x0(r3)
   11b1c:	84 a3 01 9c 	l.lwz r5,0x19c(r3)
   11b20:	e0 a5 10 03 	l.and r5,r5,r2
   11b24:	e0 85 20 04 	l.or r4,r5,r4
   11b28:	d4 03 21 9c 	l.sw 0x19c(r3),r4
   11b2c:	00 00 00 30 	l.j 11bec <ccu_set_mclk_onoff+0x138>
   11b30:	9d 60 00 00 	l.addi r11,r0,0x0
   11b34:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11b38:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   11b3c:	a4 84 00 01 	l.andi r4,r4,0x1
   11b40:	84 63 00 00 	l.lwz r3,0x0(r3)
   11b44:	84 a3 01 8c 	l.lwz r5,0x18c(r3)
   11b48:	e0 a5 10 03 	l.and r5,r5,r2
   11b4c:	e0 85 20 04 	l.or r4,r5,r4
   11b50:	d4 03 21 8c 	l.sw 0x18c(r3),r4
   11b54:	00 00 00 26 	l.j 11bec <ccu_set_mclk_onoff+0x138>
   11b58:	9d 60 00 00 	l.addi r11,r0,0x0
   11b5c:	18 60 00 01 	l.movhi r3,0x1
   11b60:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11b64:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   11b68:	a4 84 00 01 	l.andi r4,r4,0x1
   11b6c:	84 63 00 00 	l.lwz r3,0x0(r3)
   11b70:	84 a3 01 1c 	l.lwz r5,0x11c(r3)
   11b74:	e0 a5 10 03 	l.and r5,r5,r2
   11b78:	e0 85 20 04 	l.or r4,r5,r4
   11b7c:	d4 03 21 1c 	l.sw 0x11c(r3),r4
   11b80:	00 00 00 1b 	l.j 11bec <ccu_set_mclk_onoff+0x138>
   11b84:	9d 60 00 00 	l.addi r11,r0,0x0
   11b88:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11b8c:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   11b90:	a4 84 00 01 	l.andi r4,r4,0x1
   11b94:	84 63 00 00 	l.lwz r3,0x0(r3)
   11b98:	84 a3 02 0c 	l.lwz r5,0x20c(r3)
   11b9c:	e0 a5 10 03 	l.and r5,r5,r2
   11ba0:	e0 85 20 04 	l.or r4,r5,r4
   11ba4:	d4 03 22 0c 	l.sw 0x20c(r3),r4
   11ba8:	00 00 00 11 	l.j 11bec <ccu_set_mclk_onoff+0x138>
   11bac:	9d 60 00 00 	l.addi r11,r0,0x0
   11bb0:	18 60 03 00 	l.movhi r3,0x300
   11bb4:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11bb8:	a8 63 17 1c 	l.ori r3,r3,0x171c
   11bbc:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11bc0:	e0 a5 10 03 	l.and r5,r5,r2
   11bc4:	e0 84 28 04 	l.or r4,r4,r5
   11bc8:	d4 03 20 00 	l.sw 0x0(r3),r4
   11bcc:	00 00 00 08 	l.j 11bec <ccu_set_mclk_onoff+0x138>
   11bd0:	9d 60 00 00 	l.addi r11,r0,0x0
   11bd4:	18 80 00 01 	l.movhi r4,0x1
   11bd8:	d4 01 18 00 	l.sw 0x0(r1),r3
   11bdc:	a8 84 30 06 	l.ori r4,r4,0x3006
   11be0:	07 ff e0 f6 	l.jal 9fb8 <debugger_printf>
   11be4:	9c 60 00 04 	l.addi r3,r0,0x4
   11be8:	9d 60 ff ea 	l.addi r11,r0,0xffffffea
   11bec:	9c 21 00 0c 	l.addi r1,r1,0xc
   11bf0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11bf4:	44 00 48 00 	l.jr r9
   11bf8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00011bfc <ccu_set_poweroff_gating_state>:
   11bfc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11c00:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   11c04:	bc 43 00 0c 	l.sfgtui r3,0xc
   11c08:	10 00 00 64 	l.bf 11d98 <ccu_set_poweroff_gating_state+0x19c>
   11c0c:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
   11c10:	18 40 00 01 	l.movhi r2,0x1
   11c14:	b8 a3 00 02 	l.slli r5,r3,0x2
   11c18:	a8 42 32 8c 	l.ori r2,r2,0x328c
   11c1c:	e0 a5 10 00 	l.add r5,r5,r2
   11c20:	84 a5 00 00 	l.lwz r5,0x0(r5)
   11c24:	44 00 28 00 	l.jr r5
   11c28:	15 00 00 00 	l.nop 0x0
   11c2c:	18 60 07 00 	l.movhi r3,0x700
   11c30:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11c34:	a8 63 04 44 	l.ori r3,r3,0x444
   11c38:	a4 84 00 01 	l.andi r4,r4,0x1
   11c3c:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11c40:	d4 01 28 04 	l.sw 0x4(r1),r5
   11c44:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11c48:	e0 a5 10 03 	l.and r5,r5,r2
   11c4c:	d4 01 28 04 	l.sw 0x4(r1),r5
   11c50:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11c54:	00 00 00 0e 	l.j 11c8c <ccu_set_poweroff_gating_state+0x90>
   11c58:	e0 84 28 04 	l.or r4,r4,r5
   11c5c:	18 60 07 00 	l.movhi r3,0x700
   11c60:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd
   11c64:	a8 63 04 44 	l.ori r3,r3,0x444
   11c68:	a4 84 00 01 	l.andi r4,r4,0x1
   11c6c:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11c70:	e0 84 20 00 	l.add r4,r4,r4
   11c74:	d4 01 28 04 	l.sw 0x4(r1),r5
   11c78:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11c7c:	e0 a5 10 03 	l.and r5,r5,r2
   11c80:	d4 01 28 04 	l.sw 0x4(r1),r5
   11c84:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11c88:	e0 84 28 04 	l.or r4,r4,r5
   11c8c:	d4 01 20 04 	l.sw 0x4(r1),r4
   11c90:	84 81 00 04 	l.lwz r4,0x4(r1)
   11c94:	d4 03 20 00 	l.sw 0x0(r3),r4
   11c98:	00 00 00 46 	l.j 11db0 <ccu_set_poweroff_gating_state+0x1b4>
   11c9c:	9d 60 00 00 	l.addi r11,r0,0x0
   11ca0:	18 60 07 00 	l.movhi r3,0x700
   11ca4:	9c 40 ff fb 	l.addi r2,r0,0xfffffffb
   11ca8:	a8 63 04 44 	l.ori r3,r3,0x444
   11cac:	a4 84 00 01 	l.andi r4,r4,0x1
   11cb0:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11cb4:	b8 84 00 02 	l.slli r4,r4,0x2
   11cb8:	d4 01 28 04 	l.sw 0x4(r1),r5
   11cbc:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11cc0:	e0 a5 10 03 	l.and r5,r5,r2
   11cc4:	d4 01 28 04 	l.sw 0x4(r1),r5
   11cc8:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11ccc:	03 ff ff f0 	l.j 11c8c <ccu_set_poweroff_gating_state+0x90>
   11cd0:	e0 84 28 04 	l.or r4,r4,r5
   11cd4:	18 60 07 00 	l.movhi r3,0x700
   11cd8:	9c 40 ff f7 	l.addi r2,r0,0xfffffff7
   11cdc:	a8 63 04 44 	l.ori r3,r3,0x444
   11ce0:	a4 84 00 01 	l.andi r4,r4,0x1
   11ce4:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11ce8:	b8 84 00 03 	l.slli r4,r4,0x3
   11cec:	d4 01 28 04 	l.sw 0x4(r1),r5
   11cf0:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11cf4:	e0 a5 10 03 	l.and r5,r5,r2
   11cf8:	d4 01 28 04 	l.sw 0x4(r1),r5
   11cfc:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11d00:	03 ff ff e3 	l.j 11c8c <ccu_set_poweroff_gating_state+0x90>
   11d04:	e0 84 28 04 	l.or r4,r4,r5
   11d08:	18 60 07 00 	l.movhi r3,0x700
   11d0c:	9c 40 ff ef 	l.addi r2,r0,0xffffffef
   11d10:	a8 63 04 44 	l.ori r3,r3,0x444
   11d14:	a4 84 00 01 	l.andi r4,r4,0x1
   11d18:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11d1c:	b8 84 00 04 	l.slli r4,r4,0x4
   11d20:	d4 01 28 04 	l.sw 0x4(r1),r5
   11d24:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11d28:	e0 a5 10 03 	l.and r5,r5,r2
   11d2c:	d4 01 28 04 	l.sw 0x4(r1),r5
   11d30:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11d34:	03 ff ff d6 	l.j 11c8c <ccu_set_poweroff_gating_state+0x90>
   11d38:	e0 84 28 04 	l.or r4,r4,r5
   11d3c:	18 60 00 01 	l.movhi r3,0x1
   11d40:	a4 84 00 01 	l.andi r4,r4,0x1
   11d44:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   11d48:	9c 40 ff fb 	l.addi r2,r0,0xfffffffb
   11d4c:	84 63 00 00 	l.lwz r3,0x0(r3)
   11d50:	b8 84 00 02 	l.slli r4,r4,0x2
   11d54:	84 a3 02 50 	l.lwz r5,0x250(r3)
   11d58:	e0 a5 10 03 	l.and r5,r5,r2
   11d5c:	e0 85 20 04 	l.or r4,r5,r4
   11d60:	d4 03 22 50 	l.sw 0x250(r3),r4
   11d64:	00 00 00 13 	l.j 11db0 <ccu_set_poweroff_gating_state+0x1b4>
   11d68:	9d 60 00 00 	l.addi r11,r0,0x0
   11d6c:	18 60 00 01 	l.movhi r3,0x1
   11d70:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11d74:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   11d78:	a4 84 00 01 	l.andi r4,r4,0x1
   11d7c:	84 63 00 00 	l.lwz r3,0x0(r3)
   11d80:	84 a3 02 54 	l.lwz r5,0x254(r3)
   11d84:	e0 a5 10 03 	l.and r5,r5,r2
   11d88:	e0 85 20 04 	l.or r4,r5,r4
   11d8c:	d4 03 22 54 	l.sw 0x254(r3),r4
   11d90:	00 00 00 08 	l.j 11db0 <ccu_set_poweroff_gating_state+0x1b4>
   11d94:	9d 60 00 00 	l.addi r11,r0,0x0
   11d98:	18 80 00 01 	l.movhi r4,0x1
   11d9c:	d4 01 18 00 	l.sw 0x0(r1),r3
   11da0:	a8 84 30 38 	l.ori r4,r4,0x3038
   11da4:	07 ff e0 85 	l.jal 9fb8 <debugger_printf>
   11da8:	9c 60 00 04 	l.addi r3,r0,0x4
   11dac:	9d 60 ff ea 	l.addi r11,r0,0xffffffea
   11db0:	9c 21 00 10 	l.addi r1,r1,0x10
   11db4:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11db8:	44 00 48 00 	l.jr r9
   11dbc:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00011dc0 <ccu_set_poweroff_gating_state_ext>:
   11dc0:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11dc4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   11dc8:	bc 43 00 0c 	l.sfgtui r3,0xc
   11dcc:	10 00 00 47 	l.bf 11ee8 <ccu_set_poweroff_gating_state_ext+0x128>
   11dd0:	9c 21 ff f0 	l.addi r1,r1,0xfffffff0
   11dd4:	18 40 00 01 	l.movhi r2,0x1
   11dd8:	b8 a3 00 02 	l.slli r5,r3,0x2
   11ddc:	a8 42 32 c0 	l.ori r2,r2,0x32c0
   11de0:	e0 a5 10 00 	l.add r5,r5,r2
   11de4:	84 a5 00 00 	l.lwz r5,0x0(r5)
   11de8:	44 00 28 00 	l.jr r5
   11dec:	15 00 00 00 	l.nop 0x0
   11df0:	18 60 07 00 	l.movhi r3,0x700
   11df4:	00 00 00 04 	l.j 11e04 <ccu_set_poweroff_gating_state_ext+0x44>
   11df8:	a8 63 04 70 	l.ori r3,r3,0x470
   11dfc:	18 60 07 00 	l.movhi r3,0x700
   11e00:	a8 63 04 74 	l.ori r3,r3,0x474
   11e04:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11e08:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd
   11e0c:	d4 01 28 04 	l.sw 0x4(r1),r5
   11e10:	a4 84 00 01 	l.andi r4,r4,0x1
   11e14:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11e18:	e0 84 20 00 	l.add r4,r4,r4
   11e1c:	e0 a5 10 03 	l.and r5,r5,r2
   11e20:	d4 01 28 04 	l.sw 0x4(r1),r5
   11e24:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11e28:	e0 84 28 04 	l.or r4,r4,r5
   11e2c:	d4 01 20 04 	l.sw 0x4(r1),r4
   11e30:	84 81 00 04 	l.lwz r4,0x4(r1)
   11e34:	d4 03 20 00 	l.sw 0x0(r3),r4
   11e38:	00 00 00 32 	l.j 11f00 <ccu_set_poweroff_gating_state_ext+0x140>
   11e3c:	9d 60 00 00 	l.addi r11,r0,0x0
   11e40:	18 60 07 00 	l.movhi r3,0x700
   11e44:	03 ff ff f0 	l.j 11e04 <ccu_set_poweroff_gating_state_ext+0x44>
   11e48:	a8 63 04 78 	l.ori r3,r3,0x478
   11e4c:	18 60 07 00 	l.movhi r3,0x700
   11e50:	03 ff ff ed 	l.j 11e04 <ccu_set_poweroff_gating_state_ext+0x44>
   11e54:	a8 63 04 7c 	l.ori r3,r3,0x47c
   11e58:	18 60 07 00 	l.movhi r3,0x700
   11e5c:	9c 40 ff ef 	l.addi r2,r0,0xffffffef
   11e60:	a8 63 04 44 	l.ori r3,r3,0x444
   11e64:	a4 84 00 01 	l.andi r4,r4,0x1
   11e68:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11e6c:	b8 84 00 04 	l.slli r4,r4,0x4
   11e70:	d4 01 28 04 	l.sw 0x4(r1),r5
   11e74:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11e78:	e0 a5 10 03 	l.and r5,r5,r2
   11e7c:	d4 01 28 04 	l.sw 0x4(r1),r5
   11e80:	84 a1 00 04 	l.lwz r5,0x4(r1)
   11e84:	03 ff ff ea 	l.j 11e2c <ccu_set_poweroff_gating_state_ext+0x6c>
   11e88:	e0 84 28 04 	l.or r4,r4,r5
   11e8c:	18 60 00 01 	l.movhi r3,0x1
   11e90:	a4 84 00 01 	l.andi r4,r4,0x1
   11e94:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   11e98:	9c 40 ff fb 	l.addi r2,r0,0xfffffffb
   11e9c:	84 63 00 00 	l.lwz r3,0x0(r3)
   11ea0:	b8 84 00 02 	l.slli r4,r4,0x2
   11ea4:	84 a3 02 50 	l.lwz r5,0x250(r3)
   11ea8:	e0 a5 10 03 	l.and r5,r5,r2
   11eac:	e0 85 20 04 	l.or r4,r5,r4
   11eb0:	d4 03 22 50 	l.sw 0x250(r3),r4
   11eb4:	00 00 00 13 	l.j 11f00 <ccu_set_poweroff_gating_state_ext+0x140>
   11eb8:	9d 60 00 00 	l.addi r11,r0,0x0
   11ebc:	18 60 00 01 	l.movhi r3,0x1
   11ec0:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11ec4:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   11ec8:	a4 84 00 01 	l.andi r4,r4,0x1
   11ecc:	84 63 00 00 	l.lwz r3,0x0(r3)
   11ed0:	84 a3 02 54 	l.lwz r5,0x254(r3)
   11ed4:	e0 a5 10 03 	l.and r5,r5,r2
   11ed8:	e0 85 20 04 	l.or r4,r5,r4
   11edc:	d4 03 22 54 	l.sw 0x254(r3),r4
   11ee0:	00 00 00 08 	l.j 11f00 <ccu_set_poweroff_gating_state_ext+0x140>
   11ee4:	9d 60 00 00 	l.addi r11,r0,0x0
   11ee8:	18 80 00 01 	l.movhi r4,0x1
   11eec:	d4 01 18 00 	l.sw 0x0(r1),r3
   11ef0:	a8 84 30 38 	l.ori r4,r4,0x3038
   11ef4:	07 ff e0 31 	l.jal 9fb8 <debugger_printf>
   11ef8:	9c 60 00 04 	l.addi r3,r0,0x4
   11efc:	9d 60 ff ea 	l.addi r11,r0,0xffffffea
   11f00:	9c 21 00 10 	l.addi r1,r1,0x10
   11f04:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11f08:	44 00 48 00 	l.jr r9
   11f0c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00011f10 <ccu_24mhosc_reg_cb>:
   11f10:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11f14:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
   11f18:	a8 83 00 00 	l.ori r4,r3,0x0
   11f1c:	9c 21 00 04 	l.addi r1,r1,0x4
   11f20:	18 60 00 01 	l.movhi r3,0x1
   11f24:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11f28:	03 ff df 04 	l.j 9b38 <notifier_insert>
   11f2c:	a8 63 35 f0 	l.ori r3,r3,0x35f0

00011f30 <ccu_24mhosc_disable>:
   11f30:	18 60 00 01 	l.movhi r3,0x1
   11f34:	9c 80 00 01 	l.addi r4,r0,0x1
   11f38:	a8 63 35 f4 	l.ori r3,r3,0x35f4
   11f3c:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11f40:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   11f44:	d4 03 20 00 	l.sw 0x0(r3),r4
   11f48:	18 60 00 01 	l.movhi r3,0x1
   11f4c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
   11f50:	a8 63 35 f0 	l.ori r3,r3,0x35f0
   11f54:	9c a0 00 00 	l.addi r5,r0,0x0
   11f58:	07 ff df 51 	l.jal 9c9c <notifier_notify>
   11f5c:	18 40 a7 00 	l.movhi r2,0xa700
   11f60:	18 60 07 01 	l.movhi r3,0x701
   11f64:	18 80 00 01 	l.movhi r4,0x1
   11f68:	a8 63 02 44 	l.ori r3,r3,0x244
   11f6c:	a8 84 35 f8 	l.ori r4,r4,0x35f8
   11f70:	84 a3 00 00 	l.lwz r5,0x0(r3)
   11f74:	b8 a5 00 50 	l.srli r5,r5,0x10
   11f78:	a4 a5 00 07 	l.andi r5,r5,0x7
   11f7c:	d4 04 28 00 	l.sw 0x0(r4),r5
   11f80:	84 83 00 00 	l.lwz r4,0x0(r3)
   11f84:	e0 84 10 04 	l.or r4,r4,r2
   11f88:	d4 03 20 00 	l.sw 0x0(r3),r4
   11f8c:	84 83 00 00 	l.lwz r4,0x0(r3)
   11f90:	e0 84 10 04 	l.or r4,r4,r2
   11f94:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   11f98:	e0 84 10 03 	l.and r4,r4,r2
   11f9c:	9c 40 ff fd 	l.addi r2,r0,0xfffffffd
   11fa0:	d4 03 20 00 	l.sw 0x0(r3),r4
   11fa4:	07 ff cc ce 	l.jal 52dc <time_cdelay>
   11fa8:	9c 60 00 14 	l.addi r3,r0,0x14
   11fac:	18 60 07 00 	l.movhi r3,0x700
   11fb0:	9d 60 00 00 	l.addi r11,r0,0x0
   11fb4:	a8 63 01 60 	l.ori r3,r3,0x160
   11fb8:	84 83 00 00 	l.lwz r4,0x0(r3)
   11fbc:	e0 84 10 03 	l.and r4,r4,r2
   11fc0:	d4 03 20 00 	l.sw 0x0(r3),r4
   11fc4:	9c 21 00 08 	l.addi r1,r1,0x8
   11fc8:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   11fcc:	44 00 48 00 	l.jr r9
   11fd0:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00011fd4 <ccu_24mhosc_enable>:
   11fd4:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   11fd8:	18 40 07 00 	l.movhi r2,0x700
   11fdc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   11fe0:	a8 42 01 60 	l.ori r2,r2,0x160
   11fe4:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
   11fe8:	84 62 00 00 	l.lwz r3,0x0(r2)
   11fec:	a8 63 00 02 	l.ori r3,r3,0x2
   11ff0:	d4 02 18 00 	l.sw 0x0(r2),r3
   11ff4:	18 40 07 01 	l.movhi r2,0x701
   11ff8:	9c 60 00 04 	l.addi r3,r0,0x4
   11ffc:	07 ff cc 44 	l.jal 510c <time_mdelay>
   12000:	a8 42 02 44 	l.ori r2,r2,0x244
   12004:	84 62 00 00 	l.lwz r3,0x0(r2)
   12008:	18 80 a7 00 	l.movhi r4,0xa700
   1200c:	e0 63 20 04 	l.or r3,r3,r4
   12010:	a8 84 00 01 	l.ori r4,r4,0x1
   12014:	d4 02 18 00 	l.sw 0x0(r2),r3
   12018:	84 62 00 00 	l.lwz r3,0x0(r2)
   1201c:	e0 63 20 04 	l.or r3,r3,r4
   12020:	d4 02 18 00 	l.sw 0x0(r2),r3
   12024:	d4 02 18 00 	l.sw 0x0(r2),r3
   12028:	07 ff cc 39 	l.jal 510c <time_mdelay>
   1202c:	9c 60 00 02 	l.addi r3,r0,0x2
   12030:	84 62 00 00 	l.lwz r3,0x0(r2)
   12034:	18 80 a7 00 	l.movhi r4,0xa700
   12038:	e0 63 20 04 	l.or r3,r3,r4
   1203c:	d4 02 18 00 	l.sw 0x0(r2),r3
   12040:	84 62 00 00 	l.lwz r3,0x0(r2)
   12044:	e0 63 20 04 	l.or r3,r3,r4
   12048:	18 80 ff f8 	l.movhi r4,0xfff8
   1204c:	a8 84 ff ff 	l.ori r4,r4,0xffff
   12050:	e0 63 20 03 	l.and r3,r3,r4
   12054:	18 80 00 01 	l.movhi r4,0x1
   12058:	a8 84 35 f8 	l.ori r4,r4,0x35f8
   1205c:	84 84 00 00 	l.lwz r4,0x0(r4)
   12060:	b8 84 00 10 	l.slli r4,r4,0x10
   12064:	e0 63 20 04 	l.or r3,r3,r4
   12068:	d4 02 18 00 	l.sw 0x0(r2),r3
   1206c:	9c 60 00 02 	l.addi r3,r0,0x2
   12070:	07 ff cc 27 	l.jal 510c <time_mdelay>
   12074:	18 40 00 01 	l.movhi r2,0x1
   12078:	9c 80 00 00 	l.addi r4,r0,0x0
   1207c:	18 60 00 01 	l.movhi r3,0x1
   12080:	a8 a4 00 00 	l.ori r5,r4,0x0
   12084:	a8 63 35 f0 	l.ori r3,r3,0x35f0
   12088:	07 ff df 05 	l.jal 9c9c <notifier_notify>
   1208c:	a8 42 35 f4 	l.ori r2,r2,0x35f4
   12090:	9c 60 00 00 	l.addi r3,r0,0x0
   12094:	d4 02 18 00 	l.sw 0x0(r2),r3
   12098:	9c 21 00 08 	l.addi r1,r1,0x8
   1209c:	a9 63 00 00 	l.ori r11,r3,0x0
   120a0:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   120a4:	44 00 48 00 	l.jr r9
   120a8:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000120ac <is_hosc_lock>:
   120ac:	18 60 00 01 	l.movhi r3,0x1
   120b0:	a8 63 35 f4 	l.ori r3,r3,0x35f4
   120b4:	44 00 48 00 	l.jr r9
   120b8:	85 63 00 00 	l.lwz r11,0x0(r3)

000120bc <ccu_set_mclk_reset>:
   120bc:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   120c0:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   120c4:	bc 03 00 21 	l.sfeqi r3,0x21
   120c8:	10 00 00 77 	l.bf 122a4 <ccu_set_mclk_reset+0x1e8>
   120cc:	9c 21 ff f4 	l.addi r1,r1,0xfffffff4
   120d0:	bc 43 00 21 	l.sfgtui r3,0x21
   120d4:	10 00 00 14 	l.bf 12124 <ccu_set_mclk_reset+0x68>
   120d8:	bc 03 00 2c 	l.sfeqi r3,0x2c
   120dc:	bc 03 00 19 	l.sfeqi r3,0x19
   120e0:	10 00 00 64 	l.bf 12270 <ccu_set_mclk_reset+0x1b4>
   120e4:	bc 43 00 19 	l.sfgtui r3,0x19
   120e8:	10 00 00 09 	l.bf 1210c <ccu_set_mclk_reset+0x50>
   120ec:	bc 03 00 1a 	l.sfeqi r3,0x1a
   120f0:	bc 03 00 10 	l.sfeqi r3,0x10
   120f4:	10 00 00 90 	l.bf 12334 <ccu_set_mclk_reset+0x278>
   120f8:	bc 03 00 11 	l.sfeqi r3,0x11
   120fc:	0c 00 00 9b 	l.bnf 12368 <ccu_set_mclk_reset+0x2ac>
   12100:	15 00 00 00 	l.nop 0x0
   12104:	00 00 00 8f 	l.j 12340 <ccu_set_mclk_reset+0x284>
   12108:	18 60 03 00 	l.movhi r3,0x300
   1210c:	10 00 00 26 	l.bf 121a4 <ccu_set_mclk_reset+0xe8>
   12110:	bc 03 00 1f 	l.sfeqi r3,0x1f
   12114:	0c 00 00 95 	l.bnf 12368 <ccu_set_mclk_reset+0x2ac>
   12118:	15 00 00 00 	l.nop 0x0
   1211c:	00 00 00 2f 	l.j 121d8 <ccu_set_mclk_reset+0x11c>
   12120:	18 60 00 01 	l.movhi r3,0x1
   12124:	10 00 00 79 	l.bf 12308 <ccu_set_mclk_reset+0x24c>
   12128:	bc 43 00 2c 	l.sfgtui r3,0x2c
   1212c:	10 00 00 09 	l.bf 12150 <ccu_set_mclk_reset+0x94>
   12130:	bc 03 00 37 	l.sfeqi r3,0x37
   12134:	bc 03 00 22 	l.sfeqi r3,0x22
   12138:	10 00 00 0e 	l.bf 12170 <ccu_set_mclk_reset+0xb4>
   1213c:	bc 03 00 26 	l.sfeqi r3,0x26
   12140:	0c 00 00 8a 	l.bnf 12368 <ccu_set_mclk_reset+0x2ac>
   12144:	15 00 00 00 	l.nop 0x0
   12148:	00 00 00 64 	l.j 122d8 <ccu_set_mclk_reset+0x21c>
   1214c:	18 60 00 01 	l.movhi r3,0x1
   12150:	10 00 00 2e 	l.bf 12208 <ccu_set_mclk_reset+0x14c>
   12154:	bc 03 00 38 	l.sfeqi r3,0x38
   12158:	10 00 00 39 	l.bf 1223c <ccu_set_mclk_reset+0x180>
   1215c:	bc 03 00 33 	l.sfeqi r3,0x33
   12160:	0c 00 00 82 	l.bnf 12368 <ccu_set_mclk_reset+0x2ac>
   12164:	15 00 00 00 	l.nop 0x0
   12168:	00 00 00 43 	l.j 12274 <ccu_set_mclk_reset+0x1b8>
   1216c:	18 60 00 01 	l.movhi r3,0x1
   12170:	18 60 00 01 	l.movhi r3,0x1
   12174:	18 40 ff fe 	l.movhi r2,0xfffe
   12178:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   1217c:	a4 84 00 01 	l.andi r4,r4,0x1
   12180:	84 63 00 00 	l.lwz r3,0x0(r3)
   12184:	a8 42 ff ff 	l.ori r2,r2,0xffff
   12188:	84 a3 01 9c 	l.lwz r5,0x19c(r3)
   1218c:	b8 84 00 10 	l.slli r4,r4,0x10
   12190:	e0 a5 10 03 	l.and r5,r5,r2
   12194:	e0 85 20 04 	l.or r4,r5,r4
   12198:	d4 03 21 9c 	l.sw 0x19c(r3),r4
   1219c:	00 00 00 79 	l.j 12380 <ccu_set_mclk_reset+0x2c4>
   121a0:	9d 60 00 00 	l.addi r11,r0,0x0
   121a4:	18 60 00 01 	l.movhi r3,0x1
   121a8:	18 40 ff fe 	l.movhi r2,0xfffe
   121ac:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   121b0:	a4 84 00 01 	l.andi r4,r4,0x1
   121b4:	84 63 00 00 	l.lwz r3,0x0(r3)
   121b8:	a8 42 ff ff 	l.ori r2,r2,0xffff
   121bc:	84 a3 01 8c 	l.lwz r5,0x18c(r3)
   121c0:	b8 84 00 10 	l.slli r4,r4,0x10
   121c4:	e0 a5 10 03 	l.and r5,r5,r2
   121c8:	e0 85 20 04 	l.or r4,r5,r4
   121cc:	d4 03 21 8c 	l.sw 0x18c(r3),r4
   121d0:	00 00 00 6c 	l.j 12380 <ccu_set_mclk_reset+0x2c4>
   121d4:	9d 60 00 00 	l.addi r11,r0,0x0
   121d8:	18 40 ff fe 	l.movhi r2,0xfffe
   121dc:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   121e0:	a4 84 00 01 	l.andi r4,r4,0x1
   121e4:	84 63 00 00 	l.lwz r3,0x0(r3)
   121e8:	a8 42 ff ff 	l.ori r2,r2,0xffff
   121ec:	84 a3 01 1c 	l.lwz r5,0x11c(r3)
   121f0:	b8 84 00 10 	l.slli r4,r4,0x10
   121f4:	e0 a5 10 03 	l.and r5,r5,r2
   121f8:	e0 85 20 04 	l.or r4,r5,r4
   121fc:	d4 03 21 1c 	l.sw 0x11c(r3),r4
   12200:	00 00 00 60 	l.j 12380 <ccu_set_mclk_reset+0x2c4>
   12204:	9d 60 00 00 	l.addi r11,r0,0x0
   12208:	18 60 00 01 	l.movhi r3,0x1
   1220c:	18 40 ff fe 	l.movhi r2,0xfffe
   12210:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   12214:	a4 84 00 01 	l.andi r4,r4,0x1
   12218:	84 63 00 00 	l.lwz r3,0x0(r3)
   1221c:	a8 42 ff ff 	l.ori r2,r2,0xffff
   12220:	84 a3 01 2c 	l.lwz r5,0x12c(r3)
   12224:	b8 84 00 10 	l.slli r4,r4,0x10
   12228:	e0 a5 10 03 	l.and r5,r5,r2
   1222c:	e0 85 20 04 	l.or r4,r5,r4
   12230:	d4 03 21 2c 	l.sw 0x12c(r3),r4
   12234:	00 00 00 53 	l.j 12380 <ccu_set_mclk_reset+0x2c4>
   12238:	9d 60 00 00 	l.addi r11,r0,0x0
   1223c:	18 60 00 01 	l.movhi r3,0x1
   12240:	18 40 ff fe 	l.movhi r2,0xfffe
   12244:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   12248:	a4 84 00 01 	l.andi r4,r4,0x1
   1224c:	84 63 00 00 	l.lwz r3,0x0(r3)
   12250:	a8 42 ff ff 	l.ori r2,r2,0xffff
   12254:	84 a3 01 3c 	l.lwz r5,0x13c(r3)
   12258:	b8 84 00 10 	l.slli r4,r4,0x10
   1225c:	e0 a5 10 03 	l.and r5,r5,r2
   12260:	e0 85 20 04 	l.or r4,r5,r4
   12264:	d4 03 21 3c 	l.sw 0x13c(r3),r4
   12268:	00 00 00 46 	l.j 12380 <ccu_set_mclk_reset+0x2c4>
   1226c:	9d 60 00 00 	l.addi r11,r0,0x0
   12270:	18 60 00 01 	l.movhi r3,0x1
   12274:	18 40 ff fe 	l.movhi r2,0xfffe
   12278:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   1227c:	a4 84 00 01 	l.andi r4,r4,0x1
   12280:	84 63 00 00 	l.lwz r3,0x0(r3)
   12284:	a8 42 ff ff 	l.ori r2,r2,0xffff
   12288:	84 a3 01 ec 	l.lwz r5,0x1ec(r3)
   1228c:	b8 84 00 10 	l.slli r4,r4,0x10
   12290:	e0 a5 10 03 	l.and r5,r5,r2
   12294:	e0 85 20 04 	l.or r4,r5,r4
   12298:	d4 03 21 ec 	l.sw 0x1ec(r3),r4
   1229c:	00 00 00 39 	l.j 12380 <ccu_set_mclk_reset+0x2c4>
   122a0:	9d 60 00 00 	l.addi r11,r0,0x0
   122a4:	18 60 00 01 	l.movhi r3,0x1
   122a8:	18 40 ff fe 	l.movhi r2,0xfffe
   122ac:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   122b0:	a4 84 00 01 	l.andi r4,r4,0x1
   122b4:	84 63 00 00 	l.lwz r3,0x0(r3)
   122b8:	a8 42 ff ff 	l.ori r2,r2,0xffff
   122bc:	84 a3 01 bc 	l.lwz r5,0x1bc(r3)
   122c0:	b8 84 00 10 	l.slli r4,r4,0x10
   122c4:	e0 a5 10 03 	l.and r5,r5,r2
   122c8:	e0 85 20 04 	l.or r4,r5,r4
   122cc:	d4 03 21 bc 	l.sw 0x1bc(r3),r4
   122d0:	00 00 00 2c 	l.j 12380 <ccu_set_mclk_reset+0x2c4>
   122d4:	9d 60 00 00 	l.addi r11,r0,0x0
   122d8:	18 40 ff fe 	l.movhi r2,0xfffe
   122dc:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   122e0:	a4 84 00 01 	l.andi r4,r4,0x1
   122e4:	84 63 00 00 	l.lwz r3,0x0(r3)
   122e8:	a8 42 ff ff 	l.ori r2,r2,0xffff
   122ec:	84 a3 01 cc 	l.lwz r5,0x1cc(r3)
   122f0:	b8 84 00 10 	l.slli r4,r4,0x10
   122f4:	e0 a5 10 03 	l.and r5,r5,r2
   122f8:	e0 85 20 04 	l.or r4,r5,r4
   122fc:	d4 03 21 cc 	l.sw 0x1cc(r3),r4
   12300:	00 00 00 20 	l.j 12380 <ccu_set_mclk_reset+0x2c4>
   12304:	9d 60 00 00 	l.addi r11,r0,0x0
   12308:	18 60 00 01 	l.movhi r3,0x1
   1230c:	9c 40 ff fe 	l.addi r2,r0,0xfffffffe
   12310:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   12314:	a4 84 00 01 	l.andi r4,r4,0x1
   12318:	84 63 00 00 	l.lwz r3,0x0(r3)
   1231c:	84 a3 02 60 	l.lwz r5,0x260(r3)
   12320:	e0 a5 10 03 	l.and r5,r5,r2
   12324:	e0 85 20 04 	l.or r4,r5,r4
   12328:	d4 03 22 60 	l.sw 0x260(r3),r4
   1232c:	00 00 00 15 	l.j 12380 <ccu_set_mclk_reset+0x2c4>
   12330:	9d 60 00 00 	l.addi r11,r0,0x0
   12334:	18 60 03 00 	l.movhi r3,0x300
   12338:	00 00 00 03 	l.j 12344 <ccu_set_mclk_reset+0x288>
   1233c:	a8 63 17 2c 	l.ori r3,r3,0x172c
   12340:	a8 63 17 1c 	l.ori r3,r3,0x171c
   12344:	18 40 ff fe 	l.movhi r2,0xfffe
   12348:	84 a3 00 00 	l.lwz r5,0x0(r3)
   1234c:	a8 42 ff ff 	l.ori r2,r2,0xffff
   12350:	b8 84 00 10 	l.slli r4,r4,0x10
   12354:	e0 a5 10 03 	l.and r5,r5,r2
   12358:	e0 84 28 04 	l.or r4,r4,r5
   1235c:	d4 03 20 00 	l.sw 0x0(r3),r4
   12360:	00 00 00 08 	l.j 12380 <ccu_set_mclk_reset+0x2c4>
   12364:	9d 60 00 00 	l.addi r11,r0,0x0
   12368:	18 80 00 01 	l.movhi r4,0x1
   1236c:	d4 01 18 00 	l.sw 0x0(r1),r3
   12370:	a8 84 30 78 	l.ori r4,r4,0x3078
   12374:	07 ff df 11 	l.jal 9fb8 <debugger_printf>
   12378:	9c 60 00 04 	l.addi r3,r0,0x4
   1237c:	9d 60 ff ea 	l.addi r11,r0,0xffffffea
   12380:	9c 21 00 0c 	l.addi r1,r1,0xc
   12384:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   12388:	44 00 48 00 	l.jr r9
   1238c:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

00012390 <ccu_reset_module>:
   12390:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   12394:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   12398:	9c 80 00 00 	l.addi r4,r0,0x0
   1239c:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
   123a0:	07 ff ff 47 	l.jal 120bc <ccu_set_mclk_reset>
   123a4:	a8 43 00 00 	l.ori r2,r3,0x0
   123a8:	a8 62 00 00 	l.ori r3,r2,0x0
   123ac:	07 ff ff 44 	l.jal 120bc <ccu_set_mclk_reset>
   123b0:	9c 80 00 01 	l.addi r4,r0,0x1
   123b4:	9c 21 00 08 	l.addi r1,r1,0x8
   123b8:	9d 60 00 00 	l.addi r11,r0,0x0
   123bc:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   123c0:	44 00 48 00 	l.jr r9
   123c4:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)

000123c8 <ccu_get_sclk_freq>:
   123c8:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   123cc:	bc 03 00 11 	l.sfeqi r3,0x11
   123d0:	10 00 00 07 	l.bf 123ec <ccu_get_sclk_freq+0x24>
   123d4:	9c 21 ff fc 	l.addi r1,r1,0xfffffffc
   123d8:	bc 03 00 24 	l.sfeqi r3,0x24
   123dc:	0c 00 00 20 	l.bnf 1245c <ccu_get_sclk_freq+0x94>
   123e0:	18 80 00 01 	l.movhi r4,0x1
   123e4:	00 00 00 08 	l.j 12404 <ccu_get_sclk_freq+0x3c>
   123e8:	18 60 00 01 	l.movhi r3,0x1
   123ec:	18 60 00 01 	l.movhi r3,0x1
   123f0:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   123f4:	84 63 00 00 	l.lwz r3,0x0(r3)
   123f8:	84 63 00 00 	l.lwz r3,0x0(r3)
   123fc:	00 00 00 06 	l.j 12414 <ccu_get_sclk_freq+0x4c>
   12400:	b8 63 00 58 	l.srli r3,r3,0x18
   12404:	a8 63 37 d8 	l.ori r3,r3,0x37d8
   12408:	84 63 00 00 	l.lwz r3,0x0(r3)
   1240c:	84 63 00 10 	l.lwz r3,0x10(r3)
   12410:	b8 63 00 58 	l.srli r3,r3,0x18
   12414:	a4 63 00 03 	l.andi r3,r3,0x3
   12418:	bc 03 00 02 	l.sfeqi r3,0x2
   1241c:	10 00 00 0c 	l.bf 1244c <ccu_get_sclk_freq+0x84>
   12420:	bc 03 00 03 	l.sfeqi r3,0x3
   12424:	10 00 00 13 	l.bf 12470 <ccu_get_sclk_freq+0xa8>
   12428:	bc 03 00 01 	l.sfeqi r3,0x1
   1242c:	10 00 00 05 	l.bf 12440 <ccu_get_sclk_freq+0x78>
   12430:	15 00 00 00 	l.nop 0x0
   12434:	19 60 01 6e 	l.movhi r11,0x16e
   12438:	00 00 00 10 	l.j 12478 <ccu_get_sclk_freq+0xb0>
   1243c:	a9 6b 36 00 	l.ori r11,r11,0x3600
   12440:	18 60 00 01 	l.movhi r3,0x1
   12444:	00 00 00 04 	l.j 12454 <ccu_get_sclk_freq+0x8c>
   12448:	a8 63 34 2c 	l.ori r3,r3,0x342c
   1244c:	18 60 00 01 	l.movhi r3,0x1
   12450:	a8 63 34 28 	l.ori r3,r3,0x3428
   12454:	00 00 00 09 	l.j 12478 <ccu_get_sclk_freq+0xb0>
   12458:	85 63 00 00 	l.lwz r11,0x0(r3)
   1245c:	9c 60 00 04 	l.addi r3,r0,0x4
   12460:	07 ff de d6 	l.jal 9fb8 <debugger_printf>
   12464:	a8 84 30 a8 	l.ori r4,r4,0x30a8
   12468:	00 00 00 04 	l.j 12478 <ccu_get_sclk_freq+0xb0>
   1246c:	9d 60 00 00 	l.addi r11,r0,0x0
   12470:	19 60 0b eb 	l.movhi r11,0xbeb
   12474:	a9 6b c2 00 	l.ori r11,r11,0xc200
   12478:	9c 21 00 04 	l.addi r1,r1,0x4
   1247c:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   12480:	44 00 48 00 	l.jr r9
   12484:	15 00 00 00 	l.nop 0x0

00012488 <ccu_set_sclk_onoff>:
   12488:	d7 e1 4f fc 	l.sw 0xfffffffc(r1),r9
   1248c:	d7 e1 17 f8 	l.sw 0xfffffff8(r1),r2
   12490:	bc 03 00 14 	l.sfeqi r3,0x14
   12494:	10 00 00 10 	l.bf 124d4 <ccu_set_sclk_onoff+0x4c>
   12498:	9c 21 ff f8 	l.addi r1,r1,0xfffffff8
   1249c:	bc 43 00 14 	l.sfgtui r3,0x14
   124a0:	10 00 00 07 	l.bf 124bc <ccu_set_sclk_onoff+0x34>
   124a4:	bc 03 00 16 	l.sfeqi r3,0x16
   124a8:	bc 03 00 12 	l.sfeqi r3,0x12
   124ac:	0c 00 00 19 	l.bnf 12510 <ccu_set_sclk_onoff+0x88>
   124b0:	18 60 00 01 	l.movhi r3,0x1
   124b4:	00 00 00 0a 	l.j 124dc <ccu_set_sclk_onoff+0x54>
   124b8:	a8 63 37 d4 	l.ori r3,r3,0x37d4
   124bc:	10 00 00 12 	l.bf 12504 <ccu_set_sclk_onoff+0x7c>
   124c0:	bc 03 00 17 	l.sfeqi r3,0x17
   124c4:	0c 00 00 13 	l.bnf 12510 <ccu_set_sclk_onoff+0x88>
   124c8:	18 60 00 01 	l.movhi r3,0x1
   124cc:	00 00 00 04 	l.j 124dc <ccu_set_sclk_onoff+0x54>
   124d0:	a8 63 37 c4 	l.ori r3,r3,0x37c4
   124d4:	18 60 00 01 	l.movhi r3,0x1
   124d8:	a8 63 37 c8 	l.ori r3,r3,0x37c8
   124dc:	84 63 00 00 	l.lwz r3,0x0(r3)
   124e0:	18 40 7f ff 	l.movhi r2,0x7fff
   124e4:	84 a3 00 00 	l.lwz r5,0x0(r3)
   124e8:	a8 42 ff ff 	l.ori r2,r2,0xffff
   124ec:	b8 84 00 1f 	l.slli r4,r4,0x1f
   124f0:	e0 a5 10 03 	l.and r5,r5,r2
   124f4:	e0 85 20 04 	l.or r4,r5,r4
   124f8:	d4 03 20 00 	l.sw 0x0(r3),r4
   124fc:	00 00 00 0a 	l.j 12524 <ccu_set_sclk_onoff+0x9c>
   12500:	9c 21 00 08 	l.addi r1,r1,0x8
   12504:	18 60 00 01 	l.movhi r3,0x1
   12508:	03 ff ff f5 	l.j 124dc <ccu_set_sclk_onoff+0x54>
   1250c:	a8 63 37 d0 	l.ori r3,r3,0x37d0
   12510:	18 80 00 01 	l.movhi r4,0x1
   12514:	9c 60 00 04 	l.addi r3,r0,0x4
   12518:	07 ff de a8 	l.jal 9fb8 <debugger_printf>
   1251c:	a8 84 30 a8 	l.ori r4,r4,0x30a8
   12520:	9c 21 00 08 	l.addi r1,r1,0x8
   12524:	9d 60 00 00 	l.addi r11,r0,0x0
   12528:	85 21 ff fc 	l.lwz r9,0xfffffffc(r1)
   1252c:	44 00 48 00 	l.jr r9
   12530:	84 41 ff f8 	l.lwz r2,0xfffffff8(r1)
